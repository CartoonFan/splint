/*
** Inserted at beginning of c files generated by bison
** REMEMBER:  Change bison.reset too.
*/

/*@-allmacros@*/
/*@+boolint@*/
/*@+charint@*/
/*@-macroparams@*/
/*@-macroundef@*/
/*@-unreachable@*/
/*@-macrospec@*/
/*@-varuse@*/
/*@+ignorequals@*/
/*@-macrostmt@*/
/*@-noeffect@*/
/*@-shadow@*/
/*@-exitarg@*/
/*@-macroredef@*/
/*@-uniondef@*/
/*@-compdef@*/
/*@-matchfields@*/
/*@-exportlocal@*/
/*@-evalorderuncon@*/
/*@-exportheader@*/
/*@-typeuse@*/
/*@-redecl@*/
/*@-redef@*/
/*@-noparams@*/
/*@-ansireserved@*/
/*@-fielduse@*/
/*@-ifblock@*/
/*@-elseifcomplete@*/
/*@-whileblock@*/
/*@-forblock@*/
/*@-branchstate@*/
/*@-readonlytrans@*/
/*@-namechecks@*/
/*@-usedef@*/
/*@-systemunrecog@*/
/*@-dependenttrans@*/
/*@-unqualifiedtrans@*/
/*@-nullassign@*/
/*@-declundef@*/

/*drl added 11/27/2001*/
/*@-arraybounds@*/
/*@-arrayboundsread@*/
/* < end of bison.head > */


/*  A Bison parser, made from cgrammar.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	BADTOK	257
#define	SKIPTOK	258
#define	CTOK_ELIPSIS	259
#define	CASE	260
#define	DEFAULT	261
#define	CIF	262
#define	CELSE	263
#define	SWITCH	264
#define	WHILE	265
#define	DO	266
#define	CFOR	267
#define	GOTO	268
#define	CONTINUE	269
#define	BREAK	270
#define	RETURN	271
#define	TSEMI	272
#define	TLBRACE	273
#define	TRBRACE	274
#define	TCOMMA	275
#define	TCOLON	276
#define	TASSIGN	277
#define	TLPAREN	278
#define	TRPAREN	279
#define	TLSQBR	280
#define	TRSQBR	281
#define	TDOT	282
#define	TAMPERSAND	283
#define	TEXCL	284
#define	TTILDE	285
#define	TMINUS	286
#define	TPLUS	287
#define	TMULT	288
#define	TDIV	289
#define	TPERCENT	290
#define	TLT	291
#define	TGT	292
#define	TCIRC	293
#define	TBAR	294
#define	TQUEST	295
#define	CSIZEOF	296
#define	CALIGNOF	297
#define	ARROW_OP	298
#define	CTYPEDEF	299
#define	COFFSETOF	300
#define	INC_OP	301
#define	DEC_OP	302
#define	LEFT_OP	303
#define	RIGHT_OP	304
#define	LE_OP	305
#define	GE_OP	306
#define	EQ_OP	307
#define	NE_OP	308
#define	AND_OP	309
#define	OR_OP	310
#define	MUL_ASSIGN	311
#define	DIV_ASSIGN	312
#define	MOD_ASSIGN	313
#define	ADD_ASSIGN	314
#define	SUB_ASSIGN	315
#define	LEFT_ASSIGN	316
#define	RIGHT_ASSIGN	317
#define	AND_ASSIGN	318
#define	XOR_ASSIGN	319
#define	OR_ASSIGN	320
#define	CSTRUCT	321
#define	CUNION	322
#define	CENUM	323
#define	VA_ARG	324
#define	VA_DCL	325
#define	QWARN	326
#define	QGLOBALS	327
#define	QMODIFIES	328
#define	QNOMODS	329
#define	QCONSTANT	330
#define	QFUNCTION	331
#define	QITER	332
#define	QDEFINES	333
#define	QUSES	334
#define	QALLOCATES	335
#define	QSETS	336
#define	QRELEASES	337
#define	QPRECLAUSE	338
#define	QPOSTCLAUSE	339
#define	QALT	340
#define	QUNDEF	341
#define	QKILLED	342
#define	QENDMACRO	343
#define	LLMACRO	344
#define	LLMACROITER	345
#define	LLMACROEND	346
#define	TENDMACRO	347
#define	QSWITCHBREAK	348
#define	QLOOPBREAK	349
#define	QINNERBREAK	350
#define	QSAFEBREAK	351
#define	QINNERCONTINUE	352
#define	QFALLTHROUGH	353
#define	QLINTNOTREACHED	354
#define	QLINTFALLTHROUGH	355
#define	QLINTFALLTHRU	356
#define	QARGSUSED	357
#define	QPRINTFLIKE	358
#define	QLINTPRINTFLIKE	359
#define	QSCANFLIKE	360
#define	QMESSAGELIKE	361
#define	QNOTREACHED	362
#define	QCONST	363
#define	QVOLATILE	364
#define	QINLINE	365
#define	QEXTENSION	366
#define	QEXTERN	367
#define	QSTATIC	368
#define	QAUTO	369
#define	QREGISTER	370
#define	QOUT	371
#define	QIN	372
#define	QYIELD	373
#define	QONLY	374
#define	QTEMP	375
#define	QSHARED	376
#define	QREF	377
#define	QUNIQUE	378
#define	QCHECKED	379
#define	QUNCHECKED	380
#define	QCHECKEDSTRICT	381
#define	QCHECKMOD	382
#define	QKEEP	383
#define	QKEPT	384
#define	QPARTIAL	385
#define	QSPECIAL	386
#define	QOWNED	387
#define	QDEPENDENT	388
#define	QRETURNED	389
#define	QEXPOSED	390
#define	QNULL	391
#define	QOBSERVER	392
#define	QISNULL	393
#define	QEXITS	394
#define	QMAYEXIT	395
#define	QNEVEREXIT	396
#define	QTRUEEXIT	397
#define	QFALSEEXIT	398
#define	QLONG	399
#define	QSIGNED	400
#define	QUNSIGNED	401
#define	QSHORT	402
#define	QUNUSED	403
#define	QSEF	404
#define	QNOTNULL	405
#define	QRELNULL	406
#define	QABSTRACT	407
#define	QCONCRETE	408
#define	QMUTABLE	409
#define	QIMMUTABLE	410
#define	QTRUENULL	411
#define	QFALSENULL	412
#define	QEXTERNAL	413
#define	QREFCOUNTED	414
#define	QREFS	415
#define	QNEWREF	416
#define	QTEMPREF	417
#define	QKILLREF	418
#define	QRELDEF	419
#define	CGCHAR	420
#define	CBOOL	421
#define	CINT	422
#define	CGFLOAT	423
#define	CDOUBLE	424
#define	CVOID	425
#define	QANYTYPE	426
#define	QINTEGRALTYPE	427
#define	QUNSIGNEDINTEGRALTYPE	428
#define	QSIGNEDINTEGRALTYPE	429
#define	QNULLTERMINATED	430
#define	QSETBUFFERSIZE	431
#define	QSETSTRINGLENGTH	432
#define	QMAXSET	433
#define	QMAXREAD	434
#define	QTESTINRANGE	435
#define	TCAND	436
#define	IDENTIFIER	437
#define	NEW_IDENTIFIER	438
#define	TYPE_NAME_OR_ID	439
#define	CANNOTATION	440
#define	CCONSTANT	441
#define	ITER_NAME	442
#define	ITER_ENDNAME	443
#define	TYPE_NAME	444
#define	METASTATE_NAME	445

#line 24 "cgrammar.y"

/*
**
** cgrammar.y
**
** Yacc/Bison grammar for extended ANSI C used by LCLint.
**
** original grammar by Nate Osgood ---
**    hacrat@catfish.lcs.mit.edu Mon Jun 14 13:06:32 1993
**
** changes for LCLint --- handle typedef names correctly
** fix struct/union parsing bug (empty struct is accepted)
** add productions to handle macros --- require
** error correction --- main source of conflicts in grammar.
** need to process initializations sequentially, L->R
**
** production names are cryptic, so more productions fit on one line
**
** conflicts:  87 shift/reduce, 18 reduce/reduce
** most of these are due to handling macros
** a few are due to handling type expressions
*/

/*@=allmacros@*/

extern int yylex ();
extern void swallowMacro (void);
extern void yyerror (char *);

# include "lclintMacros.nf"
# include "basic.h"
# include "cscanner.h"
# include "cgrammar.h"
# include "exprChecks.h"

/*@-allmacros@*/
/*@-matchfields@*/

# define SHOWCSYM FALSE

/*
** This is necessary, or else when the bison-generated code #include's malloc.h,
** there will be a parse error.
**
** Unfortunately, it means the error checking on malloc, etc. is lost for allocations
** in bison-generated files under Win32.
*/

# ifdef WIN32
# undef malloc
# undef calloc
# undef realloc
# endif


#line 80 "cgrammar.y"
typedef union
{
  lltok tok;
  int count;
  qual typequal;
  qualList tquallist;
  ctype ctyp;
  /*@dependent@*/ sRef sr;
  /*@only@*/ sRef osr;

  /*@only@*/ functionClauseList funcclauselist;
  /*@only@*/ functionClause funcclause;  
  /*@only@*/ flagSpec flagspec;
  /*@only@*/ globalsClause globsclause;
  /*@only@*/ modifiesClause modsclause;
  /*@only@*/ warnClause warnclause;
  /*@only@*/ stateClause stateclause;

  /*@only@*/ functionConstraint fcnconstraint; 

  /*@only@*/ metaStateConstraint msconstraint;
  /*@only@*/ metaStateSpecifier msspec;
  /*@only@*/ metaStateExpression msexpr;
  /*@observer@*/ metaStateInfo msinfo;

  /*@only@*/ sRefList srlist;
  /*@only@*/ globSet globset;
  /*@only@*/ qtype qtyp;
  /*@only@*/ cstring cname;
  /*@observer@*/ annotationInfo annotation;
  /*@only@*/ idDecl ntyp;
  /*@only@*/ idDeclList ntyplist;
  /*@only@*/ uentryList flist;
  /*@owned@*/ uentryList entrylist;
  /*@observer@*/ /*@dependent@*/ uentry entry;
  /*@only@*/ uentry oentry;
  /*@only@*/ exprNode expr;
  /*@only@*/ enumNameList enumnamelist;
  /*@only@*/ exprNodeList exprlist;
  /*@only@*/ sRefSet srset; 
  /*@only@*/ cstringList cstringlist;

  /*drl
    added 1/19/2001
  */
  constraint con;
  constraintList conL;
  constraintExpr conE;
  /* drl */  
} YYSTYPE;
#ifndef YYDEBUG
#define YYDEBUG 1
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1189
#define	YYFLAG		-32768
#define	YYNTBASE	192

#define YYTRANSLATE(x) ((unsigned)(x) <= 445 ? yytranslate[x] : 446)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
   177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
   187,   188,   189,   190,   191
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     1,     3,     5,     8,    11,    13,    15,    17,    19,
    21,    23,    32,    44,    45,    51,    53,    57,    59,    62,
    64,    71,    75,    82,    83,    90,    91,    99,   101,   108,
   112,   119,   120,   127,   128,   136,   137,   138,   149,   153,
   157,   161,   164,   166,   170,   171,   176,   177,   182,   184,
   188,   190,   194,   196,   200,   202,   204,   206,   208,   210,
   212,   217,   223,   225,   227,   229,   231,   235,   240,   243,
   247,   251,   255,   257,   259,   261,   262,   265,   266,   269,
   271,   273,   275,   277,   279,   281,   283,   285,   287,   289,
   291,   293,   296,   297,   302,   304,   307,   308,   312,   314,
   318,   320,   322,   323,   326,   330,   333,   335,   339,   342,
   343,   346,   348,   350,   352,   354,   356,   358,   360,   362,
   364,   366,   368,   370,   372,   374,   376,   378,   382,   383,
   387,   388,   389,   394,   397,   400,   402,   404,   406,   410,
   415,   418,   422,   426,   430,   432,   434,   436,   440,   442,
   444,   448,   453,   456,   460,   464,   468,   469,   471,   473,
   477,   479,   481,   483,   487,   489,   491,   493,   498,   502,
   507,   514,   520,   526,   529,   532,   534,   538,   540,   543,
   546,   549,   552,   555,   558,   561,   564,   566,   568,   572,
   574,   584,   585,   589,   594,   597,   602,   605,   607,   612,
   614,   618,   622,   626,   628,   632,   636,   638,   642,   646,
   648,   652,   656,   660,   664,   666,   670,   674,   676,   680,
   682,   686,   688,   692,   694,   695,   700,   702,   703,   708,
   710,   711,   712,   720,   722,   726,   730,   734,   738,   742,
   746,   750,   754,   758,   762,   766,   768,   772,   773,   775,
   777,   779,   781,   783,   787,   788,   798,   799,   811,   814,
   815,   822,   823,   832,   837,   842,   843,   844,   847,   849,
   854,   855,   860,   862,   866,   871,   873,   877,   879,   881,
   883,   885,   887,   890,   893,   894,   901,   904,   907,   908,
   915,   916,   922,   924,   926,   928,   930,   932,   934,   936,
   938,   940,   942,   944,   946,   948,   950,   952,   954,   956,
   958,   960,   962,   964,   966,   968,   970,   972,   974,   976,
   978,   980,   982,   984,   986,   988,   990,   992,   994,   996,
   998,  1000,  1002,  1004,  1006,  1008,  1010,  1012,  1014,  1016,
  1018,  1020,  1022,  1024,  1026,  1029,  1032,  1035,  1038,  1041,
  1044,  1047,  1050,  1053,  1056,  1059,  1062,  1065,  1068,  1071,
  1074,  1077,  1080,  1083,  1086,  1089,  1092,  1095,  1098,  1101,
  1105,  1107,  1112,  1114,  1118,  1121,  1124,  1127,  1128,  1130,
  1131,  1132,  1144,  1145,  1146,  1158,  1165,  1172,  1173,  1174,
  1185,  1186,  1187,  1198,  1204,  1210,  1215,  1220,  1221,  1223,
  1225,  1228,  1234,  1238,  1241,  1246,  1248,  1252,  1257,  1264,
  1265,  1274,  1279,  1281,  1285,  1288,  1290,  1295,  1297,  1299,
  1302,  1305,  1307,  1310,  1312,  1315,  1317,  1319,  1321,  1324,
  1326,  1329,  1332,  1336,  1338,  1342,  1344,  1348,  1350,  1352,
  1356,  1357,  1360,  1361,  1366,  1371,  1373,  1375,  1378,  1380,
  1382,  1385,  1386,  1388,  1394,  1397,  1401,  1405,  1410,  1414,
  1419,  1424,  1430,  1432,  1434,  1436,  1438,  1440,  1442,  1444,
  1446,  1448,  1450,  1452,  1454,  1457,  1460,  1468,  1475,  1478,
  1479,  1480,  1491,  1492,  1499,  1501,  1503,  1505,  1507,  1510,
  1512,  1514,  1516,  1518,  1520,  1522,  1524,  1528,  1530,  1533,
  1536,  1539,  1541,  1543,  1545,  1547,  1549,  1551,  1553,  1555,
  1557,  1559,  1563,  1565,  1567,  1570,  1573,  1574,  1579,  1580,
  1586,  1587,  1591,  1592,  1597,  1601,  1604,  1608,  1609,  1610,
  1611,  1612,  1613,  1615,  1618,  1621,  1625,  1628,  1632,  1636,
  1641,  1644,  1647,  1651,  1655,  1660,  1662,  1665,  1667,  1670,
  1672,  1675,  1677,  1680,  1682,  1685,  1687,  1692,  1695,  1696,
  1702,  1703,  1710,  1715,  1720,  1721,  1722,  1733,  1735,  1736,
  1741,  1743,  1745,  1747,  1749,  1751,  1754,  1756,  1760,  1762,
  1767,  1771,  1776,  1783,  1789,  1795,  1798,  1801,  1803,  1806,
  1809,  1812,  1815,  1818,  1821,  1824,  1827,  1829,  1831,  1836,
  1838,  1842,  1846,  1850,  1852,  1856,  1860,  1862,  1866,  1870,
  1872,  1876,  1880,  1884,  1888,  1890,  1894,  1898,  1900,  1904,
  1906,  1910,  1912,  1916,  1918,  1922,  1924,  1928,  1930,  1931,
  1932,  1940,  1942,  1946,  1950,  1954,  1958,  1962,  1966,  1970,
  1974,  1978,  1982,  1986,  1988,  1989,  1991,  1994,  2002,  2005,
  2008,  2016,  2023,  2026,  2030,  2033,  2037,  2040,  2044,  2048,
  2052,  2056,  2059,  2063,  2064,  2066,  2068,  2070,  2072,  2074,
  2076,  2078,  2080
};

static const short yyrhs[] = {    -1,
   193,     0,   194,     0,   193,   194,     0,   254,   442,     0,
   195,     0,   196,     0,   206,     0,   209,     0,   291,     0,
     1,     0,    76,   329,   342,   352,   342,   442,   299,    89,
     0,    76,   329,   342,   352,   342,    23,   299,   304,   303,
   442,    89,     0,     0,    77,   197,   198,   442,    89,     0,
   199,     0,   329,   342,   199,     0,   203,     0,   356,   203,
     0,   444,     0,   299,    24,   342,   352,   299,    25,     0,
   200,    26,    27,     0,   200,    26,   299,   290,    27,   342,
     0,     0,   200,   300,    24,    25,   201,   226,     0,     0,
   200,   300,    24,   353,    25,   202,   226,     0,   444,     0,
   299,    24,   342,   199,   299,    25,     0,   203,    26,    27,
     0,   203,    26,   299,   290,    27,   342,     0,     0,   203,
   300,    24,    25,   204,   227,     0,     0,   203,   300,    24,
   353,    25,   205,   227,     0,     0,     0,    78,   444,    24,
   353,    25,   207,   227,   208,   442,    89,     0,    90,   382,
    93,     0,    91,   369,    93,     0,    92,   370,    93,     0,
    90,    93,     0,   249,     0,   212,    23,   215,     0,     0,
   223,   213,    22,   216,     0,     0,     5,   214,    22,   216,
     0,   212,     0,   212,    40,   215,     0,   191,     0,   218,
   182,   217,     0,   218,     0,   221,   220,   221,     0,   179,
     0,   180,     0,    52,     0,    51,     0,    53,     0,   222,
     0,   224,    24,   221,    25,     0,    24,   221,   225,   221,
    25,     0,   223,     0,   187,     0,   443,     0,   184,     0,
   223,    26,    27,     0,   223,    26,   187,    27,     0,    34,
   223,     0,    24,   223,    25,     0,   223,    28,   444,     0,
   223,    44,   444,     0,   219,     0,    33,     0,    32,     0,
     0,   228,   226,     0,     0,   229,   227,     0,   230,     0,
   234,     0,   233,     0,   307,     0,   310,     0,   240,     0,
   231,     0,   235,     0,   233,     0,   308,     0,   312,     0,
   241,     0,   231,    89,     0,     0,    73,   232,   242,   442,
     0,    75,     0,   235,    89,     0,     0,    74,   236,   255,
     0,   238,     0,   238,    40,   237,     0,   184,     0,   240,
     0,     0,   241,    89,     0,    72,   237,   418,     0,    72,
   237,     0,   243,     0,   242,    21,   243,     0,   244,   245,
     0,     0,   246,   244,     0,   443,     0,   184,     0,   291,
     0,    87,     0,    88,     0,   117,     0,   118,     0,   131,
     0,    79,     0,    80,     0,    81,     0,    82,     0,    83,
     0,    84,     0,    85,     0,   352,     0,   329,   342,   352,
     0,     0,    19,   251,   398,     0,     0,     0,   252,   402,
   253,   391,     0,   210,   250,     0,   258,   442,     0,   442,
     0,   443,     0,   184,     0,   256,    26,    27,     0,   256,
    26,   257,    27,     0,    34,   256,     0,    24,   256,    25,
     0,   256,    28,   444,     0,   256,    44,   444,     0,   256,
     0,   418,     0,   256,     0,   258,    21,   256,     0,   443,
     0,   184,     0,   259,    26,    27,     0,   259,    26,   257,
    27,     0,    34,   259,     0,    24,   259,    25,     0,   259,
    28,   444,     0,   259,    44,   444,     0,     0,   261,     0,
   259,     0,   261,    21,   259,     0,   443,     0,   184,     0,
   418,     0,    24,   288,    25,     0,   185,     0,   112,     0,
   262,     0,   263,    26,   288,    27,     0,   263,    24,    25,
     0,   263,    24,   264,    25,     0,    70,    24,   287,    21,
   364,    25,     0,   263,   342,    28,   444,   299,     0,   263,
   342,    44,   444,   299,     0,   263,    47,     0,   263,    48,
     0,   287,     0,   264,    21,   287,     0,   263,     0,    47,
   265,     0,    48,   265,     0,    29,   271,     0,    34,   271,
     0,    33,   271,     0,    32,   271,     0,    31,   271,     0,
    30,   271,     0,   268,     0,   267,     0,   266,    28,   444,
     0,   444,     0,    46,   299,    24,   364,   342,    21,   266,
    25,   299,     0,     0,   299,   269,   270,     0,    42,    24,
   364,    25,     0,    42,   265,     0,    43,    24,   364,    25,
     0,    43,   265,     0,   265,     0,    24,   364,    25,   271,
     0,   271,     0,   272,    34,   271,     0,   272,    35,   271,
     0,   272,    36,   271,     0,   272,     0,   273,    33,   272,
     0,   273,    32,   272,     0,   273,     0,   274,    49,   273,
     0,   274,    50,   273,     0,   274,     0,   275,    37,   274,
     0,   275,    38,   274,     0,   275,    51,   274,     0,   275,
    52,   274,     0,   275,     0,   276,    53,   275,     0,   276,
    54,   275,     0,   276,     0,   277,    29,   276,     0,   277,
     0,   278,    39,   277,     0,   278,     0,   279,    40,   278,
     0,   279,     0,     0,   280,    55,   281,   279,     0,   280,
     0,     0,   282,    56,   283,   280,     0,   282,     0,     0,
     0,   282,    41,   285,   288,    22,   286,   284,     0,   284,
     0,   265,    23,   287,     0,   265,    57,   287,     0,   265,
    58,   287,     0,   265,    59,   287,     0,   265,    60,   287,
     0,   265,    61,   287,     0,   265,    62,   287,     0,   265,
    63,   287,     0,   265,    64,   287,     0,   265,    65,   287,
     0,   265,    66,   287,     0,   287,     0,   288,    21,   287,
     0,     0,   288,     0,   284,     0,   292,     0,    71,     0,
   297,     0,   329,   299,    18,     0,     0,   329,   342,   352,
   342,   293,   299,   303,    18,   299,     0,     0,   329,   342,
   352,   342,    23,   294,   299,   304,   303,    18,   299,     0,
   352,   342,     0,     0,   352,   342,    23,   296,   299,   304,
     0,     0,    45,   329,   298,   342,   301,   299,   239,    18,
     0,    45,   329,   299,    18,     0,    45,   301,   299,    18,
     0,     0,     0,   302,   299,     0,   295,     0,   301,    21,
   342,   295,     0,     0,   303,    21,   342,   295,     0,   287,
     0,    19,   305,    20,     0,    19,   305,    21,    20,     0,
   304,     0,   305,    21,   304,     0,   113,     0,   111,     0,
   114,     0,   115,     0,   116,     0,   176,   299,     0,   308,
    89,     0,     0,   247,   342,   309,   261,   442,   299,     0,
   312,    89,     0,   248,   342,     0,     0,   311,   318,   313,
   260,   442,   299,     0,     0,   311,   314,   315,   442,   299,
     0,   217,     0,   211,     0,   140,     0,   141,     0,   143,
     0,   144,     0,   142,     0,   125,     0,   128,     0,   126,
     0,   127,     0,   133,     0,   134,     0,   119,     0,   121,
     0,   120,     0,   129,     0,   130,     0,   122,     0,   124,
     0,   137,     0,   139,     0,   152,     0,   151,     0,   136,
     0,   138,     0,   176,     0,   186,     0,   135,     0,   150,
     0,   149,     0,   159,     0,   157,     0,   158,     0,   153,
     0,   154,     0,   155,     0,   156,     0,   160,     0,   161,
     0,   164,     0,   165,     0,   162,     0,   163,     0,   148,
     0,   145,     0,   146,     0,   147,     0,   117,     0,   118,
     0,   131,     0,   132,     0,   109,   299,     0,   110,   299,
     0,   325,   299,     0,   318,   299,     0,   316,   299,     0,
   319,   299,     0,   317,   299,     0,   321,   299,     0,   320,
   299,     0,   322,   299,     0,   323,   299,     0,   166,   342,
     0,   168,   342,     0,   167,   342,     0,   169,   342,     0,
   170,   342,     0,   171,   342,     0,   172,   342,     0,   173,
   342,     0,   174,   342,     0,   175,   342,     0,   445,   342,
     0,   333,   342,     0,   347,   342,     0,   324,   342,     0,
   299,   329,   299,     0,   331,     0,   331,    86,   330,    89,
     0,   364,     0,   364,    21,   330,     0,   306,   332,     0,
   326,   332,     0,   327,   332,     0,     0,   329,     0,     0,
     0,   342,    67,   444,   299,    19,   334,   395,   343,   396,
   335,    20,     0,     0,     0,   342,    68,   444,   299,    19,
   336,   395,   343,   396,   337,    20,     0,   342,    67,   444,
   299,    19,    20,     0,   342,    68,   444,   299,    19,    20,
     0,     0,     0,   342,    67,   299,    19,   338,   395,   343,
   396,   339,    20,     0,     0,     0,   342,    68,   299,    19,
   340,   395,   343,   396,   341,    20,     0,   342,    67,   299,
    19,    20,     0,   342,    68,   299,    19,    20,     0,   342,
    67,   444,   342,     0,   342,    68,   444,   342,     0,     0,
   344,     0,   209,     0,   343,   344,     0,   329,   342,   345,
   299,    18,     0,   329,   299,    18,     0,   346,   342,     0,
   345,    21,   346,   342,     0,   352,     0,    22,   299,   290,
     0,   352,    22,   299,   290,     0,   342,    69,    19,   349,
    20,   299,     0,     0,   342,    69,   444,    19,   348,   349,
    20,   299,     0,   342,    69,   444,   299,     0,   350,     0,
   349,    21,   350,     0,   349,    21,     0,   444,     0,   444,
    23,   299,   290,     0,   200,     0,   366,     0,   356,   190,
     0,   356,   351,     0,   200,     0,   356,   200,     0,   359,
     0,   342,   357,     0,   109,     0,   110,     0,   354,     0,
   355,   354,     0,    34,     0,    34,   355,     0,    34,   356,
     0,    34,   355,   356,     0,   358,     0,   358,    21,     5,
     0,   444,     0,   358,    21,   444,     0,     5,     0,   360,
     0,   360,    21,     5,     0,     0,   361,   363,     0,     0,
   360,    21,   362,   363,     0,   299,   329,   351,   299,     0,
   444,     0,   328,     0,   328,   365,     0,   356,     0,   367,
     0,   356,   367,     0,     0,   367,     0,   299,    24,   342,
   365,    25,     0,    26,    27,     0,    26,   290,    27,     0,
   367,    26,    27,     0,   367,    26,   290,    27,     0,   299,
    24,    25,     0,   299,    24,   359,    25,     0,   367,   299,
    24,    25,     0,   367,   299,    24,   359,    25,     0,   384,
     0,   385,     0,   388,     0,   391,     0,   404,     0,   407,
     0,   439,     0,   412,     0,   441,     0,   371,     0,   369,
     0,   378,     0,   371,   378,     0,   411,   371,     0,   438,
   383,    11,    24,   288,    25,    18,     0,   438,   383,    11,
    24,   288,    25,     0,   373,   378,     0,     0,     0,    13,
    24,   289,    18,   289,    18,   374,   289,   375,    25,     0,
     0,   188,   393,    24,   377,   415,    25,     0,   189,     0,
   384,     0,   385,     0,   388,     0,   380,   402,     0,   380,
     0,   381,     0,   404,     0,   379,     0,   372,     0,   376,
     0,   441,     0,    24,   378,    25,     0,     1,     0,   406,
   378,     0,   393,    19,     0,   397,    20,     0,   383,     0,
   401,     0,   384,     0,   385,     0,   388,     0,   392,     0,
   405,     0,   407,     0,   412,     0,   440,     0,    24,   383,
    25,     0,   441,     0,     1,     0,   444,    22,     0,   108,
   368,     0,     0,     6,   290,   386,    22,     0,     0,    99,
     6,   290,   387,    22,     0,     0,     7,   389,    22,     0,
     0,    99,     7,   390,    22,     0,    24,   391,    25,     0,
   393,   399,     0,   393,   400,   394,     0,     0,     0,     0,
     0,     0,    20,     0,   108,    20,     0,   403,    20,     0,
   403,   108,    20,     0,   402,    20,     0,   402,   108,    20,
     0,   402,   403,    20,     0,   402,   403,   108,    20,     0,
    19,   398,     0,    19,    20,     0,    19,   401,    20,     0,
    19,   402,    20,     0,    19,   402,   403,    20,     0,   383,
     0,   401,   383,     0,   291,     0,   402,   291,     0,   368,
     0,   403,   368,     0,    18,     0,   288,    18,     0,    18,
     0,   288,    18,     0,   288,     0,     8,    24,   288,    25,
     0,   406,   368,     0,     0,   406,   368,     9,   408,   368,
     0,     0,    10,    24,   288,   409,    25,   368,     0,    11,
    24,   288,    25,     0,    11,    24,   288,    25,     0,     0,
     0,   188,   413,   393,    24,   414,   415,    25,   391,   437,
   394,     0,   417,     0,     0,   415,   416,    21,   417,     0,
   436,     0,   443,     0,   185,     0,   184,     0,   187,     0,
   418,   187,     0,   418,     0,    24,   288,    25,     0,   419,
     0,   263,    26,   288,    27,     0,   263,    24,    25,     0,
   263,    24,   264,    25,     0,    70,    24,   287,    21,   364,
    25,     0,   263,   342,    28,   444,   299,     0,   263,   342,
    44,   444,   299,     0,   263,    47,     0,   263,    48,     0,
   420,     0,    47,   265,     0,    48,   265,     0,    29,   271,
     0,    34,   271,     0,    33,   271,     0,    32,   271,     0,
    31,   271,     0,    30,   271,     0,   268,     0,   421,     0,
    24,   364,    25,   271,     0,   422,     0,   272,    34,   271,
     0,   272,    35,   271,     0,   272,    36,   271,     0,   423,
     0,   273,    33,   272,     0,   273,    32,   272,     0,   424,
     0,   274,    49,   273,     0,   274,    50,   273,     0,   425,
     0,   275,    37,   274,     0,   275,    38,   274,     0,   275,
    51,   274,     0,   275,    52,   274,     0,   426,     0,   276,
    53,   275,     0,   276,    54,   275,     0,   427,     0,   277,
    29,   276,     0,   428,     0,   278,    39,   277,     0,   429,
     0,   279,    40,   278,     0,   430,     0,   280,    55,   279,
     0,   431,     0,   282,    56,   280,     0,   432,     0,     0,
     0,   282,    41,   434,   288,    22,   435,   284,     0,   433,
     0,   265,    23,   287,     0,   265,    57,   287,     0,   265,
    58,   287,     0,   265,    59,   287,     0,   265,    60,   287,
     0,   265,    61,   287,     0,   265,    62,   287,     0,   265,
    63,   287,     0,   265,    64,   287,     0,   265,    65,   287,
     0,   265,    66,   287,     0,   189,     0,     0,    12,     0,
   410,   368,     0,   438,   368,    11,    24,   288,    25,    18,
     0,   373,   368,     0,   410,   383,     0,   438,   383,    11,
    24,   288,    25,    18,     0,   438,   383,    11,    24,   288,
    25,     0,   373,   383,     0,    14,   444,    18,     0,    15,
    18,     0,    98,    15,    18,     0,    16,    18,     0,    94,
    16,    18,     0,    95,    16,    18,     0,    96,    16,    18,
     0,    97,    16,    18,     0,    17,    18,     0,    17,   288,
    18,     0,     0,    18,     0,   183,     0,   184,     0,   188,
     0,   189,     0,   443,     0,   185,     0,   190,     0,   185,
     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   318,   319,   322,   323,   326,   327,   328,   329,   330,   331,
   332,   335,   337,   341,   341,   348,   354,   358,   359,   363,
   364,   366,   368,   380,   383,   393,   396,   404,   405,   407,
   409,   425,   428,   436,   439,   447,   449,   449,   453,   454,
   455,   456,   459,   462,   466,   466,   469,   469,   474,   475,
   478,   483,   484,   487,   492,   493,   496,   497,   498,   501,
   502,   503,   508,   509,   512,   514,   516,   518,   527,   529,
   531,   533,   549,   553,   554,   561,   562,   570,   572,   576,
   577,   578,   579,   580,   581,   584,   585,   586,   587,   588,
   589,   592,   595,   596,   603,   606,   609,   615,   623,   625,
   629,   632,   633,   636,   639,   645,   649,   650,   653,   656,
   657,   660,   661,   662,   665,   666,   667,   668,   669,   672,
   673,   674,   675,   676,   679,   680,   683,   689,   693,   695,
   699,   700,   702,   709,   719,   720,   723,   724,   725,   726,
   727,   728,   729,   730,   734,   735,   739,   740,   743,   745,
   747,   748,   749,   750,   751,   753,   757,   758,   761,   765,
   777,   778,   779,   780,   781,   782,   785,   786,   787,   788,
   789,   790,   791,   792,   793,   796,   797,   800,   801,   802,
   803,   804,   805,   806,   807,   808,   809,   810,   813,   814,
   817,   821,   822,   825,   826,   827,   828,   831,   832,   836,
   837,   838,   839,   842,   843,   844,   847,   848,   849,   852,
   853,   854,   855,   856,   859,   860,   861,   864,   865,   868,
   869,   873,   874,   877,   878,   883,   889,   890,   896,   902,
   903,   903,   905,   908,   909,   910,   911,   912,   913,   914,
   915,   916,   917,   918,   919,   922,   923,   926,   927,   930,
   935,   936,   937,   940,   954,   959,   965,   967,   973,   978,
   978,   982,   983,   985,   986,   989,   992,   995,   998,   999,
  1002,  1003,  1006,  1007,  1008,  1012,  1014,  1023,  1024,  1025,
  1026,  1027,  1029,  1033,  1036,  1042,  1051,  1054,  1057,  1064,
  1071,  1077,  1102,  1103,  1106,  1107,  1108,  1109,  1110,  1113,
  1114,  1115,  1116,  1119,  1120,  1121,  1122,  1123,  1124,  1125,
  1126,  1127,  1128,  1129,  1130,  1131,  1132,  1133,  1134,  1135,
  1139,  1140,  1143,  1144,  1147,  1148,  1151,  1152,  1153,  1154,
  1157,  1158,  1159,  1160,  1161,  1162,  1165,  1166,  1167,  1168,
  1171,  1172,  1173,  1174,  1177,  1178,  1179,  1180,  1181,  1182,
  1183,  1184,  1185,  1186,  1187,  1194,  1195,  1196,  1197,  1198,
  1199,  1200,  1201,  1202,  1203,  1204,  1205,  1206,  1207,  1210,
  1214,  1215,  1219,  1220,  1224,  1225,  1226,  1229,  1230,  1233,
  1235,  1237,  1238,  1240,  1242,  1243,  1245,  1247,  1249,  1251,
  1252,  1253,  1256,  1257,  1259,  1261,  1262,  1265,  1268,  1269,
  1270,  1273,  1275,  1279,  1281,  1285,  1286,  1287,  1291,  1293,
  1293,  1295,  1298,  1300,  1302,  1305,  1310,  1317,  1318,  1319,
  1326,  1330,  1331,  1335,  1336,  1339,  1340,  1343,  1344,  1347,
  1348,  1349,  1350,  1353,  1354,  1357,  1358,  1361,  1362,  1363,
  1366,  1366,  1367,  1368,  1371,  1383,  1399,  1400,  1403,  1404,
  1405,  1408,  1409,  1412,  1414,  1415,  1417,  1418,  1420,  1422,
  1424,  1426,  1432,  1433,  1434,  1435,  1436,  1437,  1438,  1439,
  1440,  1455,  1458,  1461,  1462,  1466,  1468,  1470,  1472,  1476,
  1477,  1479,  1483,  1485,  1487,  1490,  1491,  1492,  1493,  1494,
  1495,  1496,  1497,  1498,  1499,  1500,  1501,  1502,  1505,  1511,
  1514,  1517,  1518,  1521,  1522,  1523,  1524,  1525,  1526,  1527,
  1528,  1529,  1530,  1531,  1534,  1535,  1541,  1542,  1543,  1544,
  1547,  1548,  1549,  1550,  1553,  1554,  1558,  1561,  1564,  1567,
  1570,  1573,  1576,  1577,  1578,  1579,  1581,  1582,  1584,  1586,
  1592,  1596,  1598,  1600,  1602,  1606,  1607,  1610,  1611,  1614,
  1615,  1618,  1619,  1622,  1623,  1624,  1627,  1635,  1640,  1641,
  1645,  1646,  1649,  1654,  1657,  1658,  1659,  1667,  1668,  1668,
  1672,  1673,  1674,  1685,  1692,  1693,  1696,  1697,  1700,  1701,
  1702,  1703,  1704,  1706,  1707,  1708,  1709,  1712,  1713,  1714,
  1715,  1716,  1717,  1718,  1719,  1720,  1721,  1724,  1725,  1728,
  1729,  1730,  1731,  1734,  1735,  1736,  1739,  1740,  1741,  1744,
  1745,  1746,  1747,  1748,  1751,  1752,  1753,  1756,  1757,  1760,
  1761,  1765,  1766,  1769,  1770,  1773,  1774,  1777,  1778,  1779,
  1780,  1783,  1784,  1785,  1786,  1787,  1788,  1789,  1790,  1791,
  1792,  1793,  1794,  1797,  1798,  1801,  1804,  1806,  1808,  1812,
  1813,  1815,  1817,  1820,  1821,  1822,  1824,  1825,  1826,  1827,
  1828,  1829,  1830,  1833,  1834,  1837,  1840,  1841,  1842,  1843,
  1844,  1847,  1848
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","BADTOK",
"SKIPTOK","CTOK_ELIPSIS","CASE","DEFAULT","CIF","CELSE","SWITCH","WHILE","DO",
"CFOR","GOTO","CONTINUE","BREAK","RETURN","TSEMI","TLBRACE","TRBRACE","TCOMMA",
"TCOLON","TASSIGN","TLPAREN","TRPAREN","TLSQBR","TRSQBR","TDOT","TAMPERSAND",
"TEXCL","TTILDE","TMINUS","TPLUS","TMULT","TDIV","TPERCENT","TLT","TGT","TCIRC",
"TBAR","TQUEST","CSIZEOF","CALIGNOF","ARROW_OP","CTYPEDEF","COFFSETOF","INC_OP",
"DEC_OP","LEFT_OP","RIGHT_OP","LE_OP","GE_OP","EQ_OP","NE_OP","AND_OP","OR_OP",
"MUL_ASSIGN","DIV_ASSIGN","MOD_ASSIGN","ADD_ASSIGN","SUB_ASSIGN","LEFT_ASSIGN",
"RIGHT_ASSIGN","AND_ASSIGN","XOR_ASSIGN","OR_ASSIGN","CSTRUCT","CUNION","CENUM",
"VA_ARG","VA_DCL","QWARN","QGLOBALS","QMODIFIES","QNOMODS","QCONSTANT","QFUNCTION",
"QITER","QDEFINES","QUSES","QALLOCATES","QSETS","QRELEASES","QPRECLAUSE","QPOSTCLAUSE",
"QALT","QUNDEF","QKILLED","QENDMACRO","LLMACRO","LLMACROITER","LLMACROEND","TENDMACRO",
"QSWITCHBREAK","QLOOPBREAK","QINNERBREAK","QSAFEBREAK","QINNERCONTINUE","QFALLTHROUGH",
"QLINTNOTREACHED","QLINTFALLTHROUGH","QLINTFALLTHRU","QARGSUSED","QPRINTFLIKE",
"QLINTPRINTFLIKE","QSCANFLIKE","QMESSAGELIKE","QNOTREACHED","QCONST","QVOLATILE",
"QINLINE","QEXTENSION","QEXTERN","QSTATIC","QAUTO","QREGISTER","QOUT","QIN",
"QYIELD","QONLY","QTEMP","QSHARED","QREF","QUNIQUE","QCHECKED","QUNCHECKED",
"QCHECKEDSTRICT","QCHECKMOD","QKEEP","QKEPT","QPARTIAL","QSPECIAL","QOWNED",
"QDEPENDENT","QRETURNED","QEXPOSED","QNULL","QOBSERVER","QISNULL","QEXITS","QMAYEXIT",
"QNEVEREXIT","QTRUEEXIT","QFALSEEXIT","QLONG","QSIGNED","QUNSIGNED","QSHORT",
"QUNUSED","QSEF","QNOTNULL","QRELNULL","QABSTRACT","QCONCRETE","QMUTABLE","QIMMUTABLE",
"QTRUENULL","QFALSENULL","QEXTERNAL","QREFCOUNTED","QREFS","QNEWREF","QTEMPREF",
"QKILLREF","QRELDEF","CGCHAR","CBOOL","CINT","CGFLOAT","CDOUBLE","CVOID","QANYTYPE",
"QINTEGRALTYPE","QUNSIGNEDINTEGRALTYPE","QSIGNEDINTEGRALTYPE","QNULLTERMINATED",
"QSETBUFFERSIZE","QSETSTRINGLENGTH","QMAXSET","QMAXREAD","QTESTINRANGE","TCAND",
"IDENTIFIER","NEW_IDENTIFIER","TYPE_NAME_OR_ID","CANNOTATION","CCONSTANT","ITER_NAME",
"ITER_ENDNAME","TYPE_NAME","METASTATE_NAME","file","externalDefs","externalDef",
"constantDecl","fcnDecl","@1","plainFcn","plainNamedDecl","namedDeclBase","@2",
"@3","plainNamedDeclBase","@4","@5","iterDecl","@6","@7","macroDef","fcnDefHdr",
"metaStateConstraint","metaStateSpecifier","@8","@9","metaStateExpression","metaStateName",
"BufConstraintList","BufConstraint","bufferModifier","relationalOp","BufConstraintExpr",
"BufConstraintTerm","BufConstraintSrefExpr","BufUnaryOp","BufBinaryOp","functionClauses",
"functionClausesPlain","functionClause","functionClausePlain","globalsClause",
"globalsClausePlain","@10","nomodsClause","modifiesClause","modifiesClausePlain",
"@11","flagSpec","flagId","optWarnClause","warnClause","warnClausePlain","globIdList",
"globIdListExpr","optGlobQuals","globId","globQual","stateTag","conditionTag",
"fcnDefHdrAux","fcnBody","@12","@13","@14","fcnDef","locModifies","modListExpr",
"mExpr","modList","specClauseListExpr","optSpecClauseList","specClauseList",
"primaryExpr","postfixExpr","argumentExprList","unaryExpr","fieldDesignator",
"offsetofExpr","sizeofExpr","@15","sizeofExprAux","castExpr","timesExpr","plusExpr",
"shiftExpr","relationalExpr","equalityExpr","bitandExpr","xorExpr","bitorExpr",
"andExpr","@16","orExpr","@17","conditionalExpr","@18","@19","assignExpr","expr",
"optExpr","constantExpr","initializer","instanceDecl","@20","@21","namedInitializer",
"@22","typeDecl","@23","IsType","PushType","namedInitializerList","namedInitializerListAux",
"optDeclarators","init","initList","storageSpecifier","stateClause","stateClausePlain",
"@24","conditionClause","startConditionClause","conditionClausePlain","@25",
"@26","functionConstraint","exitsQualifier","checkQualifier","stateQualifier",
"paramQualifier","visibilityQualifier","returnQualifier","typedefQualifier",
"refcountQualifier","typeModifier","definedQualifier","typeQualifier","typeSpecifier",
"completeType","completeTypeSpecifier","altType","completeTypeSpecifierAux",
"optCompleteType","suSpc","@27","@28","@29","@30","@31","@32","@33","@34","NotType",
"structDeclList","structDecl","structNamedDeclList","structNamedDecl","enumSpc",
"@35","enumeratorList","enumerator","optNamedDecl","namedDecl","genericParamList",
"innerMods","innerModsList","pointers","paramIdList","idList","paramTypeList",
"paramList","@36","@37","paramDecl","typeExpression","abstractDecl","optAbstractDeclBase",
"abstractDeclBase","stmt","iterBody","endBody","iterDefStmtList","iterDefIterationStmt",
"forPred","@38","@39","partialIterStmt","@40","iterDefStmt","iterSelectionStmt",
"openScope","closeScope","macroBody","stmtErr","labeledStmt","caseStmt","@41",
"@42","defaultStmt","@43","@44","compoundStmt","compoundStmtErr","CreateInnerScope",
"DeleteInnerScope","CreateStructInnerScope","DeleteStructInnerScope","DeleteInnerScopeSafe",
"compoundStmtRest","compoundStmtAux","compoundStmtAuxErr","stmtListErr","initializerList",
"stmtList","expressionStmt","expressionStmtErr","ifPred","selectionStmt","@45",
"@46","whilePred","iterWhilePred","iterStmt","@47","@48","iterArgList","@49",
"iterArgExpr","cconstantExpr","primaryIterExpr","postfixIterExpr","unaryIterExpr",
"castIterExpr","timesIterExpr","plusIterExpr","shiftIterExpr","relationalIterExpr",
"equalityIterExpr","bitandIterExpr","xorIterExpr","bitorIterExpr","andIterExpr",
"orIterExpr","conditionalIterExpr","@50","@51","assignIterExpr","endIter","doHeader",
"iterationStmt","iterationStmtErr","jumpStmt","optSemi","id","newId","typeName", NULL
};
#endif

static const short yyr1[] = {     0,
   192,   192,   193,   193,   194,   194,   194,   194,   194,   194,
   194,   195,   195,   197,   196,   198,   198,   199,   199,   200,
   200,   200,   200,   201,   200,   202,   200,   203,   203,   203,
   203,   204,   203,   205,   203,   207,   208,   206,   209,   209,
   209,   209,   210,   211,   213,   212,   214,   212,   215,   215,
   216,   217,   217,   218,   219,   219,   220,   220,   220,   221,
   221,   221,   222,   222,   223,   223,   223,   223,   223,   223,
   223,   223,   224,   225,   225,   226,   226,   227,   227,   228,
   228,   228,   228,   228,   228,   229,   229,   229,   229,   229,
   229,   230,   232,   231,   233,   234,   236,   235,   237,   237,
   238,   239,   239,   240,   241,   241,   242,   242,   243,   244,
   244,   245,   245,   245,   246,   246,   246,   246,   246,   247,
   247,   247,   247,   247,   248,   248,   249,   249,   251,   250,
   252,   253,   250,   254,   255,   255,   256,   256,   256,   256,
   256,   256,   256,   256,   257,   257,   258,   258,   259,   259,
   259,   259,   259,   259,   259,   259,   260,   260,   261,   261,
   262,   262,   262,   262,   262,   262,   263,   263,   263,   263,
   263,   263,   263,   263,   263,   264,   264,   265,   265,   265,
   265,   265,   265,   265,   265,   265,   265,   265,   266,   266,
   267,   269,   268,   270,   270,   270,   270,   271,   271,   272,
   272,   272,   272,   273,   273,   273,   274,   274,   274,   275,
   275,   275,   275,   275,   276,   276,   276,   277,   277,   278,
   278,   279,   279,   280,   281,   280,   282,   283,   282,   284,
   285,   286,   284,   287,   287,   287,   287,   287,   287,   287,
   287,   287,   287,   287,   287,   288,   288,   289,   289,   290,
   291,   291,   291,   292,   293,   292,   294,   292,   295,   296,
   295,   298,   297,   297,   297,   299,   300,   301,   302,   302,
   303,   303,   304,   304,   304,   305,   305,   306,   306,   306,
   306,   306,    -1,   307,   309,   308,   310,   311,   313,   312,
   314,   312,   315,   315,   316,   316,   316,   316,   316,   317,
   317,   317,   317,   318,   318,   318,   318,   318,   318,   318,
   318,   318,   318,   318,   318,   318,   318,   318,   318,   318,
   319,   319,   320,   320,   321,   321,   322,   322,   322,   322,
   323,   323,   323,   323,   323,   323,   324,   324,   324,   324,
   325,   325,   325,   325,   326,   326,   326,   326,   326,   326,
   326,   326,   326,   326,   326,   327,   327,   327,   327,   327,
   327,   327,   327,   327,   327,   327,   327,   327,   327,   328,
   329,   329,   330,   330,   331,   331,   331,   332,   332,   334,
   335,   333,   336,   337,   333,   333,   333,   338,   339,   333,
   340,   341,   333,   333,   333,   333,   333,   342,   343,   343,
   343,   344,   344,   345,   345,   346,   346,   346,   347,   348,
   347,   347,   349,   349,   349,   350,   350,   351,   351,   351,
   351,   352,   352,   353,   353,   354,   354,   355,   355,   356,
   356,   356,   356,   357,   357,   358,   358,   359,   359,   359,
   361,   360,   362,   360,   363,   363,   364,   364,   365,   365,
   365,   366,   366,   367,   367,   367,   367,   367,   367,   367,
   367,   367,   368,   368,   368,   368,   368,   368,   368,   368,
   368,   369,   370,   371,   371,   372,   372,   372,   372,   374,
   375,   373,   377,   376,   376,   378,   378,   378,   378,   378,
   378,   378,   378,   378,   378,   378,   378,   378,   379,   380,
   381,   382,   382,   383,   383,   383,   383,   383,   383,   383,
   383,   383,   383,   383,   384,   384,   386,   385,   387,   385,
   389,   388,   390,   388,   391,   391,   392,   393,   394,   395,
   396,   397,   398,   398,   398,   398,   398,   398,   398,   398,
   399,   400,   400,   400,   400,   401,   401,   402,   402,   403,
   403,   404,   404,   405,   405,   405,   406,   407,   408,   407,
   409,   407,   410,   411,   413,   414,   412,   415,   416,   415,
   417,   417,   417,   417,   418,   418,   419,   419,   420,   420,
   420,   420,   420,   420,   420,   420,   420,   421,   421,   421,
   421,   421,   421,   421,   421,   421,   421,   422,   422,   423,
   423,   423,   423,   424,   424,   424,   425,   425,   425,   426,
   426,   426,   426,   426,   427,   427,   427,   428,   428,   429,
   429,   430,   430,   431,   431,   432,   432,   433,   434,   435,
   433,   436,   436,   436,   436,   436,   436,   436,   436,   436,
   436,   436,   436,   437,   437,   438,   439,   439,   439,   440,
   440,   440,   440,   441,   441,   441,   441,   441,   441,   441,
   441,   441,   441,   442,   442,   443,   444,   444,   444,   444,
   444,   445,   445
};

static const short yyr2[] = {     0,
     0,     1,     1,     2,     2,     1,     1,     1,     1,     1,
     1,     8,    11,     0,     5,     1,     3,     1,     2,     1,
     6,     3,     6,     0,     6,     0,     7,     1,     6,     3,
     6,     0,     6,     0,     7,     0,     0,    10,     3,     3,
     3,     2,     1,     3,     0,     4,     0,     4,     1,     3,
     1,     3,     1,     3,     1,     1,     1,     1,     1,     1,
     4,     5,     1,     1,     1,     1,     3,     4,     2,     3,
     3,     3,     1,     1,     1,     0,     2,     0,     2,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     2,     0,     4,     1,     2,     0,     3,     1,     3,
     1,     1,     0,     2,     3,     2,     1,     3,     2,     0,
     2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     3,     0,     3,
     0,     0,     4,     2,     2,     1,     1,     1,     3,     4,
     2,     3,     3,     3,     1,     1,     1,     3,     1,     1,
     3,     4,     2,     3,     3,     3,     0,     1,     1,     3,
     1,     1,     1,     3,     1,     1,     1,     4,     3,     4,
     6,     5,     5,     2,     2,     1,     3,     1,     2,     2,
     2,     2,     2,     2,     2,     2,     1,     1,     3,     1,
     9,     0,     3,     4,     2,     4,     2,     1,     4,     1,
     3,     3,     3,     1,     3,     3,     1,     3,     3,     1,
     3,     3,     3,     3,     1,     3,     3,     1,     3,     1,
     3,     1,     3,     1,     0,     4,     1,     0,     4,     1,
     0,     0,     7,     1,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     1,     3,     0,     1,     1,
     1,     1,     1,     3,     0,     9,     0,    11,     2,     0,
     6,     0,     8,     4,     4,     0,     0,     2,     1,     4,
     0,     4,     1,     3,     4,     1,     3,     1,     1,     1,
     1,     1,     2,     2,     0,     6,     2,     2,     0,     6,
     0,     5,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     3,
     1,     4,     1,     3,     2,     2,     2,     0,     1,     0,
     0,    11,     0,     0,    11,     6,     6,     0,     0,    10,
     0,     0,    10,     5,     5,     4,     4,     0,     1,     1,
     2,     5,     3,     2,     4,     1,     3,     4,     6,     0,
     8,     4,     1,     3,     2,     1,     4,     1,     1,     2,
     2,     1,     2,     1,     2,     1,     1,     1,     2,     1,
     2,     2,     3,     1,     3,     1,     3,     1,     1,     3,
     0,     2,     0,     4,     4,     1,     1,     2,     1,     1,
     2,     0,     1,     5,     2,     3,     3,     4,     3,     4,
     4,     5,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     2,     2,     7,     6,     2,     0,
     0,    10,     0,     6,     1,     1,     1,     1,     2,     1,
     1,     1,     1,     1,     1,     1,     3,     1,     2,     2,
     2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     3,     1,     1,     2,     2,     0,     4,     0,     5,
     0,     3,     0,     4,     3,     2,     3,     0,     0,     0,
     0,     0,     1,     2,     2,     3,     2,     3,     3,     4,
     2,     2,     3,     3,     4,     1,     2,     1,     2,     1,
     2,     1,     2,     1,     2,     1,     4,     2,     0,     5,
     0,     6,     4,     4,     0,     0,    10,     1,     0,     4,
     1,     1,     1,     1,     1,     2,     1,     3,     1,     4,
     3,     4,     6,     5,     5,     2,     2,     1,     2,     2,
     2,     2,     2,     2,     2,     2,     1,     1,     4,     1,
     3,     3,     3,     1,     3,     3,     1,     3,     3,     1,
     3,     3,     3,     3,     1,     3,     3,     1,     3,     1,
     3,     1,     3,     1,     3,     1,     3,     1,     0,     0,
     7,     1,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     1,     0,     1,     2,     7,     2,     2,
     7,     6,     2,     3,     2,     3,     2,     3,     3,     3,
     3,     2,     3,     0,     1,     1,     1,     1,     1,     1,
     1,     1,     1
};

static const short yydefact[] = {     0,
    11,   430,   398,   252,   398,    14,     0,     0,     0,     0,
   266,   266,   279,   278,   280,   281,   282,   341,   342,   306,
   308,   307,   311,   312,   300,   302,   303,   301,   309,   310,
   343,   344,   304,   305,   321,   317,   313,   318,   314,   295,
   296,   299,   297,   298,   338,   339,   340,   337,   323,   322,
   316,   315,   327,   328,   329,   330,   325,   326,   324,   331,
   332,   335,   336,   333,   334,   398,   398,   398,   398,   398,
   398,   398,   398,   398,   398,   319,   666,   667,   671,   320,
   668,   669,   672,     0,     3,     6,     7,   422,     8,     9,
   131,    43,   664,    10,   251,   253,     0,   378,   266,   266,
   266,   266,   266,   266,   266,   266,   398,   266,   378,   378,
   398,   371,   398,     0,   398,   127,   266,   670,    20,   398,
   426,   427,   428,   431,   432,   269,   266,   266,   262,   398,
   673,   398,   398,   671,     0,   514,   266,   521,     0,     0,
     0,   646,     0,     0,     0,     0,   266,   554,     0,   266,
   266,   266,   266,   266,   266,   266,   266,   266,     0,    42,
     0,     0,     0,     0,     0,     0,   266,   166,   162,   165,
   575,   565,   167,   178,   198,   188,   187,   200,   204,   207,
   210,   215,   218,   220,   222,   224,   227,   230,   234,   246,
   556,   192,     0,     0,   546,   504,   505,   506,   507,     0,
     0,   508,   266,   509,     0,   510,   163,     0,   511,   513,
   161,     0,   498,     0,   552,     0,   528,   485,     0,     0,
     0,   494,     0,   495,   474,   493,   490,   491,   486,   487,
   488,     0,     0,   492,     0,     0,     0,   496,   473,     0,
   345,   346,   356,   358,   357,   359,   360,   361,   362,   363,
   364,   365,     4,   266,     0,   129,   134,   398,   665,     5,
   398,   379,   375,   349,   351,   348,   350,   353,   352,   354,
   355,   369,   347,   376,   377,     0,   266,   266,   367,   266,
   266,     0,   368,   423,   366,   429,   433,   398,     0,   268,
   398,     0,   259,   266,   664,    16,    18,     0,   398,   266,
    28,   441,   266,   162,   165,   198,   250,   517,   161,     0,
   266,   266,   266,   266,     0,   655,   657,   662,     0,     0,
   398,   447,     0,     0,   181,   186,   185,   184,   183,   182,
     0,   266,   179,   180,   266,     0,     0,     0,     0,     0,
   266,   523,   266,   516,   266,   463,   464,   465,   466,     0,
   467,   468,   266,   470,   266,   469,   471,   528,   266,   266,
   174,   175,     0,   266,   266,   266,   266,   266,   266,   266,
   266,   266,   266,   266,   266,   266,   266,   266,   266,   266,
   266,   266,   266,   266,   266,   266,   266,   266,   266,   266,
   225,   231,   228,   555,   266,     0,   653,    39,     0,   529,
   547,   558,   650,   576,     0,   515,   266,     0,     0,     0,
   553,    40,   475,   479,   548,   398,   489,   500,   501,   499,
     0,     0,    41,    22,   266,   441,   398,   398,   266,   254,
   128,   398,     0,   373,     0,   398,     0,   398,     0,   266,
   266,   265,   266,   264,   260,   398,     0,   266,     0,   398,
   266,    19,   438,     0,     0,   424,   439,   266,     0,     0,
   522,     0,   561,     0,   249,     0,   654,   663,   164,   266,
   266,     0,   449,   448,   450,   266,   512,   266,     0,   658,
   659,   660,   661,   656,   519,     0,     0,   649,   398,   526,
   647,     0,     0,   169,     0,   176,     0,     0,     0,   235,
   236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
   201,   202,   203,   206,   205,   208,   209,   211,   212,   213,
   214,   216,   217,   219,   221,   223,   266,   266,   266,   247,
   266,   266,   193,   542,   165,   546,     0,   398,   527,   559,
     0,     0,   497,   483,   266,   549,     0,     0,    24,     0,
   533,   266,   550,   130,   398,   266,   528,   266,   255,   372,
   266,   388,     0,   396,   391,     0,   397,     0,   413,   416,
   410,   412,   270,   266,   266,   664,    15,    30,   266,   441,
   266,    17,   425,   434,   436,    36,   443,   398,   442,   446,
   518,   557,     0,   563,   266,   370,   455,     0,   441,   451,
   266,     0,   199,   398,   266,     0,   524,   525,   541,     0,
   566,   266,   170,   168,   266,   266,   226,     0,   229,   266,
   195,   266,   197,   543,   544,   266,   266,   266,   564,   266,
   398,   266,   398,    76,    26,   534,   537,   266,   266,   535,
   266,   551,   528,   133,     0,   257,   266,   374,   394,   530,
   380,   395,   530,   383,   266,   415,   266,     0,   103,   266,
   266,   266,     0,    32,     0,   266,     0,    78,   440,   266,
   452,   266,     0,   456,   459,   266,     0,   457,     0,   441,
     0,     0,   520,   266,   266,   177,   172,   173,   232,     0,
     0,   545,   560,     0,   266,   266,   266,   266,   266,   266,
   266,   266,   266,     0,   162,   165,   178,   198,   187,   204,
   207,   210,   215,   218,   220,   222,   224,   227,     0,   569,
   568,   163,   579,   588,   598,   600,   604,   607,   610,   615,
   618,   620,   622,   624,   626,   628,   632,   571,   161,     0,
    23,     0,    93,    97,    95,   120,   121,   122,   123,   124,
   125,   126,    25,    76,    80,     0,    82,    81,     0,    85,
     0,   398,   398,    83,     0,    84,   291,     0,    76,   538,
   539,   266,   536,    21,   266,   271,   398,   386,   530,   398,
   387,   530,   409,   414,   266,     0,     0,   102,   266,   273,
   261,   266,     0,   398,    78,    34,     0,   435,   437,    37,
    78,    86,    88,    87,    91,    89,    90,   444,   418,     0,
   266,   452,   419,   453,   562,   480,     0,   460,   458,   461,
     0,     0,   171,     0,   569,   266,   194,   196,   652,     0,
     0,   181,   186,   185,   184,   183,   182,   179,   180,   266,
   266,   266,   174,   175,     0,   266,   266,   266,   266,   266,
   266,   266,   266,   266,   266,   266,   266,   266,   266,   266,
   266,   266,   266,   266,   266,   266,   266,   266,   266,   266,
   266,   266,   225,   629,   228,   484,     0,   478,   101,   106,
    99,   110,   664,    77,    92,    96,   104,   285,   288,   284,
     0,   289,   287,    27,   540,   266,     0,   400,   398,   398,
   399,   398,   398,   398,   417,   266,   263,   276,     0,   271,
    12,    31,    33,    78,    29,   664,    79,   441,   445,   420,
   421,   266,   454,   462,     0,   190,     0,   528,   233,   651,
   164,   266,     0,   169,     0,     0,     0,     0,   633,   634,
   635,   636,   637,   638,   639,   640,   641,   642,   643,   201,
   202,   203,   206,   205,   208,   209,   211,   212,   213,   214,
   216,   217,   219,   221,   223,   625,   266,   627,   266,   477,
   105,     0,   115,   116,   117,   118,   119,   664,   107,   398,
   110,     0,     0,   138,    98,   147,   664,   136,   137,     0,
    47,     0,     0,    55,    56,    66,    64,   294,     0,   293,
    53,    73,     0,    60,    63,     0,   664,    65,   157,   271,
   266,   398,     0,   266,   401,   389,   398,   392,   398,   411,
   274,   266,   664,    35,     0,   266,   481,   266,     0,   648,
   645,   199,   266,   170,   168,   266,   266,     0,   570,   100,
   110,    94,   113,   109,   114,   112,   111,     0,   141,     0,
     0,     0,     0,   135,     0,     0,   150,   159,   664,   149,
     0,     0,    63,     0,    69,     0,     0,    58,    57,    59,
     0,     0,     0,     0,     0,     0,   266,   664,   158,     0,
   256,   266,   403,   266,   266,   398,   406,     0,   381,     0,
   384,   275,   277,     0,    38,   266,     0,   191,   189,   644,
   529,     0,   172,   173,   630,   108,   142,   139,   145,     0,
   146,   143,   144,   148,     0,   153,     0,     0,     0,     0,
   266,     0,    75,    74,     0,    70,     0,    49,    44,    45,
    52,    63,    54,    67,     0,    71,    72,     0,     0,   292,
   266,   266,   272,   266,   266,     0,   404,   266,   390,     0,
   393,     0,    13,   482,   567,   171,   266,   140,   154,   151,
     0,   155,   156,   160,   286,    51,    48,     0,     0,    68,
    46,    61,   290,   258,   407,   398,   402,   266,   382,   385,
   631,   152,    62,    50,   405,   408,     0,     0,     0
};

static const short yydefgoto[] = {  1187,
    84,    85,    86,    87,   133,   295,   296,    88,   634,   769,
   297,   795,   914,    89,   668,   916,   898,    91,   998,  1128,
  1075,  1061,  1129,  1167,  1000,  1001,  1002,  1071,  1003,  1004,
  1132,  1006,  1125,   753,   800,   754,   801,   755,   802,   882,
   803,   758,   804,   883,   880,   881,   787,   760,   761,   978,
   979,   980,  1044,   981,   762,   763,    92,   257,   427,   258,
   557,    93,   985,  1109,  1110,   987,  1058,  1078,  1059,   173,
   174,   495,   175,   925,   176,   177,   396,   533,   178,   179,
   180,   181,   182,   183,   184,   185,   186,   187,   527,   188,
   529,   189,   528,   826,   190,   219,   466,   308,   415,    95,
   647,   775,   126,   575,    96,   291,   192,   255,   127,   128,
   897,   791,   909,    98,   764,   806,   990,   766,   767,   807,
  1009,   891,  1007,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   322,   416,   433,   112,   263,
   113,   779,  1150,   782,  1152,   650,  1088,   653,  1090,   114,
   900,   901,  1085,  1086,   115,   658,   568,   569,   811,   130,
   455,   123,   124,   117,   583,   584,   456,   457,   458,   670,
   589,   323,   817,   813,   475,   344,   220,   240,   221,   222,
   345,   922,  1097,   224,   630,   225,   226,   227,   228,   194,
   401,   346,   347,   460,   606,   348,   310,   486,   349,   199,
   350,   539,   777,  1016,   233,   554,   490,   400,   201,   555,
   556,   351,   202,   203,   352,   627,   593,   353,   236,   354,
   358,   685,   720,   877,   721,   207,   723,   724,   725,   726,
   727,   728,   729,   730,   731,   732,   733,   734,   735,   736,
   737,   967,  1157,   738,  1101,   355,   356,   209,   357,   260,
   309,   212,   120
};

static const short yypact[] = {  2108,
-32768,   259,  5207,-32768,  6305,-32768,   338,  3085,  3424,  3424,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   659,-32768,
-32768,-32768,-32768,  2286,-32768,-32768,-32768,   452,-32768,-32768,
    50,-32768,    84,-32768,-32768,-32768,    96,  6140,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  6140,  6140,
   166,    87,-32768,   739,-32768,-32768,   338,-32768,-32768,-32768,
-32768,-32768,-32768,   259,-32768,-32768,   171,-32768,   166,-32768,
-32768,-32768,  5207,-32768,   196,-32768,  5436,-32768,   227,   237,
   245,-32768,   268,   338,   281,   290,  1173,-32768,  2662,  5436,
  5436,  5436,  5436,  5436,  5436,-32768,  5465,  5465,   289,-32768,
   316,   336,   347,   362,   375,   135,  4651,-32768,   398,   404,
-32768,   416,-32768,   895,   852,-32768,-32768,-32768,   426,   133,
   639,   782,   710,   474,   472,   478,   481,   185,-32768,-32768,
   191,-32768,  3467,   454,   457,-32768,-32768,-32768,-32768,   535,
  3233,-32768,  4651,-32768,  3467,-32768,   372,  3467,-32768,-32768,
   547,   562,-32768,   587,-32768,  2852,   416,   594,   429,   528,
  3276,-32768,  3424,-32768,-32768,-32768,  5766,-32768,-32768,-32768,
-32768,   618,   609,-32768,  3424,  3424,  3467,-32768,-32768,   550,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   626,   635,-32768,-32768,  6030,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   646,   534,-32768,-32768,   338,
   338,   302,-32768,   452,-32768,-32768,-32768,-32768,   665,-32768,
-32768,   688,   645,   534,    84,-32768,   468,   690,-32768,   338,
-32768,   228,  5436,-32768,-32768,-32768,-32768,-32768,-32768,   704,
  5436,  5436,  5436,  1889,   724,-32768,-32768,-32768,   512,   359,
  5634,    89,   744,   753,-32768,-32768,-32768,-32768,-32768,-32768,
   762,  5436,-32768,-32768,  5436,   798,   800,   811,   826,   836,
  5436,-32768,  1978,-32768,  4651,-32768,-32768,-32768,-32768,   847,
-32768,-32768,  4651,-32768,  4651,-32768,-32768,-32768,  1106,  5436,
-32768,-32768,    64,  5436,  5436,  5436,  5436,  5436,  5436,  5436,
  5436,  5436,  5436,  5436,  5436,  5436,  5436,  5436,  5436,  5436,
  5436,  5436,  5436,  5436,  5436,  5436,  5436,  5436,  5436,  5436,
-32768,-32768,-32768,-32768,  5436,   781,-32768,-32768,  2472,-32768,
-32768,   791,-32768,-32768,   879,-32768,  5436,   367,   900,   896,
-32768,-32768,-32768,-32768,-32768,   166,  5766,-32768,-32768,-32768,
  3042,   919,-32768,-32768,  5436,    65,  3615,  4732,   534,-32768,
   386,  6305,   855,   915,   931,   948,   953,   948,   338,   959,
   534,-32768,   534,-32768,-32768,-32768,   892,   962,   963,-32768,
   534,   468,-32768,   338,   969,-32768,   981,   338,   333,   984,
-32768,   385,  1023,   393,  1023,  1030,-32768,-32768,-32768,-32768,
  5218,  1007,   538,-32768,   650,  5436,-32768,-32768,  1028,-32768,
-32768,-32768,-32768,-32768,-32768,  1032,  1034,-32768,  3615,-32768,
-32768,  1046,  1036,-32768,   394,-32768,   288,   338,   338,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   426,   426,   133,   133,   639,   639,   639,
   639,   782,   782,   710,   474,   472,  5436,  5436,  5436,-32768,
  5485,  5496,-32768,-32768,  4965,-32768,  2022,  3800,-32768,-32768,
  1037,   403,-32768,-32768,   534,-32768,  1039,  1038,-32768,  1043,
-32768,  4170,-32768,-32768,  3985,  4213,  1045,-32768,  1049,-32768,
-32768,  1055,  1058,-32768,  1061,  1065,-32768,   676,-32768,  1062,
-32768,-32768,-32768,   171,-32768,    98,-32768,-32768,  5436,   213,
   534,-32768,-32768,  1066,-32768,-32768,  1081,  6305,-32768,-32768,
-32768,-32768,  1063,-32768,  1889,-32768,-32768,  1064,   369,   650,
  5380,  1069,-32768,-32768,-32768,  1067,-32768,-32768,-32768,  1079,
-32768,  5436,-32768,-32768,-32768,-32768,   478,   839,   481,  5436,
-32768,  5436,-32768,-32768,-32768,  4316,  4651,  5436,-32768,  5555,
-32768,  5436,-32768,   938,-32768,-32768,-32768,  4359,  4462,-32768,
  4505,-32768,  1045,-32768,  1082,-32768,-32768,-32768,-32768,-32768,
  1084,-32768,-32768,  1088,-32768,   338,-32768,   338,  1041,  5128,
-32768,-32768,  1083,-32768,  1086,-32768,   247,   938,-32768,   338,
   591,  4651,  1096,-32768,-32768,   127,  1090,-32768,  1089,    82,
  1100,  1097,-32768,  5436,  5555,-32768,-32768,-32768,-32768,  1098,
  1101,-32768,-32768,   456,  5436,  5436,  5436,  5436,  5436,  5436,
  5436,  5465,  5465,  1085,   488,   507,   960,  1187,   523,   999,
   841,   856,   830,   874,  1099,  1094,  1102,  1092,   202,  1109,
-32768,    10,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   532,   557,
-32768,   964,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   938,-32768,  1054,-32768,-32768,  1057,-32768,
  1060,-32768,-32768,-32768,  1068,-32768,  2185,  1070,   938,-32768,
-32768,  4608,-32768,-32768,-32768,-32768,  6227,-32768,-32768,  6227,
-32768,-32768,-32768,-32768,  5436,   932,  1126,-32768,  5128,-32768,
-32768,  5128,  1071,-32768,   938,-32768,  1130,-32768,-32768,-32768,
   938,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   452,  1127,
-32768,   668,-32768,   650,-32768,-32768,  1131,-32768,-32768,-32768,
  1147,   338,-32768,   577,  1149,  5436,-32768,-32768,  1159,   589,
  1153,   598,   615,   670,   678,   684,   711,   719,   745,  5436,
  5391,  5436,   763,   768,   120,  5436,  5436,  5436,  5436,  5436,
  5436,  5436,  5436,  5436,  5436,  5436,  5436,  5436,  5436,  5436,
  5436,  5436,  5436,  5436,  5436,  5436,  5436,  5436,  5436,  5436,
  5436,  5436,  5436,-32768,  5436,-32768,  1158,  1162,-32768,   994,
  1142,   269,    76,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   155,-32768,-32768,-32768,-32768,  5128,   582,-32768,   166,  4810,
-32768,  6227,  4810,  6227,-32768,-32768,-32768,-32768,  1004,-32768,
-32768,-32768,-32768,   938,-32768,    84,-32768,   546,-32768,-32768,
-32768,  5411,-32768,-32768,   424,-32768,  1165,  1045,-32768,-32768,
   788,  5436,  1164,   815,   901,   320,   338,   338,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   924,
   926,   934,   716,   844,   463,   908,   597,   630,   718,   752,
   825,   834,    93,   350,   118,   478,  5436,   481,  5555,-32768,
   372,   964,-32768,-32768,-32768,-32768,-32768,   610,-32768,  5898,
   269,    88,    88,-32768,-32768,    75,   627,-32768,-32768,   103,
-32768,   541,   153,-32768,-32768,-32768,-32768,-32768,  1163,-32768,
  1008,-32768,   985,-32768,   108,  1168,    84,-32768,   103,-32768,
-32768,-32768,  1176,   527,-32768,-32768,  4810,-32768,  4810,-32768,
-32768,  1794,   866,-32768,  1107,   643,-32768,-32768,   338,-32768,
  1006,   941,-32768,   949,   952,-32768,-32768,  1019,-32768,-32768,
   269,-32768,-32768,-32768,-32768,-32768,-32768,   431,    75,   410,
   338,   338,    88,-32768,   103,   103,-32768,   275,   871,-32768,
  1178,  1010,   551,   153,   318,    72,   541,-32768,-32768,-32768,
   541,    20,   338,   338,  1179,   541,-32768,    84,  1177,   886,
-32768,   534,-32768,-32768,  1188,-32768,  1186,  1191,-32768,  1193,
-32768,-32768,-32768,  1125,-32768,   607,  1192,-32768,-32768,-32768,
-32768,  1197,   974,   975,-32768,-32768,-32768,-32768,    75,  1189,
   372,-32768,-32768,    75,   656,   275,   421,   338,   338,   103,
-32768,  1035,-32768,-32768,   541,-32768,   551,  1183,-32768,   318,
-32768,   318,-32768,-32768,  1198,-32768,-32768,  1035,  1202,-32768,
-32768,-32768,-32768,  5436,   527,  1212,-32768,-32768,-32768,  1211,
-32768,  1213,-32768,-32768,-32768,   980,  5436,-32768,-32768,-32768,
  1205,-32768,-32768,   275,-32768,-32768,-32768,  1209,    72,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  5436,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  1236,  1237,-32768
};

static const short yypgoto[] = {-32768,
-32768,  1154,-32768,-32768,-32768,-32768,  -400,  -105,-32768,-32768,
   939,-32768,-32768,-32768,-32768,-32768,    54,-32768,-32768,   351,
-32768,-32768,    86,   119,   174,-32768,-32768,-32768,  -947,-32768,
  -842,-32768,-32768,  -444,  -728,-32768,-32768,-32768,  -586,-32768,
  -558,-32768,  -556,-32768,   284,-32768,-32768,   599,  -639,-32768,
   219,   280,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  -828,   145,-32768,  -957,-32768,   254,-32768,
  -605,   423,  1013,-32768,-32768,  -603,-32768,-32768,  -111,  -356,
  -362,  -325,  -334,  -373,  -363,  -357,  -490,  -505,-32768,  -602,
-32768,   -99,-32768,-32768,   529,  1216,  -579,  -339,     5,-32768,
-32768,-32768,  -430,-32768,-32768,-32768,   654,  -261,   822,-32768,
  -822,  -727,-32768,-32768,-32768,  -539,-32768,-32768,-32768,  -525,
-32768,-32768,-32768,-32768,-32768,   499,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,    61,   706,-32768,   937,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   399,
  -730,  -772,-32768,   123,-32768,-32768,   613,   616,   461,    13,
  -380,  1151,-32768,     2,-32768,-32768,  -569,-32768,-32768,-32768,
   608,  -272,   955,-32768,  -472,    36,  1272,-32768,  1047,-32768,
  1271,-32768,-32768,-32768,-32768,  -142,-32768,-32768,-32768,-32768,
   168,  1436,  1525,-32768,-32768,  1596,-32768,-32768,  -329,-32768,
  1091,   186,  -597,  -713,-32768,   797,-32768,-32768,   889,  -195,
  -470,    62,-32768,    95,     9,-32768,-32768,    26,-32768,    83,
-32768,-32768,   612,-32768,   325,  -610,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  1694,-32768,-32768,  1748,  -274,
     0,   517,-32768
};


#define	YYLAST		6495


static const short yytable[] = {   118,
   600,   485,   118,   125,    94,   434,   118,   211,   211,   211,
   573,   284,   116,   487,   524,   673,   204,   516,   517,   722,
   447,   514,   515,   619,   707,   525,   709,   719,   805,   677,
  -577,   417,   526,   205,  -577,   449,   617,   307,   325,   326,
   327,   328,   329,   330,  1062,   550,  1134,   756,  1005,   903,
   582,   522,   523,    90,   986,   780,   518,   519,   520,   521,
   111,   908,   428,   129,   910,   132,   913,   626,   256,   453,
   234,   234,   917,   409,   722,   757,   991,   759,   413,   707,
   414,   709,   719,   118,   639,   548,   453,  1023,    94,   549,
   206,   498,   420,   259,   765,  1064,   116,  1115,  1116,   982,
  1050,   259,  1051,   235,   235,   993,   820,   499,   768,   983,
   821,   982,  -266,  -619,   471,   259,   118,  -619,  1052,   261,
   661,   983,     2,  1133,   718,   287,  1055,  1015,  1139,   -45,
  1015,   598,   118,  1072,   300,  1073,  1056,    90,  -623,   717,
   341,   342,  -623,   118,   111,   386,   387,   937,   211,  1063,
  1065,  1074,   471,  1048,  1049,   805,   389,   204,   262,   991,
     2,   805,  1164,   938,   378,   379,   211,   756,  1010,   262,
   262,  1017,   278,  1019,   205,   195,  1064,  1168,   992,   718,
   666,   902,   756,  -266,   904,  1024,   993,  1080,   993,  1018,
   449,   288,   211,   299,   717,   757,   404,   759,   814,   665,
   211,   204,   211,   538,   211,   604,  1135,   211,   394,   204,
   757,   395,   759,   204,   765,   211,   204,   453,   205,   302,
   211,  1127,   211,  1130,  1114,   392,   205,   644,   768,   765,
   205,   206,   453,   205,   211,   211,   211,   664,   402,   663,
   393,   307,   874,   768,  1015,   204,  1015,  -398,  -398,  -398,
   311,   798,  -398,  -398,    77,   996,   714,   875,    77,   984,
   312,   679,   205,   511,   512,   513,   715,   711,   313,   971,
    77,   984,   716,   710,   805,   206,   118,   234,   413,   118,
   118,   118,   234,   206,   234,    77,  1057,   206,   434,   431,
   206,   314,     2,   118,  1093,   713,   234,   234,   316,   118,
  1117,   662,  1118,  1089,   712,  1091,   446,   317,   395,   884,
   235,   714,   335,   487,   614,   235,   324,   235,  1119,   206,
   439,   715,   711,   473,   894,   307,  1130,   716,   710,   235,
   235,   336,   682,   994,   995,    77,   996,    77,   996,   814,
   395,   997,  1027,  1072,   211,  1073,  1035,   690,   677,   691,
   713,   337,   211,   395,   211,   973,   974,   469,   722,   712,
   397,  1074,   338,   707,   603,   709,   719,   121,   122,   968,
  -621,   307,   403,   453,  -621,   405,   394,   339,   388,   395,
   488,   470,   966,   469,   411,   975,   976,   395,   491,   340,
   492,   469,  -398,   675,  -398,  -398,  -398,  -398,   211,   977,
  -398,  -398,  -398,  -398,   422,   395,  -398,   204,  -398,   592,
  -398,  -398,  -398,   395,   612,  -398,  -398,   594,   613,  -667,
   211,   546,   831,   395,   205,  -671,   211,   629,   118,    77,
    78,   134,   546,   982,    81,    82,  1108,  -668,   118,  1111,
   118,   558,   118,   983,   982,   905,   411,  1160,  1028,   395,
   118,  1029,   300,   118,   983,  1107,  1050,   118,  1051,   375,
   376,   377,   553,   718,   243,   244,   245,   246,   247,   248,
   249,   250,   251,   252,  1052,  -267,   395,   254,   717,   307,
   829,   206,   234,  -608,    77,    78,   134,  -608,   211,    81,
    82,  -267,   470,   448,   378,   379,   963,   118,   118,   955,
   956,   307,   388,   953,   954,   272,  1111,   964,  -574,   277,
   389,   279,  -574,   283,   965,   235,   119,   390,   285,   119,
    77,    78,   134,   135,   553,    81,    82,  -573,   293,   468,
   294,  -573,   395,   961,   962,   391,   211,   211,   957,   958,
   959,   960,   546,  -597,   118,   204,   398,  -597,  1084,  -502,
   453,   211,  -572,   399,   211,   211,  -572,   631,   404,   546,
     2,  -266,   205,   471,   992,   809,   536,     2,  -670,  -398,
   675,  -398,   363,   553,   993,  1126,  1072,   395,  1073,  -398,
   118,   878,   300,   406,   832,   833,   834,   835,   836,   837,
   553,   642,    77,   984,  1074,   714,   171,   395,  1031,  1011,
   119,   927,  1012,    77,   984,   715,   711,   171,   988,   395,
   407,   716,   710,   931,  -266,  -669,   471,  -611,  -591,   206,
   412,  -611,  -591,   600,     2,   211,   211,   259,   419,   739,
  1041,  -449,   471,   119,   713,  -596,   418,   211,   211,  -596,
   211,  1025,   423,   712,   259,   380,   381,  1053,   671,   301,
  -612,  1143,   424,    97,  -612,   118,    97,   118,   426,   429,
   315,   642,   693,   430,   241,   242,   118,   445,   471,   118,
   118,   211,   812,  -266,   642,   601,     2,   473,   380,   381,
  1159,  1117,   442,  1118,   739,   307,   441,   380,   381,   443,
  -595,  -266,  -673,   471,  -595,   655,   656,   451,  -594,  1119,
   454,     2,  -594,  1042,  -593,   444,   809,   815,  -593,    77,
    78,   134,  1054,   450,    81,    82,    77,    78,   134,   994,
   995,    81,    82,    77,   996,   461,   929,   997,  -398,  -398,
  -398,  -592,  1077,  -398,  -398,  -592,  -606,    97,  -613,  -589,
  -606,   467,  -613,  -589,  -673,   950,   951,   952,  1094,   375,
   376,   377,   264,   265,   266,   267,   268,   269,   270,   271,
  1102,   273,   386,   387,   276,  -590,   380,   381,   476,  -590,
    97,   211,  -614,    77,    78,   134,  -614,   477,    81,    82,
   289,   290,   292,  -586,  1121,   478,   298,  -586,  -587,    77,
    78,   134,  -587,   119,    81,    82,   436,   438,   440,   540,
   380,   381,   321,  1141,  1175,   280,   281,   282,  -578,   331,
   119,   118,  -578,   812,   545,   480,   301,   481,   382,   383,
  1032,   118,   531,   532,   454,    77,    78,   134,   482,   559,
    81,    82,   384,   385,   564,  -581,   567,   899,  1186,  -581,
   899,  -673,  -673,   483,   576,  -616,  -673,  -673,   581,  -616,
    77,    78,   134,   484,  -617,    81,    82,   920,  -617,   395,
   689,   382,   383,   479,  -605,   489,   864,   865,  -605,   321,
   382,   383,   860,   861,   364,   384,   385,   375,   376,   377,
   866,   867,   989,   259,   384,   385,  1012,   496,   259,   541,
  1008,  1120,   500,   501,   502,   503,   504,   505,   506,   507,
   508,   509,   510,  1142,   862,   863,  1012,   425,   365,   366,
   367,   368,   369,   370,   371,   372,   373,   374,   359,   544,
   360,   612,  -398,   530,   543,  1034,   868,   869,  -609,   547,
    97,   432,  -609,   435,   437,   561,   118,   118,  -398,   378,
   379,   361,   362,   560,  -601,   119,  -602,    97,  -601,   562,
  -602,   906,   656,   298,  -603,   570,   321,   119,  -603,   119,
   899,  -599,   899,   899,   899,  -599,  -266,   301,   739,  -582,
   585,   565,  -580,  -582,   590,   472,  -580,   571,   454,  1046,
   577,   989,   989,   841,  1045,   842,   580,  -398,   578,  1060,
   284,  1008,  1008,   586,  -584,  -585,   321,   676,  -584,  -585,
  -583,   587,   681,  -398,  -583,   591,   843,   844,  1060,   742,
   743,   744,   745,   118,   615,   616,   746,   747,   748,   749,
   750,   751,   752,  1021,  1022,   118,  1087,  1096,   118,   559,
   599,   741,   857,   858,   859,  1068,  1069,  1070,   558,   395,
  1105,  1123,  1124,   395,   307,   274,   275,   595,   605,   989,
   118,   118,   989,   607,  1060,  1060,   610,  1181,   608,   611,
   628,   119,   632,  1008,   633,  1008,  1008,   635,   643,   276,
  1008,   646,   118,   118,   649,  1008,   651,   899,   307,   899,
   652,   118,    97,   654,   657,   669,   667,   672,   683,   563,
   674,   566,   680,   572,    97,   118,    97,   301,   200,   232,
   232,   579,   684,   778,   298,   845,   774,   781,   840,   794,
   796,   588,   742,   816,   818,   819,   989,   118,   118,  1060,
   822,   823,   827,   596,  1008,   828,   472,   870,   602,   303,
   494,   432,   871,   876,   150,   151,   152,   153,   154,   155,
   686,   872,   885,   907,   118,   886,   873,   879,   887,   306,
   918,   156,   157,   158,   915,   923,   890,  1087,   893,   911,
   888,   889,   306,   306,   306,   306,   306,   306,  1008,   333,
   334,   924,   570,   928,   570,   159,   930,   932,   969,   970,
   171,   972,  1030,   799,  1033,  1066,   590,   119,   790,  1067,
   318,  1076,   912,  1083,  1100,  1095,   303,  1120,    97,  1122,
  1138,   150,   151,   152,   153,   154,   155,  1148,  1145,   846,
  1149,   645,  1151,  1153,   432,  1158,  1154,   168,   156,   157,
   158,  1156,  1169,   191,  1170,  1166,  1172,   659,   660,  1177,
  1179,  1182,  1180,  1183,   298,  1188,  1189,   253,   452,   200,
  1131,   999,   159,   847,   848,   849,   850,   851,   852,   853,
   854,   855,   856,   602,  1184,  1040,  1171,   788,   432,  1106,
  1047,  1161,  1079,   935,   574,   892,   648,  1176,   687,   688,
   786,   784,   921,   321,   286,   321,   474,   808,   193,   223,
   223,   239,   421,   200,   168,   609,  1155,   537,    77,   304,
   305,   200,   171,  1039,     0,   200,   825,  1014,   200,     0,
   776,     0,     0,     0,     0,     0,   232,   410,   783,     0,
   785,   232,     0,   232,   792,   793,  1026,   790,     0,   797,
   790,     0,     0,   588,   810,   232,   232,   200,   119,   472,
     0,     0,     0,     0,     0,     0,     0,     0,   926,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   321,     0,
     0,     0,     0,   306,     0,    77,   304,   305,     0,   171,
     0,     0,   319,     0,   320,     0,     0,     0,   933,   496,
     0,     0,     0,     0,   939,   940,   941,   942,   943,   944,
   945,   946,   947,   948,   949,     0,     0,   306,   306,   306,
   306,   306,   306,   306,   306,   306,   306,   306,   306,   306,
   306,   306,   306,     0,     0,     0,     0,     0,   191,     0,
  1082,     0,     0,     0,     0,     0,   191,     0,     0,   193,
   191,     0,     0,   191,   790,     0,     0,     0,   896,     0,
     0,   408,     0,     0,     0,     0,     0,   306,     0,     0,
     0,     0,     0,   196,   229,   229,     0,     0,   493,     0,
     0,     0,   191,  1036,  1037,     0,     0,     0,     0,     0,
     0,     0,     0,   193,   919,   810,     0,   602,     0,     0,
     0,   193,     0,     0,     0,   193,     0,     0,   193,     0,
     0,     0,     0,   306,  1147,     0,   223,     0,   306,   200,
     0,   223,     0,   223,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   223,   223,   193,     0,     0,
     0,   232,     0,     0,     0,     0,     0,     0,   459,     0,
     0,     0,     0,     0,     0,     0,   462,   463,   464,   465,
   119,     0,   197,   230,   230,     0,     0,     0,     0,   306,
     0,   306,   119,   621,   623,  1099,     0,   459,     0,     0,
   790,     0,  1013,     0,     0,     0,     0,     0,   459,  1020,
     0,     0,     0,     0,     0,     0,     0,  1112,  1113,     0,
     0,     0,     0,     0,  1185,   497,     0,     0,     0,     0,
     0,     0,     0,     0,   196,     0,     0,     0,     0,  1136,
  1137,   306,     0,     0,     0,     0,     0,     0,   119,     0,
     0,     0,     0,   198,   231,   231,     0,     0,     0,     0,
     0,     0,   119,   306,   191,     0,     0,     0,     0,     0,
     0,     0,   542,     0,     0,     0,     0,   200,   196,     0,
     0,     0,     0,     0,  1162,  1163,   196,     0,     0,     0,
   196,     0,   708,   196,     0,     0,     0,     0,     0,     0,
     0,   229,     0,     0,     0,     0,   229,     0,   229,     0,
     0,   119,     0,     0,  1081,     0,     0,    97,     0,   193,
   229,   229,   196,   197,     0,     0,     0,     0,     0,   810,
     0,  1098,     0,     0,     0,     0,   432,     0,     0,  1103,
  1104,   223,     0,     0,     0,     0,     0,   708,     0,     0,
     0,   208,   237,   237,     0,     0,     0,     0,   306,   306,
   306,   306,   306,   306,   838,   839,     0,   197,     0,     0,
     0,     0,     0,     0,     0,   197,     0,     0,     0,   197,
  1140,     0,   197,     0,     0,    97,     0,  1144,  1146,     0,
   230,     0,     0,   618,   198,   230,     0,   230,     0,   810,
     0,     0,   191,     0,     0,   210,   238,   238,     0,   230,
   230,   197,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,  1165,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   198,     0,
     0,     0,     0,     0,  1173,  1174,   198,   306,    97,     0,
   198,  1178,     0,   198,     0,     0,     0,   193,     0,     0,
   465,   231,   789,  1092,     0,     0,   231,   303,   231,     0,
     0,     0,   150,   151,   152,   153,   154,   155,     0,     0,
   231,   231,   198,     0,   196,   459,     0,   459,   306,   156,
   157,   158,   208,   694,     0,     0,     0,   740,     0,     0,
     0,     0,     0,     0,     0,     0,   229,     0,     0,     0,
     0,     0,     0,   159,     0,     0,     0,     0,     0,   306,
   306,   306,   306,   306,   306,   306,   306,   306,   306,   306,
   306,   306,   306,   306,   306,   306,   208,   306,     0,     0,
     0,     0,     0,     0,   208,     0,   210,     0,   208,   824,
     0,   208,     0,     0,     0,   168,  -248,     0,     0,   237,
   830,     0,   303,     0,   237,     0,   237,   150,   151,   152,
   153,   154,   155,   197,     0,     0,     0,     0,   237,   237,
   208,     0,     0,     0,   156,   157,   158,     0,     0,     0,
   210,     0,     0,     0,   306,   230,     0,     0,   210,     0,
     0,     0,   210,     0,     0,   210,     0,     0,   159,     0,
     0,     0,     0,   238,     0,     0,     0,     0,   238,     0,
   238,     0,   196,     0,     0,     0,    77,   304,   305,     0,
   171,   708,   238,   238,   210,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   198,     0,  -528,     0,     0,     0,
   168,   343,     0,     0,     0,     0,   150,   151,   152,   153,
   154,   155,     0,     0,     0,     0,   231,     0,     0,     0,
     0,     0,   136,   156,   157,   158,     0,   137,   138,   139,
     0,   140,   141,   142,   143,   144,   145,   146,   147,   148,
  -528,   624,     0,     0,     0,   149,     0,   159,     0,     0,
   150,   151,   152,   153,   154,   155,     0,   936,     0,     0,
     0,   197,     0,  -266,  -266,     0,     0,   156,   157,   158,
     0,    77,   304,   305,     0,   171,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   168,
     0,   159,   208,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    -1,     1,     0,
     0,     0,     0,     0,   237,   161,   162,   163,   164,   165,
   166,     0,     0,     0,     0,     0,     0,     0,     0,   167,
     0,  -266,   198,   168,     0,     0,     0,   465,     0,     0,
     0,     2,     0,     0,     0,     0,   210,     0,     0,     0,
     0,     0,     3,     0,     0,     0,   306,     0,     0,     0,
    77,   304,   305,     0,   171,     0,     0,     0,   238,   306,
     0,     0,     0,     0,  -398,  -398,  -398,     0,     4,     0,
     0,     0,  1038,     5,     6,     7,     0,     0,     0,     0,
   306,     0,     0,     0,     0,     0,     0,     8,     9,    10,
     0,     0,     0,     0,    77,   169,   170,     0,   171,   172,
    82,     0,     0,     0,     0,     0,    11,    12,    13,     0,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
   208,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
    73,    74,    75,    76,   210,    -2,     1,     0,     0,     0,
    77,    78,    79,    80,     0,    81,    82,    83,     0,     0,
     0,     0,     0,    20,    21,    22,    23,     0,    24,  -266,
     0,     0,     0,    29,    30,     0,     0,    33,    34,     2,
    36,    37,    38,    39,     0,     0,     0,     0,     0,     0,
     3,     0,     0,     0,     0,    51,    52,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,  -398,  -398,  -398,     0,     4,     0,     0,     0,
    76,     5,     6,     7,     0,     0,     0,     0,     0,     0,
    80,     0,     0,     0,     0,     8,     9,    10,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    11,    12,    13,     0,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,     0,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
    65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
    75,    76,     0,     0,     0,     0,     0,     0,    77,    78,
    79,    80,   136,    81,    82,    83,     0,   137,   138,   139,
     0,   140,   141,   142,   143,   144,   145,   146,   147,   148,
  -528,   534,     0,     0,     0,   149,     0,     0,     0,     0,
   150,   151,   152,   153,   154,   155,     0,     0,     0,     0,
     0,     0,     0,  -266,  -266,     0,     3,   156,   157,   158,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,  -398,  -398,
  -398,   159,     4,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   161,   162,   163,   164,   165,
   166,     0,     0,     0,     0,     0,     0,     0,     0,   167,
    11,    12,    13,   168,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,     0,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    73,    74,    75,    76,     0,     0,
     0,     0,     0,     0,    77,   169,   535,    80,   171,   172,
    82,    83,   136,     0,     0,     0,     0,   137,   138,   139,
     0,   140,   141,   142,   143,   144,   145,   146,   147,   148,
  -528,     0,     0,     0,     0,   149,     0,     0,     0,     0,
   150,   151,   152,   153,   154,   155,     0,     0,     0,     0,
     0,     0,     0,  -266,  -266,     0,     0,   156,   157,   158,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,  -266,  -266,
  -266,   159,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   161,   162,   163,   164,   165,
   166,     0,     0,     0,     0,     0,     0,     0,     0,   167,
  -266,  -266,  -266,   168,  -266,  -266,  -266,  -266,  -266,  -266,
  -266,  -266,  -266,  -266,     0,  -266,  -266,  -266,  -266,  -266,
  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,
  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,
  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,
  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,
  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,     0,     0,
     0,     0,     0,     0,    77,   169,   170,  -266,   171,   172,
    82,  -266,   213,     0,     0,     0,     0,   137,   138,   139,
     0,     0,   214,   142,   143,   144,   145,   146,   147,   215,
  -528,  -532,     0,     0,     0,   216,     0,     0,     0,     0,
   150,   151,   152,   153,   154,   155,     0,     0,     0,     0,
     0,     0,     0,  -266,  -266,     0,     0,   156,   157,   158,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,  -266,  -266,
  -266,   159,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   161,   162,   163,   164,   165,
   166,     0,     0,     0,     0,     0,     0,     0,     0,   167,
  -266,  -266,  -266,   168,  -266,  -266,  -266,  -266,  -266,  -266,
  -266,  -266,  -266,  -266,     0,  -266,  -266,  -266,  -266,  -266,
  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,
  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,
  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,
  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,
  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,     0,     0,
     0,     0,     0,     0,    77,   169,   170,  -266,   171,   217,
   218,  -266,   213,     0,     0,     0,     0,   137,   138,   139,
     0,     0,   214,   142,   143,   144,   145,   146,   147,   215,
  -476,  -476,     0,     0,     0,   216,  -476,     0,     0,     0,
   150,   151,   152,   153,   154,   155,     0,     0,     0,     0,
     0,     0,     0,  -266,  -266,   136,     0,   156,   157,   158,
   137,   138,   139,     0,   140,   141,   142,   143,   144,   145,
   146,   147,   148,  -528,     0,     0,     0,     0,   149,     0,
     0,   159,     0,   150,   151,   152,   153,   154,   155,     0,
     0,     0,     0,     0,     0,     0,  -266,  -266,     0,     0,
   156,   157,   158,     0,  -476,   161,   162,   163,   164,   165,
   166,     0,     0,     0,     0,     0,     0,     0,     0,   167,
     0,     0,     0,   168,   159,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   160,   161,   162,
   163,   164,   165,   166,     0,     0,     0,     0,     0,     0,
     0,     0,   167,     0,     0,     0,   168,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    77,   169,   170,     0,   171,   217,
   218,     0,     0,   136,     0,     0,     0,     0,   137,   138,
   139,     0,   140,   141,   142,   143,   144,   145,   146,   147,
   148,  -528,     0,     0,     0,     0,   149,     0,     0,     0,
     0,   150,   151,   152,   153,   154,   155,    77,   169,   170,
     0,   171,   172,    82,  -266,  -266,   213,     0,   156,   157,
   158,   137,   138,   139,     0,     0,   214,   142,   143,   144,
   145,   146,   147,   215,  -528,  -532,     0,     0,     0,   216,
     0,     0,   159,     0,   150,   151,   152,   153,   154,   155,
     0,     0,     0,     0,     0,     0,     0,  -266,  -266,     0,
     0,   156,   157,   158,     0,  -503,   161,   162,   163,   164,
   165,   166,     0,     0,     0,     0,     0,     0,     0,     0,
   167,     0,     0,     0,   168,   159,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,  -472,   161,
   162,   163,   164,   165,   166,     0,     0,     0,     0,     0,
     0,     0,     0,   167,     0,     0,     0,   168,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    77,   169,   170,     0,   171,
   172,    82,     0,     0,   213,     0,     0,     0,     0,   137,
   138,   139,     0,     0,   214,   142,   143,   144,   145,   146,
   147,   215,  -528,  -532,     0,     0,     0,   216,     0,     0,
     0,     0,   150,   151,   152,   153,   154,   155,    77,   169,
   170,     0,   171,   217,   218,  -266,  -266,   136,     0,   156,
   157,   158,   137,   138,   139,     0,   140,   141,   142,   143,
   144,   145,   146,   147,   148,  -528,     0,     0,     0,     0,
   149,     0,     0,   159,     0,   150,   151,   152,   153,   154,
   155,     0,     0,     0,     0,     0,     0,     0,  -266,  -266,
     0,     0,   156,   157,   158,     0,     0,   161,   162,   163,
   164,   165,   166,     0,     0,     0,     0,     0,     0,     0,
     0,   167,     0,     0,     0,   168,   159,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   161,   162,   163,   164,   165,   166,     0,     0,     0,     0,
     0,     0,     0,     0,   167,     0,     0,     0,   168,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    77,   169,   170,     0,
   171,   217,   218,     0,     0,     0,     0,     0,     0,     0,
   137,   138,   139,     0,   140,   141,   142,   143,   144,   145,
   146,   147,   215,  -528,   551,     0,     0,     0,   343,     0,
     0,     0,     0,   150,   151,   152,   153,   154,   155,    77,
   169,   170,     0,   171,   172,    82,  -266,  -266,     0,     3,
   156,   157,   158,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   159,     4,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   161,   162,
   163,   164,   165,   166,     0,     0,     0,     0,     0,     0,
     0,     0,   552,    11,    12,    13,   168,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,     0,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,     0,     0,     0,     0,     0,     0,    77,   169,   535,
    80,   171,   172,    82,    83,   137,   138,   139,     0,   140,
   141,   142,   143,   144,   145,   146,   147,   215,  -528,   625,
     0,     0,     0,   343,     0,     0,     0,     0,   150,   151,
   152,   153,   154,   155,     0,     0,     0,     0,     0,     0,
     0,  -266,  -266,     0,     3,   156,   157,   158,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   159,
     4,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   161,   162,   163,   164,   165,   166,     0,
     0,     0,     0,     0,     0,     0,     0,   167,    11,    12,
    13,   168,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,     0,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
    51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
    61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
    71,    72,    73,    74,    75,    76,     0,     0,     0,     0,
     0,     0,    77,   169,   535,    80,   171,   172,    82,    83,
   137,   138,   139,     0,   140,   141,   142,   143,   144,   145,
   146,   147,   215,  -528,   637,     0,     0,     0,   343,     0,
     0,     0,     0,   150,   151,   152,   153,   154,   155,     0,
     0,     0,     0,     0,     0,     0,  -266,  -266,     0,     3,
   156,   157,   158,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   159,     4,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   161,   162,
   163,   164,   165,   166,     0,     0,     0,     0,     0,     0,
     0,     0,   638,    11,    12,    13,   168,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,     0,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,     0,     0,     0,     0,     0,     0,    77,   169,   535,
    80,   171,   172,    82,    83,   137,   138,   139,     0,   140,
   141,   142,   143,   144,   145,   146,   147,   215,  -528,   636,
     0,     0,     0,   343,     0,     0,     0,     0,   150,   151,
   152,   153,   154,   155,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   156,   157,   158,   137,   138,
   139,     0,   140,   141,   142,   143,   144,   145,   146,   147,
   215,  -528,   640,     0,     0,     0,   343,     0,     0,   159,
     0,   150,   151,   152,   153,   154,   155,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   156,   157,
   158,     0,     0,   161,   162,   163,   164,   165,   166,     0,
     0,     0,     0,     0,     0,     0,     0,   167,     0,     0,
     0,   168,   159,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   161,   162,   163,   164,
   165,   166,     0,     0,     0,     0,     0,     0,     0,     0,
   641,   137,   138,   139,   168,   140,   141,   142,   143,   144,
   145,   146,   147,   215,  -528,   692,     0,     0,     0,   343,
     0,     0,     0,     0,   150,   151,   152,   153,   154,   155,
     0,     0,    77,   169,   170,     0,   171,   172,    82,     0,
     0,   156,   157,   158,   137,   138,   139,     0,   140,   141,
   142,   143,   144,   145,   146,   147,   215,  -528,   770,     0,
     0,     0,   343,     0,     0,   159,     0,   150,   151,   152,
   153,   154,   155,     0,     0,    77,   169,   170,     0,   171,
   172,    82,     0,     0,   156,   157,   158,     0,     0,   161,
   162,   163,   164,   165,   166,     0,     0,     0,     0,     0,
     0,     0,     0,   167,     0,     0,     0,   168,   159,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   161,   162,   163,   164,   165,   166,     0,     0,
     0,     0,     0,     0,     0,     0,   167,   137,   138,   139,
   168,   140,   141,   142,   143,   144,   145,   146,   147,   215,
  -528,   771,     0,     0,     0,   343,     0,     0,     0,     0,
   150,   151,   152,   153,   154,   155,     0,     0,    77,   169,
   170,     0,   171,   172,    82,     0,     0,   156,   157,   158,
   137,   138,   139,     0,   140,   141,   142,   143,   144,   145,
   146,   147,   215,  -528,   773,     0,     0,     0,   343,     0,
     0,   159,     0,   150,   151,   152,   153,   154,   155,     0,
     0,    77,   169,   170,     0,   171,   172,    82,     0,     0,
   156,   157,   158,     0,     0,   161,   162,   163,   164,   165,
   166,     0,     0,     0,     0,     0,     0,     0,     0,   772,
     0,     0,     0,   168,   159,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   161,   162,
   163,   164,   165,   166,     0,     0,     0,     0,     0,     0,
     0,     0,   167,   137,   138,   139,   168,   140,   141,   142,
   143,   144,   145,   146,   147,   215,  -528,   895,     0,     0,
     0,   343,     0,     0,     0,     0,   150,   151,   152,   153,
   154,   155,     0,     0,    77,   169,   170,     0,   171,   172,
    82,     0,     0,   156,   157,   158,   137,   138,   139,     0,
   140,   141,   142,   143,   144,   145,   146,   147,   215,  -528,
     0,     0,     0,     0,   343,     0,     0,   159,     0,   150,
   151,   152,   153,   154,   155,     0,     0,    77,   169,   170,
     0,   171,   172,    82,     0,     0,   156,   157,   158,     0,
     0,   161,   162,   163,   164,   165,   166,     0,     0,     0,
     0,     0,     0,     0,     0,   167,     0,     0,     0,   168,
   159,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   161,   162,   163,   164,   165,   166,
  -132,     0,     0,     0,     0,  -132,     0,     0,   167,     0,
     0,     0,   168,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     3,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    77,   169,   170,     0,   171,   172,    82,     0,     0,     0,
     0,     0,     4,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,  -531,
     0,     0,     0,    77,   169,   170,     0,   171,   172,    82,
    11,    12,    13,     0,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,     0,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    73,    74,    75,    76,     0,     0,
     0,     0,     0,     0,     0,     0,   131,    80,    11,    12,
    13,    83,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,     0,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
    51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
    61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
    71,    72,    73,    74,    75,    76,  -671,     0,     0,     0,
     0,     0,     0,     0,   131,    80,     0,     0,     0,    83,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,  -673,  -673,  -673,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
  -673,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,  -673,  -673,  -673,     0,  -673,  -673,  -673,
  -673,  -673,  -673,  -673,  -673,  -673,  -673,     0,  -673,  -673,
  -673,  -673,  -673,  -673,  -673,  -673,  -673,  -673,  -673,  -673,
  -673,  -673,  -673,  -673,  -673,  -673,  -673,  -673,  -673,  -673,
  -673,  -673,  -673,  -673,  -673,  -673,  -673,  -673,  -673,  -673,
  -673,  -673,  -673,  -673,  -673,  -673,  -673,  -673,  -673,  -673,
  -673,  -673,  -673,  -673,  -673,  -673,  -673,  -673,  -673,  -673,
  -673,     0,     0,     0,     0,     0,   789,     0,     0,     0,
  -673,   303,     0,     0,  -673,     0,   150,   151,   152,   153,
   154,   155,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   156,   157,   158,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   159,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
  -266,     0,     0,     0,     0,     0,     0,     0,     0,   168,
     2,   303,     0,     0,   597,     0,   150,   151,   152,   153,
   154,   155,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   156,   157,   158,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   159,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    77,   304,   305,     0,   171,    11,    12,    13,     0,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,   168,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
    34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
    74,    75,    76,     0,     0,     0,     0,     0,     0,    77,
    78,    79,    80,     0,    81,    82,    83,     0,     0,     0,
    77,   304,   305,   303,   171,     0,   678,     0,   150,   151,
   152,   153,   154,   155,   303,   934,     0,     0,     0,   150,
   151,   152,   153,   154,   155,   156,   157,   158,     0,     0,
     0,     0,     0,     0,   303,  -248,   156,   157,   158,   150,
   151,   152,   153,   154,   155,     0,     0,     0,     0,   159,
     0,     0,     0,     0,     0,     0,   156,   157,   158,   303,
   159,     0,     0,     0,   150,   151,   152,   153,   154,   155,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   159,   156,   157,   158,     0,     0,     0,     0,   332,     0,
     0,   168,     0,   150,   151,   152,   153,   154,   155,     0,
     0,     0,   168,     0,     0,   159,     0,     0,   620,     0,
   156,   157,   158,   150,   151,   152,   153,   154,   155,   622,
     0,     0,   168,     0,   150,   151,   152,   153,   154,   155,
   156,   157,   158,     0,   159,     0,     0,     0,     0,     0,
     0,   156,   157,   158,     0,     0,     0,   168,     0,     0,
     0,     0,     0,     0,   159,     0,     0,     0,     0,     0,
     0,     0,    77,   304,   305,   159,   171,     0,     0,     0,
     0,     0,     0,    77,   304,   305,   168,   171,   695,     0,
     0,     0,     0,   696,   697,   698,   699,   700,   701,     0,
     0,     0,     0,    77,   304,   305,   168,   171,     0,     0,
   156,   702,   703,     0,     0,     0,     0,   168,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    77,   304,
   305,     0,   171,     0,   704,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    77,   304,   305,
     0,   171,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   168,    77,   304,   305,
     0,   171,     0,     0,     0,  -192,  -192,     0,    77,   304,
   305,     0,   171,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    77,   705,   706,
     0,   171,    11,    12,    13,     0,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,     0,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
     3,     0,     0,     0,     0,     0,     0,     0,   131,    80,
     0,     0,     0,    83,     0,     0,     0,     0,     0,     0,
     0,     0,  -398,  -398,  -398,     0,     4,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    11,    12,    13,     0,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,     0,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
    65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
    75,    76,     3,     0,     0,     0,     0,     0,     0,     0,
   131,    80,     0,     0,     0,    83,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     4,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    11,    12,    13,     0,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
     0,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
    73,    74,    75,    76,     3,     0,     0,     0,     0,     0,
    77,  1043,   131,    80,     0,     0,     0,    83,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     4,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    11,    12,
    13,     0,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,     0,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
    51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
    61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
    71,    72,    73,    74,    75,    76,  -398,  -398,  -398,     0,
     0,     0,     0,     0,   131,    80,     0,     0,     0,    83,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    11,    12,
    13,     0,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,     0,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
    51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
    61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
    71,    72,    73,    74,    75,    76,     8,     9,    10,     0,
     0,     0,     0,     0,   131,    80,     0,     0,     0,    83,
     0,     0,     0,     0,     0,    11,    12,    13,     0,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,     0,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
    34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
    74,    75,    76,     0,     0,     0,     0,     0,     0,     0,
     0,   131,    80,    11,    12,    13,    83,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,     0,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,     0,     0,     0,     0,     0,     0,     0,     0,   131,
    80,     0,     0,     0,    83
};

static const short yycheck[] = {     0,
   473,   341,     3,     2,     0,   278,     7,     8,     9,    10,
   441,   117,     0,   343,   388,   595,     8,   380,   381,   630,
   295,   378,   379,   529,   630,   389,   630,   630,   668,   599,
    21,   227,   390,     8,    25,   297,   527,   137,   150,   151,
   152,   153,   154,   155,   992,   426,    27,   634,   891,   780,
   451,   386,   387,     0,   883,   653,   382,   383,   384,   385,
     0,   789,   258,     3,   792,     5,   795,   538,    19,     5,
     9,    10,   801,   216,   685,   634,     5,   634,   221,   685,
   223,   685,   685,    84,   555,   425,     5,   910,    84,    25,
     8,    28,   235,    18,   634,    24,    84,  1055,  1056,    24,
    26,    18,    28,     9,    10,    34,    25,    44,   634,    34,
   680,    24,    24,    21,    26,    18,   117,    25,    44,    24,
    23,    34,    34,  1071,   630,   124,    24,   900,  1076,    22,
   903,   471,   133,    26,   133,    28,    34,    84,    21,   630,
     6,     7,    25,   144,    84,    53,    54,    28,   149,   992,
   993,    44,    26,   982,   983,   795,    39,   149,    98,     5,
    34,   801,  1120,    44,    32,    33,   167,   754,   896,   109,
   110,   902,    86,   904,   149,     8,    24,  1125,    24,   685,
   581,   779,   769,    18,   782,   914,    34,  1010,    34,   903,
   452,    21,   193,   133,   685,   754,   187,   754,   671,   580,
   201,   193,   203,   399,   205,   478,   187,   208,    18,   201,
   769,    21,   769,   205,   754,   216,   208,     5,   193,    24,
   221,  1064,   223,  1066,  1053,    41,   201,   557,   754,   769,
   205,   149,     5,   208,   235,   236,   237,    25,   203,   579,
    56,   341,    41,   769,  1017,   237,  1019,   183,   184,   185,
    24,     5,   188,   189,   183,   184,   630,    56,   183,   184,
    24,   601,   237,   375,   376,   377,   630,   630,    24,   880,
   183,   184,   630,   630,   914,   193,   277,   216,   421,   280,
   281,   282,   221,   201,   223,   183,   184,   205,   561,   277,
   208,    24,    34,   294,  1022,   630,   235,   236,    18,   300,
    26,   576,    28,  1017,   630,  1019,   294,    18,    21,   754,
   216,   685,    24,   643,    27,   221,   149,   223,    44,   237,
    19,   685,   685,   322,   769,   425,  1169,   685,   685,   235,
   236,    16,   605,   179,   180,   183,   184,   183,   184,   812,
    21,   187,   922,    26,   345,    28,    27,   620,   918,   622,
   685,    16,   353,    21,   355,    87,    88,    25,   969,   685,
   193,    44,    16,   969,   476,   969,   969,   109,   110,   875,
    21,   471,   205,     5,    25,   208,    18,    16,    29,    21,
   345,   321,   873,    25,    18,   117,   118,    21,   353,    15,
   355,    25,    24,    25,    26,   183,   184,   185,   399,   131,
   188,   189,    34,    18,   237,    21,    21,   399,    23,    25,
   183,   184,   185,    21,    21,   188,   189,    25,    25,    22,
   421,   417,   695,    21,   399,    22,   427,    25,   429,   183,
   184,   185,   428,    24,   188,   189,    27,    22,   439,  1050,
   441,   429,   443,    34,    24,   785,    18,    27,    25,    21,
   451,    28,   451,   454,    34,    25,    26,   458,    28,    34,
    35,    36,   427,   969,    66,    67,    68,    69,    70,    71,
    72,    73,    74,    75,    44,    24,    21,    26,   969,   579,
    25,   399,   421,    21,   183,   184,   185,    25,   489,   188,
   189,    24,   432,    26,    32,    33,   870,   498,   499,   862,
   863,   601,    29,   860,   861,   107,  1117,   871,    21,   111,
    39,   113,    25,   115,   872,   421,     0,    40,   120,     3,
   183,   184,   185,     7,   489,   188,   189,    21,   130,    18,
   132,    25,    21,   868,   869,    55,   537,   538,   864,   865,
   866,   867,   538,    21,   545,   537,    93,    25,    22,    93,
     5,   552,    21,    19,   555,   556,    25,   545,   187,   555,
    34,    24,   537,    26,    24,   671,   399,    34,    22,    24,
    25,    26,   174,   538,    34,    25,    26,    21,    28,    34,
   581,    25,   581,    22,   696,   697,   698,   699,   700,   701,
   555,   556,   183,   184,    44,   969,   187,    21,   928,    18,
    84,    25,    21,   183,   184,   969,   969,   187,   883,    21,
    24,   969,   969,    25,    24,    22,    26,    21,    21,   537,
    93,    25,    25,  1096,    34,   626,   627,    18,    20,   630,
    21,    25,    26,   117,   969,    21,    19,   638,   639,    25,
   641,   916,    93,   969,    18,    49,    50,    21,   588,   133,
    21,  1082,    27,     0,    25,   656,     3,   658,    24,   261,
   144,   626,   627,    18,    11,    12,   667,    23,    26,   670,
   671,   672,   671,    24,   639,    26,    34,   676,    49,    50,
    25,    26,    18,    28,   685,   785,   288,    49,    50,   291,
    21,    24,    34,    26,    25,    20,    21,   299,    21,    44,
   302,    34,    25,   978,    21,    18,   812,   672,    25,   183,
   184,   185,   987,    24,   188,   189,   183,   184,   185,   179,
   180,   188,   189,   183,   184,    22,   826,   187,   183,   184,
   185,    21,  1007,   188,   189,    25,    21,    84,    21,    21,
    25,    18,    25,    25,    86,   857,   858,   859,  1023,    34,
    35,    36,    99,   100,   101,   102,   103,   104,   105,   106,
  1033,   108,    53,    54,   111,    21,    49,    50,    25,    25,
   117,   772,    21,   183,   184,   185,    25,    25,   188,   189,
   127,   128,   129,    21,  1059,    24,   133,    25,    21,   183,
   184,   185,    25,   277,   188,   189,   280,   281,   282,     9,
    49,    50,   149,  1078,  1144,    67,    68,    69,    21,   156,
   294,   812,    25,   812,   416,    18,   300,    18,    37,    38,
   932,   822,    42,    43,   426,   183,   184,   185,    18,   431,
   188,   189,    51,    52,   436,    21,   438,   777,  1178,    25,
   780,   183,   184,    18,   446,    21,   188,   189,   450,    25,
   183,   184,   185,    18,    21,   188,   189,   190,    25,    21,
    22,    37,    38,   335,    21,    19,    37,    38,    25,   216,
    37,    38,    32,    33,    23,    51,    52,    34,    35,    36,
    51,    52,   883,    18,    51,    52,    21,   359,    18,    11,
   891,    21,   364,   365,   366,   367,   368,   369,   370,   371,
   372,   373,   374,    18,    49,    50,    21,   254,    57,    58,
    59,    60,    61,    62,    63,    64,    65,    66,    24,    24,
    26,    21,    28,   395,    25,    25,    53,    54,    21,    11,
   277,   278,    25,   280,   281,    21,   937,   938,    44,    32,
    33,    47,    48,    89,    21,   429,    21,   294,    25,    19,
    25,    20,    21,   300,    21,   439,   303,   441,    25,   443,
   900,    21,   902,   903,   904,    25,    19,   451,   969,    21,
   454,    19,    21,    25,   458,   322,    25,    19,   580,   980,
    89,   982,   983,    24,   980,    26,    24,    28,    27,   990,
  1096,   992,   993,    25,    21,    21,   343,   599,    25,    25,
    21,    21,   604,    44,    25,    22,    47,    48,  1009,    72,
    73,    74,    75,  1014,   498,   499,    79,    80,    81,    82,
    83,    84,    85,    20,    21,  1026,  1014,  1026,  1029,   631,
    24,   633,    34,    35,    36,    51,    52,    53,  1026,    21,
    22,    32,    33,    21,  1144,   109,   110,    18,    21,  1050,
  1051,  1052,  1053,    22,  1055,  1056,    11,  1157,    25,    24,
    24,   545,    24,  1064,    27,  1066,  1067,    25,    24,   416,
  1071,    23,  1073,  1074,    20,  1076,    19,  1017,  1178,  1019,
    20,  1082,   429,    19,    23,     5,    21,    25,    22,   436,
    27,   438,    24,   440,   441,  1096,   443,   581,     8,     9,
    10,   448,    24,    20,   451,   707,    25,    20,    24,    27,
    25,   458,    72,    18,    25,    27,  1117,  1118,  1119,  1120,
    21,    25,    25,   470,  1125,    25,   473,    29,   475,    24,
    25,   478,    39,    25,    29,    30,    31,    32,    33,    34,
   612,    40,    89,    18,  1145,    89,    55,   184,    89,   137,
    24,    46,    47,    48,    25,    25,    89,  1145,    89,    89,
   762,   763,   150,   151,   152,   153,   154,   155,  1169,   157,
   158,    25,   656,    25,   658,    70,    18,    25,    21,    18,
   187,    40,    18,   667,    21,    23,   670,   671,   660,   182,
    18,    24,   794,    18,   189,    89,    24,    21,   545,    22,
    22,    29,    30,    31,    32,    33,    34,    22,    21,    23,
    20,   558,    20,    89,   561,    27,    25,   112,    46,    47,
    48,    25,    40,     8,    27,   191,    25,   574,   575,    18,
    20,    27,    20,    25,   581,     0,     0,    84,   300,   149,
  1067,   891,    70,    57,    58,    59,    60,    61,    62,    63,
    64,    65,    66,   600,  1169,   972,  1138,   659,   605,  1041,
   981,  1117,  1009,   841,   443,   767,   561,  1145,   615,   616,
   658,   656,   812,   620,   124,   622,   322,   670,     8,     9,
    10,    10,   236,   193,   112,   489,  1101,   399,   183,   184,
   185,   201,   187,   969,    -1,   205,   685,   899,   208,    -1,
   647,    -1,    -1,    -1,    -1,    -1,   216,   217,   655,    -1,
   657,   221,    -1,   223,   661,   662,   918,   789,    -1,   666,
   792,    -1,    -1,   670,   671,   235,   236,   237,   812,   676,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   822,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   695,    -1,
    -1,    -1,    -1,   341,    -1,   183,   184,   185,    -1,   187,
    -1,    -1,   147,    -1,   149,    -1,    -1,    -1,   840,   841,
    -1,    -1,    -1,    -1,   846,   847,   848,   849,   850,   851,
   852,   853,   854,   855,   856,    -1,    -1,   375,   376,   377,
   378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
   388,   389,   390,    -1,    -1,    -1,    -1,    -1,   193,    -1,
  1012,    -1,    -1,    -1,    -1,    -1,   201,    -1,    -1,   149,
   205,    -1,    -1,   208,   896,    -1,    -1,    -1,   775,    -1,
    -1,   216,    -1,    -1,    -1,    -1,    -1,   425,    -1,    -1,
    -1,    -1,    -1,     8,     9,    10,    -1,    -1,   358,    -1,
    -1,    -1,   237,   937,   938,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   193,   811,   812,    -1,   814,    -1,    -1,
    -1,   201,    -1,    -1,    -1,   205,    -1,    -1,   208,    -1,
    -1,    -1,    -1,   471,  1086,    -1,   216,    -1,   476,   399,
    -1,   221,    -1,   223,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   235,   236,   237,    -1,    -1,
    -1,   421,    -1,    -1,    -1,    -1,    -1,    -1,   303,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   311,   312,   313,   314,
  1014,    -1,     8,     9,    10,    -1,    -1,    -1,    -1,   527,
    -1,   529,  1026,   531,   532,  1029,    -1,   332,    -1,    -1,
  1022,    -1,   899,    -1,    -1,    -1,    -1,    -1,   343,   906,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1051,  1052,    -1,
    -1,    -1,    -1,    -1,  1176,   360,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   149,    -1,    -1,    -1,    -1,  1073,
  1074,   579,    -1,    -1,    -1,    -1,    -1,    -1,  1082,    -1,
    -1,    -1,    -1,     8,     9,    10,    -1,    -1,    -1,    -1,
    -1,    -1,  1096,   601,   399,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   407,    -1,    -1,    -1,    -1,   537,   193,    -1,
    -1,    -1,    -1,    -1,  1118,  1119,   201,    -1,    -1,    -1,
   205,    -1,   630,   208,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   216,    -1,    -1,    -1,    -1,   221,    -1,   223,    -1,
    -1,  1145,    -1,    -1,  1011,    -1,    -1,  1014,    -1,   399,
   235,   236,   237,   149,    -1,    -1,    -1,    -1,    -1,  1026,
    -1,  1028,    -1,    -1,    -1,    -1,  1033,    -1,    -1,  1036,
  1037,   421,    -1,    -1,    -1,    -1,    -1,   685,    -1,    -1,
    -1,     8,     9,    10,    -1,    -1,    -1,    -1,   696,   697,
   698,   699,   700,   701,   702,   703,    -1,   193,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   201,    -1,    -1,    -1,   205,
  1077,    -1,   208,    -1,    -1,  1082,    -1,  1084,  1085,    -1,
   216,    -1,    -1,   528,   149,   221,    -1,   223,    -1,  1096,
    -1,    -1,   537,    -1,    -1,     8,     9,    10,    -1,   235,
   236,   237,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,  1121,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   193,    -1,
    -1,    -1,    -1,    -1,  1141,  1142,   201,   785,  1145,    -1,
   205,  1148,    -1,   208,    -1,    -1,    -1,   537,    -1,    -1,
   595,   216,    19,    20,    -1,    -1,   221,    24,   223,    -1,
    -1,    -1,    29,    30,    31,    32,    33,    34,    -1,    -1,
   235,   236,   237,    -1,   399,   620,    -1,   622,   826,    46,
    47,    48,   149,   628,    -1,    -1,    -1,   632,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   421,    -1,    -1,    -1,
    -1,    -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,   857,
   858,   859,   860,   861,   862,   863,   864,   865,   866,   867,
   868,   869,   870,   871,   872,   873,   193,   875,    -1,    -1,
    -1,    -1,    -1,    -1,   201,    -1,   149,    -1,   205,   684,
    -1,   208,    -1,    -1,    -1,   112,    18,    -1,    -1,   216,
   695,    -1,    24,    -1,   221,    -1,   223,    29,    30,    31,
    32,    33,    34,   399,    -1,    -1,    -1,    -1,   235,   236,
   237,    -1,    -1,    -1,    46,    47,    48,    -1,    -1,    -1,
   193,    -1,    -1,    -1,   932,   421,    -1,    -1,   201,    -1,
    -1,    -1,   205,    -1,    -1,   208,    -1,    -1,    70,    -1,
    -1,    -1,    -1,   216,    -1,    -1,    -1,    -1,   221,    -1,
   223,    -1,   537,    -1,    -1,    -1,   183,   184,   185,    -1,
   187,   969,   235,   236,   237,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   399,    -1,    19,    -1,    -1,    -1,
   112,    24,    -1,    -1,    -1,    -1,    29,    30,    31,    32,
    33,    34,    -1,    -1,    -1,    -1,   421,    -1,    -1,    -1,
    -1,    -1,     1,    46,    47,    48,    -1,     6,     7,     8,
    -1,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    -1,    -1,    -1,    24,    -1,    70,    -1,    -1,
    29,    30,    31,    32,    33,    34,    -1,   842,    -1,    -1,
    -1,   537,    -1,    42,    43,    -1,    -1,    46,    47,    48,
    -1,   183,   184,   185,    -1,   187,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,
    -1,    70,   399,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,     1,    -1,
    -1,    -1,    -1,    -1,   421,    94,    95,    96,    97,    98,
    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,
    -1,    24,   537,   112,    -1,    -1,    -1,   922,    -1,    -1,
    -1,    34,    -1,    -1,    -1,    -1,   399,    -1,    -1,    -1,
    -1,    -1,    45,    -1,    -1,    -1,  1144,    -1,    -1,    -1,
   183,   184,   185,    -1,   187,    -1,    -1,    -1,   421,  1157,
    -1,    -1,    -1,    -1,    67,    68,    69,    -1,    71,    -1,
    -1,    -1,   967,    76,    77,    78,    -1,    -1,    -1,    -1,
  1178,    -1,    -1,    -1,    -1,    -1,    -1,    90,    91,    92,
    -1,    -1,    -1,    -1,   183,   184,   185,    -1,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,   109,   110,   111,    -1,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   537,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
   163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
   173,   174,   175,   176,   537,     0,     1,    -1,    -1,    -1,
   183,   184,   185,   186,    -1,   188,   189,   190,    -1,    -1,
    -1,    -1,    -1,   119,   120,   121,   122,    -1,   124,    24,
    -1,    -1,    -1,   129,   130,    -1,    -1,   133,   134,    34,
   136,   137,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,
    45,    -1,    -1,    -1,    -1,   151,   152,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    67,    68,    69,    -1,    71,    -1,    -1,    -1,
   176,    76,    77,    78,    -1,    -1,    -1,    -1,    -1,    -1,
   186,    -1,    -1,    -1,    -1,    90,    91,    92,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   109,   110,   111,    -1,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,    -1,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
   155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
   165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
   175,   176,    -1,    -1,    -1,    -1,    -1,    -1,   183,   184,
   185,   186,     1,   188,   189,   190,    -1,     6,     7,     8,
    -1,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,
    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    42,    43,    -1,    45,    46,    47,    48,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,
    69,    70,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    94,    95,    96,    97,    98,
    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,    -1,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
   159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
   169,   170,   171,   172,   173,   174,   175,   176,    -1,    -1,
    -1,    -1,    -1,    -1,   183,   184,   185,   186,   187,   188,
   189,   190,     1,    -1,    -1,    -1,    -1,     6,     7,     8,
    -1,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    -1,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,
    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    42,    43,    -1,    -1,    46,    47,    48,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,
    69,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    94,    95,    96,    97,    98,
    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,    -1,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
   159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
   169,   170,   171,   172,   173,   174,   175,   176,    -1,    -1,
    -1,    -1,    -1,    -1,   183,   184,   185,   186,   187,   188,
   189,   190,     1,    -1,    -1,    -1,    -1,     6,     7,     8,
    -1,    -1,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,
    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    42,    43,    -1,    -1,    46,    47,    48,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,
    69,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    94,    95,    96,    97,    98,
    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,    -1,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
   159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
   169,   170,   171,   172,   173,   174,   175,   176,    -1,    -1,
    -1,    -1,    -1,    -1,   183,   184,   185,   186,   187,   188,
   189,   190,     1,    -1,    -1,    -1,    -1,     6,     7,     8,
    -1,    -1,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    -1,    -1,    -1,    24,    25,    -1,    -1,    -1,
    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    42,    43,     1,    -1,    46,    47,    48,
     6,     7,     8,    -1,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    -1,    -1,    -1,    -1,    24,    -1,
    -1,    70,    -1,    29,    30,    31,    32,    33,    34,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,    -1,
    46,    47,    48,    -1,    93,    94,    95,    96,    97,    98,
    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,
    -1,    -1,    -1,   112,    70,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,    94,    95,
    96,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   108,    -1,    -1,    -1,   112,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   183,   184,   185,    -1,   187,   188,
   189,    -1,    -1,     1,    -1,    -1,    -1,    -1,     6,     7,
     8,    -1,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    -1,    -1,    -1,    -1,    24,    -1,    -1,    -1,
    -1,    29,    30,    31,    32,    33,    34,   183,   184,   185,
    -1,   187,   188,   189,    42,    43,     1,    -1,    46,    47,
    48,     6,     7,     8,    -1,    -1,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    24,
    -1,    -1,    70,    -1,    29,    30,    31,    32,    33,    34,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,
    -1,    46,    47,    48,    -1,    93,    94,    95,    96,    97,
    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   108,    -1,    -1,    -1,   112,    70,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,    94,
    95,    96,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   108,    -1,    -1,    -1,   112,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   183,   184,   185,    -1,   187,
   188,   189,    -1,    -1,     1,    -1,    -1,    -1,    -1,     6,
     7,     8,    -1,    -1,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    -1,    -1,    -1,    24,    -1,    -1,
    -1,    -1,    29,    30,    31,    32,    33,    34,   183,   184,
   185,    -1,   187,   188,   189,    42,    43,     1,    -1,    46,
    47,    48,     6,     7,     8,    -1,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    -1,    -1,    -1,    -1,
    24,    -1,    -1,    70,    -1,    29,    30,    31,    32,    33,
    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,
    -1,    -1,    46,    47,    48,    -1,    -1,    94,    95,    96,
    97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   108,    -1,    -1,    -1,   112,    70,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    94,    95,    96,    97,    98,    99,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,   112,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   183,   184,   185,    -1,
   187,   188,   189,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     6,     7,     8,    -1,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    -1,    -1,    -1,    24,    -1,
    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,   183,
   184,   185,    -1,   187,   188,   189,    42,    43,    -1,    45,
    46,    47,    48,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    70,    71,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    94,    95,
    96,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,    -1,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
   156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
   166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
   176,    -1,    -1,    -1,    -1,    -1,    -1,   183,   184,   185,
   186,   187,   188,   189,   190,     6,     7,     8,    -1,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,
    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    42,    43,    -1,    45,    46,    47,    48,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,
    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    94,    95,    96,    97,    98,    99,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,    -1,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
   161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
   171,   172,   173,   174,   175,   176,    -1,    -1,    -1,    -1,
    -1,    -1,   183,   184,   185,   186,   187,   188,   189,   190,
     6,     7,     8,    -1,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    -1,    -1,    -1,    24,    -1,
    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,    45,
    46,    47,    48,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    70,    71,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    94,    95,
    96,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,    -1,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
   156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
   166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
   176,    -1,    -1,    -1,    -1,    -1,    -1,   183,   184,   185,
   186,   187,   188,   189,   190,     6,     7,     8,    -1,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,
    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    46,    47,    48,     6,     7,
     8,    -1,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    -1,    -1,    -1,    24,    -1,    -1,    70,
    -1,    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    47,
    48,    -1,    -1,    94,    95,    96,    97,    98,    99,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,
    -1,   112,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    94,    95,    96,    97,
    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   108,     6,     7,     8,   112,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    24,
    -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,
    -1,    -1,   183,   184,   185,    -1,   187,   188,   189,    -1,
    -1,    46,    47,    48,     6,     7,     8,    -1,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    -1,
    -1,    -1,    24,    -1,    -1,    70,    -1,    29,    30,    31,
    32,    33,    34,    -1,    -1,   183,   184,   185,    -1,   187,
   188,   189,    -1,    -1,    46,    47,    48,    -1,    -1,    94,
    95,    96,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   108,    -1,    -1,    -1,   112,    70,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   108,     6,     7,     8,
   112,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,
    29,    30,    31,    32,    33,    34,    -1,    -1,   183,   184,
   185,    -1,   187,   188,   189,    -1,    -1,    46,    47,    48,
     6,     7,     8,    -1,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    -1,    -1,    -1,    24,    -1,
    -1,    70,    -1,    29,    30,    31,    32,    33,    34,    -1,
    -1,   183,   184,   185,    -1,   187,   188,   189,    -1,    -1,
    46,    47,    48,    -1,    -1,    94,    95,    96,    97,    98,
    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,
    -1,    -1,    -1,   112,    70,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    94,    95,
    96,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   108,     6,     7,     8,   112,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    -1,    -1,
    -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,    32,
    33,    34,    -1,    -1,   183,   184,   185,    -1,   187,   188,
   189,    -1,    -1,    46,    47,    48,     6,     7,     8,    -1,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    -1,    -1,    -1,    -1,    24,    -1,    -1,    70,    -1,    29,
    30,    31,    32,    33,    34,    -1,    -1,   183,   184,   185,
    -1,   187,   188,   189,    -1,    -1,    46,    47,    48,    -1,
    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,   112,
    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    94,    95,    96,    97,    98,    99,
    19,    -1,    -1,    -1,    -1,    24,    -1,    -1,   108,    -1,
    -1,    -1,   112,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    45,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   183,   184,   185,    -1,   187,   188,   189,    -1,    -1,    -1,
    -1,    -1,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,
    -1,    -1,    -1,   183,   184,   185,    -1,   187,   188,   189,
   109,   110,   111,    -1,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,    -1,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
   159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
   169,   170,   171,   172,   173,   174,   175,   176,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   185,   186,   109,   110,
   111,   190,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,    -1,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
   161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
   171,   172,   173,   174,   175,   176,    22,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   185,   186,    -1,    -1,    -1,   190,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    67,    68,    69,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   109,   110,   111,    -1,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,    -1,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
   156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
   166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
   176,    -1,    -1,    -1,    -1,    -1,    19,    -1,    -1,    -1,
   186,    24,    -1,    -1,   190,    -1,    29,    30,    31,    32,
    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    46,    47,    48,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    24,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,
    34,    24,    -1,    -1,    27,    -1,    29,    30,    31,    32,
    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    46,    47,    48,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   183,   184,   185,    -1,   187,   109,   110,   111,    -1,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   112,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
   154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
   164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
   174,   175,   176,    -1,    -1,    -1,    -1,    -1,    -1,   183,
   184,   185,   186,    -1,   188,   189,   190,    -1,    -1,    -1,
   183,   184,   185,    24,   187,    -1,    27,    -1,    29,    30,
    31,    32,    33,    34,    24,    25,    -1,    -1,    -1,    29,
    30,    31,    32,    33,    34,    46,    47,    48,    -1,    -1,
    -1,    -1,    -1,    -1,    24,    25,    46,    47,    48,    29,
    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,    70,
    -1,    -1,    -1,    -1,    -1,    -1,    46,    47,    48,    24,
    70,    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    70,    46,    47,    48,    -1,    -1,    -1,    -1,    24,    -1,
    -1,   112,    -1,    29,    30,    31,    32,    33,    34,    -1,
    -1,    -1,   112,    -1,    -1,    70,    -1,    -1,    24,    -1,
    46,    47,    48,    29,    30,    31,    32,    33,    34,    24,
    -1,    -1,   112,    -1,    29,    30,    31,    32,    33,    34,
    46,    47,    48,    -1,    70,    -1,    -1,    -1,    -1,    -1,
    -1,    46,    47,    48,    -1,    -1,    -1,   112,    -1,    -1,
    -1,    -1,    -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   183,   184,   185,    70,   187,    -1,    -1,    -1,
    -1,    -1,    -1,   183,   184,   185,   112,   187,    24,    -1,
    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,    -1,
    -1,    -1,    -1,   183,   184,   185,   112,   187,    -1,    -1,
    46,    47,    48,    -1,    -1,    -1,    -1,   112,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   183,   184,
   185,    -1,   187,    -1,    70,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   183,   184,   185,
    -1,   187,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   112,   183,   184,   185,
    -1,   187,    -1,    -1,    -1,    42,    43,    -1,   183,   184,
   185,    -1,   187,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   183,   184,   185,
    -1,   187,   109,   110,   111,    -1,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,    -1,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,   186,
    -1,    -1,    -1,   190,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    67,    68,    69,    -1,    71,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   109,   110,   111,    -1,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,    -1,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
   155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
   165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
   175,   176,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   185,   186,    -1,    -1,    -1,   190,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   109,   110,   111,    -1,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
    -1,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
   163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
   173,   174,   175,   176,    45,    -1,    -1,    -1,    -1,    -1,
   183,   184,   185,   186,    -1,    -1,    -1,   190,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,   110,
   111,    -1,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,    -1,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
   161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
   171,   172,   173,   174,   175,   176,    67,    68,    69,    -1,
    -1,    -1,    -1,    -1,   185,   186,    -1,    -1,    -1,   190,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,   110,
   111,    -1,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,    -1,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
   161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
   171,   172,   173,   174,   175,   176,    90,    91,    92,    -1,
    -1,    -1,    -1,    -1,   185,   186,    -1,    -1,    -1,   190,
    -1,    -1,    -1,    -1,    -1,   109,   110,   111,    -1,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,    -1,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
   154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
   164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
   174,   175,   176,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   185,   186,   109,   110,   111,   190,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,    -1,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
   156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
   166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
   176,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,
   186,    -1,    -1,    -1,   190
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/lib/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/lib/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 3:
#line 322 "cgrammar.y"
{ context_checkGlobalScope (); ;
    break;}
case 4:
#line 323 "cgrammar.y"
{ context_checkGlobalScope (); ;
    break;}
case 5:
#line 326 "cgrammar.y"
{ uentry_clearDecl (); ;
    break;}
case 6:
#line 327 "cgrammar.y"
{ uentry_clearDecl (); ;
    break;}
case 7:
#line 328 "cgrammar.y"
{ uentry_clearDecl (); ;
    break;}
case 8:
#line 329 "cgrammar.y"
{ uentry_clearDecl (); ;
    break;}
case 9:
#line 330 "cgrammar.y"
{ uentry_clearDecl (); ;
    break;}
case 10:
#line 331 "cgrammar.y"
{ uentry_checkDecl (); exprNode_free (yyvsp[0].expr); ;
    break;}
case 11:
#line 332 "cgrammar.y"
{ uentry_clearDecl (); ;
    break;}
case 12:
#line 336 "cgrammar.y"
{ checkConstant (yyvsp[-6].qtyp, yyvsp[-4].ntyp); ;
    break;}
case 13:
#line 338 "cgrammar.y"
{ checkValueConstant (yyvsp[-9].qtyp, yyvsp[-7].ntyp, yyvsp[-3].expr) ; ;
    break;}
case 14:
#line 341 "cgrammar.y"
{ context_enterFunctionHeader (); ;
    break;}
case 15:
#line 342 "cgrammar.y"
{ 
     declareStaticFunction (yyvsp[-2].ntyp); context_quietExitFunction (); 
     context_exitFunctionHeader (); 
   ;
    break;}
case 16:
#line 349 "cgrammar.y"
{ 
     qtype qint = qtype_create (ctype_int);
     yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, qint);
     qtype_free (qint);
   ;
    break;}
case 17:
#line 355 "cgrammar.y"
{ yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, yyvsp[-2].qtyp); ;
    break;}
case 19:
#line 360 "cgrammar.y"
{ yyval.ntyp = yyvsp[0].ntyp; qtype_adjustPointers (yyvsp[-1].count, idDecl_getTyp (yyval.ntyp)); ;
    break;}
case 20:
#line 363 "cgrammar.y"
{ yyval.ntyp = idDecl_create (yyvsp[0].cname, qtype_unknown ()); ;
    break;}
case 21:
#line 365 "cgrammar.y"
{ yyval.ntyp = idDecl_expectFunction (yyvsp[-2].ntyp); ;
    break;}
case 22:
#line 367 "cgrammar.y"
{ yyval.ntyp = idDecl_replaceCtype (yyvsp[-2].ntyp, ctype_makeArray (idDecl_getCtype (yyvsp[-2].ntyp))); ;
    break;}
case 23:
#line 369 "cgrammar.y"
{
     exprNode_findValue(yyvsp[-2].expr);
     if (exprNode_hasValue (yyvsp[-2].expr)) 
       {
	 yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ctype_makeFixedArray (idDecl_getCtype (yyvsp[-5].ntyp), exprNode_getLongValue (yyvsp[-2].expr)));
       } 
     else
       {
	 yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ctype_makeArray (idDecl_getCtype (yyvsp[-5].ntyp))); 
       }
   ;
    break;}
case 24:
#line 381 "cgrammar.y"
{ setCurrentParams (uentryList_missingParams); ;
    break;}
case 25:
#line 383 "cgrammar.y"
{ /* need to support globals and modifies here! */
     ctype ct = ctype_makeFunction (idDecl_getCtype (yyvsp[-5].ntyp), 
				    uentryList_makeMissingParams ());
     
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ct);
     idDecl_addClauses (yyval.ntyp, yyvsp[0].funcclauselist);
     context_popLoc ();
     /*drl 7/25/01 added*/
     setImplictfcnConstraints();
   ;
    break;}
case 26:
#line 394 "cgrammar.y"
{ setCurrentParams (yyvsp[-1].entrylist); ;
    break;}
case 27:
#line 396 "cgrammar.y"
{ setImplictfcnConstraints ();
     clearCurrentParams ();
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-6].ntyp, ctype_makeFunction (idDecl_getCtype (yyvsp[-6].ntyp), yyvsp[-3].entrylist));
     idDecl_addClauses (yyval.ntyp, yyvsp[0].funcclauselist);
     context_popLoc (); 
   ;
    break;}
case 28:
#line 404 "cgrammar.y"
{ yyval.ntyp = idDecl_create (yyvsp[0].cname, qtype_unknown ()); ;
    break;}
case 29:
#line 406 "cgrammar.y"
{ yyval.ntyp = idDecl_expectFunction (yyvsp[-2].ntyp); ;
    break;}
case 30:
#line 408 "cgrammar.y"
{ yyval.ntyp = idDecl_replaceCtype (yyvsp[-2].ntyp, ctype_makeArray (idDecl_getCtype (yyvsp[-2].ntyp))); ;
    break;}
case 31:
#line 410 "cgrammar.y"
{ 
     int value;

     if (exprNode_hasValue (yyvsp[-2].expr) 
	 && multiVal_isInt (exprNode_getValue (yyvsp[-2].expr)))
       {
	 value = (int) multiVal_forceInt (exprNode_getValue (yyvsp[-2].expr));
       }
     else
       {
	 value = 0;
       }

     yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ctype_makeFixedArray (idDecl_getCtype (yyvsp[-5].ntyp), value));
   ;
    break;}
case 32:
#line 426 "cgrammar.y"
{ setCurrentParams (uentryList_missingParams); ;
    break;}
case 33:
#line 428 "cgrammar.y"
{
     ctype ct = ctype_makeFunction (idDecl_getCtype (yyvsp[-5].ntyp), 
				    uentryList_makeMissingParams ());
     
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ct);
     idDecl_addClauses (yyval.ntyp, yyvsp[0].funcclauselist);
     context_popLoc (); 
   ;
    break;}
case 34:
#line 437 "cgrammar.y"
{ setCurrentParams (yyvsp[-1].entrylist); ;
    break;}
case 35:
#line 439 "cgrammar.y"
{ 
     clearCurrentParams ();
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-6].ntyp, ctype_makeFunction (idDecl_getCtype (yyvsp[-6].ntyp), yyvsp[-3].entrylist));
     idDecl_addClauses (yyval.ntyp, yyvsp[0].funcclauselist);
     context_popLoc (); 
   ;
    break;}
case 36:
#line 448 "cgrammar.y"
{ setCurrentParams (yyvsp[-1].entrylist); ;
    break;}
case 37:
#line 449 "cgrammar.y"
{ clearCurrentParams (); ;
    break;}
case 38:
#line 450 "cgrammar.y"
{ declareCIter (yyvsp[-8].cname, yyvsp[-6].entrylist); ;
    break;}
case 39:
#line 453 "cgrammar.y"
{ exprNode_checkMacroBody (yyvsp[-1].expr); ;
    break;}
case 40:
#line 454 "cgrammar.y"
{ exprNode_checkIterBody (yyvsp[-1].expr); ;
    break;}
case 41:
#line 455 "cgrammar.y"
{ exprNode_checkIterEnd (yyvsp[-1].expr); ;
    break;}
case 42:
#line 456 "cgrammar.y"
{ exprChecks_checkEmptyMacroBody (); ;
    break;}
case 43:
#line 459 "cgrammar.y"
{ clabstract_declareFunction (yyvsp[0].ntyp); ;
    break;}
case 44:
#line 463 "cgrammar.y"
{ yyval.msconstraint = metaStateConstraint_create (yyvsp[-2].msspec, yyvsp[0].msexpr); ;
    break;}
case 45:
#line 466 "cgrammar.y"
{ cscanner_expectingMetaStateName (); ;
    break;}
case 46:
#line 467 "cgrammar.y"
{ cscanner_clearExpectingMetaStateName ();
      yyval.msspec = metaStateSpecifier_create (yyvsp[-3].sr, yyvsp[0].msinfo); ;
    break;}
case 47:
#line 469 "cgrammar.y"
{ cscanner_expectingMetaStateName (); ;
    break;}
case 48:
#line 470 "cgrammar.y"
{ cscanner_clearExpectingMetaStateName ();
      yyval.msspec = metaStateSpecifier_createElipsis (yyvsp[0].msinfo); ;
    break;}
case 49:
#line 474 "cgrammar.y"
{ yyval.msexpr = metaStateExpression_create (yyvsp[0].msspec); ;
    break;}
case 50:
#line 475 "cgrammar.y"
{ yyval.msexpr = metaStateExpression_createMerge (yyvsp[-2].msspec, yyvsp[0].msexpr); ;
    break;}
case 52:
#line 483 "cgrammar.y"
{ yyval.conL = constraintList_add (yyvsp[0].conL, yyvsp[-2].con); ;
    break;}
case 53:
#line 484 "cgrammar.y"
{ yyval.conL = constraintList_single (yyvsp[0].con); ;
    break;}
case 54:
#line 487 "cgrammar.y"
{
 yyval.con = makeConstraintParse3 (yyvsp[-2].conE, yyvsp[-1].tok, yyvsp[0].conE);
 DPRINTF(("Done BufConstraint1\n")); ;
    break;}
case 61:
#line 502 "cgrammar.y"
{yyval.conE = constraintExpr_parseMakeUnaryOp (yyvsp[-3].tok, yyvsp[-1].conE);  DPRINTF( ("Got BufConstraintExpr UNary Op ") ); ;
    break;}
case 62:
#line 503 "cgrammar.y"
{
   DPRINTF( ("Got BufConstraintExpr BINary Op ") );
   yyval.conE = constraintExpr_parseMakeBinaryOp (yyvsp[-3].conE, yyvsp[-2].tok, yyvsp[-1].conE); ;
    break;}
case 63:
#line 508 "cgrammar.y"
{ yyval.conE =  constraintExpr_makeTermsRef (yyvsp[0].sr);;
    break;}
case 64:
#line 509 "cgrammar.y"
{ yyval.conE = constraintExpr_makeIntLiteral (exprNode_getLongValue (yyvsp[0].expr)); ;
    break;}
case 65:
#line 513 "cgrammar.y"
{ /*@-onlytrans@*/ yyval.sr = checkbufferConstraintClausesId (yyvsp[0].entry); /*@=onlytrans@*/ /*@i523@*/ ;
    break;}
case 66:
#line 515 "cgrammar.y"
{ yyval.sr = fixStateClausesId (yyvsp[0].cname); ;
    break;}
case 67:
#line 517 "cgrammar.y"
{ yyval.sr = sRef_makeAnyArrayFetch (yyvsp[-2].sr); ;
    break;}
case 68:
#line 519 "cgrammar.y"
{
    /*
    char *t; int c; 
    t =  cstring_toCharsSafe (exprNode_unparse($3)); 
    c = atoi( t );
    */
    yyval.sr = sRef_makeArrayFetchKnown (yyvsp[-3].sr, exprNode_getLongValue (yyvsp[-1].expr));
  ;
    break;}
case 69:
#line 528 "cgrammar.y"
{ yyval.sr = sRef_constructPointer (yyvsp[0].sr); ;
    break;}
case 70:
#line 530 "cgrammar.y"
{ yyval.sr = yyvsp[-1].sr; ;
    break;}
case 71:
#line 532 "cgrammar.y"
{ cstring_markOwned (yyvsp[0].cname); yyval.sr = sRef_buildField (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 72:
#line 534 "cgrammar.y"
{ cstring_markOwned (yyvsp[0].cname); yyval.sr = sRef_makeArrow (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 76:
#line 561 "cgrammar.y"
{ yyval.funcclauselist = functionClauseList_new (); ;
    break;}
case 77:
#line 563 "cgrammar.y"
{ yyval.funcclauselist = functionClauseList_prepend (yyvsp[0].funcclauselist, yyvsp[-1].funcclause); ;
    break;}
case 78:
#line 571 "cgrammar.y"
{ yyval.funcclauselist = functionClauseList_new (); ;
    break;}
case 79:
#line 573 "cgrammar.y"
{ yyval.funcclauselist = functionClauseList_prepend (yyvsp[0].funcclauselist, yyvsp[-1].funcclause); ;
    break;}
case 80:
#line 576 "cgrammar.y"
{ yyval.funcclause = functionClause_createGlobals (yyvsp[0].globsclause); ;
    break;}
case 81:
#line 577 "cgrammar.y"
{ yyval.funcclause = functionClause_createModifies (yyvsp[0].modsclause); ;
    break;}
case 82:
#line 578 "cgrammar.y"
{ yyval.funcclause = functionClause_createModifies (yyvsp[0].modsclause); ;
    break;}
case 83:
#line 579 "cgrammar.y"
{ yyval.funcclause = functionClause_createState (yyvsp[0].stateclause); ;
    break;}
case 84:
#line 580 "cgrammar.y"
{ yyval.funcclause = yyvsp[0].funcclause; ;
    break;}
case 85:
#line 581 "cgrammar.y"
{ yyval.funcclause = functionClause_createWarn (yyvsp[0].warnclause); ;
    break;}
case 86:
#line 584 "cgrammar.y"
{ yyval.funcclause = functionClause_createGlobals (yyvsp[0].globsclause); ;
    break;}
case 87:
#line 585 "cgrammar.y"
{ yyval.funcclause = functionClause_createModifies (yyvsp[0].modsclause); ;
    break;}
case 88:
#line 586 "cgrammar.y"
{ yyval.funcclause = functionClause_createModifies (yyvsp[0].modsclause); ;
    break;}
case 89:
#line 587 "cgrammar.y"
{ yyval.funcclause = functionClause_createState (yyvsp[0].stateclause); ;
    break;}
case 90:
#line 588 "cgrammar.y"
{ yyval.funcclause = yyvsp[0].funcclause; ;
    break;}
case 91:
#line 589 "cgrammar.y"
{ yyval.funcclause = functionClause_createWarn (yyvsp[0].warnclause); ;
    break;}
case 92:
#line 592 "cgrammar.y"
{ yyval.globsclause = yyvsp[-1].globsclause; ;
    break;}
case 93:
#line 595 "cgrammar.y"
{ setProcessingGlobalsList (); ;
    break;}
case 94:
#line 597 "cgrammar.y"
{ 
     unsetProcessingGlobals (); 
     yyval.globsclause = globalsClause_create (yyvsp[-3].tok, yyvsp[-1].globset); 
   ;
    break;}
case 95:
#line 603 "cgrammar.y"
{ yyval.modsclause = modifiesClause_createNoMods (yyvsp[0].tok); ;
    break;}
case 96:
#line 606 "cgrammar.y"
{ yyval.modsclause = yyvsp[-1].modsclause; ;
    break;}
case 97:
#line 610 "cgrammar.y"
{
     context_setProtectVars (); enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;
    break;}
case 98:
#line 615 "cgrammar.y"
{ 
     exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
     yyval.modsclause = modifiesClause_create (yyvsp[-2].tok, yyvsp[0].srset);
   ;
    break;}
case 99:
#line 624 "cgrammar.y"
{ yyval.flagspec = flagSpec_createPlain (yyvsp[0].cname); ;
    break;}
case 100:
#line 626 "cgrammar.y"
{ yyval.flagspec = flagSpec_createOr (yyvsp[-2].cname, yyvsp[0].flagspec); ;
    break;}
case 103:
#line 633 "cgrammar.y"
{ yyval.warnclause = warnClause_undefined; ;
    break;}
case 104:
#line 636 "cgrammar.y"
{ yyval.warnclause = yyvsp[-1].warnclause; ;
    break;}
case 105:
#line 640 "cgrammar.y"
{      
     llassert (exprNode_knownStringValue (yyvsp[0].expr));
     yyval.warnclause = warnClause_create (yyvsp[-2].tok, yyvsp[-1].flagspec, cstring_copy (multiVal_forceString (exprNode_getValue (yyvsp[0].expr)))); 
     exprNode_free (yyvsp[0].expr);
   ;
    break;}
case 106:
#line 646 "cgrammar.y"
{ yyval.warnclause = warnClause_create (yyvsp[-1].tok, yyvsp[0].flagspec, cstring_undefined); ;
    break;}
case 107:
#line 649 "cgrammar.y"
{ yyval.globset = globSet_single (yyvsp[0].sr); ;
    break;}
case 108:
#line 650 "cgrammar.y"
{ yyval.globset = globSet_insert (yyvsp[-2].globset, yyvsp[0].sr); ;
    break;}
case 109:
#line 653 "cgrammar.y"
{ yyval.sr = clabstract_createGlobal (yyvsp[0].sr, yyvsp[-1].tquallist); ;
    break;}
case 110:
#line 656 "cgrammar.y"
{ yyval.tquallist = qualList_undefined; ;
    break;}
case 111:
#line 657 "cgrammar.y"
{ yyval.tquallist = qualList_add (yyvsp[0].tquallist, yyvsp[-1].typequal); ;
    break;}
case 112:
#line 660 "cgrammar.y"
{ yyval.sr = uentry_getSref (yyvsp[0].entry); ;
    break;}
case 113:
#line 661 "cgrammar.y"
{ yyval.sr = clabstract_unrecognizedGlobal (yyvsp[0].cname); ;
    break;}
case 114:
#line 662 "cgrammar.y"
{ yyval.sr = clabstract_checkGlobal (yyvsp[0].expr); ;
    break;}
case 115:
#line 665 "cgrammar.y"
{ yyval.typequal = qual_createUndef (); ;
    break;}
case 116:
#line 666 "cgrammar.y"
{ yyval.typequal = qual_createKilled (); ;
    break;}
case 117:
#line 667 "cgrammar.y"
{ yyval.typequal = qual_createOut (); ;
    break;}
case 118:
#line 668 "cgrammar.y"
{ yyval.typequal = qual_createIn (); ;
    break;}
case 119:
#line 669 "cgrammar.y"
{ yyval.typequal = qual_createPartial (); ;
    break;}
case 127:
#line 684 "cgrammar.y"
{ 
     qtype qint = qtype_create (ctype_int);
     yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, qint);
     qtype_free (qint);
   ;
    break;}
case 128:
#line 690 "cgrammar.y"
{ yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, yyvsp[-2].qtyp); ;
    break;}
case 129:
#line 693 "cgrammar.y"
{ checkDoneParams (); context_enterInnerContext (); ;
    break;}
case 130:
#line 695 "cgrammar.y"
{  
     exprNode_checkFunctionBody (yyvsp[0].expr); yyval.expr = yyvsp[0].expr; 
     context_exitInner (yyvsp[0].expr); 
   ;
    break;}
case 131:
#line 699 "cgrammar.y"
{ context_enterOldStyleScope (); ;
    break;}
case 132:
#line 700 "cgrammar.y"
{ oldStyleDoneParams (); context_enterInnerContext (); ;
    break;}
case 133:
#line 702 "cgrammar.y"
{
     exprNode_checkFunctionBody (yyvsp[0].expr); 
     yyval.expr = yyvsp[0].expr; /* oldstyle */ 
     context_exitInner (yyvsp[0].expr);
   ;
    break;}
case 134:
#line 710 "cgrammar.y"
{ 
     context_setFunctionDefined (exprNode_loc (yyvsp[0].expr)); 
     exprNode_checkFunction (context_getHeader (),  yyvsp[0].expr); 
     /* DRL 8 8 2000 */
     
     context_exitFunction ();
   ;
    break;}
case 135:
#line 719 "cgrammar.y"
{ yyval.srset = yyvsp[-1].srset; ;
    break;}
case 136:
#line 720 "cgrammar.y"
{ yyval.srset = sRefSet_new (); ;
    break;}
case 137:
#line 723 "cgrammar.y"
{ yyval.sr = uentry_getSref (yyvsp[0].entry); checkModifiesId (yyvsp[0].entry); ;
    break;}
case 138:
#line 724 "cgrammar.y"
{ yyval.sr = fixModifiesId (yyvsp[0].cname); ;
    break;}
case 139:
#line 725 "cgrammar.y"
{ yyval.sr = modListArrayFetch (yyvsp[-2].sr, sRef_undefined); ;
    break;}
case 140:
#line 726 "cgrammar.y"
{ yyval.sr = modListArrayFetch (yyvsp[-3].sr, yyvsp[-1].sr); ;
    break;}
case 141:
#line 727 "cgrammar.y"
{ yyval.sr = modListPointer (yyvsp[0].sr); ;
    break;}
case 142:
#line 728 "cgrammar.y"
{ yyval.sr = yyvsp[-1].sr; ;
    break;}
case 143:
#line 729 "cgrammar.y"
{ yyval.sr = modListFieldAccess (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 144:
#line 730 "cgrammar.y"
{ yyval.sr = modListArrowAccess (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 145:
#line 734 "cgrammar.y"
{ yyval.sr = yyvsp[0].sr; ;
    break;}
case 146:
#line 735 "cgrammar.y"
{ yyval.sr = sRef_makeUnknown (); /* sRef_makeConstant ($1); ? */ ;
    break;}
case 147:
#line 739 "cgrammar.y"
{ yyval.srset = sRefSet_single (yyvsp[0].sr); ;
    break;}
case 148:
#line 740 "cgrammar.y"
{ yyval.srset = sRefSet_insert (yyvsp[-2].srset, yyvsp[0].sr); ;
    break;}
case 149:
#line 744 "cgrammar.y"
{ yyval.sr = checkStateClausesId (yyvsp[0].entry); ;
    break;}
case 150:
#line 746 "cgrammar.y"
{ yyval.sr = fixStateClausesId (yyvsp[0].cname); ;
    break;}
case 151:
#line 747 "cgrammar.y"
{ yyval.sr = sRef_makeAnyArrayFetch (yyvsp[-2].sr); ;
    break;}
case 152:
#line 748 "cgrammar.y"
{ yyval.sr = sRef_makeAnyArrayFetch (yyvsp[-3].sr); ;
    break;}
case 153:
#line 749 "cgrammar.y"
{ yyval.sr = sRef_constructPointer (yyvsp[0].sr); ;
    break;}
case 154:
#line 750 "cgrammar.y"
{ yyval.sr = yyvsp[-1].sr; ;
    break;}
case 155:
#line 751 "cgrammar.y"
{ cstring_markOwned (yyvsp[0].cname);
					    yyval.sr = sRef_buildField (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 156:
#line 753 "cgrammar.y"
{ cstring_markOwned (yyvsp[0].cname);
                                            yyval.sr = sRef_makeArrow (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 157:
#line 757 "cgrammar.y"
{ yyval.srset = sRefSet_undefined ;
    break;}
case 159:
#line 762 "cgrammar.y"
{ if (sRef_isValid (yyvsp[0].sr)) { yyval.srset = sRefSet_single (yyvsp[0].sr); } 
      else { yyval.srset = sRefSet_undefined; } 
    ;
    break;}
case 160:
#line 766 "cgrammar.y"
{ if (sRef_isValid (yyvsp[0].sr))
	{
	  yyval.srset = sRefSet_insert (yyvsp[-2].srset, yyvsp[0].sr); 
	}
      else
	{
	  yyval.srset = yyvsp[-2].srset;
	}
    ;
    break;}
case 161:
#line 777 "cgrammar.y"
{ yyval.expr = exprNode_fromIdentifier (yyvsp[0].entry); ;
    break;}
case 162:
#line 778 "cgrammar.y"
{ yyval.expr = exprNode_fromUIO (yyvsp[0].cname); ;
    break;}
case 164:
#line 780 "cgrammar.y"
{ yyval.expr = exprNode_addParens (yyvsp[-2].tok, yyvsp[-1].expr); ;
    break;}
case 165:
#line 781 "cgrammar.y"
{ yyval.expr = exprNode_fromIdentifier (coerceId (yyvsp[0].cname)); ;
    break;}
case 166:
#line 782 "cgrammar.y"
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 168:
#line 786 "cgrammar.y"
{ yyval.expr = exprNode_arrayFetch (yyvsp[-3].expr, yyvsp[-1].expr); ;
    break;}
case 169:
#line 787 "cgrammar.y"
{ yyval.expr = exprNode_functionCall (yyvsp[-2].expr, exprNodeList_new ()); ;
    break;}
case 170:
#line 788 "cgrammar.y"
{ yyval.expr = exprNode_functionCall (yyvsp[-3].expr, yyvsp[-1].exprlist); ;
    break;}
case 171:
#line 789 "cgrammar.y"
{ yyval.expr = exprNode_vaArg (yyvsp[-5].tok, yyvsp[-3].expr, yyvsp[-1].qtyp); ;
    break;}
case 172:
#line 790 "cgrammar.y"
{ yyval.expr = exprNode_fieldAccess (yyvsp[-4].expr, yyvsp[-2].tok, yyvsp[-1].cname); ;
    break;}
case 173:
#line 791 "cgrammar.y"
{ yyval.expr = exprNode_arrowAccess (yyvsp[-4].expr, yyvsp[-2].tok, yyvsp[-1].cname); ;
    break;}
case 174:
#line 792 "cgrammar.y"
{ yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 175:
#line 793 "cgrammar.y"
{ yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 176:
#line 796 "cgrammar.y"
{ yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 177:
#line 797 "cgrammar.y"
{ yyval.exprlist = exprNodeList_push (yyvsp[-2].exprlist, yyvsp[0].expr); ;
    break;}
case 179:
#line 801 "cgrammar.y"
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 180:
#line 802 "cgrammar.y"
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 181:
#line 803 "cgrammar.y"
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 182:
#line 804 "cgrammar.y"
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 183:
#line 805 "cgrammar.y"
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 184:
#line 806 "cgrammar.y"
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 185:
#line 807 "cgrammar.y"
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 186:
#line 808 "cgrammar.y"
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 187:
#line 809 "cgrammar.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 188:
#line 810 "cgrammar.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 189:
#line 813 "cgrammar.y"
{ yyval.cstringlist = cstringList_add (yyvsp[-2].cstringlist, yyvsp[0].cname); ;
    break;}
case 190:
#line 814 "cgrammar.y"
{ yyval.cstringlist = cstringList_single (yyvsp[0].cname); ;
    break;}
case 191:
#line 818 "cgrammar.y"
{ yyval.expr = exprNode_offsetof (yyvsp[-5].qtyp, yyvsp[-2].cstringlist); ;
    break;}
case 192:
#line 821 "cgrammar.y"
{ context_setProtectVars (); ;
    break;}
case 193:
#line 822 "cgrammar.y"
{ context_sizeofReleaseVars (); yyval.expr = yyvsp[0].expr; ;
    break;}
case 194:
#line 825 "cgrammar.y"
{ yyval.expr = exprNode_sizeofType (yyvsp[-1].qtyp); ;
    break;}
case 195:
#line 826 "cgrammar.y"
{ yyval.expr = exprNode_sizeofExpr (yyvsp[0].expr); ;
    break;}
case 196:
#line 827 "cgrammar.y"
{ yyval.expr = exprNode_alignofType (yyvsp[-1].qtyp); ;
    break;}
case 197:
#line 828 "cgrammar.y"
{ yyval.expr = exprNode_alignofExpr (yyvsp[0].expr); ;
    break;}
case 199:
#line 833 "cgrammar.y"
{ yyval.expr = exprNode_cast (yyvsp[-3].tok, yyvsp[0].expr, yyvsp[-2].qtyp); ;
    break;}
case 201:
#line 837 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 202:
#line 838 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 203:
#line 839 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 205:
#line 843 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 206:
#line 844 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 208:
#line 848 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 209:
#line 849 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 211:
#line 853 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 212:
#line 854 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 213:
#line 855 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 214:
#line 856 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 216:
#line 860 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 217:
#line 861 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 219:
#line 865 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 221:
#line 869 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 223:
#line 874 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 225:
#line 879 "cgrammar.y"
{ exprNode_produceGuards (yyvsp[-1].expr); 
     context_enterAndClause (yyvsp[-1].expr); 
   ;
    break;}
case 226:
#line 883 "cgrammar.y"
{ 
     yyval.expr = exprNode_op (yyvsp[-3].expr, yyvsp[0].expr, yyvsp[-2].tok); 
     context_exitAndClause (yyval.expr, yyvsp[0].expr);
   ;
    break;}
case 228:
#line 891 "cgrammar.y"
{ 
     exprNode_produceGuards (yyvsp[-1].expr);
     context_enterOrClause (yyvsp[-1].expr); 
   ;
    break;}
case 229:
#line 896 "cgrammar.y"
{ 
     yyval.expr = exprNode_op (yyvsp[-3].expr, yyvsp[0].expr, yyvsp[-2].tok); 
     context_exitOrClause (yyval.expr, yyvsp[0].expr);
   ;
    break;}
case 231:
#line 903 "cgrammar.y"
{ exprNode_produceGuards (yyvsp[-1].expr); context_enterTrueClause (yyvsp[-1].expr); ;
    break;}
case 232:
#line 904 "cgrammar.y"
{ context_enterFalseClause (yyvsp[-4].expr); ;
    break;}
case 233:
#line 905 "cgrammar.y"
{ yyval.expr = exprNode_cond (yyvsp[-6].expr, yyvsp[-3].expr, yyvsp[0].expr); context_exitClause (yyvsp[-6].expr, yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 235:
#line 909 "cgrammar.y"
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 236:
#line 910 "cgrammar.y"
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 237:
#line 911 "cgrammar.y"
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 238:
#line 912 "cgrammar.y"
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 239:
#line 913 "cgrammar.y"
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 240:
#line 914 "cgrammar.y"
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 241:
#line 915 "cgrammar.y"
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 242:
#line 916 "cgrammar.y"
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 243:
#line 917 "cgrammar.y"
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 244:
#line 918 "cgrammar.y"
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 245:
#line 919 "cgrammar.y"
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 247:
#line 923 "cgrammar.y"
{ yyval.expr = exprNode_comma (yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 248:
#line 926 "cgrammar.y"
{ yyval.expr = exprNode_undefined; ;
    break;}
case 251:
#line 935 "cgrammar.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 252:
#line 936 "cgrammar.y"
{ doVaDcl (); yyval.expr = exprNode_makeError (); ;
    break;}
case 253:
#line 937 "cgrammar.y"
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 254:
#line 941 "cgrammar.y"
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 255:
#line 955 "cgrammar.y"
{
     setProcessingVars (yyvsp[-3].qtyp); 
     processNamedDecl (yyvsp[-1].ntyp); 
   ;
    break;}
case 256:
#line 960 "cgrammar.y"
{ 
     unsetProcessingVars (); 
     yyval.expr = exprNode_makeEmptyInitialization (yyvsp[-6].ntyp); 
     DPRINTF (("Empty initialization: %s", exprNode_unparse (yyval.expr)));
   ;
    break;}
case 257:
#line 966 "cgrammar.y"
{ setProcessingVars (yyvsp[-4].qtyp); processNamedDecl (yyvsp[-2].ntyp); ;
    break;}
case 258:
#line 968 "cgrammar.y"
{ yyval.expr = exprNode_concat (yyvsp[-2].expr, exprNode_makeInitialization (yyvsp[-8].ntyp, yyvsp[-3].expr)); 
     unsetProcessingVars ();
   ;
    break;}
case 259:
#line 974 "cgrammar.y"
{ 
     processNamedDecl (yyvsp[-1].ntyp); 
     yyval.expr = exprNode_makeEmptyInitialization (yyvsp[-1].ntyp);
   ;
    break;}
case 260:
#line 978 "cgrammar.y"
{ processNamedDecl (yyvsp[-2].ntyp); ;
    break;}
case 261:
#line 979 "cgrammar.y"
{ yyval.expr = exprNode_makeInitialization (yyvsp[-5].ntyp, yyvsp[0].expr); ;
    break;}
case 262:
#line 982 "cgrammar.y"
{ setProcessingTypedef (yyvsp[0].qtyp); ;
    break;}
case 263:
#line 984 "cgrammar.y"
{ clabstract_declareType (yyvsp[-3].exprlist, yyvsp[-1].warnclause); ;
    break;}
case 264:
#line 985 "cgrammar.y"
{ /* in the ANSI grammar, semantics unclear */ ;
    break;}
case 265:
#line 986 "cgrammar.y"
{ /* in the ANSI grammar, semantics unclear */ ;
    break;}
case 266:
#line 989 "cgrammar.y"
{ g_expectingTypeName = TRUE; ;
    break;}
case 267:
#line 992 "cgrammar.y"
{ g_expectingTypeName = TRUE; context_pushLoc (); ;
    break;}
case 268:
#line 995 "cgrammar.y"
{ yyval.exprlist = yyvsp[-1].exprlist; ;
    break;}
case 269:
#line 998 "cgrammar.y"
{ yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 270:
#line 999 "cgrammar.y"
{ yyval.exprlist = exprNodeList_push (yyvsp[-3].exprlist, yyvsp[0].expr); ;
    break;}
case 271:
#line 1002 "cgrammar.y"
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 272:
#line 1003 "cgrammar.y"
{ yyval.expr = exprNode_concat (yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 274:
#line 1007 "cgrammar.y"
{ yyval.expr = exprNode_makeInitBlock (yyvsp[-2].tok, yyvsp[-1].exprlist); ;
    break;}
case 275:
#line 1008 "cgrammar.y"
{ yyval.expr = exprNode_makeInitBlock (yyvsp[-3].tok, yyvsp[-2].exprlist); ;
    break;}
case 276:
#line 1013 "cgrammar.y"
{ yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 277:
#line 1015 "cgrammar.y"
{ yyval.exprlist = exprNodeList_push (yyvsp[-2].exprlist, yyvsp[0].expr); ;
    break;}
case 278:
#line 1023 "cgrammar.y"
{ setStorageClass (SCEXTERN); yyval.typequal = qual_createExtern (); ;
    break;}
case 279:
#line 1024 "cgrammar.y"
{ yyval.typequal = qual_createInline (); ;
    break;}
case 280:
#line 1025 "cgrammar.y"
{ setStorageClass (SCSTATIC); yyval.typequal = qual_createStatic (); ;
    break;}
case 281:
#line 1026 "cgrammar.y"
{ yyval.typequal = qual_createAuto (); ;
    break;}
case 282:
#line 1027 "cgrammar.y"
{ yyval.typequal = qual_createRegister (); ;
    break;}
case 283:
#line 1030 "cgrammar.y"
{ yyval.typequal = qual_createNullTerminated (); ;
    break;}
case 284:
#line 1033 "cgrammar.y"
{ yyval.stateclause = yyvsp[-1].stateclause; ;
    break;}
case 285:
#line 1037 "cgrammar.y"
{
     context_setProtectVars (); 
     enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;
    break;}
case 286:
#line 1043 "cgrammar.y"
{ 
     exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
     yyval.stateclause = stateClause_createPlain (yyvsp[-5].tok, yyvsp[-2].srset);
   ;
    break;}
case 287:
#line 1051 "cgrammar.y"
{ yyval.funcclause = yyvsp[-1].funcclause; ;
    break;}
case 288:
#line 1054 "cgrammar.y"
{ yyval.tok = yyvsp[-1].tok; context_enterFunctionHeader (); ;
    break;}
case 289:
#line 1058 "cgrammar.y"
{
     context_exitFunctionHeader ();
     context_setProtectVars (); 
     enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;
    break;}
case 290:
#line 1065 "cgrammar.y"
{ 
     exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
     yyval.funcclause = functionClause_createState (stateClause_create (yyvsp[-5].tok, yyvsp[-4].typequal, yyvsp[-2].srset));
   ;
    break;}
case 291:
#line 1072 "cgrammar.y"
{
     context_setProtectVars (); 
     enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;
    break;}
case 292:
#line 1078 "cgrammar.y"
{
     context_exitFunctionHeader ();
     exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
     DPRINTF (("done optGlobBufConstraintsAux\n"));

     if (lltok_isEnsures (yyvsp[-4].tok)) 
       {
	 yyval.funcclause = functionClause_createEnsures (yyvsp[-2].fcnconstraint);
       }
     else if (lltok_isRequires (yyvsp[-4].tok))
       {
	 yyval.funcclause = functionClause_createRequires (yyvsp[-2].fcnconstraint);
       }
     else
       {
	 BADBRANCH;
       }

     DPRINTF (("FunctionclauseS: %s", functionClause_unparse (yyval.funcclause)));
   ;
    break;}
case 293:
#line 1102 "cgrammar.y"
{ yyval.fcnconstraint = functionConstraint_createBufferConstraint (yyvsp[0].conL); ;
    break;}
case 294:
#line 1103 "cgrammar.y"
{ yyval.fcnconstraint = functionConstraint_createMetaStateConstraint (yyvsp[0].msconstraint); DPRINTF (("Made constraint: %s", functionConstraint_unparse (yyval.fcnconstraint))); ;
    break;}
case 295:
#line 1106 "cgrammar.y"
{ yyval.typequal = qual_createExits (); ;
    break;}
case 296:
#line 1107 "cgrammar.y"
{ yyval.typequal = qual_createMayExit (); ;
    break;}
case 297:
#line 1108 "cgrammar.y"
{ yyval.typequal = qual_createTrueExit (); ;
    break;}
case 298:
#line 1109 "cgrammar.y"
{ yyval.typequal = qual_createFalseExit (); ;
    break;}
case 299:
#line 1110 "cgrammar.y"
{ yyval.typequal = qual_createNeverExit (); ;
    break;}
case 300:
#line 1113 "cgrammar.y"
{ yyval.typequal = qual_createChecked (); ;
    break;}
case 301:
#line 1114 "cgrammar.y"
{ yyval.typequal = qual_createCheckMod (); ;
    break;}
case 302:
#line 1115 "cgrammar.y"
{ yyval.typequal = qual_createUnchecked (); ;
    break;}
case 303:
#line 1116 "cgrammar.y"
{ yyval.typequal = qual_createCheckedStrict (); ;
    break;}
case 304:
#line 1119 "cgrammar.y"
{ yyval.typequal = qual_createOwned (); ;
    break;}
case 305:
#line 1120 "cgrammar.y"
{ yyval.typequal = qual_createDependent (); ;
    break;}
case 306:
#line 1121 "cgrammar.y"
{ yyval.typequal = qual_createYield (); ;
    break;}
case 307:
#line 1122 "cgrammar.y"
{ yyval.typequal = qual_createTemp (); ;
    break;}
case 308:
#line 1123 "cgrammar.y"
{ yyval.typequal = qual_createOnly (); ;
    break;}
case 309:
#line 1124 "cgrammar.y"
{ yyval.typequal = qual_createKeep (); ;
    break;}
case 310:
#line 1125 "cgrammar.y"
{ yyval.typequal = qual_createKept (); ;
    break;}
case 311:
#line 1126 "cgrammar.y"
{ yyval.typequal = qual_createShared (); ;
    break;}
case 312:
#line 1127 "cgrammar.y"
{ yyval.typequal = qual_createUnique (); ;
    break;}
case 313:
#line 1128 "cgrammar.y"
{ yyval.typequal = qual_createNull (); ;
    break;}
case 314:
#line 1129 "cgrammar.y"
{ yyval.typequal = qual_createIsNull (); ;
    break;}
case 315:
#line 1130 "cgrammar.y"
{ yyval.typequal = qual_createRelNull (); ;
    break;}
case 316:
#line 1131 "cgrammar.y"
{ yyval.typequal = qual_createNotNull (); ;
    break;}
case 317:
#line 1132 "cgrammar.y"
{ yyval.typequal = qual_createExposed (); ;
    break;}
case 318:
#line 1133 "cgrammar.y"
{ yyval.typequal = qual_createObserver (); ;
    break;}
case 319:
#line 1134 "cgrammar.y"
{ yyval.typequal = qual_createNullTerminated (); ;
    break;}
case 320:
#line 1135 "cgrammar.y"
{ yyval.typequal = qual_createMetaState (yyvsp[0].annotation); ;
    break;}
case 321:
#line 1139 "cgrammar.y"
{ yyval.typequal = qual_createReturned (); ;
    break;}
case 322:
#line 1140 "cgrammar.y"
{ yyval.typequal = qual_createSef (); ;
    break;}
case 323:
#line 1143 "cgrammar.y"
{ yyval.typequal = qual_createUnused (); ;
    break;}
case 324:
#line 1144 "cgrammar.y"
{ yyval.typequal = qual_createExternal (); ;
    break;}
case 325:
#line 1147 "cgrammar.y"
{ yyval.typequal = qual_createTrueNull (); ;
    break;}
case 326:
#line 1148 "cgrammar.y"
{ yyval.typequal = qual_createFalseNull (); ;
    break;}
case 327:
#line 1151 "cgrammar.y"
{ yyval.typequal = qual_createAbstract (); ;
    break;}
case 328:
#line 1152 "cgrammar.y"
{ yyval.typequal = qual_createConcrete (); ;
    break;}
case 329:
#line 1153 "cgrammar.y"
{ yyval.typequal = qual_createMutable (); ;
    break;}
case 330:
#line 1154 "cgrammar.y"
{ yyval.typequal = qual_createImmutable (); ;
    break;}
case 331:
#line 1157 "cgrammar.y"
{ yyval.typequal = qual_createRefCounted (); ;
    break;}
case 332:
#line 1158 "cgrammar.y"
{ yyval.typequal = qual_createRefs (); ;
    break;}
case 333:
#line 1159 "cgrammar.y"
{ yyval.typequal = qual_createKillRef (); ;
    break;}
case 334:
#line 1160 "cgrammar.y"
{ yyval.typequal = qual_createRelDef (); ;
    break;}
case 335:
#line 1161 "cgrammar.y"
{ yyval.typequal = qual_createNewRef (); ;
    break;}
case 336:
#line 1162 "cgrammar.y"
{ yyval.typequal = qual_createTempRef (); ;
    break;}
case 337:
#line 1165 "cgrammar.y"
{ yyval.typequal = qual_createShort (); ;
    break;}
case 338:
#line 1166 "cgrammar.y"
{ yyval.typequal = qual_createLong (); ;
    break;}
case 339:
#line 1167 "cgrammar.y"
{ yyval.typequal = qual_createSigned (); ;
    break;}
case 340:
#line 1168 "cgrammar.y"
{ yyval.typequal = qual_createUnsigned (); ;
    break;}
case 341:
#line 1171 "cgrammar.y"
{ yyval.typequal = qual_createOut (); ;
    break;}
case 342:
#line 1172 "cgrammar.y"
{ yyval.typequal = qual_createIn (); ;
    break;}
case 343:
#line 1173 "cgrammar.y"
{ yyval.typequal = qual_createPartial (); ;
    break;}
case 344:
#line 1174 "cgrammar.y"
{ yyval.typequal = qual_createSpecial (); ;
    break;}
case 345:
#line 1177 "cgrammar.y"
{ yyval.typequal = qual_createConst (); ;
    break;}
case 346:
#line 1178 "cgrammar.y"
{ yyval.typequal = qual_createVolatile (); ;
    break;}
case 347:
#line 1179 "cgrammar.y"
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 348:
#line 1180 "cgrammar.y"
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 349:
#line 1181 "cgrammar.y"
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 350:
#line 1182 "cgrammar.y"
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 351:
#line 1183 "cgrammar.y"
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 352:
#line 1184 "cgrammar.y"
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 353:
#line 1185 "cgrammar.y"
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 354:
#line 1186 "cgrammar.y"
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 355:
#line 1187 "cgrammar.y"
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 362:
#line 1200 "cgrammar.y"
{ yyval.ctyp = ctype_unknown; ;
    break;}
case 363:
#line 1201 "cgrammar.y"
{ yyval.ctyp = ctype_anyintegral; ;
    break;}
case 364:
#line 1202 "cgrammar.y"
{ yyval.ctyp = ctype_unsignedintegral; ;
    break;}
case 365:
#line 1203 "cgrammar.y"
{ yyval.ctyp = ctype_signedintegral; ;
    break;}
case 369:
#line 1207 "cgrammar.y"
{ yyval.ctyp = ctype_fromQual (yyvsp[-1].typequal); ;
    break;}
case 370:
#line 1211 "cgrammar.y"
{ yyval.qtyp = qtype_resolve (yyvsp[-1].qtyp); ;
    break;}
case 371:
#line 1214 "cgrammar.y"
{ yyval.qtyp = yyvsp[0].qtyp; ;
    break;}
case 372:
#line 1216 "cgrammar.y"
{ yyval.qtyp = qtype_mergeAlt (yyvsp[-3].qtyp, yyvsp[-1].qtyp); ;
    break;}
case 374:
#line 1221 "cgrammar.y"
{ yyval.qtyp = qtype_mergeAlt (yyvsp[-2].qtyp, yyvsp[0].qtyp); ;
    break;}
case 375:
#line 1224 "cgrammar.y"
{ yyval.qtyp = qtype_addQual (yyvsp[0].qtyp, yyvsp[-1].typequal); ;
    break;}
case 376:
#line 1225 "cgrammar.y"
{ yyval.qtyp = qtype_addQual (yyvsp[0].qtyp, yyvsp[-1].typequal); ;
    break;}
case 377:
#line 1226 "cgrammar.y"
{ yyval.qtyp = qtype_combine (yyvsp[0].qtyp, yyvsp[-1].ctyp); ;
    break;}
case 378:
#line 1229 "cgrammar.y"
{ yyval.qtyp = qtype_unknown (); ;
    break;}
case 379:
#line 1230 "cgrammar.y"
{ yyval.qtyp = yyvsp[0].qtyp; ;
    break;}
case 380:
#line 1233 "cgrammar.y"
{ sRef_setGlobalScopeSafe (); ;
    break;}
case 381:
#line 1235 "cgrammar.y"
{ sRef_clearGlobalScopeSafe (); ;
    break;}
case 382:
#line 1237 "cgrammar.y"
{ yyval.ctyp = declareStruct (yyvsp[-8].cname, yyvsp[-3].flist); ;
    break;}
case 383:
#line 1238 "cgrammar.y"
{ sRef_setGlobalScopeSafe (); ;
    break;}
case 384:
#line 1240 "cgrammar.y"
{ sRef_clearGlobalScopeSafe (); ;
    break;}
case 385:
#line 1242 "cgrammar.y"
{ yyval.ctyp = declareUnion (yyvsp[-8].cname, yyvsp[-3].flist); ;
    break;}
case 386:
#line 1244 "cgrammar.y"
{ yyval.ctyp = declareStruct (yyvsp[-3].cname, uentryList_new ()); ;
    break;}
case 387:
#line 1246 "cgrammar.y"
{ yyval.ctyp = declareUnion (yyvsp[-3].cname, uentryList_new ()); ;
    break;}
case 388:
#line 1247 "cgrammar.y"
{ sRef_setGlobalScopeSafe (); ;
    break;}
case 389:
#line 1249 "cgrammar.y"
{ sRef_clearGlobalScopeSafe (); ;
    break;}
case 390:
#line 1251 "cgrammar.y"
{ yyval.ctyp = declareUnnamedStruct (yyvsp[-3].flist); ;
    break;}
case 391:
#line 1252 "cgrammar.y"
{ sRef_setGlobalScopeSafe (); ;
    break;}
case 392:
#line 1254 "cgrammar.y"
{ sRef_clearGlobalScopeSafe (); ;
    break;}
case 393:
#line 1256 "cgrammar.y"
{ yyval.ctyp = declareUnnamedUnion (yyvsp[-3].flist); ;
    break;}
case 394:
#line 1258 "cgrammar.y"
{ yyval.ctyp = ctype_createUnnamedStruct (uentryList_new ()); ;
    break;}
case 395:
#line 1260 "cgrammar.y"
{ yyval.ctyp = ctype_createUnnamedUnion (uentryList_new ()); ;
    break;}
case 396:
#line 1261 "cgrammar.y"
{ yyval.ctyp = handleStruct (yyvsp[-1].cname); ;
    break;}
case 397:
#line 1262 "cgrammar.y"
{ yyval.ctyp = handleUnion (yyvsp[-1].cname); ;
    break;}
case 398:
#line 1265 "cgrammar.y"
{ g_expectingTypeName = FALSE; ;
    break;}
case 400:
#line 1269 "cgrammar.y"
{ yyval.flist = uentryList_undefined; /* bogus! */ ;
    break;}
case 401:
#line 1270 "cgrammar.y"
{ yyval.flist = uentryList_mergeFields (yyvsp[-1].flist, yyvsp[0].flist); ;
    break;}
case 402:
#line 1274 "cgrammar.y"
{ yyval.flist = fixUentryList (yyvsp[-2].ntyplist, yyvsp[-4].qtyp); ;
    break;}
case 403:
#line 1276 "cgrammar.y"
{ yyval.flist = fixUnnamedDecl (yyvsp[-2].qtyp); ;
    break;}
case 404:
#line 1280 "cgrammar.y"
{ yyval.ntyplist = idDeclList_singleton (yyvsp[-1].ntyp); ;
    break;}
case 405:
#line 1282 "cgrammar.y"
{ yyval.ntyplist = idDeclList_add (yyvsp[-3].ntyplist, yyvsp[-1].ntyp); ;
    break;}
case 406:
#line 1285 "cgrammar.y"
{ yyval.ntyp = yyvsp[0].ntyp; ;
    break;}
case 407:
#line 1286 "cgrammar.y"
{ yyval.ntyp = idDecl_undefined; ;
    break;}
case 408:
#line 1287 "cgrammar.y"
{ yyval.ntyp = yyvsp[-3].ntyp; ;
    break;}
case 409:
#line 1292 "cgrammar.y"
{ yyval.ctyp = declareUnnamedEnum (yyvsp[-2].enumnamelist); ;
    break;}
case 410:
#line 1293 "cgrammar.y"
{ context_pushLoc (); ;
    break;}
case 411:
#line 1294 "cgrammar.y"
{ context_popLoc (); yyval.ctyp = declareEnum (yyvsp[-5].cname, yyvsp[-2].enumnamelist); ;
    break;}
case 412:
#line 1295 "cgrammar.y"
{ yyval.ctyp = handleEnum (yyvsp[-1].cname); ;
    break;}
case 413:
#line 1299 "cgrammar.y"
{ yyval.enumnamelist = enumNameList_single (yyvsp[0].cname); ;
    break;}
case 414:
#line 1301 "cgrammar.y"
{ yyval.enumnamelist = enumNameList_push (yyvsp[-2].enumnamelist, yyvsp[0].cname); ;
    break;}
case 416:
#line 1306 "cgrammar.y"
{ uentry ue = uentry_makeEnumConstant (yyvsp[0].cname, ctype_unknown);
     usymtab_supGlobalEntry (ue);
     yyval.cname = yyvsp[0].cname;
   ;
    break;}
case 417:
#line 1311 "cgrammar.y"
{ uentry ue = uentry_makeEnumInitializedConstant (yyvsp[-3].cname, ctype_unknown, yyvsp[0].expr);
     usymtab_supGlobalEntry (ue);
     yyval.cname = yyvsp[-3].cname; 
   ;
    break;}
case 419:
#line 1318 "cgrammar.y"
{ yyval.ntyp = idDecl_create (cstring_undefined, qtype_create (yyvsp[0].ctyp)); ;
    break;}
case 420:
#line 1320 "cgrammar.y"
{ 
     qtype qt = qtype_unknown ();

     qtype_adjustPointers (yyvsp[-1].count, qt);
     yyval.ntyp = idDecl_create (cstring_copy (LastIdentifier ()), qt);
   ;
    break;}
case 421:
#line 1327 "cgrammar.y"
{ yyval.ntyp = yyvsp[0].ntyp; qtype_adjustPointers (yyvsp[-1].count, idDecl_getTyp (yyval.ntyp)); ;
    break;}
case 423:
#line 1332 "cgrammar.y"
{ yyval.ntyp = yyvsp[0].ntyp; qtype_adjustPointers (yyvsp[-1].count, idDecl_getTyp (yyval.ntyp)); ;
    break;}
case 424:
#line 1335 "cgrammar.y"
{ yyval.entrylist = handleParamTypeList (yyvsp[0].entrylist); ;
    break;}
case 425:
#line 1336 "cgrammar.y"
{ yyval.entrylist = handleParamIdList (yyvsp[0].entrylist); ;
    break;}
case 426:
#line 1339 "cgrammar.y"
{ /* ignored for now */; ;
    break;}
case 427:
#line 1340 "cgrammar.y"
{ ; ;
    break;}
case 428:
#line 1343 "cgrammar.y"
{ ; ;
    break;}
case 429:
#line 1344 "cgrammar.y"
{ ; ;
    break;}
case 430:
#line 1347 "cgrammar.y"
{ yyval.count = 1; ;
    break;}
case 431:
#line 1348 "cgrammar.y"
{ yyval.count = 1; ;
    break;}
case 432:
#line 1349 "cgrammar.y"
{ yyval.count = 1 + yyvsp[0].count; ;
    break;}
case 433:
#line 1350 "cgrammar.y"
{ yyval.count = 1 + yyvsp[0].count; ;
    break;}
case 435:
#line 1354 "cgrammar.y"
{ yyval.entrylist = uentryList_add (yyvsp[-2].entrylist, uentry_makeElipsisMarker ()); ;
    break;}
case 436:
#line 1357 "cgrammar.y"
{ yyval.entrylist = uentryList_single (uentry_makeVariableLoc (yyvsp[0].cname, ctype_int)); ;
    break;}
case 437:
#line 1358 "cgrammar.y"
{ yyval.entrylist = uentryList_add (yyvsp[-2].entrylist, uentry_makeVariableLoc (yyvsp[0].cname, ctype_int)); ;
    break;}
case 438:
#line 1361 "cgrammar.y"
{ yyval.entrylist = uentryList_single (uentry_makeElipsisMarker ()); ;
    break;}
case 440:
#line 1363 "cgrammar.y"
{ yyval.entrylist = uentryList_add (yyvsp[-2].entrylist, uentry_makeElipsisMarker ()); ;
    break;}
case 441:
#line 1366 "cgrammar.y"
{ storeLoc (); ;
    break;}
case 442:
#line 1366 "cgrammar.y"
{ yyval.entrylist = uentryList_single (yyvsp[0].oentry); ;
    break;}
case 443:
#line 1367 "cgrammar.y"
{ storeLoc (); ;
    break;}
case 444:
#line 1368 "cgrammar.y"
{ yyval.entrylist = uentryList_add (yyvsp[-3].entrylist, yyvsp[0].oentry); ;
    break;}
case 445:
#line 1372 "cgrammar.y"
{ 
     if (isFlipOldStyle ()) 
       { 
	 llparseerror (cstring_makeLiteral ("Inconsistent function parameter syntax (mixing old and new style declaration)")); 
       }
     else 
       { 
	 setNewStyle (); 
       }
     yyval.oentry = makeCurrentParam (idDecl_fixParamBase (yyvsp[-1].ntyp, yyvsp[-2].qtyp)); 
   ;
    break;}
case 446:
#line 1384 "cgrammar.y"
{ 
     idDecl tparam = idDecl_create (yyvsp[0].cname, qtype_unknown ());

     if (isNewStyle ()) 
       {
	 llparseerror (message ("Inconsistent function parameter syntax: %q",
				idDecl_unparse (tparam))); 
       }

     setFlipOldStyle ();
     yyval.oentry = makeCurrentParam (tparam);
     idDecl_free (tparam);
   ;
    break;}
case 448:
#line 1400 "cgrammar.y"
{ yyval.qtyp = qtype_newBase (yyvsp[-1].qtyp, yyvsp[0].ctyp); ;
    break;}
case 449:
#line 1403 "cgrammar.y"
{ yyval.ctyp = ctype_adjustPointers (yyvsp[0].count, ctype_unknown); ;
    break;}
case 451:
#line 1405 "cgrammar.y"
{ yyval.ctyp = ctype_adjustPointers (yyvsp[-1].count, yyvsp[0].ctyp); ;
    break;}
case 452:
#line 1408 "cgrammar.y"
{ yyval.ctyp = ctype_unknown; ;
    break;}
case 454:
#line 1413 "cgrammar.y"
{ yyval.ctyp = ctype_expectFunction (yyvsp[-1].ctyp); ;
    break;}
case 455:
#line 1414 "cgrammar.y"
{ yyval.ctyp = ctype_makeArray (ctype_unknown); ;
    break;}
case 456:
#line 1416 "cgrammar.y"
{ yyval.ctyp = ctype_makeFixedArray (ctype_unknown, exprNode_getLongValue (yyvsp[-1].expr)); ;
    break;}
case 457:
#line 1417 "cgrammar.y"
{ yyval.ctyp = ctype_makeArray (yyvsp[-2].ctyp); ;
    break;}
case 458:
#line 1419 "cgrammar.y"
{ yyval.ctyp = ctype_makeFixedArray (yyvsp[-3].ctyp, exprNode_getLongValue (yyvsp[-1].expr)); ;
    break;}
case 459:
#line 1421 "cgrammar.y"
{ yyval.ctyp = ctype_makeFunction (ctype_unknown, uentryList_makeMissingParams ()); ;
    break;}
case 460:
#line 1423 "cgrammar.y"
{ yyval.ctyp = ctype_makeParamsFunction (ctype_unknown, yyvsp[-1].entrylist); ;
    break;}
case 461:
#line 1425 "cgrammar.y"
{ yyval.ctyp = ctype_makeFunction (yyvsp[-3].ctyp, uentryList_makeMissingParams ()); ;
    break;}
case 462:
#line 1427 "cgrammar.y"
{ yyval.ctyp = ctype_makeParamsFunction (yyvsp[-4].ctyp, yyvsp[-1].entrylist); ;
    break;}
case 472:
#line 1455 "cgrammar.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 475:
#line 1463 "cgrammar.y"
{ yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 476:
#line 1467 "cgrammar.y"
{ yyval.expr = exprNode_while (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 477:
#line 1469 "cgrammar.y"
{ yyval.expr = exprNode_doWhile (yyvsp[-5].expr, yyvsp[-2].expr); ;
    break;}
case 478:
#line 1471 "cgrammar.y"
{ yyval.expr = exprNode_doWhile (yyvsp[-4].expr, yyvsp[-1].expr); ;
    break;}
case 479:
#line 1473 "cgrammar.y"
{ yyval.expr = exprNode_for (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 480:
#line 1477 "cgrammar.y"
{ context_setProtectVars (); ;
    break;}
case 481:
#line 1477 "cgrammar.y"
{ context_sizeofReleaseVars (); ;
    break;}
case 482:
#line 1479 "cgrammar.y"
{ yyval.expr = exprNode_forPred (yyvsp[-7].expr, yyvsp[-5].expr, yyvsp[-2].expr); 
     context_enterForClause (yyvsp[-5].expr); ;
    break;}
case 483:
#line 1484 "cgrammar.y"
{ setProcessingIterVars (yyvsp[-2].entry); ;
    break;}
case 484:
#line 1486 "cgrammar.y"
{ yyval.expr = exprNode_iterStart (yyvsp[-5].entry, yyvsp[-1].exprlist); ;
    break;}
case 485:
#line 1487 "cgrammar.y"
{ yyval.expr = exprNode_createId (yyvsp[0].entry); ;
    break;}
case 489:
#line 1493 "cgrammar.y"
{ yyval.expr = yyvsp[-1].expr; DPRINTF (("def stmt: %s", exprNode_unparse (yyval.expr))); ;
    break;}
case 497:
#line 1501 "cgrammar.y"
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 498:
#line 1502 "cgrammar.y"
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 499:
#line 1506 "cgrammar.y"
{ /* don't: context_exitTrueClause ($1, $2); */
     yyval.expr = exprNode_if (yyvsp[-1].expr, yyvsp[0].expr); 
   ;
    break;}
case 500:
#line 1511 "cgrammar.y"
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 501:
#line 1514 "cgrammar.y"
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 512:
#line 1529 "cgrammar.y"
{ yyval.expr = exprNode_addParens (yyvsp[-2].tok, yyvsp[-1].expr); ;
    break;}
case 514:
#line 1531 "cgrammar.y"
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 515:
#line 1534 "cgrammar.y"
{ yyval.expr = exprNode_labelMarker (yyvsp[-1].cname); ;
    break;}
case 516:
#line 1535 "cgrammar.y"
{ yyval.expr = exprNode_notReached (yyvsp[0].expr); ;
    break;}
case 517:
#line 1541 "cgrammar.y"
{ context_enterCaseClause (yyvsp[0].expr); ;
    break;}
case 518:
#line 1542 "cgrammar.y"
{ yyval.expr = exprNode_caseMarker (yyvsp[-2].expr, FALSE); ;
    break;}
case 519:
#line 1543 "cgrammar.y"
{ context_enterCaseClause (yyvsp[0].expr); ;
    break;}
case 520:
#line 1544 "cgrammar.y"
{ yyval.expr = exprNode_caseMarker (yyvsp[-2].expr, TRUE); ;
    break;}
case 521:
#line 1547 "cgrammar.y"
{ context_enterCaseClause (exprNode_undefined); ;
    break;}
case 522:
#line 1548 "cgrammar.y"
{ yyval.expr = exprNode_defaultMarker (yyvsp[-2].tok, FALSE); ;
    break;}
case 523:
#line 1549 "cgrammar.y"
{ context_enterCaseClause (exprNode_undefined); ;
    break;}
case 524:
#line 1550 "cgrammar.y"
{ yyval.expr = exprNode_defaultMarker (yyvsp[-2].tok, TRUE); ;
    break;}
case 525:
#line 1553 "cgrammar.y"
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 526:
#line 1555 "cgrammar.y"
{ yyval.expr = yyvsp[0].expr; context_exitInner (yyvsp[0].expr); ;
    break;}
case 527:
#line 1558 "cgrammar.y"
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 528:
#line 1561 "cgrammar.y"
{ context_enterInnerContext (); ;
    break;}
case 529:
#line 1564 "cgrammar.y"
{ context_exitInnerPlain (); ;
    break;}
case 530:
#line 1567 "cgrammar.y"
{ context_enterStructInnerContext (); ;
    break;}
case 531:
#line 1570 "cgrammar.y"
{ context_exitStructInnerContext (); ;
    break;}
case 532:
#line 1573 "cgrammar.y"
{ context_exitInnerSafe (); ;
    break;}
case 533:
#line 1576 "cgrammar.y"
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 534:
#line 1577 "cgrammar.y"
{ yyval.expr = exprNode_notReached (exprNode_createTok (yyvsp[0].tok)); ;
    break;}
case 535:
#line 1578 "cgrammar.y"
{ yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 536:
#line 1580 "cgrammar.y"
{ yyval.expr = exprNode_notReached (exprNode_updateLocation (yyvsp[-2].expr, lltok_getLoc (yyvsp[0].tok))); ;
    break;}
case 537:
#line 1581 "cgrammar.y"
{ yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 538:
#line 1583 "cgrammar.y"
{ yyval.expr = exprNode_notReached (exprNode_updateLocation (yyvsp[-2].expr, lltok_getLoc (yyvsp[0].tok))); ;
    break;}
case 539:
#line 1585 "cgrammar.y"
{ yyval.expr = exprNode_updateLocation (exprNode_concat (yyvsp[-2].expr, yyvsp[-1].expr), lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 540:
#line 1587 "cgrammar.y"
{ yyval.expr = exprNode_notReached (exprNode_updateLocation (exprNode_concat (yyvsp[-3].expr, yyvsp[-2].expr), 
							lltok_getLoc (yyvsp[-1].tok))); 
   ;
    break;}
case 541:
#line 1593 "cgrammar.y"
{ yyval.expr = exprNode_makeBlock (yyvsp[0].expr); ;
    break;}
case 542:
#line 1597 "cgrammar.y"
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 543:
#line 1599 "cgrammar.y"
{ yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 544:
#line 1601 "cgrammar.y"
{ yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 545:
#line 1603 "cgrammar.y"
{ yyval.expr = exprNode_updateLocation (exprNode_concat (yyvsp[-2].expr, yyvsp[-1].expr), lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 547:
#line 1607 "cgrammar.y"
{ yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 548:
#line 1610 "cgrammar.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 549:
#line 1611 "cgrammar.y"
{ yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 550:
#line 1614 "cgrammar.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 551:
#line 1615 "cgrammar.y"
{ yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 552:
#line 1618 "cgrammar.y"
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 553:
#line 1619 "cgrammar.y"
{ yyval.expr = exprNode_statement (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 554:
#line 1622 "cgrammar.y"
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 555:
#line 1623 "cgrammar.y"
{ yyval.expr = exprNode_statement (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 556:
#line 1624 "cgrammar.y"
{ yyval.expr = exprNode_checkExpr (yyvsp[0].expr); ;
    break;}
case 557:
#line 1628 "cgrammar.y"
{ yyval.expr = yyvsp[-1].expr; exprNode_produceGuards (yyvsp[-1].expr); context_enterTrueClause (yyvsp[-1].expr); ;
    break;}
case 558:
#line 1636 "cgrammar.y"
{ 
     context_exitTrueClause (yyvsp[-1].expr, yyvsp[0].expr);
     yyval.expr = exprNode_if (yyvsp[-1].expr, yyvsp[0].expr); 
   ;
    break;}
case 559:
#line 1640 "cgrammar.y"
{ context_enterFalseClause (yyvsp[-2].expr); ;
    break;}
case 560:
#line 1641 "cgrammar.y"
{
     context_exitClause (yyvsp[-4].expr, yyvsp[-3].expr, yyvsp[0].expr);
     yyval.expr = exprNode_ifelse (yyvsp[-4].expr, yyvsp[-3].expr, yyvsp[0].expr); 
   ;
    break;}
case 561:
#line 1645 "cgrammar.y"
{ context_enterSwitch (yyvsp[0].expr); ;
    break;}
case 562:
#line 1646 "cgrammar.y"
{ yyval.expr = exprNode_switch (yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 563:
#line 1650 "cgrammar.y"
{ yyval.expr = exprNode_whilePred (yyvsp[-1].expr); context_enterWhileClause (yyvsp[-1].expr); ;
    break;}
case 564:
#line 1654 "cgrammar.y"
{ yyval.expr = exprNode_whilePred(yyvsp[-1].expr); ;
    break;}
case 565:
#line 1657 "cgrammar.y"
{ context_enterIterClause (); ;
    break;}
case 566:
#line 1658 "cgrammar.y"
{ setProcessingIterVars (yyvsp[-3].entry); ;
    break;}
case 567:
#line 1661 "cgrammar.y"
{ 
     yyval.expr = exprNode_iter (yyvsp[-9].entry, yyvsp[-4].exprlist, yyvsp[-2].expr, yyvsp[-1].entry); 

   ;
    break;}
case 568:
#line 1667 "cgrammar.y"
{ yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 569:
#line 1668 "cgrammar.y"
{ nextIterParam (); ;
    break;}
case 570:
#line 1669 "cgrammar.y"
{ yyval.exprlist = exprNodeList_push (yyvsp[-3].exprlist, yyvsp[0].expr); ;
    break;}
case 571:
#line 1672 "cgrammar.y"
{ yyval.expr = exprNode_iterExpr (yyvsp[0].expr); ;
    break;}
case 572:
#line 1673 "cgrammar.y"
{ yyval.expr = exprNode_iterId (yyvsp[0].entry); ;
    break;}
case 573:
#line 1674 "cgrammar.y"
{ uentry ue = coerceIterId (yyvsp[0].cname);

		      if (uentry_isValid (ue)) 
			{
			  yyval.expr = exprNode_iterId (ue);
			}
		      else
			{
			  yyval.expr = exprNode_iterNewId (cstring_copy (LastIdentifier ()));
			}
		    ;
    break;}
case 574:
#line 1685 "cgrammar.y"
{ yyval.expr = exprNode_iterNewId (yyvsp[0].cname); ;
    break;}
case 576:
#line 1693 "cgrammar.y"
{ yyval.expr = exprNode_combineLiterals (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 578:
#line 1697 "cgrammar.y"
{ yyval.expr = exprNode_addParens (yyvsp[-2].tok, yyvsp[-1].expr); ;
    break;}
case 580:
#line 1701 "cgrammar.y"
{ yyval.expr = exprNode_arrayFetch (yyvsp[-3].expr, yyvsp[-1].expr); ;
    break;}
case 581:
#line 1702 "cgrammar.y"
{ yyval.expr = exprNode_functionCall (yyvsp[-2].expr, exprNodeList_new ()); ;
    break;}
case 582:
#line 1703 "cgrammar.y"
{ yyval.expr = exprNode_functionCall (yyvsp[-3].expr, yyvsp[-1].exprlist); ;
    break;}
case 583:
#line 1705 "cgrammar.y"
{ yyval.expr = exprNode_vaArg (yyvsp[-5].tok, yyvsp[-3].expr, yyvsp[-1].qtyp); ;
    break;}
case 584:
#line 1706 "cgrammar.y"
{ yyval.expr = exprNode_fieldAccess (yyvsp[-4].expr, yyvsp[-2].tok, yyvsp[-1].cname); ;
    break;}
case 585:
#line 1707 "cgrammar.y"
{ yyval.expr = exprNode_arrowAccess (yyvsp[-4].expr, yyvsp[-2].tok, yyvsp[-1].cname); ;
    break;}
case 586:
#line 1708 "cgrammar.y"
{ yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 587:
#line 1709 "cgrammar.y"
{ yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 589:
#line 1713 "cgrammar.y"
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 590:
#line 1714 "cgrammar.y"
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 591:
#line 1715 "cgrammar.y"
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 592:
#line 1716 "cgrammar.y"
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 593:
#line 1717 "cgrammar.y"
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 594:
#line 1718 "cgrammar.y"
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 595:
#line 1719 "cgrammar.y"
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 596:
#line 1720 "cgrammar.y"
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 597:
#line 1721 "cgrammar.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 599:
#line 1725 "cgrammar.y"
{ yyval.expr = exprNode_cast (yyvsp[-3].tok, yyvsp[0].expr, yyvsp[-2].qtyp); ;
    break;}
case 601:
#line 1729 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 602:
#line 1730 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 603:
#line 1731 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 605:
#line 1735 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 606:
#line 1736 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 608:
#line 1740 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 609:
#line 1741 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 611:
#line 1745 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 612:
#line 1746 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 613:
#line 1747 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 614:
#line 1748 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 616:
#line 1752 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 617:
#line 1753 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 619:
#line 1757 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 621:
#line 1761 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 623:
#line 1766 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 625:
#line 1770 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 627:
#line 1774 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 629:
#line 1778 "cgrammar.y"
{ context_enterTrueClause (yyvsp[-1].expr); ;
    break;}
case 630:
#line 1779 "cgrammar.y"
{ context_enterFalseClause (yyvsp[-4].expr); ;
    break;}
case 631:
#line 1780 "cgrammar.y"
{ yyval.expr = exprNode_cond (yyvsp[-6].expr, yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 633:
#line 1784 "cgrammar.y"
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 634:
#line 1785 "cgrammar.y"
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 635:
#line 1786 "cgrammar.y"
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 636:
#line 1787 "cgrammar.y"
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 637:
#line 1788 "cgrammar.y"
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 638:
#line 1789 "cgrammar.y"
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 639:
#line 1790 "cgrammar.y"
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 640:
#line 1791 "cgrammar.y"
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 641:
#line 1792 "cgrammar.y"
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 642:
#line 1793 "cgrammar.y"
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 643:
#line 1794 "cgrammar.y"
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 644:
#line 1797 "cgrammar.y"
{ yyval.entry = yyvsp[0].entry; ;
    break;}
case 645:
#line 1798 "cgrammar.y"
{ yyval.entry = uentry_undefined; ;
    break;}
case 646:
#line 1801 "cgrammar.y"
{ context_enterDoWhileClause (); yyval.tok = yyvsp[0].tok; ;
    break;}
case 647:
#line 1805 "cgrammar.y"
{ yyval.expr = exprNode_while (yyvsp[-1].expr, yyvsp[0].expr); context_exitWhileClause (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 648:
#line 1807 "cgrammar.y"
{ yyval.expr = exprNode_statement (exprNode_doWhile (yyvsp[-5].expr, yyvsp[-2].expr), yyvsp[0].tok); ;
    break;}
case 649:
#line 1809 "cgrammar.y"
{ yyval.expr = exprNode_for (yyvsp[-1].expr, yyvsp[0].expr); context_exitForClause (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 650:
#line 1812 "cgrammar.y"
{ yyval.expr = exprNode_while (yyvsp[-1].expr, yyvsp[0].expr); context_exitWhileClause (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 651:
#line 1814 "cgrammar.y"
{ yyval.expr = exprNode_statement (exprNode_doWhile (yyvsp[-5].expr, yyvsp[-2].expr), yyvsp[0].tok); ;
    break;}
case 652:
#line 1816 "cgrammar.y"
{ yyval.expr = exprNode_doWhile (yyvsp[-4].expr, yyvsp[-1].expr); ;
    break;}
case 653:
#line 1817 "cgrammar.y"
{ yyval.expr = exprNode_for (yyvsp[-1].expr, yyvsp[0].expr); context_exitForClause (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 654:
#line 1820 "cgrammar.y"
{ yyval.expr = exprNode_goto (yyvsp[-1].cname); ;
    break;}
case 655:
#line 1821 "cgrammar.y"
{ yyval.expr = exprNode_continue (yyvsp[-1].tok, BADTOK); ;
    break;}
case 656:
#line 1823 "cgrammar.y"
{ yyval.expr = exprNode_continue (yyvsp[-2].tok, QINNERCONTINUE); ;
    break;}
case 657:
#line 1824 "cgrammar.y"
{ yyval.expr = exprNode_break (yyvsp[-1].tok, BADTOK); ;
    break;}
case 658:
#line 1825 "cgrammar.y"
{ yyval.expr = exprNode_break (yyvsp[-1].tok, QSWITCHBREAK); ;
    break;}
case 659:
#line 1826 "cgrammar.y"
{ yyval.expr = exprNode_break (yyvsp[-1].tok, QLOOPBREAK); ;
    break;}
case 660:
#line 1827 "cgrammar.y"
{ yyval.expr = exprNode_break (yyvsp[-1].tok, QINNERBREAK); ;
    break;}
case 661:
#line 1828 "cgrammar.y"
{ yyval.expr = exprNode_break (yyvsp[-1].tok, QSAFEBREAK); ;
    break;}
case 662:
#line 1829 "cgrammar.y"
{ yyval.expr = exprNode_nullReturn (yyvsp[-1].tok); ;
    break;}
case 663:
#line 1830 "cgrammar.y"
{ yyval.expr = exprNode_return (yyvsp[-1].expr); ;
    break;}
case 665:
#line 1834 "cgrammar.y"
{ ; ;
    break;}
case 668:
#line 1841 "cgrammar.y"
{ yyval.cname = uentry_getName (yyvsp[0].entry); ;
    break;}
case 669:
#line 1842 "cgrammar.y"
{ yyval.cname = uentry_getName (yyvsp[0].entry); ;
    break;}
case 670:
#line 1843 "cgrammar.y"
{ yyval.cname = uentry_getName (yyvsp[0].entry); ;
    break;}
case 671:
#line 1844 "cgrammar.y"
{ yyval.cname = yyvsp[0].cname; ;
    break;}
case 673:
#line 1848 "cgrammar.y"
{ yyval.ctyp = ctype_unknown; ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/lib/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 1850 "cgrammar.y"


/*@-redecl@*/ /*@-namechecks@*/
extern char *yytext;
/*@=redecl@*/ /*@=namechecks@*/

# include "bison.reset"

void yyerror (/*@unused@*/ char *s) 
{
  static bool givehint = FALSE;

  if (context_inIterDef ())
    {
      llerror (FLG_SYNTAX, message ("Iter syntax not parseable: %s", 
				    context_inFunctionName ()));
    }
  else if (context_inIterEnd ())
    {
      llerror (FLG_SYNTAX, message ("Iter finalizer syntax not parseable: %s", 
				    context_inFunctionName ()));
    }
  else if (context_inMacro ())
    {
      llerror (FLG_SYNTAX, message ("Macro syntax not parseable: %s", 
				    context_inFunctionName ()));
      
      if (context_inUnknownMacro ())
	{
	  if (!givehint)
	    {
	      llhint (cstring_makeLiteral 
		     ("Precede macro definition with /*@notfunction@*/ "
		      "to suppress checking and force expansion"));
	      givehint = TRUE;
	    }
	}

      swallowMacro ();
      context_exitAllClausesQuiet ();
    }
  else
    {
      llparseerror (cstring_undefined);
    }
}












/*
** Resets all flags in bison.head
*/


/*@=allmacros@*/
/*@=boolint@*/
/*@=charint@*/
/*@=macroparams@*/
/*@=macroundef@*/
/*@=unreachable@*/
/*@=macrospec@*/
/*@=varuse@*/
/*@=ignorequals@*/
/*@=macrostmt@*/
/*@=noeffect@*/
/*@=shadow@*/
/*@=exitarg@*/
/*@=macroredef@*/
/*@=uniondef@*/
/*@=compdef@*/
/*@=matchfields@*/
/*@=exportlocal@*/
/*@=evalorderuncon@*/
/*@=exportheader@*/
/*@=typeuse@*/
/*@=redecl@*/
/*@=redef@*/
/*@=noparams@*/
/*@=ansireserved@*/
/*@=fielduse@*/
/*@=ifblock@*/
/*@=elseifcomplete@*/
/*@=whileblock@*/
/*@=forblock@*/
/*@=branchstate@*/
/*@=readonlytrans@*/
/*@=namechecks@*/
/*@=usedef@*/
/*@=systemunrecog@*/
/*@=dependenttrans@*/
/*@=unqualifiedtrans@*/
/*@=declundef@*/


/*drl added 11/27/2001*/
/*@=arraybounds@*/
/*@=arrayboundsread@*/
