/*
** Inserted at beginning of c files generated by bison
** REMEMBER:  Change bison.reset too.
*/

/*@-allmacros@*/
/*@+boolint@*/
/*@+charint@*/
/*@-macroparams@*/
/*@-macroundef@*/
/*@-unreachable@*/
/*@-macrospec@*/
/*@-varuse@*/
/*@+ignorequals@*/
/*@-macrostmt@*/
/*@-noeffect@*/
/*@-shadow@*/
/*@-exitarg@*/
/*@-macroredef@*/
/*@-uniondef@*/
/*@-compdef@*/
/*@-matchfields@*/
/*@-exportlocal@*/
/*@-evalorderuncon@*/
/*@-exportheader@*/
/*@-typeuse@*/
/*@-redecl@*/
/*@-redef@*/
/*@-noparams@*/
/*@-ansireserved@*/
/*@-fielduse@*/
/*@-ifblock@*/
/*@-elseifcomplete@*/
/*@-whileblock@*/
/*@-forblock@*/
/*@-branchstate@*/
/*@-readonlytrans@*/
/*@-namechecks@*/
/*@-usedef@*/
/*@-systemunrecog@*/
/*@-dependenttrans@*/
/*@-unqualifiedtrans@*/
/*@-nullassign@*/
/*@-nullpass@*/
/*@-nullptrarith*/
/*@-usereleased@*/
/*@-declundef@*/

/*drl added 11/27/2001*/
/*@-bounds@*/

/*drl added 12/11/2002*/
/*@-type@*/

/* < end of bison.head > */

/* A Bison parser, made by GNU Bison 1.875a.  */

/* Skeleton parser for Yacc-like parsing with Bison,
   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* Written by Richard Stallman by simplifying the original so called
   ``semantic'' parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Using locations.  */
#define YYLSP_NEEDED 0



/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     BADTOK = 258,
     SKIPTOK = 259,
     CTOK_ELIPSIS = 260,
     CASE = 261,
     DEFAULT = 262,
     CIF = 263,
     CELSE = 264,
     SWITCH = 265,
     WHILE = 266,
     DO = 267,
     CFOR = 268,
     GOTO = 269,
     CONTINUE = 270,
     BREAK = 271,
     RETURN = 272,
     TSEMI = 273,
     TLBRACE = 274,
     TRBRACE = 275,
     TCOMMA = 276,
     TCOLON = 277,
     TASSIGN = 278,
     TLPAREN = 279,
     TRPAREN = 280,
     TLSQBR = 281,
     TRSQBR = 282,
     TDOT = 283,
     TAMPERSAND = 284,
     TEXCL = 285,
     TTILDE = 286,
     TMINUS = 287,
     TPLUS = 288,
     TMULT = 289,
     TDIV = 290,
     TPERCENT = 291,
     TLT = 292,
     TGT = 293,
     TCIRC = 294,
     TBAR = 295,
     TQUEST = 296,
     CSIZEOF = 297,
     CALIGNOF = 298,
     CTYPEOF = 299,
     ARROW_OP = 300,
     CTYPEDEF = 301,
     COFFSETOF = 302,
     INC_OP = 303,
     DEC_OP = 304,
     LEFT_OP = 305,
     RIGHT_OP = 306,
     LE_OP = 307,
     GE_OP = 308,
     EQ_OP = 309,
     NE_OP = 310,
     AND_OP = 311,
     OR_OP = 312,
     MUL_ASSIGN = 313,
     DIV_ASSIGN = 314,
     MOD_ASSIGN = 315,
     ADD_ASSIGN = 316,
     SUB_ASSIGN = 317,
     LEFT_ASSIGN = 318,
     RIGHT_ASSIGN = 319,
     AND_ASSIGN = 320,
     XOR_ASSIGN = 321,
     OR_ASSIGN = 322,
     CSTRUCT = 323,
     CUNION = 324,
     CENUM = 325,
     VA_ARG = 326,
     VA_DCL = 327,
     QWARN = 328,
     QGLOBALS = 329,
     QMODIFIES = 330,
     QNOMODS = 331,
     QCONSTANT = 332,
     QFUNCTION = 333,
     QITER = 334,
     QDEFINES = 335,
     QUSES = 336,
     QALLOCATES = 337,
     QSETS = 338,
     QRELEASES = 339,
     QPRECLAUSE = 340,
     QPOSTCLAUSE = 341,
     QINVARIANT = 342,
     QALT = 343,
     QUNDEF = 344,
     QKILLED = 345,
     QENDMACRO = 346,
     LLMACRO = 347,
     LLMACROITER = 348,
     LLMACROEND = 349,
     TENDMACRO = 350,
     QDREVEALSTATE = 351,
     QSWITCHBREAK = 352,
     QLOOPBREAK = 353,
     QINNERBREAK = 354,
     QSAFEBREAK = 355,
     QINNERCONTINUE = 356,
     QFALLTHROUGH = 357,
     QLINTNOTREACHED = 358,
     QLINTFALLTHROUGH = 359,
     QLINTFALLTHRU = 360,
     QARGSUSED = 361,
     QPRINTFLIKE = 362,
     QLINTPRINTFLIKE = 363,
     QSCANFLIKE = 364,
     QMESSAGELIKE = 365,
     QNOTREACHED = 366,
     QCONST = 367,
     QRESTRICT = 368,
     QVOLATILE = 369,
     QINLINE = 370,
     QEXTENSION = 371,
     QEXTERN = 372,
     QSTATIC = 373,
     QAUTO = 374,
     QREGISTER = 375,
     QOUT = 376,
     QIN = 377,
     QYIELD = 378,
     QONLY = 379,
     QTEMP = 380,
     QSHARED = 381,
     QREF = 382,
     QUNIQUE = 383,
     QCHECKED = 384,
     QUNCHECKED = 385,
     QCHECKEDSTRICT = 386,
     QCHECKMOD = 387,
     QKEEP = 388,
     QKEPT = 389,
     QPARTIAL = 390,
     QSPECIAL = 391,
     QOWNED = 392,
     QDEPENDENT = 393,
     QRETURNED = 394,
     QEXPOSED = 395,
     QNULL = 396,
     QOBSERVER = 397,
     QISNULL = 398,
     QEXITS = 399,
     QMAYEXIT = 400,
     QNEVEREXIT = 401,
     QTRUEEXIT = 402,
     QFALSEEXIT = 403,
     QLONG = 404,
     QSIGNED = 405,
     QUNSIGNED = 406,
     QSHORT = 407,
     QUNUSED = 408,
     QSEF = 409,
     QNOTNULL = 410,
     QRELNULL = 411,
     QABSTRACT = 412,
     QNUMABSTRACT = 413,
     QCONCRETE = 414,
     QMUTABLE = 415,
     QIMMUTABLE = 416,
     QTRUENULL = 417,
     QFALSENULL = 418,
     QEXTERNAL = 419,
     QREFCOUNTED = 420,
     QREFS = 421,
     QNEWREF = 422,
     QTEMPREF = 423,
     QKILLREF = 424,
     QRELDEF = 425,
     CGCHAR = 426,
     CBOOL = 427,
     CINT = 428,
     CGFLOAT = 429,
     CDOUBLE = 430,
     CVOID = 431,
     QANYTYPE = 432,
     QINTEGRALTYPE = 433,
     QUNSIGNEDINTEGRALTYPE = 434,
     QSIGNEDINTEGRALTYPE = 435,
     QNULLTERMINATED = 436,
     QSETBUFFERSIZE = 437,
     QSETSTRINGLENGTH = 438,
     QMAXSET = 439,
     QMAXREAD = 440,
     QTESTINRANGE = 441,
     TCAND = 442,
     IDENTIFIER = 443,
     NEW_IDENTIFIER = 444,
     TYPE_NAME_OR_ID = 445,
     CANNOTATION = 446,
     CCONSTANT = 447,
     ITER_NAME = 448,
     ITER_ENDNAME = 449,
     TYPE_NAME = 450,
     METASTATE_NAME = 451
   };
#endif
#define BADTOK 258
#define SKIPTOK 259
#define CTOK_ELIPSIS 260
#define CASE 261
#define DEFAULT 262
#define CIF 263
#define CELSE 264
#define SWITCH 265
#define WHILE 266
#define DO 267
#define CFOR 268
#define GOTO 269
#define CONTINUE 270
#define BREAK 271
#define RETURN 272
#define TSEMI 273
#define TLBRACE 274
#define TRBRACE 275
#define TCOMMA 276
#define TCOLON 277
#define TASSIGN 278
#define TLPAREN 279
#define TRPAREN 280
#define TLSQBR 281
#define TRSQBR 282
#define TDOT 283
#define TAMPERSAND 284
#define TEXCL 285
#define TTILDE 286
#define TMINUS 287
#define TPLUS 288
#define TMULT 289
#define TDIV 290
#define TPERCENT 291
#define TLT 292
#define TGT 293
#define TCIRC 294
#define TBAR 295
#define TQUEST 296
#define CSIZEOF 297
#define CALIGNOF 298
#define CTYPEOF 299
#define ARROW_OP 300
#define CTYPEDEF 301
#define COFFSETOF 302
#define INC_OP 303
#define DEC_OP 304
#define LEFT_OP 305
#define RIGHT_OP 306
#define LE_OP 307
#define GE_OP 308
#define EQ_OP 309
#define NE_OP 310
#define AND_OP 311
#define OR_OP 312
#define MUL_ASSIGN 313
#define DIV_ASSIGN 314
#define MOD_ASSIGN 315
#define ADD_ASSIGN 316
#define SUB_ASSIGN 317
#define LEFT_ASSIGN 318
#define RIGHT_ASSIGN 319
#define AND_ASSIGN 320
#define XOR_ASSIGN 321
#define OR_ASSIGN 322
#define CSTRUCT 323
#define CUNION 324
#define CENUM 325
#define VA_ARG 326
#define VA_DCL 327
#define QWARN 328
#define QGLOBALS 329
#define QMODIFIES 330
#define QNOMODS 331
#define QCONSTANT 332
#define QFUNCTION 333
#define QITER 334
#define QDEFINES 335
#define QUSES 336
#define QALLOCATES 337
#define QSETS 338
#define QRELEASES 339
#define QPRECLAUSE 340
#define QPOSTCLAUSE 341
#define QINVARIANT 342
#define QALT 343
#define QUNDEF 344
#define QKILLED 345
#define QENDMACRO 346
#define LLMACRO 347
#define LLMACROITER 348
#define LLMACROEND 349
#define TENDMACRO 350
#define QDREVEALSTATE 351
#define QSWITCHBREAK 352
#define QLOOPBREAK 353
#define QINNERBREAK 354
#define QSAFEBREAK 355
#define QINNERCONTINUE 356
#define QFALLTHROUGH 357
#define QLINTNOTREACHED 358
#define QLINTFALLTHROUGH 359
#define QLINTFALLTHRU 360
#define QARGSUSED 361
#define QPRINTFLIKE 362
#define QLINTPRINTFLIKE 363
#define QSCANFLIKE 364
#define QMESSAGELIKE 365
#define QNOTREACHED 366
#define QCONST 367
#define QRESTRICT 368
#define QVOLATILE 369
#define QINLINE 370
#define QEXTENSION 371
#define QEXTERN 372
#define QSTATIC 373
#define QAUTO 374
#define QREGISTER 375
#define QOUT 376
#define QIN 377
#define QYIELD 378
#define QONLY 379
#define QTEMP 380
#define QSHARED 381
#define QREF 382
#define QUNIQUE 383
#define QCHECKED 384
#define QUNCHECKED 385
#define QCHECKEDSTRICT 386
#define QCHECKMOD 387
#define QKEEP 388
#define QKEPT 389
#define QPARTIAL 390
#define QSPECIAL 391
#define QOWNED 392
#define QDEPENDENT 393
#define QRETURNED 394
#define QEXPOSED 395
#define QNULL 396
#define QOBSERVER 397
#define QISNULL 398
#define QEXITS 399
#define QMAYEXIT 400
#define QNEVEREXIT 401
#define QTRUEEXIT 402
#define QFALSEEXIT 403
#define QLONG 404
#define QSIGNED 405
#define QUNSIGNED 406
#define QSHORT 407
#define QUNUSED 408
#define QSEF 409
#define QNOTNULL 410
#define QRELNULL 411
#define QABSTRACT 412
#define QNUMABSTRACT 413
#define QCONCRETE 414
#define QMUTABLE 415
#define QIMMUTABLE 416
#define QTRUENULL 417
#define QFALSENULL 418
#define QEXTERNAL 419
#define QREFCOUNTED 420
#define QREFS 421
#define QNEWREF 422
#define QTEMPREF 423
#define QKILLREF 424
#define QRELDEF 425
#define CGCHAR 426
#define CBOOL 427
#define CINT 428
#define CGFLOAT 429
#define CDOUBLE 430
#define CVOID 431
#define QANYTYPE 432
#define QINTEGRALTYPE 433
#define QUNSIGNEDINTEGRALTYPE 434
#define QSIGNEDINTEGRALTYPE 435
#define QNULLTERMINATED 436
#define QSETBUFFERSIZE 437
#define QSETSTRINGLENGTH 438
#define QMAXSET 439
#define QMAXREAD 440
#define QTESTINRANGE 441
#define TCAND 442
#define IDENTIFIER 443
#define NEW_IDENTIFIER 444
#define TYPE_NAME_OR_ID 445
#define CANNOTATION 446
#define CCONSTANT 447
#define ITER_NAME 448
#define ITER_ENDNAME 449
#define TYPE_NAME 450
#define METASTATE_NAME 451




/* Copy the first part of user declarations.  */


/*
**
** cgrammar.y
**
** Yacc/Bison grammar for extended ANSI C used by Splint.
**
** original grammar by Nate Osgood ---
**    hacrat@catfish.lcs.mit.edu Mon Jun 14 13:06:32 1993
**
** changes for Splint --- handle typedef names correctly
** fix struct/union parsing bug (empty struct is accepted)
** add productions to handle macros --- require
** error correction --- main source of conflicts in grammar.
** need to process initializations sequentially, L->R
**
** production names are cryptic, so more productions fit on one line
**
** conflicts:  87 shift/reduce, 18 reduce/reduce
** most of these are due to handling macros
** a few are due to handling type expressions
*/

/*@=allmacros@*/

extern int yylex ();
extern void yyerror (char *);

# include "splintMacros.nf"
# include "basic.h"
# include "cscanner.h"
# include "cscannerHelp.h"
# include "cgrammar.h"
# include "exprChecks.h"

/*@-allmacros@*/
/*@-matchfields@*/

# define SHOWCSYM FALSE

/*
** This is necessary, or else when the bison-generated code #include's malloc.h,
** there will be a parse error.
**
** Unfortunately, it means the error checking on malloc, etc. is lost for allocations
** in bison-generated files under Win32.
*/

# ifdef WIN32
# undef malloc
# undef calloc
# undef realloc
# endif



/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 1
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

#if ! defined (cgrammar_YYSTYPE) && ! defined (cgrammar_YYSTYPE_IS_DECLARED)

typedef union cgrammar_YYSTYPE {
  lltok tok;
  int count;
  qual typequal;
  qualList tquallist;
  ctype ctyp;
  /*@dependent@*/ sRef sr;
  /*@only@*/ sRef osr;

  /*@only@*/ functionClauseList funcclauselist;
  /*@only@*/ functionClause funcclause;  
  /*@only@*/ flagSpec flagspec;
  /*@only@*/ globalsClause globsclause;
  /*@only@*/ modifiesClause modsclause;
  /*@only@*/ warnClause warnclause;
  /*@only@*/ stateClause stateclause;
  /*@only@*/ pointers pointers;
  /*@only@*/ functionConstraint fcnconstraint; 

  /*@only@*/ metaStateConstraint msconstraint;
  /*@only@*/ metaStateSpecifier msspec;
  /*@only@*/ metaStateExpression msexpr;
  /*@observer@*/ metaStateInfo msinfo;

  /*@only@*/ sRefList srlist;
  /*@only@*/ globSet globset;
  /*@only@*/ qtype qtyp;
  /*@only@*/ cstring cname;
  /*@observer@*/ annotationInfo annotation;
  /*@only@*/ idDecl ntyp;
  /*@only@*/ idDeclList ntyplist;
  /*@only@*/ uentryList flist;
  /*@owned@*/ uentryList entrylist;
  /*@observer@*/ /*@dependent@*/ uentry entry;
  /*@only@*/ uentry oentry;
  /*@only@*/ exprNode expr;
  /*@only@*/ enumNameList enumnamelist;
  /*@only@*/ exprNodeList exprlist;
  /*@only@*/ sRefSet srset; 
  /*@only@*/ cstringList cstringlist;

  /*drl
    added 1/19/2001
  */
  constraint con;
  constraintList conL;
  constraintExpr conE;
  /* drl */  
} cgrammar_YYSTYPE;
/* Line 191 of yacc.c.  */

# define yystype cgrammar_YYSTYPE /* obsolescent; will be withdrawn */
# define cgrammar_YYSTYPE_IS_DECLARED 1
# define cgrammar_YYSTYPE_IS_TRIVIAL 1
#endif



/* Copy the second part of user declarations.  */


/* Line 214 of yacc.c.  */


#if ! defined (yyoverflow) || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# if YYSTACK_USE_ALLOCA
#  define YYSTACK_ALLOC alloca
# else
#  ifndef YYSTACK_USE_ALLOCA
#   if defined (alloca) || defined (_ALLOCA_H)
#    define YYSTACK_ALLOC alloca
#   else
#    ifdef __GNUC__
#     define YYSTACK_ALLOC __builtin_alloca
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
# else
#  if defined (__STDC__) || defined (__cplusplus)
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   define YYSIZE_T size_t
#  endif
#  define YYSTACK_ALLOC malloc
#  define YYSTACK_FREE free
# endif
#endif /* ! defined (yyoverflow) || YYERROR_VERBOSE */


#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || (cgrammar_YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short yyss;
  cgrammar_YYSTYPE yyvs;
  };

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (cgrammar_YYSTYPE))				\
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  register YYSIZE_T yyi;		\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (0)
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (0)

#endif

#if defined (__STDC__) || defined (__cplusplus)
   typedef signed char yysigned_char;
#else
   typedef short yysigned_char;
#endif

/* YYFINAL -- State number of the termination state. */
#define YYFINAL  262
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   7115

/* YYNTOKENS -- Number of terminals. */
#define YYNTOKENS  197
/* YYNNTS -- Number of nonterminals. */
#define YYNNTS  272
/* YYNRULES -- Number of rules. */
#define YYNRULES  713
/* YYNRULES -- Number of states. */
#define YYNSTATES  1256

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   451

#define YYTRANSLATE(YYX) 						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const unsigned char yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const unsigned short yyprhs[] =
{
       0,     0,     3,     4,     6,     8,    11,    14,    16,    18,
      20,    22,    24,    26,    28,    37,    49,    50,    56,    58,
      62,    64,    67,    69,    76,    80,    87,    88,    95,    96,
     104,   106,   113,   117,   124,   125,   132,   133,   141,   142,
     143,   154,   158,   162,   166,   169,   171,   175,   176,   181,
     182,   187,   189,   193,   195,   197,   199,   203,   205,   209,
     211,   213,   215,   217,   219,   221,   226,   232,   234,   236,
     238,   240,   244,   249,   252,   256,   260,   264,   266,   268,
     270,   271,   274,   275,   278,   280,   282,   284,   286,   288,
     290,   292,   294,   296,   298,   300,   302,   305,   306,   311,
     313,   316,   317,   321,   323,   327,   329,   331,   332,   335,
     339,   342,   344,   348,   351,   352,   355,   357,   359,   361,
     363,   365,   367,   369,   371,   373,   375,   377,   379,   381,
     383,   385,   387,   391,   392,   396,   397,   398,   403,   406,
     409,   411,   413,   415,   417,   421,   426,   429,   433,   437,
     441,   443,   445,   447,   451,   453,   455,   459,   464,   467,
     471,   475,   479,   480,   482,   484,   488,   490,   492,   494,
     498,   500,   502,   503,   508,   510,   515,   519,   524,   531,
     537,   543,   546,   549,   557,   559,   563,   565,   568,   571,
     574,   577,   580,   583,   586,   589,   593,   595,   599,   604,
     606,   616,   617,   621,   622,   623,   628,   631,   636,   639,
     641,   646,   648,   652,   656,   660,   662,   666,   670,   672,
     676,   680,   682,   686,   690,   694,   698,   700,   704,   708,
     710,   714,   716,   720,   722,   726,   728,   729,   734,   736,
     737,   742,   744,   745,   746,   754,   756,   760,   764,   768,
     772,   776,   780,   784,   788,   792,   796,   800,   802,   806,
     807,   809,   811,   813,   815,   817,   821,   822,   832,   833,
     845,   847,   849,   852,   853,   860,   861,   870,   875,   880,
     881,   882,   885,   887,   892,   895,   897,   902,   903,   908,
     910,   914,   919,   922,   925,   928,   930,   933,   937,   940,
     942,   946,   948,   950,   952,   954,   956,   959,   960,   967,
     970,   973,   974,   981,   982,   988,   990,   992,   994,   996,
     998,  1000,  1002,  1004,  1006,  1008,  1010,  1012,  1014,  1016,
    1018,  1020,  1022,  1024,  1026,  1028,  1030,  1032,  1034,  1036,
    1038,  1040,  1042,  1044,  1046,  1048,  1050,  1052,  1054,  1056,
    1058,  1060,  1062,  1064,  1066,  1068,  1070,  1072,  1074,  1076,
    1078,  1080,  1082,  1084,  1086,  1088,  1090,  1092,  1094,  1097,
    1100,  1103,  1106,  1109,  1112,  1115,  1118,  1121,  1124,  1127,
    1130,  1133,  1136,  1139,  1142,  1145,  1148,  1151,  1154,  1157,
    1160,  1163,  1166,  1169,  1172,  1176,  1178,  1183,  1185,  1189,
    1192,  1195,  1198,  1199,  1201,  1202,  1203,  1204,  1217,  1218,
    1219,  1231,  1238,  1245,  1246,  1247,  1258,  1259,  1260,  1271,
    1277,  1283,  1288,  1293,  1294,  1296,  1298,  1301,  1307,  1311,
    1314,  1319,  1321,  1325,  1330,  1337,  1338,  1347,  1352,  1354,
    1358,  1361,  1363,  1368,  1370,  1372,  1375,  1378,  1380,  1383,
    1385,  1388,  1390,  1392,  1394,  1396,  1399,  1401,  1404,  1407,
    1411,  1413,  1417,  1419,  1423,  1425,  1427,  1431,  1432,  1435,
    1436,  1441,  1446,  1448,  1450,  1453,  1455,  1457,  1460,  1461,
    1463,  1469,  1472,  1476,  1480,  1485,  1489,  1494,  1499,  1505,
    1507,  1509,  1511,  1513,  1515,  1517,  1519,  1521,  1523,  1525,
    1530,  1532,  1534,  1536,  1539,  1542,  1550,  1557,  1560,  1561,
    1562,  1573,  1574,  1581,  1583,  1585,  1587,  1589,  1592,  1594,
    1596,  1598,  1600,  1602,  1604,  1606,  1610,  1612,  1613,  1617,
    1620,  1623,  1625,  1627,  1629,  1631,  1633,  1635,  1637,  1639,
    1641,  1643,  1647,  1649,  1651,  1653,  1656,  1659,  1660,  1663,
    1664,  1669,  1670,  1677,  1678,  1682,  1683,  1689,  1693,  1696,
    1700,  1701,  1702,  1703,  1704,  1705,  1707,  1710,  1713,  1717,
    1720,  1724,  1728,  1733,  1736,  1739,  1743,  1747,  1752,  1754,
    1757,  1759,  1762,  1764,  1768,  1770,  1775,  1777,  1780,  1782,
    1785,  1787,  1790,  1792,  1797,  1800,  1801,  1807,  1808,  1815,
    1820,  1825,  1826,  1827,  1838,  1840,  1841,  1846,  1848,  1850,
    1852,  1854,  1856,  1859,  1861,  1865,  1867,  1872,  1876,  1881,
    1888,  1894,  1900,  1903,  1906,  1908,  1911,  1914,  1917,  1920,
    1923,  1926,  1929,  1932,  1934,  1936,  1941,  1943,  1947,  1951,
    1955,  1957,  1961,  1965,  1967,  1971,  1975,  1977,  1981,  1985,
    1989,  1993,  1995,  1999,  2003,  2005,  2009,  2011,  2015,  2017,
    2021,  2023,  2027,  2029,  2033,  2035,  2036,  2037,  2045,  2047,
    2051,  2055,  2059,  2063,  2067,  2071,  2075,  2079,  2083,  2087,
    2091,  2093,  2094,  2096,  2099,  2107,  2110,  2113,  2121,  2128,
    2131,  2135,  2138,  2142,  2145,  2149,  2153,  2157,  2161,  2164,
    2168,  2169,  2171,  2172,  2174,  2176,  2178,  2180,  2182,  2184,
    2186,  2188,  2190,  2195
};

/* YYRHS -- A `-1'-separated list of the rules' RHS. */
static const short yyrhs[] =
{
     198,     0,    -1,    -1,   199,    -1,   200,    -1,   199,   200,
      -1,   261,   464,    -1,   201,    -1,   202,    -1,   212,    -1,
     215,    -1,   301,    -1,    18,    -1,     1,    -1,    77,   345,
     359,   369,   359,   464,   310,    91,    -1,    77,   345,   359,
     369,   359,    23,   310,   317,   316,   464,    91,    -1,    -1,
      78,   203,   204,   464,    91,    -1,   205,    -1,   345,   359,
     205,    -1,   209,    -1,   373,   209,    -1,   467,    -1,   310,
      24,   359,   369,   310,    25,    -1,   206,    26,    27,    -1,
     206,    26,   310,   300,    27,   359,    -1,    -1,   206,   311,
      24,    25,   207,   233,    -1,    -1,   206,   311,    24,   370,
      25,   208,   233,    -1,   467,    -1,   310,    24,   359,   205,
     310,    25,    -1,   209,    26,    27,    -1,   209,    26,   310,
     300,    27,   359,    -1,    -1,   209,   311,    24,    25,   210,
     234,    -1,    -1,   209,   311,    24,   370,    25,   211,   234,
      -1,    -1,    -1,    79,   467,    24,   370,    25,   213,   234,
     214,   464,    91,    -1,    92,   401,    95,    -1,    93,   387,
      95,    -1,    94,   388,    95,    -1,    92,    95,    -1,   256,
      -1,   218,    23,   221,    -1,    -1,   230,   219,    22,   222,
      -1,    -1,     5,   220,    22,   222,    -1,   218,    -1,   218,
      40,   221,    -1,   196,    -1,   187,    -1,    56,    -1,   225,
     223,   224,    -1,   225,    -1,   228,   227,   228,    -1,   184,
      -1,   185,    -1,    53,    -1,    52,    -1,    54,    -1,   229,
      -1,   231,    24,   228,    25,    -1,    24,   228,   232,   228,
      25,    -1,   230,    -1,   192,    -1,   466,    -1,   189,    -1,
     230,    26,    27,    -1,   230,    26,   192,    27,    -1,    34,
     230,    -1,    24,   230,    25,    -1,   230,    28,   467,    -1,
     230,    45,   467,    -1,   226,    -1,    33,    -1,    32,    -1,
      -1,   235,   233,    -1,    -1,   236,   234,    -1,   237,    -1,
     241,    -1,   240,    -1,   323,    -1,   326,    -1,   247,    -1,
     238,    -1,   242,    -1,   240,    -1,   324,    -1,   328,    -1,
     248,    -1,   238,    91,    -1,    -1,    74,   239,   249,   464,
      -1,    76,    -1,   242,    91,    -1,    -1,    75,   243,   262,
      -1,   245,    -1,   245,    40,   244,    -1,   189,    -1,   247,
      -1,    -1,   248,    91,    -1,    73,   244,   440,    -1,    73,
     244,    -1,   250,    -1,   249,    21,   250,    -1,   251,   252,
      -1,    -1,   253,   251,    -1,   466,    -1,   189,    -1,   301,
      -1,    89,    -1,    90,    -1,   121,    -1,   122,    -1,   135,
      -1,    80,    -1,    81,    -1,    82,    -1,    83,    -1,    84,
      -1,    85,    -1,    86,    -1,   369,    -1,   345,   359,   369,
      -1,    -1,    19,   258,   418,    -1,    -1,    -1,   259,   422,
     260,   411,    -1,   216,   257,    -1,   265,   464,    -1,   464,
      -1,   466,    -1,   189,    -1,   190,    -1,   263,    26,    27,
      -1,   263,    26,   264,    27,    -1,    34,   263,    -1,    24,
     263,    25,    -1,   263,    28,   467,    -1,   263,    45,   467,
      -1,   263,    -1,   440,    -1,   263,    -1,   265,    21,   263,
      -1,   466,    -1,   189,    -1,   266,    26,    27,    -1,   266,
      26,   264,    27,    -1,    34,   266,    -1,    24,   266,    25,
      -1,   266,    28,   467,    -1,   266,    45,   467,    -1,    -1,
     268,    -1,   266,    -1,   268,    21,   266,    -1,   466,    -1,
     189,    -1,   440,    -1,    24,   298,    25,    -1,   190,    -1,
     116,    -1,    -1,    24,   270,   411,    25,    -1,   269,    -1,
     271,    26,   298,    27,    -1,   271,    24,    25,    -1,   271,
      24,   272,    25,    -1,    71,    24,   297,    21,   381,    25,
      -1,   271,   359,    28,   467,   310,    -1,   271,   359,    45,
     467,   310,    -1,   271,    48,    -1,   271,    49,    -1,    24,
     381,    25,    19,   423,   465,    20,    -1,   297,    -1,   272,
      21,   297,    -1,   271,    -1,    48,   273,    -1,    49,   273,
      -1,    29,   281,    -1,    34,   281,    -1,    33,   281,    -1,
      32,   281,    -1,    31,   281,    -1,    30,   281,    -1,   278,
     276,   279,    -1,   275,    -1,   274,    28,   467,    -1,   274,
      26,   298,    27,    -1,   467,    -1,    47,   310,    24,   381,
     359,    21,   274,    25,   310,    -1,    -1,   310,   277,   280,
      -1,    -1,    -1,    42,    24,   381,    25,    -1,    42,   273,
      -1,    43,    24,   381,    25,    -1,    43,   273,    -1,   273,
      -1,    24,   381,    25,   281,    -1,   281,    -1,   282,    34,
     281,    -1,   282,    35,   281,    -1,   282,    36,   281,    -1,
     282,    -1,   283,    33,   282,    -1,   283,    32,   282,    -1,
     283,    -1,   284,    50,   283,    -1,   284,    51,   283,    -1,
     284,    -1,   285,    37,   284,    -1,   285,    38,   284,    -1,
     285,    52,   284,    -1,   285,    53,   284,    -1,   285,    -1,
     286,    54,   285,    -1,   286,    55,   285,    -1,   286,    -1,
     287,    29,   286,    -1,   287,    -1,   288,    39,   287,    -1,
     288,    -1,   289,    40,   288,    -1,   289,    -1,    -1,   290,
      56,   291,   289,    -1,   290,    -1,    -1,   292,    57,   293,
     290,    -1,   292,    -1,    -1,    -1,   292,    41,   295,   298,
      22,   296,   294,    -1,   294,    -1,   273,    23,   297,    -1,
     273,    58,   297,    -1,   273,    59,   297,    -1,   273,    60,
     297,    -1,   273,    61,   297,    -1,   273,    62,   297,    -1,
     273,    63,   297,    -1,   273,    64,   297,    -1,   273,    65,
     297,    -1,   273,    66,   297,    -1,   273,    67,   297,    -1,
     297,    -1,   298,    21,   297,    -1,    -1,   298,    -1,   294,
      -1,   302,    -1,    72,    -1,   308,    -1,   345,   310,    18,
      -1,    -1,   345,   359,   369,   359,   303,   310,   316,    18,
     310,    -1,    -1,   345,   359,   369,   359,    23,   304,   310,
     317,   316,    18,   310,    -1,   306,    -1,   195,    -1,   369,
     359,    -1,    -1,   369,   359,    23,   307,   310,   317,    -1,
      -1,    46,   345,   309,   359,   314,   310,   246,    18,    -1,
      46,   345,   310,    18,    -1,    46,   312,   310,    18,    -1,
      -1,    -1,   313,   310,    -1,   306,    -1,   312,    21,   359,
     306,    -1,   315,   310,    -1,   305,    -1,   314,    21,   359,
     305,    -1,    -1,   316,    21,   359,   306,    -1,   297,    -1,
      19,   321,    20,    -1,    19,   321,    21,    20,    -1,   318,
     317,    -1,   319,    23,    -1,   467,    22,    -1,   320,    -1,
     319,   320,    -1,    26,   300,    27,    -1,    28,   467,    -1,
     317,    -1,   321,    21,   317,    -1,   117,    -1,   115,    -1,
     118,    -1,   119,    -1,   120,    -1,   324,    91,    -1,    -1,
     254,   359,   325,   268,   464,   310,    -1,   328,    91,    -1,
     255,   359,    -1,    -1,   327,   334,   329,   267,   464,   310,
      -1,    -1,   327,   330,   331,   464,   310,    -1,   224,    -1,
     217,    -1,   144,    -1,   145,    -1,   147,    -1,   148,    -1,
     146,    -1,   129,    -1,   132,    -1,   130,    -1,   131,    -1,
     137,    -1,   138,    -1,   123,    -1,   125,    -1,   124,    -1,
     133,    -1,   134,    -1,   126,    -1,   128,    -1,   141,    -1,
     143,    -1,   156,    -1,   155,    -1,   140,    -1,   142,    -1,
     181,    -1,   191,    -1,   139,    -1,   154,    -1,   153,    -1,
     164,    -1,   162,    -1,   163,    -1,   157,    -1,   158,    -1,
     159,    -1,   160,    -1,   161,    -1,   165,    -1,   166,    -1,
     169,    -1,   170,    -1,   167,    -1,   168,    -1,   152,    -1,
     149,    -1,   150,    -1,   151,    -1,   121,    -1,   122,    -1,
     135,    -1,   136,    -1,   112,   310,    -1,   114,   310,    -1,
     113,   310,    -1,   341,   310,    -1,   334,   310,    -1,   332,
     310,    -1,   335,   310,    -1,   333,   310,    -1,   337,   310,
      -1,   336,   310,    -1,   338,   310,    -1,   339,   310,    -1,
     171,   359,    -1,   173,   359,    -1,   172,   359,    -1,   174,
     359,    -1,   175,   359,    -1,   176,   359,    -1,   177,   359,
      -1,   178,   359,    -1,   179,   359,    -1,   180,   359,    -1,
     468,   359,    -1,   350,   359,    -1,   364,   359,    -1,   340,
     359,    -1,   310,   345,   310,    -1,   347,    -1,   347,    88,
     346,    91,    -1,   381,    -1,   381,    21,   346,    -1,   322,
     348,    -1,   342,   348,    -1,   343,   348,    -1,    -1,   345,
      -1,    -1,    -1,    -1,   359,    68,   467,   310,    19,   351,
     415,   360,   416,   352,    20,   349,    -1,    -1,    -1,   359,
      69,   467,   310,    19,   353,   415,   360,   416,   354,    20,
      -1,   359,    68,   467,   310,    19,    20,    -1,   359,    69,
     467,   310,    19,    20,    -1,    -1,    -1,   359,    68,   310,
      19,   355,   415,   360,   416,   356,    20,    -1,    -1,    -1,
     359,    69,   310,    19,   357,   415,   360,   416,   358,    20,
      -1,   359,    68,   310,    19,    20,    -1,   359,    69,   310,
      19,    20,    -1,   359,    68,   467,   359,    -1,   359,    69,
     467,   359,    -1,    -1,   361,    -1,   215,    -1,   360,   361,
      -1,   345,   359,   362,   310,    18,    -1,   345,   310,    18,
      -1,   363,   359,    -1,   362,    21,   363,   359,    -1,   369,
      -1,    22,   310,   300,    -1,   369,    22,   310,   300,    -1,
     359,    70,    19,   366,    20,   310,    -1,    -1,   359,    70,
     467,    19,   365,   366,    20,   310,    -1,   359,    70,   467,
     310,    -1,   367,    -1,   366,    21,   367,    -1,   366,    21,
      -1,   467,    -1,   467,    23,   310,   300,    -1,   206,    -1,
     383,    -1,   373,   195,    -1,   373,   368,    -1,   206,    -1,
     373,   206,    -1,   376,    -1,   359,   374,    -1,   112,    -1,
     113,    -1,   114,    -1,   371,    -1,   372,   371,    -1,    34,
      -1,    34,   372,    -1,    34,   373,    -1,    34,   372,   373,
      -1,   375,    -1,   375,    21,     5,    -1,   467,    -1,   375,
      21,   467,    -1,     5,    -1,   377,    -1,   377,    21,     5,
      -1,    -1,   378,   380,    -1,    -1,   377,    21,   379,   380,
      -1,   310,   345,   368,   310,    -1,   467,    -1,   344,    -1,
     344,   382,    -1,   373,    -1,   384,    -1,   373,   384,    -1,
      -1,   384,    -1,   310,    24,   359,   382,    25,    -1,    26,
      27,    -1,    26,   300,    27,    -1,   384,    26,    27,    -1,
     384,    26,   300,    27,    -1,   310,    24,    25,    -1,   310,
      24,   376,    25,    -1,   384,   310,    24,    25,    -1,   384,
     310,    24,   376,    25,    -1,   403,    -1,   405,    -1,   408,
      -1,   411,    -1,   426,    -1,   429,    -1,   461,    -1,   434,
      -1,   463,    -1,   386,    -1,    96,    24,   298,    25,    -1,
     389,    -1,   387,    -1,   396,    -1,   389,   396,    -1,   433,
     389,    -1,   460,   402,    11,    24,   298,    25,    18,    -1,
     460,   402,    11,    24,   298,    25,    -1,   391,   396,    -1,
      -1,    -1,    13,    24,   299,    18,   299,    18,   392,   299,
     393,    25,    -1,    -1,   193,   413,    24,   395,   437,    25,
      -1,   194,    -1,   403,    -1,   405,    -1,   408,    -1,   399,
     422,    -1,   399,    -1,   400,    -1,   426,    -1,   397,    -1,
     390,    -1,   394,    -1,   463,    -1,    24,   396,    25,    -1,
       1,    -1,    -1,   428,   398,   396,    -1,   413,    19,    -1,
     417,    20,    -1,   402,    -1,   421,    -1,   403,    -1,   405,
      -1,   408,    -1,   412,    -1,   427,    -1,   429,    -1,   434,
      -1,   462,    -1,    24,   402,    25,    -1,   463,    -1,   386,
      -1,     1,    -1,   467,    22,    -1,   111,   385,    -1,    -1,
     102,   404,    -1,    -1,     6,   300,   406,    22,    -1,    -1,
     102,   404,     6,   300,   407,    22,    -1,    -1,     7,   409,
      22,    -1,    -1,   102,   404,     7,   410,    22,    -1,    24,
     411,    25,    -1,   413,   419,    -1,   413,   420,   414,    -1,
      -1,    -1,    -1,    -1,    -1,    20,    -1,   111,    20,    -1,
     425,    20,    -1,   425,   111,    20,    -1,   422,    20,    -1,
     422,   111,    20,    -1,   422,   425,    20,    -1,   422,   425,
     111,    20,    -1,    19,   418,    -1,    19,    20,    -1,    19,
     421,    20,    -1,    19,   422,    20,    -1,    19,   422,   425,
      20,    -1,   402,    -1,   421,   402,    -1,   301,    -1,   422,
     301,    -1,   424,    -1,   423,    21,   424,    -1,   297,    -1,
      19,   423,   465,    20,    -1,   385,    -1,   425,   385,    -1,
      18,    -1,   298,    18,    -1,    18,    -1,   298,    18,    -1,
     298,    -1,     8,    24,   298,    25,    -1,   428,   385,    -1,
      -1,   428,   385,     9,   430,   385,    -1,    -1,    10,    24,
     298,   431,    25,   385,    -1,    11,    24,   298,    25,    -1,
      11,    24,   298,    25,    -1,    -1,    -1,   193,   435,   413,
      24,   436,   437,    25,   411,   459,   414,    -1,   439,    -1,
      -1,   437,   438,    21,   439,    -1,   458,    -1,   466,    -1,
     190,    -1,   189,    -1,   192,    -1,   440,   192,    -1,   440,
      -1,    24,   298,    25,    -1,   441,    -1,   271,    26,   298,
      27,    -1,   271,    24,    25,    -1,   271,    24,   272,    25,
      -1,    71,    24,   297,    21,   381,    25,    -1,   271,   359,
      28,   467,   310,    -1,   271,   359,    45,   467,   310,    -1,
     271,    48,    -1,   271,    49,    -1,   442,    -1,    48,   273,
      -1,    49,   273,    -1,    29,   281,    -1,    34,   281,    -1,
      33,   281,    -1,    32,   281,    -1,    31,   281,    -1,    30,
     281,    -1,   276,    -1,   443,    -1,    24,   381,    25,   281,
      -1,   444,    -1,   282,    34,   281,    -1,   282,    35,   281,
      -1,   282,    36,   281,    -1,   445,    -1,   283,    33,   282,
      -1,   283,    32,   282,    -1,   446,    -1,   284,    50,   283,
      -1,   284,    51,   283,    -1,   447,    -1,   285,    37,   284,
      -1,   285,    38,   284,    -1,   285,    52,   284,    -1,   285,
      53,   284,    -1,   448,    -1,   286,    54,   285,    -1,   286,
      55,   285,    -1,   449,    -1,   287,    29,   286,    -1,   450,
      -1,   288,    39,   287,    -1,   451,    -1,   289,    40,   288,
      -1,   452,    -1,   290,    56,   289,    -1,   453,    -1,   292,
      57,   290,    -1,   454,    -1,    -1,    -1,   292,    41,   456,
     298,    22,   457,   294,    -1,   455,    -1,   273,    23,   297,
      -1,   273,    58,   297,    -1,   273,    59,   297,    -1,   273,
      60,   297,    -1,   273,    61,   297,    -1,   273,    62,   297,
      -1,   273,    63,   297,    -1,   273,    64,   297,    -1,   273,
      65,   297,    -1,   273,    66,   297,    -1,   273,    67,   297,
      -1,   194,    -1,    -1,    12,    -1,   432,   385,    -1,   460,
     385,    11,    24,   298,    25,    18,    -1,   391,   385,    -1,
     432,   402,    -1,   460,   402,    11,    24,   298,    25,    18,
      -1,   460,   402,    11,    24,   298,    25,    -1,   391,   402,
      -1,    14,   467,    18,    -1,    15,    18,    -1,   101,    15,
      18,    -1,    16,    18,    -1,    97,    16,    18,    -1,    98,
      16,    18,    -1,    99,    16,    18,    -1,   100,    16,    18,
      -1,    17,    18,    -1,    17,   298,    18,    -1,    -1,    18,
      -1,    -1,    21,    -1,   188,    -1,   189,    -1,   193,    -1,
     194,    -1,   466,    -1,   190,    -1,   195,    -1,   190,    -1,
      44,    24,   298,    25,    -1,    44,    24,   381,    25,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const unsigned short yyrline[] =
{
       0,   327,   327,   329,   333,   334,   338,   339,   340,   341,
     342,   343,   344,   345,   349,   351,   356,   356,   365,   371,
     376,   377,   382,   383,   385,   387,   405,   404,   436,   435,
     465,   466,   468,   472,   490,   489,   502,   501,   516,   517,
     515,   524,   525,   526,   527,   531,   535,   540,   540,   545,
     545,   553,   554,   558,   564,   565,   569,   570,   574,   580,
     581,   585,   586,   587,   591,   592,   593,   599,   600,   604,
     606,   608,   610,   619,   621,   623,   625,   642,   646,   647,
     654,   655,   665,   666,   671,   672,   673,   674,   675,   676,
     680,   681,   682,   683,   684,   685,   689,   693,   693,   702,
     706,   711,   710,   725,   727,   732,   736,   737,   741,   745,
     751,   756,   757,   761,   765,   766,   770,   771,   772,   776,
     777,   778,   779,   780,   784,   785,   786,   787,   788,   792,
     793,   797,   804,   809,   809,   815,   816,   815,   826,   837,
     838,   842,   843,   844,   845,   846,   847,   848,   849,   850,
     854,   855,   860,   861,   865,   867,   869,   870,   871,   872,
     873,   875,   880,   881,   885,   891,   904,   905,   906,   907,
     908,   909,   910,   910,   916,   917,   918,   919,   920,   921,
     922,   923,   924,   925,   930,   931,   935,   936,   937,   938,
     939,   940,   941,   942,   943,   944,   945,   949,   950,   952,
     956,   962,   962,   966,   969,   973,   974,   975,   976,   982,
     983,   988,   989,   990,   991,   995,   996,   997,  1001,  1002,
    1003,  1007,  1008,  1009,  1010,  1011,  1015,  1016,  1017,  1021,
    1022,  1026,  1027,  1031,  1032,  1036,  1038,  1037,  1049,  1051,
    1050,  1063,  1064,  1065,  1064,  1070,  1071,  1072,  1073,  1074,
    1075,  1076,  1077,  1078,  1079,  1080,  1081,  1085,  1086,  1090,
    1091,  1095,  1101,  1102,  1103,  1107,  1122,  1121,  1133,  1132,
    1141,  1142,  1146,  1151,  1151,  1156,  1156,  1159,  1160,  1164,
    1168,  1172,  1176,  1177,  1181,  1185,  1186,  1190,  1191,  1195,
    1196,  1197,  1198,  1206,  1207,  1212,  1213,  1217,  1218,  1222,
    1224,  1234,  1235,  1236,  1237,  1238,  1242,  1247,  1246,  1262,
    1266,  1271,  1270,  1285,  1284,  1316,  1317,  1321,  1322,  1323,
    1324,  1325,  1329,  1330,  1331,  1332,  1336,  1337,  1338,  1339,
    1340,  1341,  1342,  1343,  1344,  1345,  1346,  1347,  1348,  1349,
    1350,  1351,  1352,  1356,  1357,  1361,  1362,  1366,  1367,  1371,
    1372,  1373,  1374,  1375,  1379,  1380,  1381,  1382,  1383,  1384,
    1388,  1389,  1390,  1391,  1395,  1396,  1397,  1398,  1402,  1403,
    1404,  1405,  1406,  1407,  1408,  1409,  1410,  1411,  1412,  1413,
    1421,  1422,  1423,  1424,  1425,  1426,  1427,  1428,  1429,  1430,
    1431,  1432,  1433,  1434,  1438,  1443,  1444,  1449,  1450,  1455,
    1456,  1457,  1461,  1462,  1466,  1473,  1475,  1473,  1479,  1481,
    1479,  1484,  1486,  1488,  1490,  1488,  1493,  1495,  1493,  1498,
    1500,  1502,  1503,  1507,  1511,  1512,  1513,  1517,  1519,  1524,
    1526,  1531,  1532,  1533,  1538,  1540,  1540,  1542,  1546,  1548,
    1550,  1554,  1559,  1567,  1568,  1569,  1575,  1580,  1581,  1586,
    1587,  1591,  1592,  1593,  1597,  1598,  1602,  1603,  1604,  1605,
    1609,  1610,  1614,  1615,  1619,  1620,  1621,  1625,  1625,  1626,
    1626,  1631,  1643,  1660,  1661,  1665,  1666,  1667,  1671,  1672,
    1676,  1678,  1679,  1681,  1682,  1684,  1686,  1688,  1690,  1697,
    1698,  1699,  1700,  1701,  1702,  1703,  1704,  1705,  1706,  1710,
    1714,  1718,  1722,  1723,  1728,  1730,  1732,  1734,  1740,  1740,
    1739,  1748,  1747,  1751,  1755,  1756,  1757,  1758,  1759,  1760,
    1761,  1762,  1763,  1764,  1765,  1766,  1767,  1771,  1771,  1778,
    1782,  1786,  1787,  1791,  1792,  1793,  1794,  1795,  1796,  1797,
    1798,  1799,  1800,  1801,  1802,  1806,  1807,  1815,  1816,  1823,
    1823,  1825,  1825,  1830,  1830,  1832,  1832,  1837,  1838,  1843,
    1847,  1851,  1855,  1859,  1863,  1867,  1868,  1869,  1870,  1872,
    1873,  1875,  1877,  1884,  1889,  1891,  1893,  1895,  1900,  1901,
    1905,  1906,  1910,  1911,  1915,  1916,  1920,  1921,  1925,  1926,
    1930,  1931,  1932,  1936,  1950,  1955,  1955,  1960,  1960,  1965,
    1971,  1975,  1976,  1975,  1986,  1987,  1987,  1992,  1993,  1994,
    2005,  2013,  2014,  2018,  2019,  2023,  2024,  2025,  2026,  2027,
    2029,  2030,  2031,  2032,  2036,  2037,  2038,  2039,  2040,  2041,
    2042,  2043,  2044,  2045,  2049,  2050,  2054,  2055,  2056,  2057,
    2061,  2062,  2063,  2067,  2068,  2069,  2073,  2074,  2075,  2076,
    2077,  2081,  2082,  2083,  2087,  2088,  2092,  2093,  2097,  2098,
    2102,  2103,  2107,  2108,  2112,  2113,  2114,  2113,  2119,  2120,
    2121,  2122,  2123,  2124,  2125,  2126,  2127,  2128,  2129,  2130,
    2134,  2135,  2139,  2143,  2145,  2147,  2152,  2153,  2155,  2157,
    2161,  2162,  2163,  2165,  2166,  2167,  2168,  2169,  2170,  2171,
    2174,  2176,  2179,  2181,  2185,  2189,  2190,  2191,  2192,  2193,
    2197,  2198,  2199,  2200
};
#endif

#if YYDEBUG || YYERROR_VERBOSE
/* YYTNME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals. */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "BADTOK", "SKIPTOK", "CTOK_ELIPSIS", 
  "CASE", "DEFAULT", "CIF", "CELSE", "SWITCH", "WHILE", "DO", "CFOR", 
  "GOTO", "CONTINUE", "BREAK", "RETURN", "TSEMI", "TLBRACE", "TRBRACE", 
  "TCOMMA", "TCOLON", "TASSIGN", "TLPAREN", "TRPAREN", "TLSQBR", "TRSQBR", 
  "TDOT", "TAMPERSAND", "TEXCL", "TTILDE", "TMINUS", "TPLUS", "TMULT", 
  "TDIV", "TPERCENT", "TLT", "TGT", "TCIRC", "TBAR", "TQUEST", "CSIZEOF", 
  "CALIGNOF", "CTYPEOF", "ARROW_OP", "CTYPEDEF", "COFFSETOF", "INC_OP", 
  "DEC_OP", "LEFT_OP", "RIGHT_OP", "LE_OP", "GE_OP", "EQ_OP", "NE_OP", 
  "AND_OP", "OR_OP", "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
  "ADD_ASSIGN", "SUB_ASSIGN", "LEFT_ASSIGN", "RIGHT_ASSIGN", "AND_ASSIGN", 
  "XOR_ASSIGN", "OR_ASSIGN", "CSTRUCT", "CUNION", "CENUM", "VA_ARG", 
  "VA_DCL", "QWARN", "QGLOBALS", "QMODIFIES", "QNOMODS", "QCONSTANT", 
  "QFUNCTION", "QITER", "QDEFINES", "QUSES", "QALLOCATES", "QSETS", 
  "QRELEASES", "QPRECLAUSE", "QPOSTCLAUSE", "QINVARIANT", "QALT", 
  "QUNDEF", "QKILLED", "QENDMACRO", "LLMACRO", "LLMACROITER", 
  "LLMACROEND", "TENDMACRO", "QDREVEALSTATE", "QSWITCHBREAK", 
  "QLOOPBREAK", "QINNERBREAK", "QSAFEBREAK", "QINNERCONTINUE", 
  "QFALLTHROUGH", "QLINTNOTREACHED", "QLINTFALLTHROUGH", "QLINTFALLTHRU", 
  "QARGSUSED", "QPRINTFLIKE", "QLINTPRINTFLIKE", "QSCANFLIKE", 
  "QMESSAGELIKE", "QNOTREACHED", "QCONST", "QRESTRICT", "QVOLATILE", 
  "QINLINE", "QEXTENSION", "QEXTERN", "QSTATIC", "QAUTO", "QREGISTER", 
  "QOUT", "QIN", "QYIELD", "QONLY", "QTEMP", "QSHARED", "QREF", "QUNIQUE", 
  "QCHECKED", "QUNCHECKED", "QCHECKEDSTRICT", "QCHECKMOD", "QKEEP", 
  "QKEPT", "QPARTIAL", "QSPECIAL", "QOWNED", "QDEPENDENT", "QRETURNED", 
  "QEXPOSED", "QNULL", "QOBSERVER", "QISNULL", "QEXITS", "QMAYEXIT", 
  "QNEVEREXIT", "QTRUEEXIT", "QFALSEEXIT", "QLONG", "QSIGNED", 
  "QUNSIGNED", "QSHORT", "QUNUSED", "QSEF", "QNOTNULL", "QRELNULL", 
  "QABSTRACT", "QNUMABSTRACT", "QCONCRETE", "QMUTABLE", "QIMMUTABLE", 
  "QTRUENULL", "QFALSENULL", "QEXTERNAL", "QREFCOUNTED", "QREFS", 
  "QNEWREF", "QTEMPREF", "QKILLREF", "QRELDEF", "CGCHAR", "CBOOL", "CINT", 
  "CGFLOAT", "CDOUBLE", "CVOID", "QANYTYPE", "QINTEGRALTYPE", 
  "QUNSIGNEDINTEGRALTYPE", "QSIGNEDINTEGRALTYPE", "QNULLTERMINATED", 
  "QSETBUFFERSIZE", "QSETSTRINGLENGTH", "QMAXSET", "QMAXREAD", 
  "QTESTINRANGE", "TCAND", "IDENTIFIER", "NEW_IDENTIFIER", 
  "TYPE_NAME_OR_ID", "CANNOTATION", "CCONSTANT", "ITER_NAME", 
  "ITER_ENDNAME", "TYPE_NAME", "METASTATE_NAME", "$accept", "file", 
  "externalDefs", "externalDef", "constantDecl", "fcnDecl", "@1", 
  "plainFcn", "plainNamedDecl", "namedDeclBase", "@2", "@3", 
  "plainNamedDeclBase", "@4", "@5", "iterDecl", "@6", "@7", "macroDef", 
  "fcnDefHdr", "metaStateConstraint", "metaStateSpecifier", "@8", "@9", 
  "metaStateExpression", "metaStateName", "constraintSeperator", 
  "BufConstraintList", "BufConstraint", "bufferModifier", "relationalOp", 
  "BufConstraintExpr", "BufConstraintTerm", "BufConstraintSrefExpr", 
  "BufUnaryOp", "BufBinaryOp", "functionClauses", "functionClausesPlain", 
  "functionClause", "functionClausePlain", "globalsClause", 
  "globalsClausePlain", "@10", "nomodsClause", "modifiesClause", 
  "modifiesClausePlain", "@11", "flagSpec", "flagId", "optWarnClause", 
  "warnClause", "warnClausePlain", "globIdList", "globIdListExpr", 
  "optGlobQuals", "globId", "globQual", "stateTag", "conditionTag", 
  "fcnDefHdrAux", "fcnBody", "@12", "@13", "@14", "fcnDef", "locModifies", 
  "modListExpr", "mExpr", "modList", "specClauseListExpr", 
  "optSpecClauseList", "specClauseList", "primaryExpr", "@15", 
  "postfixExpr", "argumentExprList", "unaryExpr", "fieldDesignator", 
  "offsetofExpr", "sizeofExpr", "@16", "processSizeof", 
  "endprocessSizeof", "sizeofExprAux", "castExpr", "timesExpr", 
  "plusExpr", "shiftExpr", "relationalExpr", "equalityExpr", "bitandExpr", 
  "xorExpr", "bitorExpr", "andExpr", "@17", "orExpr", "@18", 
  "conditionalExpr", "@19", "@20", "assignExpr", "expr", "optExpr", 
  "constantExpr", "initializer", "instanceDecl", "@21", "@22", 
  "namedInitializerType", "namedInitializer", "@23", "typeDecl", "@24", 
  "IsType", "PushType", "namedInitializerList", "namedInitializerListAux", 
  "namedInitializerTypeList", "namedInitializerTypeListAux", 
  "optDeclarators", "init", "designation", "designatorList", "designator", 
  "initList", "storageSpecifier", "stateClause", "stateClausePlain", 
  "@25", "conditionClause", "startConditionClause", 
  "conditionClausePlain", "@26", "@27", "functionConstraint", 
  "exitsQualifier", "checkQualifier", "stateQualifier", "paramQualifier", 
  "visibilityQualifier", "returnQualifier", "typedefQualifier", 
  "refcountQualifier", "typeModifier", "definedQualifier", 
  "typeQualifier", "typeSpecifier", "completeType", 
  "completeTypeSpecifier", "altType", "completeTypeSpecifierAux", 
  "optCompleteType", "optStructInvariant", "suSpc", "@28", "@29", "@30", 
  "@31", "@32", "@33", "@34", "@35", "NotType", "structDeclList", 
  "structDecl", "structNamedDeclList", "structNamedDecl", "enumSpc", 
  "@36", "enumeratorList", "enumerator", "optNamedDecl", "namedDecl", 
  "genericParamList", "innerMods", "innerModsList", "pointers", 
  "paramIdList", "idList", "paramTypeList", "paramList", "@37", "@38", 
  "paramDecl", "typeExpression", "abstractDecl", "optAbstractDeclBase", 
  "abstractDeclBase", "stmt", "debugStmt", "iterBody", "endBody", 
  "iterDefStmtList", "iterDefIterationStmt", "forPred", "@39", "@40", 
  "partialIterStmt", "@41", "iterDefStmt", "iterSelectionStmt", "@42", 
  "openScope", "closeScope", "macroBody", "stmtErr", "labeledStmt", 
  "optExtraFallThroughs", "caseStmt", "@43", "@44", "defaultStmt", "@45", 
  "@46", "compoundStmt", "compoundStmtErr", "CreateInnerScope", 
  "DeleteInnerScope", "CreateStructInnerScope", "DeleteStructInnerScope", 
  "DeleteInnerScopeSafe", "compoundStmtRest", "compoundStmtAux", 
  "compoundStmtAuxErr", "stmtListErr", "initializerList", 
  "typeInitializerList", "typeInitializer", "stmtList", "expressionStmt", 
  "expressionStmtErr", "ifPred", "selectionStmt", "@47", "@48", 
  "whilePred", "iterWhilePred", "iterStmt", "@49", "@50", "iterArgList", 
  "@51", "iterArgExpr", "cconstantExpr", "primaryIterExpr", 
  "postfixIterExpr", "unaryIterExpr", "castIterExpr", "timesIterExpr", 
  "plusIterExpr", "shiftIterExpr", "relationalIterExpr", 
  "equalityIterExpr", "bitandIterExpr", "xorIterExpr", "bitorIterExpr", 
  "andIterExpr", "orIterExpr", "conditionalIterExpr", "@52", "@53", 
  "assignIterExpr", "endIter", "doHeader", "iterationStmt", 
  "iterationStmtErr", "jumpStmt", "optSemi", "optComma", "id", "newId", 
  "typeName", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const unsigned short yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const unsigned short yyr1[] =
{
       0,   197,   198,   198,   199,   199,   200,   200,   200,   200,
     200,   200,   200,   200,   201,   201,   203,   202,   204,   204,
     205,   205,   206,   206,   206,   206,   207,   206,   208,   206,
     209,   209,   209,   209,   210,   209,   211,   209,   213,   214,
     212,   215,   215,   215,   215,   216,   217,   219,   218,   220,
     218,   221,   221,   222,   223,   223,   224,   224,   225,   226,
     226,   227,   227,   227,   228,   228,   228,   229,   229,   230,
     230,   230,   230,   230,   230,   230,   230,   231,   232,   232,
     233,   233,   234,   234,   235,   235,   235,   235,   235,   235,
     236,   236,   236,   236,   236,   236,   237,   239,   238,   240,
     241,   243,   242,   244,   244,   245,   246,   246,   247,   248,
     248,   249,   249,   250,   251,   251,   252,   252,   252,   253,
     253,   253,   253,   253,   254,   254,   254,   254,   254,   255,
     255,   256,   256,   258,   257,   259,   260,   257,   261,   262,
     262,   263,   263,   263,   263,   263,   263,   263,   263,   263,
     264,   264,   265,   265,   266,   266,   266,   266,   266,   266,
     266,   266,   267,   267,   268,   268,   269,   269,   269,   269,
     269,   269,   270,   269,   271,   271,   271,   271,   271,   271,
     271,   271,   271,   271,   272,   272,   273,   273,   273,   273,
     273,   273,   273,   273,   273,   273,   273,   274,   274,   274,
     275,   277,   276,   278,   279,   280,   280,   280,   280,   281,
     281,   282,   282,   282,   282,   283,   283,   283,   284,   284,
     284,   285,   285,   285,   285,   285,   286,   286,   286,   287,
     287,   288,   288,   289,   289,   290,   291,   290,   292,   293,
     292,   294,   295,   296,   294,   297,   297,   297,   297,   297,
     297,   297,   297,   297,   297,   297,   297,   298,   298,   299,
     299,   300,   301,   301,   301,   302,   303,   302,   304,   302,
     305,   305,   306,   307,   306,   309,   308,   308,   308,   310,
     311,   312,   313,   313,   314,   315,   315,   316,   316,   317,
     317,   317,   317,   318,   318,   319,   319,   320,   320,   321,
     321,   322,   322,   322,   322,   322,   323,   325,   324,   326,
     327,   329,   328,   330,   328,   331,   331,   332,   332,   332,
     332,   332,   333,   333,   333,   333,   334,   334,   334,   334,
     334,   334,   334,   334,   334,   334,   334,   334,   334,   334,
     334,   334,   334,   335,   335,   336,   336,   337,   337,   338,
     338,   338,   338,   338,   339,   339,   339,   339,   339,   339,
     340,   340,   340,   340,   341,   341,   341,   341,   342,   342,
     342,   342,   342,   342,   342,   342,   342,   342,   342,   342,
     343,   343,   343,   343,   343,   343,   343,   343,   343,   343,
     343,   343,   343,   343,   344,   345,   345,   346,   346,   347,
     347,   347,   348,   348,   349,   351,   352,   350,   353,   354,
     350,   350,   350,   355,   356,   350,   357,   358,   350,   350,
     350,   350,   350,   359,   360,   360,   360,   361,   361,   362,
     362,   363,   363,   363,   364,   365,   364,   364,   366,   366,
     366,   367,   367,   368,   368,   368,   368,   369,   369,   370,
     370,   371,   371,   371,   372,   372,   373,   373,   373,   373,
     374,   374,   375,   375,   376,   376,   376,   378,   377,   379,
     377,   380,   380,   381,   381,   382,   382,   382,   383,   383,
     384,   384,   384,   384,   384,   384,   384,   384,   384,   385,
     385,   385,   385,   385,   385,   385,   385,   385,   385,   386,
     387,   388,   389,   389,   390,   390,   390,   390,   392,   393,
     391,   395,   394,   394,   396,   396,   396,   396,   396,   396,
     396,   396,   396,   396,   396,   396,   396,   398,   397,   399,
     400,   401,   401,   402,   402,   402,   402,   402,   402,   402,
     402,   402,   402,   402,   402,   403,   403,   404,   404,   406,
     405,   407,   405,   409,   408,   410,   408,   411,   411,   412,
     413,   414,   415,   416,   417,   418,   418,   418,   418,   418,
     418,   418,   418,   419,   420,   420,   420,   420,   421,   421,
     422,   422,   423,   423,   424,   424,   425,   425,   426,   426,
     427,   427,   427,   428,   429,   430,   429,   431,   429,   432,
     433,   435,   436,   434,   437,   438,   437,   439,   439,   439,
     439,   440,   440,   441,   441,   442,   442,   442,   442,   442,
     442,   442,   442,   442,   443,   443,   443,   443,   443,   443,
     443,   443,   443,   443,   444,   444,   445,   445,   445,   445,
     446,   446,   446,   447,   447,   447,   448,   448,   448,   448,
     448,   449,   449,   449,   450,   450,   451,   451,   452,   452,
     453,   453,   454,   454,   455,   456,   457,   455,   458,   458,
     458,   458,   458,   458,   458,   458,   458,   458,   458,   458,
     459,   459,   460,   461,   461,   461,   462,   462,   462,   462,
     463,   463,   463,   463,   463,   463,   463,   463,   463,   463,
     464,   464,   465,   465,   466,   467,   467,   467,   467,   467,
     468,   468,   468,   468
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const unsigned char yyr2[] =
{
       0,     2,     0,     1,     1,     2,     2,     1,     1,     1,
       1,     1,     1,     1,     8,    11,     0,     5,     1,     3,
       1,     2,     1,     6,     3,     6,     0,     6,     0,     7,
       1,     6,     3,     6,     0,     6,     0,     7,     0,     0,
      10,     3,     3,     3,     2,     1,     3,     0,     4,     0,
       4,     1,     3,     1,     1,     1,     3,     1,     3,     1,
       1,     1,     1,     1,     1,     4,     5,     1,     1,     1,
       1,     3,     4,     2,     3,     3,     3,     1,     1,     1,
       0,     2,     0,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     0,     4,     1,
       2,     0,     3,     1,     3,     1,     1,     0,     2,     3,
       2,     1,     3,     2,     0,     2,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     3,     0,     3,     0,     0,     4,     2,     2,
       1,     1,     1,     1,     3,     4,     2,     3,     3,     3,
       1,     1,     1,     3,     1,     1,     3,     4,     2,     3,
       3,     3,     0,     1,     1,     3,     1,     1,     1,     3,
       1,     1,     0,     4,     1,     4,     3,     4,     6,     5,
       5,     2,     2,     7,     1,     3,     1,     2,     2,     2,
       2,     2,     2,     2,     2,     3,     1,     3,     4,     1,
       9,     0,     3,     0,     0,     4,     2,     4,     2,     1,
       4,     1,     3,     3,     3,     1,     3,     3,     1,     3,
       3,     1,     3,     3,     3,     3,     1,     3,     3,     1,
       3,     1,     3,     1,     3,     1,     0,     4,     1,     0,
       4,     1,     0,     0,     7,     1,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     1,     3,     0,
       1,     1,     1,     1,     1,     3,     0,     9,     0,    11,
       1,     1,     2,     0,     6,     0,     8,     4,     4,     0,
       0,     2,     1,     4,     2,     1,     4,     0,     4,     1,
       3,     4,     2,     2,     2,     1,     2,     3,     2,     1,
       3,     1,     1,     1,     1,     1,     2,     0,     6,     2,
       2,     0,     6,     0,     5,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     3,     1,     4,     1,     3,     2,
       2,     2,     0,     1,     0,     0,     0,    12,     0,     0,
      11,     6,     6,     0,     0,    10,     0,     0,    10,     5,
       5,     4,     4,     0,     1,     1,     2,     5,     3,     2,
       4,     1,     3,     4,     6,     0,     8,     4,     1,     3,
       2,     1,     4,     1,     1,     2,     2,     1,     2,     1,
       2,     1,     1,     1,     1,     2,     1,     2,     2,     3,
       1,     3,     1,     3,     1,     1,     3,     0,     2,     0,
       4,     4,     1,     1,     2,     1,     1,     2,     0,     1,
       5,     2,     3,     3,     4,     3,     4,     4,     5,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     4,
       1,     1,     1,     2,     2,     7,     6,     2,     0,     0,
      10,     0,     6,     1,     1,     1,     1,     2,     1,     1,
       1,     1,     1,     1,     1,     3,     1,     0,     3,     2,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     1,     1,     1,     2,     2,     0,     2,     0,
       4,     0,     6,     0,     3,     0,     5,     3,     2,     3,
       0,     0,     0,     0,     0,     1,     2,     2,     3,     2,
       3,     3,     4,     2,     2,     3,     3,     4,     1,     2,
       1,     2,     1,     3,     1,     4,     1,     2,     1,     2,
       1,     2,     1,     4,     2,     0,     5,     0,     6,     4,
       4,     0,     0,    10,     1,     0,     4,     1,     1,     1,
       1,     1,     2,     1,     3,     1,     4,     3,     4,     6,
       5,     5,     2,     2,     1,     2,     2,     2,     2,     2,
       2,     2,     2,     1,     1,     4,     1,     3,     3,     3,
       1,     3,     3,     1,     3,     3,     1,     3,     3,     3,
       3,     1,     3,     3,     1,     3,     1,     3,     1,     3,
       1,     3,     1,     3,     1,     0,     0,     7,     1,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       1,     0,     1,     2,     7,     2,     2,     7,     6,     2,
       3,     2,     3,     2,     3,     3,     3,     3,     2,     3,
       0,     1,     0,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     4,     4
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const unsigned short yydefact[] =
{
       0,    13,    12,   456,     0,   423,   263,   423,    16,     0,
       0,     0,     0,   279,   279,   279,   302,   301,   303,   304,
     305,   364,   365,   328,   330,   329,   333,   334,   322,   324,
     325,   323,   331,   332,   366,   367,   326,   327,   343,   339,
     335,   340,   336,   317,   318,   321,   319,   320,   361,   362,
     363,   360,   345,   344,   338,   337,   349,   350,   351,   352,
     353,   347,   348,   346,   354,   355,   358,   359,   356,   357,
     423,   423,   423,   423,   423,   423,   423,   423,   423,   423,
     341,   704,   705,   709,   342,   706,   707,   710,     0,     0,
       4,     7,     8,   447,     9,    10,   135,    45,   700,    11,
     262,   264,     0,   402,   279,   279,   279,   279,   279,   279,
     279,   279,   423,   279,   402,   402,   423,   395,   423,     0,
     423,   131,   279,   708,    22,   423,   451,   452,   453,   454,
     457,   458,   279,   282,   279,   279,   275,   423,   711,   423,
     423,   709,     0,   544,   203,   553,     0,     0,     0,   682,
       0,     0,     0,     0,   203,   590,     0,   203,   203,   203,
     203,   203,   203,   279,   203,   203,     0,    44,     0,     0,
       0,     0,     0,     0,   547,   203,   171,   167,   170,   611,
     601,   174,   186,   209,   196,   279,   211,   215,   218,   221,
     226,   229,   231,   233,   235,   238,   241,   245,   257,   592,
     543,     0,     0,   578,   533,   534,   535,   536,     0,     0,
     537,   203,   538,     0,   539,   168,     0,   540,   542,   166,
       0,   526,     0,   588,     0,   560,   513,     0,     0,     0,
     522,     0,   523,   502,   521,   518,   519,   514,   515,   516,
       0,     0,   520,   527,     0,     0,   524,   501,     0,   368,
     370,   369,   380,   382,   381,   383,   384,   385,   386,   387,
     388,   389,     1,     5,   279,     0,   133,   138,   423,   701,
       6,   423,   403,   399,   373,   375,   372,   374,   377,   376,
     378,   379,   393,   371,   400,   401,     0,   279,   279,   391,
     279,   279,     0,   392,   448,   390,   455,   459,   279,   167,
     170,     0,   423,   473,     0,   166,   423,     0,   281,   423,
       0,   272,   279,   700,    18,    20,     0,   423,   279,    30,
     467,   209,   261,   549,     0,   203,   203,   203,   203,     0,
     691,   693,   698,     0,   560,     0,     0,     0,   189,   194,
     193,   192,   191,   190,     0,   279,   187,   188,   203,   203,
       0,     0,     0,     0,     0,   547,     0,   279,   546,   498,
     203,   489,   490,   491,   492,     0,   493,   494,   203,   496,
     203,   495,   497,   560,   203,   203,   181,   182,     0,   203,
     203,   203,   203,   203,   203,   203,   203,   203,   203,   203,
     204,   201,   203,   203,   203,   203,   203,   203,   203,   203,
     203,   203,   203,   203,   203,   203,   203,   203,   236,   242,
     239,   591,   203,   689,    41,     0,   561,   579,   594,   686,
     612,     0,   545,   203,     0,     0,     0,   589,    42,   503,
     507,   580,   423,   517,   529,   530,     0,     0,     0,    43,
      24,   203,   467,   423,   423,   279,   265,   132,     0,   397,
       0,   423,     0,   423,     0,   279,     0,   712,   279,   203,
       0,   475,   474,   476,   713,   279,   278,   279,   277,   273,
     423,     0,   279,     0,   423,   279,    21,   464,     0,     0,
     449,   465,   279,     0,   554,     0,   597,     0,   260,     0,
     690,   699,   560,     0,   169,   203,   541,   279,     0,     0,
       0,   694,   695,   696,   697,   692,   548,   203,   555,     0,
     685,   423,   558,   683,     0,     0,   176,     0,   184,     0,
       0,     0,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   195,     0,   212,   213,   214,   217,   216,
     219,   220,   222,   223,   224,   225,   227,   228,   230,   232,
     234,   203,   203,   203,   258,   574,   711,   578,     0,   423,
     559,   595,     0,     0,   525,   511,   279,   581,   528,     0,
       0,    26,     0,   565,   203,   586,   134,   423,   203,   560,
     279,   266,   396,   279,   413,     0,   421,   416,     0,   422,
       0,   438,   441,   435,   437,   394,   481,     0,   467,   477,
     203,     0,   283,   271,   285,   270,   279,   279,   279,   700,
      17,    32,   203,   467,   279,    19,   450,   460,   462,    38,
     469,   423,   468,   472,   550,   593,     0,   599,   203,   173,
     203,   210,   423,     0,   279,   499,   551,     0,   557,   573,
       0,   602,   203,   177,   175,   279,   279,   203,   203,   202,
     237,     0,   240,   575,   576,   203,   203,   203,   600,   203,
     423,   203,   423,    80,    28,   566,   569,   203,   203,   567,
     203,   587,   137,     0,   268,   279,   398,   419,   562,   405,
     420,   562,   408,   279,   440,   279,     0,   482,   485,   279,
       0,   483,     0,   467,   423,   107,   284,   203,   279,   279,
       0,    34,     0,   279,     0,    82,   466,   279,   478,   203,
       0,   203,   584,   702,   582,     0,     0,     0,   556,   203,
     203,   185,   179,   180,   279,   206,   279,   208,   243,   577,
     596,     0,   279,   203,   203,   203,   203,   203,   203,   203,
     203,     0,   167,   170,   186,   209,   633,   215,   218,   221,
     226,   229,   231,   233,   235,   238,     0,   605,   604,   168,
     615,   624,   634,   636,   640,   643,   646,   651,   654,   656,
     658,   660,   662,   664,   668,   607,   166,     0,    25,     0,
      97,   101,    99,   124,   125,   126,   127,   128,   129,   130,
      27,    80,    84,     0,    86,    85,     0,    89,     0,   423,
     423,    87,     0,    88,   313,     0,    80,   570,   571,   203,
     568,    23,   279,   287,   423,   411,   562,   423,   412,   562,
     434,   439,   203,     0,     0,   486,   484,   487,     0,   279,
       0,   106,   203,   203,     0,   289,   274,   203,     0,   295,
       0,   203,     0,   423,    82,    36,     0,   461,   463,    39,
      82,    90,    92,    91,    95,    93,    94,   470,   443,     0,
     279,   478,   444,   479,   598,   508,   702,   203,     0,     0,
     178,   552,     0,   605,     0,     0,   203,   688,     0,     0,
     189,   194,   193,   192,   191,   190,   187,   188,   203,   203,
     203,   181,   182,     0,   203,   203,   203,   203,   203,   203,
     203,   203,   203,   203,   203,   203,   203,   203,   203,   203,
     203,   203,   203,   203,   203,   203,   203,   203,   203,   203,
     203,   203,   665,   203,   512,     0,   506,   105,   110,   103,
     114,   700,    81,    96,   100,   108,   307,   310,   306,     0,
     311,   309,    29,   572,   203,     0,   425,   423,   423,   424,
     423,   423,   423,   442,   279,   480,   488,   286,   276,   299,
       0,     0,   298,   292,   293,   296,   294,   287,    14,    33,
      35,    82,    31,   700,    83,   467,   471,   445,   446,   203,
       0,   583,   183,     0,   199,     0,   560,   205,   207,   244,
     687,   169,   203,     0,   176,     0,     0,     0,     0,   669,
     670,   671,   672,   673,   674,   675,   676,   677,   678,   679,
     212,   213,   214,   217,   216,   219,   220,   222,   223,   224,
     225,   227,   228,   230,   232,   234,   661,   203,   663,   203,
     505,   109,     0,   119,   120,   121,   122,   123,   700,   111,
     423,   114,     0,     0,   142,   143,   102,   152,   700,   140,
     141,     0,    49,     0,     0,    59,    60,    70,    68,   316,
       0,   315,    57,    77,     0,    64,    67,     0,   700,    69,
     162,   287,   279,   423,     0,   279,   426,   414,   423,   417,
     423,   436,   290,   203,   297,   700,    37,     0,   279,   509,
     585,   279,   203,     0,   684,   681,   210,   279,   177,   175,
     279,   279,     0,   606,   104,   114,    98,   117,   113,   118,
     116,   115,     0,   146,     0,     0,     0,     0,   139,     0,
       0,   155,   164,   700,   154,     0,     0,    67,     0,    73,
       0,    55,    54,     0,    62,    61,    63,     0,     0,     0,
       0,     0,     0,   279,   700,   163,     0,   267,   279,   428,
     279,   279,   423,   431,     0,   406,     0,   409,   291,   300,
       0,    40,   279,     0,   200,     0,   197,   680,   561,     0,
     179,   180,   666,   112,   147,   144,   150,     0,   151,   148,
     149,   153,     0,   158,     0,     0,     0,     0,   279,     0,
      79,    78,     0,    74,     0,    51,    46,    47,    56,    67,
      58,    71,     0,    75,    76,     0,     0,   314,   279,   279,
     288,   203,   279,     0,   429,   279,   415,     0,   418,     0,
      15,   510,   198,   603,   178,   203,   145,   159,   156,     0,
     160,   161,   165,   308,    53,    50,     0,     0,    72,    48,
      65,   312,   269,   432,   423,   427,   203,   404,   410,   667,
     157,    66,    52,   430,   433,   407
};

/* YYDEFGOTO[NTERM-NUM]. */
static const short yydefgoto[] =
{
      -1,    88,    89,    90,    91,    92,   140,   313,   314,    93,
     663,   806,   315,   844,   971,    94,   705,   973,   946,    96,
    1059,  1195,  1141,  1125,  1196,  1235,  1133,  1061,  1062,  1063,
    1137,  1064,  1065,  1199,  1067,  1192,   790,   849,   791,   850,
     792,   851,   930,   852,   795,   853,   931,   928,   929,   830,
     797,   798,  1038,  1039,  1040,  1108,  1041,   799,   800,    97,
     267,   443,   268,   579,    98,  1046,  1176,  1177,  1048,  1122,
    1144,  1123,   181,   334,   182,   517,   183,   983,   184,   746,
     534,   185,   533,   649,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   551,   196,   553,   197,   552,   876,
     198,   227,   489,   323,   431,   100,   675,   812,   604,   605,
     608,   101,   309,   102,   265,   134,   135,   606,   607,   945,
     836,   837,   838,   839,   960,   103,   801,   855,  1051,   803,
     804,   856,  1070,   939,  1068,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   303,   432,   448,
     117,   273,  1255,   118,   816,  1217,   819,  1219,   678,  1154,
     681,  1156,   119,   948,   949,  1151,  1152,   120,   686,   590,
     591,   860,   137,   479,   129,   130,   122,   616,   617,   480,
     481,   482,   707,   622,   336,   824,   862,   463,   358,   359,
     228,   248,   229,   230,   360,   979,  1163,   232,   659,   233,
     234,   436,   235,   236,   202,   417,   361,   356,   362,   483,
     717,   363,   324,   637,   364,   207,   365,   560,   814,  1077,
     241,   576,   512,   416,   209,   577,   713,   714,   578,   366,
     210,   211,   367,   656,   626,   368,   244,   369,   373,   720,
     757,   925,   758,   215,   760,   761,   762,   763,   764,   765,
     766,   767,   768,   769,   770,   771,   772,   773,   774,  1027,
    1225,   775,  1168,   370,   371,   217,   372,   270,   868,   305,
     220,   125
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -1021
static const short yypact[] =
{
    2377, -1021, -1021,   434,    55,  5691, -1021,  6920, -1021,   627,
    2271,  3974,  3974, -1021, -1021, -1021, -1021, -1021, -1021, -1021,
   -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021,
   -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021,
   -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021,
   -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021,
   -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021,
   -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021,
   -1021, -1021, -1021,   114, -1021, -1021, -1021, -1021,   101,  2559,
   -1021, -1021, -1021,   469, -1021, -1021,   119, -1021,   163, -1021,
   -1021, -1021,   202,  6506, -1021, -1021, -1021, -1021, -1021, -1021,
   -1021, -1021, -1021, -1021,  6506,  6506,   221,   168, -1021,   795,
   -1021, -1021,   627, -1021, -1021, -1021, -1021, -1021, -1021, -1021,
     434, -1021,  5859, -1021,   245, -1021,   221, -1021, -1021, -1021,
    5691, -1021,   276, -1021,  5982, -1021,   281,   341,   348, -1021,
     361,   627,   382,   390,  1410, -1021,  2945,  5982,  5982,  5982,
    5982,  5982,  5982, -1021,  6011,  6011,   397, -1021,   420,   412,
     454,   472,   527,   501,   430,  5148, -1021,   533,   570, -1021,
     580, -1021,   751,   858, -1021, -1021, -1021,   965,   359,   289,
     538,   404,   581,   579,   588,   605,    85, -1021, -1021,   380,
   -1021,  3762,   542,   592, -1021, -1021, -1021, -1021,   682,  3442,
   -1021,  5148, -1021,  3762, -1021,   550,  3762, -1021, -1021,   670,
     740, -1021,   748, -1021,  3140,   580,   743,   489,   738,  3868,
   -1021,  3974, -1021, -1021, -1021,  6230, -1021, -1021, -1021, -1021,
     770,   825, -1021, -1021,  3974,  3762, -1021, -1021,   752, -1021,
   -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021,
   -1021, -1021, -1021, -1021,   849,   828, -1021, -1021,  6782, -1021,
   -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021,
   -1021, -1021, -1021, -1021, -1021, -1021,   839,   325, -1021, -1021,
     627,   627,   185, -1021,   469, -1021, -1021, -1021,  1773, -1021,
   -1021,   102,  6920,   161,   873, -1021, -1021,   894, -1021, -1021,
     909,   923,   325,   163, -1021,   645,   935, -1021,   627, -1021,
     229, -1021, -1021, -1021,   944,  5982,  5982,  5982,  1542,   943,
   -1021, -1021, -1021,   625,   967,   611,   949,   983, -1021, -1021,
   -1021, -1021, -1021, -1021,   972,  1773, -1021, -1021,  5982,  5982,
    1004,  1006,  1010,  1016,  1017,   430,   543,  2059, -1021, -1021,
    5148, -1021, -1021, -1021, -1021,  1018, -1021, -1021,  5148, -1021,
    5148, -1021, -1021, -1021,  5880,  5982, -1021, -1021,    64,  5982,
    5982,  5982,  5982,  5982,  5982,  5982,  5982,  5982,  5982,  5982,
   -1021, -1021,  5982,  5982,  5982,  5982,  5982,  5982,  5982,  5982,
    5982,  5982,  5982,  5982,  5982,  5982,  5982,  5982, -1021, -1021,
   -1021, -1021,  5982, -1021, -1021,  2750, -1021, -1021,  1027, -1021,
   -1021,  1028, -1021,  5982,   673,  1013,  1020, -1021, -1021, -1021,
   -1021, -1021,   221,  6230, -1021, -1021,  3974,  3548,  1030, -1021,
   -1021,  5982,    58,  4081,  5232,   325, -1021,   590,   954,  1029,
    1033,  1037,  1038,  1037,   627,  1039,   128, -1021, -1021,  5891,
    1024,   709, -1021,   757, -1021,   325, -1021,   678, -1021, -1021,
   -1021,   968,  1022,  1036, -1021,   325,   645, -1021,   627,  1041,
   -1021,  1040,   627,  1042, -1021,   264,  1046,   385,  1046,  1044,
   -1021, -1021,   967,  1043, -1021,  5583, -1021, -1021,  1047,  1048,
     395, -1021, -1021, -1021, -1021, -1021, -1021,  5982, -1021,  1049,
   -1021,  4081, -1021, -1021,  1062,  1053, -1021,   417, -1021,   103,
     627,   627, -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021,
   -1021, -1021, -1021, -1021,   610, -1021, -1021, -1021,   965,   965,
     359,   359,   289,   289,   289,   289,   538,   538,   404,   581,
     579,  5982,  5982,  5982, -1021, -1021,  3335, -1021,  3655,  4271,
   -1021, -1021,  1054,   573, -1021, -1021,   325, -1021, -1021,  1055,
    1057, -1021,  1056, -1021,  4651, -1021, -1021,  4461,  4695,   967,
   -1021,  1063, -1021, -1021,  1060,  1068, -1021,  1070,  1072, -1021,
     560, -1021,  1069, -1021, -1021, -1021, -1021,  1071,   744,   757,
    5923,  1073, -1021, -1021, -1021, -1021,  1074, -1021, -1021,   175,
   -1021, -1021,  5982,   200,   325, -1021, -1021,  1075, -1021, -1021,
    1094,  6920, -1021, -1021, -1021, -1021,  1079, -1021,  1542, -1021,
    5610, -1021, -1021,  1081, -1021, -1021, -1021,  1087, -1021, -1021,
    1086, -1021,  5982, -1021, -1021, -1021, -1021,  6060,  6090, -1021,
     588,   689,   605, -1021, -1021,  4802,  5148,  5982, -1021,  6149,
   -1021,  5982, -1021,  1090, -1021, -1021, -1021,  4846,  4953, -1021,
    4997, -1021, -1021,  1093, -1021, -1021, -1021, -1021, -1021,  1103,
   -1021, -1021,  1104, -1021,   627, -1021,   627, -1021, -1021,   290,
    1101, -1021,  1100,    66, -1021,  1058, -1021,  2136, -1021, -1021,
    1102, -1021,  1111, -1021,   259,  1090, -1021,   627,   788,  5148,
    1123,  5610, -1021,  1122, -1021,  1125,  1119,  1127, -1021,  5982,
    6149, -1021, -1021, -1021,  1773, -1021,  1773, -1021, -1021, -1021,
   -1021,   658,  1773,  5982,  5982,  5982,  5982,  5982,  5982,  6011,
    6011,  1130,   746,   776,   851,  1480, -1021,   976,   772,   885,
     597,   830,  1128,  1112,  1120,  1105,   181,  1143, -1021,    49,
   -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021,
   -1021, -1021, -1021, -1021, -1021, -1021,   777,   803, -1021,   980,
   -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021,
   -1021,  1090, -1021,  1088, -1021, -1021,  1089, -1021,  1091, -1021,
   -1021, -1021,  1092, -1021,  2080,  1097,  1090, -1021, -1021,  5104,
   -1021, -1021, -1021, -1021,  6644, -1021, -1021,  6644, -1021, -1021,
   -1021, -1021,  5982,   973,  1164, -1021, -1021, -1021,  1165,   678,
    1173, -1021,  2136,  5982,   627, -1021, -1021,  2136,   711, -1021,
    1171,  2136,  1106, -1021,  1090, -1021,  1169, -1021, -1021, -1021,
    1090, -1021, -1021, -1021, -1021, -1021, -1021, -1021,   469,  1172,
   -1021,   714, -1021,   757, -1021, -1021,  1122,  5562,  1178,   627,
   -1021, -1021,   805,  1174,  1175,  1176,  5982,  1184,   806,  1183,
     815,   829,   834,   837,   861,   862,   870,   880,  5982,  5912,
    5982,   890,   905,   105,  5982,  5982,  5982,  5982,  5982,  5982,
    5982,  5982,  5982,  5982,  5982,  5982,  5982,  5982,  5982,  5982,
    5982,  5982,  5982,  5982,  5982,  5982,  5982,  5982,  5982,  5982,
    5982,  5982, -1021,  5982, -1021,  1188,  1193, -1021,  1023,  1177,
     402,    87, -1021, -1021, -1021, -1021, -1021, -1021, -1021,   456,
   -1021, -1021, -1021, -1021,  2136,   700, -1021,   221,  5394, -1021,
    6644,  5394,  6644, -1021, -1021, -1021, -1021, -1021, -1021, -1021,
     982,  1187, -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021,
   -1021,  1090, -1021,   163, -1021,   407, -1021, -1021, -1021,  5955,
    1196, -1021, -1021,   516, -1021,  1201,   967,  1081,  1081, -1021,
   -1021,   907,  5583,  1199,   908,   922,   307,   627,   627, -1021,
   -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021,
     924,   930,   931,   327,   694,   692,   755,    81,   104,   513,
     681,   535,   637,    91,   405,   147,   588,  5982,   605,  6149,
   -1021,   550,   980, -1021, -1021, -1021, -1021, -1021,   872, -1021,
    6368,   402,    18,    18, -1021, -1021, -1021,   457,   892, -1021,
   -1021,    70, -1021,   488,    94, -1021, -1021, -1021, -1021, -1021,
    1198, -1021,    30, -1021,   961, -1021,   429,  1200,   163, -1021,
      70, -1021, -1021, -1021,  1204,   310, -1021, -1021,  5394, -1021,
    5394, -1021, -1021,  1259, -1021,   916, -1021,  1135,   437, -1021,
   -1021, -1021,  5982,   627, -1021,  1034,   937, -1021,   939,   948,
   -1021, -1021,   997, -1021, -1021,   402, -1021, -1021, -1021, -1021,
   -1021, -1021,    89,   457,   555,   627,   627,    18, -1021,    70,
      70, -1021,   461,   969, -1021,  1205,   988,   451,    94,   558,
      73, -1021, -1021,   488, -1021, -1021, -1021,   488,    27,   627,
     627,  1207,   488, -1021,   163,  1211,   971, -1021,   325, -1021,
   -1021,  1213, -1021,  1214,  1215, -1021,  1220, -1021, -1021, -1021,
    1150, -1021,   132,  1217, -1021,   320, -1021, -1021, -1021,  1218,
     950,   958, -1021, -1021, -1021, -1021,   457,  1219,   550, -1021,
   -1021,   457,   500,   461,   654,   627,   627,    70, -1021,  1051,
   -1021, -1021,   488, -1021,   451,  1208, -1021,   558, -1021,   558,
   -1021, -1021,  1223, -1021, -1021,  1051,  1226, -1021, -1021, -1021,
   -1021,  5982,   310,  1227, -1021, -1021, -1021,  1224, -1021,  1232,
   -1021, -1021, -1021, -1021,   963,  5982, -1021, -1021, -1021,  1228,
   -1021, -1021,   461, -1021, -1021, -1021,  1234,    73, -1021, -1021,
   -1021, -1021, -1021, -1021, -1021, -1021,  5982, -1021, -1021, -1021,
   -1021, -1021, -1021, -1021, -1021, -1021
};

/* YYPGOTO[NTERM-NUM].  */
static const short yypgoto[] =
{
   -1021, -1021, -1021,  1179, -1021, -1021, -1021, -1021,  -382,  -115,
   -1021, -1021,   942, -1021, -1021, -1021, -1021, -1021,    76, -1021,
   -1021,   314, -1021, -1021,    24,    57, -1021,   130, -1021, -1021,
   -1021,  -943, -1021,  -910, -1021, -1021,  -718,  -731, -1021, -1021,
   -1021,  -603, -1021,  -579, -1021,  -420, -1021,   233, -1021, -1021,
     571,  -667, -1021,   162,   228, -1021, -1021, -1021, -1021, -1021,
   -1021, -1021, -1021, -1021, -1021, -1021,  -882,    86, -1021, -1020,
   -1021,   201, -1021, -1021,  -624,   386,  1233, -1021, -1021,  1095,
   -1021, -1021, -1021, -1021,  -114,  -378,  -375,  -344,  -363,  -391,
    -390,  -387,  -524,  -520, -1021,  -622, -1021,  -140, -1021, -1021,
    1113,  1267,  -596,  -438,     6, -1021, -1021, -1021,   445,    -3,
   -1021, -1021, -1021,   650,  -253, -1021, -1021, -1021, -1021,  -902,
    -760, -1021, -1021,   438, -1021, -1021, -1021,  -392, -1021, -1021,
   -1021,  -366, -1021, -1021, -1021, -1021, -1021,   477, -1021, -1021,
   -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021,    75,   699,
   -1021,   918, -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021,
   -1021, -1021,  1244,  -523,  -898, -1021,    74, -1021, -1021,   608,
     613,   439,     1,  -383,  1168, -1021,    33, -1021, -1021,  -573,
   -1021, -1021, -1021,   595,  -117,   998, -1021,  -448,   695,    41,
    1291, -1021,  1061, -1021,   741, -1021, -1021, -1021, -1021,  -163,
   -1021, -1021, -1021, -1021, -1021,    20,   994,   955,  1545, -1021,
   -1021,  1639, -1021, -1021,  -326, -1021,   594,   136,  -502,  -714,
   -1021,   800, -1021, -1021,   897,  -201,   602,   459,  -474,   125,
   -1021,   180,    54, -1021, -1021,   137, -1021,   142, -1021, -1021,
     604, -1021,   298,  -633, -1021, -1021, -1021, -1021, -1021, -1021,
   -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021,
   -1021, -1021, -1021,  1698, -1021, -1021,  1818,  -274,   462,     0,
      19, -1021
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -712
static const short yytable[] =
{
     123,   121,   133,   570,   322,   123,    99,   294,   493,   123,
     219,   219,   219,   599,   548,   304,   549,   538,   539,   124,
     550,   597,   540,   541,   124,   690,   759,   650,   142,  1066,
     203,   509,   710,   652,   433,   744,   131,   756,   854,   471,
     546,   547,  1042,   338,   339,   340,   341,   342,   343,  1047,
    1076,   200,  1043,  1076,  1201,   542,   543,   544,   545,   572,
     793,   425,   473,   477,   212,  1085,   429,   444,   430,   636,
    -613,   477,   959,   932,  -613,   116,    95,   963,  1052,   132,
     136,   967,   139,   571,   794,   655,  1131,   759,   942,   123,
     121,   827,   520,   615,  1119,    99,   744,  1128,   756,  1182,
    1183,   262,  -647,   668,  1120,   269,  -647,  1054,   124,   521,
    1126,  1042,  -655,   970,  1174,  1114,  -655,  1115,  1128,   974,
     828,  1043,   123,   412,   412,  -648,   409,   457,  1054,  -648,
     644,   397,   398,   997,  1116,   754,   242,   242,   266,   755,
     123,   124,   410,  1127,  1129,   403,   404,   213,  -711,   412,
     998,   123,   214,   494,   397,   398,   219,  -475,   459,   319,
    1112,  1113,   692,   297,   116,    95,   509,  1232,  -659,  1146,
     329,   449,  -659,   318,   700,   219,   337,   854,   272,   817,
    1076,   269,  1076,   854,  1071,  -279,   406,   459,   793,   272,
     272,   243,   243,   269,  1200,     3,   754,   200,   698,  1206,
     755,   219,  -711,   793,   454,   477,    81,  1044,  1045,   219,
     212,   219,   794,   219,   559,   317,   219,  1132,  1194,  1202,
    1197,   413,   922,   473,   219,   701,   271,   794,   498,   219,
     702,   219,   703,   419,   477,  1181,   421,  1079,   923,  -279,
    1086,   420,   200,   796,   219,   219,  -423,  -423,  -423,  1236,
     200,  -423,  -423,   672,   200,   212,   288,   200,    81,  1121,
     863,    81,  1057,   212,   847,   438,   306,   212,   751,   752,
     212,   802,   753,   568,   429,    81,  1044,  1045,   535,   536,
     537,   747,    81,  1057,   748,   412,   200,   123,   447,   625,
     123,   123,   123,   213,   951,  1031,   750,   805,   214,   212,
     320,   322,  -711,  -711,   854,   325,   124,  -711,  -711,   451,
     453,   455,   123,   470,   950,   749,   459,   952,   123,   322,
      81,    82,   141,  1159,     3,    85,    86,  1197,   412,   751,
     752,   124,  1150,   753,  1099,   699,   461,   319,   213,   397,
     398,   412,   747,   214,     3,   748,   213,  1222,  -642,   242,
     213,   214,  -642,   213,   242,   214,   242,   750,   214,     3,
     219,   392,   393,   394,  1155,   326,  1157,   322,   219,   242,
     219,   796,   327,    81,    82,   141,   749,   458,    85,    86,
     632,   631,   213,  1089,   953,   328,   796,   214,  -423,  -423,
    -423,   395,   396,  -423,  -423,   961,   759,  1026,   411,   802,
     330,   412,   690,  1028,   243,   744,   412,   756,   331,   243,
     627,   243,   477,   863,   802,   219,   412,  -423,  -423,  -423,
     635,   348,  -423,  -423,   243,   805,  -657,  1078,   350,  1080,
    -657,  -423,   688,  -423,   405,   557,   219,   219,   642,   567,
     805,  -423,   643,   219,   349,   123,   580,    81,    82,   141,
     567,   -47,    85,    86,   123,  1138,   200,  1139,   403,   404,
     322,  1052,   602,   459,   124,   123,   449,   123,     3,   212,
     351,     3,   322,   592,  1140,   123,  1193,  1138,   123,  1139,
    1053,  1178,   123,  1114,   124,  1115,   124,  1184,   352,  1185,
    1054,  1033,  1034,  -280,   319,   264,  1140,   618,    81,    82,
     141,   623,  1116,    85,    86,   754,  1186,   427,   318,   755,
     412,   219,  1053,    81,    82,   141,   354,   716,    85,    86,
     123,   123,  1054,  1035,  1036,  1227,  1184,  1023,  1185,  1024,
    1013,  1014,   355,  1025,  -649,  1015,  1016,  1037,  -649,   645,
     646,  1091,  1092,   353,  1093,  1186,   126,   127,   128,   507,
     508,  1178,   213,  1021,  1022,  -705,  -652,   214,   219,   219,
    -652,   242,   242,   397,   398,   567,   123,   660,  1017,  1018,
    1019,  1020,   399,   400,   219,   399,   400,   219,   219,  1042,
     683,   684,  1175,   567,  1138,   124,  1139,   401,   402,  1043,
     401,   402,  -709,   858,   412,  -423,  -423,  -423,   658,   200,
    -423,  -423,  -706,  1140,   208,   240,   240,   874,  -423,   875,
     405,  -423,   212,  -423,   123,   879,   243,   243,   406,   880,
     881,   882,   883,   884,   885,    81,    82,   141,   407,   411,
      85,    86,   412,   319,   912,   913,   494,   414,   751,   752,
    1055,  1056,   753,   491,    81,  1057,   412,   318,  1058,   914,
     915,   747,   647,   648,   748,   219,   219,  1049,  -653,   776,
    1095,   408,  -653,   249,   250,   251,   750,   219,   219,  -280,
     219,   472,  1055,  1056,   399,   400,    81,  1057,  1042,   412,
    1058,  1228,   322,   877,   123,   749,   123,  -531,  1043,   401,
     402,   427,  -708,   322,   412,   213,   708,   219,   494,  1087,
     214,   415,  -650,   592,   123,   592,  -650,   123,   123,   219,
     412,   728,     3,  -644,   599,  -641,   840,  -644,  1072,  -641,
     776,  1073,   461,   848,   395,   396,   623,   124,   392,   393,
     394,   397,   398,  -279,   964,   459,   989,   833,  -279,   834,
     459,   861,   420,    81,  1044,  1045,   858,   179,     3,   477,
     208,   201,   231,   231,   274,   275,   276,   277,   278,   279,
     280,   281,   422,   283,  1106,  -707,   286,  -610,  -423,   688,
    -423,  -610,   423,  1243,  1118,   374,  -645,   375,  -423,  -423,
    -645,  -279,   302,   600,   307,   308,   310,   395,   396,   434,
     316,  1010,  1011,  1012,  1143,   208,  -423,  -609,  -608,   376,
     377,  -609,  -608,   208,   908,   909,   302,   208,  1254,   219,
     208,  1160,  -279,   344,   459,    81,    82,   141,   240,   426,
      85,    86,     3,   240,   412,   240,   412,   412,   926,   123,
     985,   991,   219,   428,   123,   391,  -627,   219,   240,   208,
    -627,   219,    81,  1044,  1045,   435,   179,   439,   124,  1188,
    -632,   840,   442,   962,  -632,  -631,   840,   446,  -630,  -631,
     840,   123,  -630,   290,   291,   292,    81,    82,   141,   123,
    1208,    85,    86,   603,   302,   889,   440,   890,  1096,  -423,
     124,   379,  -629,  -628,   916,   917,  -629,  -628,   984,   947,
     269,  -625,   947,  1105,   861,  -625,  -423,   201,   464,   891,
     892,  -626,    81,    82,   141,  -626,   418,    85,    86,   977,
     269,  -622,   466,  1117,   441,  -622,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,  -623,   468,  -614,  -617,
    -623,  1050,  -614,  -617,   269,   910,   911,  1073,   302,  1069,
     450,   452,   201,   642,   219,  -637,   469,  1098,   302,  -637,
     201,  -638,  -639,   460,   201,  -638,  -639,   201,  -635,   474,
    -618,   490,  -635,   840,  -618,   231,   484,   515,   316,  -616,
     231,  -620,   231,  -616,   495,  -620,    81,    82,   141,  -621,
    1169,    85,    86,  -621,  -619,   231,   201,   269,  -619,  1209,
    1187,   492,  1073,   954,   684,   302,   497,   123,   123,   392,
     393,   394,  1082,  1083,   204,   237,   237,   302,   496,   208,
     905,   906,   907,  1134,  1135,  1136,  1100,  1101,   412,  1172,
    1190,  1191,   501,   947,   502,   947,   947,   947,   503,   776,
     240,   240,   284,   285,   504,   505,   561,   511,   564,   562,
    1110,   569,  1050,  1050,   565,   582,  1109,   294,   598,   611,
     583,  1124,   584,  1069,  1069,   510,  -279,   587,   593,   610,
     613,   620,   628,   513,   624,   514,   619,   412,   629,   634,
    1124,   322,   633,   640,   638,   123,  1153,   641,   657,   661,
     677,   664,   286,   219,   662,  1249,   674,   679,   123,   580,
     680,   682,   685,   123,   124,   694,   704,   693,   687,   706,
     630,   585,   840,   588,   709,   594,   322,   124,   595,   718,
     719,   460,  1166,   601,  1050,   123,   123,  1050,   811,  1124,
    1124,  1162,   612,   815,   818,   316,   825,   826,  1069,   843,
    1069,   779,   621,  1069,  1179,  1180,   845,  1069,   575,   123,
     123,   865,  1069,   867,   870,  1210,   869,   302,   123,   871,
     204,   919,   208,   947,   888,   947,   201,   918,  1203,  1204,
     920,   921,   123,   779,   780,   781,   782,   124,   924,   927,
     783,   784,   785,   786,   787,   788,   789,   231,   231,   933,
     934,   124,   935,   938,  1050,   123,   123,  1124,   941,   955,
     956,   958,  1069,   966,   972,   204,   975,   968,   982,   986,
     987,   988,   990,   204,  1230,  1231,   575,   204,   992,  1029,
     204,  1030,   123,  1153,  1084,   179,  1090,  1032,   237,  1094,
    1097,  1130,  1149,   237,  1142,   237,  1161,  1189,  1167,  1205,
     673,   124,  1187,   302,  1212,  1216,  1215,  1069,   237,   204,
    1218,  1220,  1221,  1224,  1247,  1245,  1226,  1234,  1237,   601,
    1238,  1240,  1248,  1060,   575,  1250,   695,   696,   697,  1251,
     476,  1252,  1239,  1198,   316,  1104,   831,  1173,   263,  1111,
    1229,  1145,   575,   671,   957,   995,   965,   199,   832,  1158,
     390,   940,   676,   298,   302,   833,  1244,   834,   157,   158,
     159,   160,   161,   162,   823,   722,   723,   821,   296,   201,
     978,   462,   857,   247,  1223,   437,   163,   164,   165,   391,
     506,   639,   558,   866,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   873,   813,   981,  1103,   980,     0,
     166,     0,     0,   820,     0,   822,     0,     0,     0,   460,
       0,     0,     0,     0,     0,     0,     0,     0,   841,   842,
     671,   730,     0,   846,     0,     0,   282,   621,   859,     0,
     287,     0,   289,   671,   293,     0,     0,     0,     0,   295,
     391,     0,     0,     0,   302,   176,   302,   321,     0,     0,
       0,   311,   302,   312,     0,     0,     0,     0,     0,     0,
     321,   321,   321,   321,   321,   321,     0,   346,   347,   301,
       0,     0,     0,     0,   864,     0,     0,     0,     0,   204,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   333,     0,   335,     0,     0,   378,     0,   332,     0,
     237,   237,     0,     0,   298,     0,     0,     0,     0,   157,
     158,   159,   160,   161,   162,     0,     0,    81,   177,   178,
       0,   179,    85,    86,     0,     0,     0,   163,   164,   165,
       0,   499,   944,     0,     0,     0,     0,     0,   199,     0,
       0,     0,     0,     0,     0,     0,   199,     0,     0,     0,
     199,   166,     0,   199,     0,     0,     0,   518,     0,     0,
       0,   424,   522,   523,   524,   525,   526,   527,   528,   529,
     530,   531,   532,   894,     0,     0,     0,     0,     0,     0,
     976,   859,   199,   601,     0,   445,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   554,   176,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   895,   896,
     897,   898,   899,   900,   901,   902,   903,   904,     0,     0,
     465,     0,   204,   467,     0,   205,   238,   238,     0,     0,
    -259,   475,     0,     0,   478,   456,   298,     0,     0,     0,
       0,   157,   158,   159,   160,   161,   162,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   163,
     164,   165,   485,   486,   487,   488,     0,  1074,    81,   299,
     300,     0,   179,     0,  1081,     0,     0,     0,     0,     0,
       0,     0,   456,   166,     0,     0,   500,     0,     0,     0,
       0,     0,     0,     0,   456,   321,   321,   321,   321,   321,
     321,   321,   321,   321,   321,   321,   321,   321,   321,   321,
     321,     0,   519,     0,     0,     0,     0,     0,     0,   206,
     239,   239,     0,     0,     0,     0,     0,     0,   176,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   321,     0,   566,     0,     0,   391,
       0,     0,   199,     0,     0,     0,   478,     0,     0,     0,
     563,   581,   321,     0,     0,   586,     0,   589,     0,     0,
       0,   205,     0,     0,     0,     0,     0,     0,   216,   245,
     245,     0,     0,     0,   609,     0,     0,     0,   614,     0,
       0,     0,  1147,     0,     0,     0,     0,     0,   321,     0,
      81,   299,   300,     0,   179,     0,     0,     0,   859,     0,
     321,  1164,     0,   712,     0,     0,   205,   302,     0,     0,
    1170,  1171,     0,     0,   205,   721,     0,     0,   205,     0,
       0,   205,     0,     0,     0,     0,     0,     0,     0,   238,
       0,     0,     0,     0,   238,     0,   238,     0,     0,     0,
       0,     0,     0,     0,   321,     0,   321,     0,     0,   238,
     205,     0,  -172,  1207,     0,   206,     0,   298,     0,     0,
    1211,  1213,   157,   158,   159,   160,   161,   162,     0,     0,
     835,     0,   859,     0,     0,  -203,  -203,     0,     0,   651,
     163,   164,   165,     0,   712,   199,     0,     0,   218,   246,
     246,     0,     0,   321,     0,     0,     0,     0,  1233,     0,
     206,     0,   689,     0,   166,   321,     0,     0,   206,     0,
       0,     0,   206,     0,   216,   206,     0,   478,  1241,  1242,
       0,     0,     0,   239,     0,  1246,     0,     0,   239,     0,
     239,     0,     0,     0,     0,     0,   715,     0,     0,     0,
     725,   727,     0,   239,   206,     0,     0,     0,     0,   176,
       0,     0,   745,     0,     0,   488,     0,     0,     0,   216,
       0,     0,     0,     0,   581,     0,   778,   216,     0,     0,
       0,   216,     0,     0,   216,     0,     0,     0,     0,     0,
       0,     0,   245,     0,   731,     0,     0,   245,   777,   245,
       0,     0,     0,     0,     0,     0,     0,     0,   829,     0,
       0,     0,   245,   216,     0,   835,     0,     0,     0,     0,
     835,     0,     0,   745,   835,     0,     0,     0,     0,     0,
     205,    81,   299,   300,     0,   179,   321,   321,   321,   321,
     321,   321,   886,   887,   218,     0,     0,     0,     0,     0,
     712,   238,   238,     0,     0,     0,   872,     0,   893,     0,
       0,   456,     0,   456,     0,     0,     0,     0,     0,   878,
       0,   993,   518,     0,     0,     0,     0,   999,  1000,  1001,
    1002,  1003,  1004,  1005,  1006,  1007,  1008,  1009,     0,   218,
       0,     0,     0,     0,     0,     0,     0,   218,     0,     0,
       0,   218,     0,     0,   218,     0,     0,     0,     0,     0,
       0,     0,   246,   936,   937,     0,     0,   246,     0,   246,
       0,     0,     0,     0,   206,   321,     0,   835,     0,     0,
       0,     0,   246,   218,     0,     0,   321,     0,     0,     0,
       0,     0,     0,     0,     0,   239,   239,     0,  -172,     0,
       0,     0,     0,   357,     0,     0,     0,   969,   157,   158,
     159,   160,   161,   162,     0,     0,     0,     0,     0,     0,
       0,  -203,  -203,   205,     0,     0,   163,   164,   165,   321,
       0,     0,     0,   216,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     166,     0,     0,     0,   245,   245,     0,     0,   321,   321,
     321,   321,   321,   321,   321,   321,   321,   321,   321,   321,
     321,   321,   321,   321,   321,   832,   321,   996,     0,     0,
     298,     0,   833,     0,   834,   157,   158,   159,   160,   161,
     162,     0,     0,     0,     0,   176,     0,     0,     0,     0,
       0,     0,     0,   163,   164,   165,     0,     0,     0,     0,
       0,  1075,     0,     0,     0,     0,   835,   206,     0,     0,
       0,     0,     0,    23,    24,    25,    26,   166,    27,     0,
       0,     0,     0,    32,    33,     0,     0,    36,    37,  1088,
      39,    40,    41,    42,     0,   321,     0,     0,     0,     0,
       0,     0,     0,   218,     0,    54,    55,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   488,    81,   299,   300,
       0,   179,   176,     0,   246,   246,   216,     0,     0,     0,
       0,    80,   745,     0,     0,     0,     0,     0,     0,     0,
       0,    84,   143,     0,     0,     0,     0,   144,   145,   146,
       0,   147,   148,   149,   150,   151,   152,   153,   154,   155,
    -560,     0,     0,     0,  1102,   156,     0,     0,     0,     0,
     157,   158,   159,   160,   161,   162,     0,     0,     0,     0,
       0,     0,     0,  -203,  -203,     0,     0,  1148,   163,   164,
     165,     0,     0,     0,    81,   177,   178,     0,   179,    85,
      86,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   166,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1165,
       0,     0,     0,     0,     0,     0,   167,   168,   169,   170,
     171,   172,   173,   174,     0,     0,   218,    -2,     1,     0,
       0,     0,   175,     0,     0,     0,     0,   176,     0,     0,
       0,     0,     0,     0,     0,     2,  1214,     0,     0,     0,
       0,  -279,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     3,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     4,     0,     5,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   321,  -423,  -423,  -423,     0,     6,
       0,     0,     0,     0,     7,     8,     9,     0,   321,    81,
     177,   178,     0,   179,   180,    86,     0,     0,     0,    10,
      11,    12,     0,     0,     0,     0,     0,     0,     0,   321,
       0,     0,     0,     0,     0,     0,     0,     0,  1253,    13,
      14,    15,    16,     0,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,     0,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    -3,
       1,     0,     0,     0,     0,    81,    82,    83,    84,     0,
      85,    86,    87,     0,     0,     0,     0,     2,     0,     0,
       0,     0,     0,  -279,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     3,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     4,     0,     5,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -423,  -423,  -423,
       0,     6,     0,     0,     0,     0,     7,     8,     9,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    10,    11,    12,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    13,    14,    15,    16,     0,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,     0,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,     0,     0,     0,     0,     0,     0,    81,    82,    83,
      84,   143,    85,    86,    87,     0,   144,   145,   146,     0,
     147,   148,   149,   150,   151,   152,   153,   154,   155,  -560,
     555,     0,     0,     0,   156,     0,     0,     0,     0,   157,
     158,   159,   160,   161,   162,     0,     0,     0,     0,     0,
       0,     0,  -203,  -203,     4,     0,     5,   163,   164,   165,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -423,  -423,
    -423,   166,     6,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   168,   169,   170,   171,
     172,   173,   174,     0,     0,     0,     0,     0,     0,     0,
       0,   175,    13,    14,    15,    16,   176,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,     0,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,     0,     0,     0,     0,     0,     0,    81,   177,
     556,    84,   179,   180,    86,    87,   143,     0,     0,     0,
       0,   144,   145,   146,     0,   147,   148,   149,   150,   151,
     152,   153,   154,   155,  -172,     0,     0,     0,     0,   156,
       0,     0,     0,     0,   157,   158,   159,   160,   161,   162,
       0,     0,     0,     0,     0,     0,     0,  -203,  -203,  -279,
       0,     0,   163,   164,   165,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -279,  -279,  -279,   166,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   168,   169,   170,   171,   172,   173,   174,     0,     0,
       0,     0,     0,     0,     0,     0,   175,  -279,  -279,  -279,
    -279,   176,  -279,  -279,  -279,  -279,  -279,  -279,  -279,  -279,
    -279,  -279,     0,  -279,  -279,  -279,  -279,  -279,  -279,  -279,
    -279,  -279,  -279,  -279,  -279,  -279,  -279,  -279,  -279,  -279,
    -279,  -279,  -279,  -279,  -279,  -279,  -279,  -279,  -279,  -279,
    -279,  -279,  -279,  -279,  -279,  -279,  -279,  -279,  -279,  -279,
    -279,  -279,  -279,  -279,  -279,  -279,  -279,  -279,  -279,  -279,
    -279,  -279,  -279,  -279,  -279,  -279,  -279,     0,     0,     0,
       0,     0,     0,    81,   177,   178,  -279,   179,   180,    86,
    -279,   221,     0,     0,     0,     0,   144,   145,   146,     0,
       0,   222,   149,   150,   151,   152,   153,   154,   223,  -172,
    -564,     0,     0,     0,   224,     0,     0,     0,     0,   157,
     158,   159,   160,   161,   162,     0,     0,     0,     0,     0,
       0,     0,  -203,  -203,  -279,     0,     0,   163,   164,   165,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -279,  -279,
    -279,   166,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   169,   170,   171,
     172,   173,   174,     0,     0,     0,     0,     0,     0,     0,
       0,   175,  -279,  -279,  -279,  -279,   176,  -279,  -279,  -279,
    -279,  -279,  -279,  -279,  -279,  -279,  -279,     0,  -279,  -279,
    -279,  -279,  -279,  -279,  -279,  -279,  -279,  -279,  -279,  -279,
    -279,  -279,  -279,  -279,  -279,  -279,  -279,  -279,  -279,  -279,
    -279,  -279,  -279,  -279,  -279,  -279,  -279,  -279,  -279,  -279,
    -279,  -279,  -279,  -279,  -279,  -279,  -279,  -279,  -279,  -279,
    -279,  -279,  -279,  -279,  -279,  -279,  -279,  -279,  -279,  -279,
    -279,  -279,     0,     0,     0,     0,     0,     0,    81,   177,
     178,  -279,   179,   225,   226,  -279,  -170,     0,     0,     0,
       0,  -170,  -170,  -170,     0,  -170,  -170,  -170,  -170,  -170,
    -170,  -170,  -170,  -170,  -170,  -170,  -170,  -709,  -170,  -170,
       0,  -170,     0,  -170,  -170,  -170,  -170,  -170,  -170,  -170,
    -170,  -170,  -170,  -170,  -170,  -170,  -170,  -170,  -170,     0,
    -170,     0,  -170,  -170,  -170,  -170,  -170,  -170,  -170,  -170,
    -170,  -170,  -170,  -170,  -170,  -170,  -170,  -170,  -170,  -170,
    -170,  -170,  -170,     0,     0,     0,  -170,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -170,  -170,  -170,  -170,  -170,  -170,  -170,     0,     0,
       0,     0,     0,   143,     0,     0,  -170,     0,   144,   145,
     146,  -170,   147,   148,   149,   150,   151,   152,   153,   154,
     155,  -560,     0,     0,     0,     0,   156,     0,     0,     0,
       0,   157,   158,   159,   160,   161,   162,     0,     0,     0,
       0,     0,     0,     0,  -203,  -203,     0,     0,     0,   163,
     164,   165,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   166,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -170,  -170,  -170,     0,  -170,  -170,  -170,
       0,     0,     0,     0,     0,     0,     0,  -532,   168,   169,
     170,   171,   172,   173,   174,     0,     0,     0,     0,   221,
       0,     0,     0,   175,   144,   145,   146,     0,   176,   222,
     149,   150,   151,   152,   153,   154,   223,  -504,  -504,     0,
       0,     0,   224,  -504,     0,     0,     0,   157,   158,   159,
     160,   161,   162,     0,     0,     0,     0,     0,     0,     0,
    -203,  -203,     0,     0,     0,   163,   164,   165,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   166,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      81,   177,   178,     0,   179,   180,    86,     0,     0,     0,
       0,     0,     0,  -504,     0,   169,   170,   171,   172,   173,
     174,     0,     0,     0,     0,     0,   143,     0,     0,   175,
       0,   144,   145,   146,   176,   147,   148,   149,   150,   151,
     152,   153,   154,   155,  -560,   653,     0,     0,     0,   156,
       0,     0,     0,     0,   157,   158,   159,   160,   161,   162,
       0,     0,     0,     0,     0,     0,     0,  -203,  -203,     0,
       0,     0,   163,   164,   165,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   166,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    81,   177,   178,     0,
     179,   225,   226,     0,     0,     0,     0,     0,     0,     0,
       0,   168,   169,   170,   171,   172,   173,   174,     0,     0,
       0,     0,     0,   143,     0,     0,   175,     0,   144,   145,
     146,   176,   147,   148,   149,   150,   151,   152,   153,   154,
     155,  -560,     0,     0,     0,     0,   156,     0,     0,     0,
       0,   157,   158,   159,   160,   161,   162,     0,     0,     0,
       0,     0,     0,     0,  -203,  -203,     0,     0,     0,   163,
     164,   165,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   166,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    81,   177,   178,     0,   179,   180,    86,
       0,     0,     0,     0,     0,     0,     0,     0,   168,   169,
     170,   171,   172,   173,   174,     0,     0,     0,     0,   221,
       0,     0,     0,   175,   144,   145,   146,     0,   176,   222,
     149,   150,   151,   152,   153,   154,   223,  -560,  -564,     0,
       0,     0,   224,     0,     0,     0,     0,   157,   158,   159,
     160,   161,   162,     0,     0,     0,     0,     0,     0,     0,
    -203,  -203,     0,     0,     0,   163,   164,   165,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   166,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      81,   177,   178,     0,   179,   180,    86,     0,     0,     0,
       0,     0,     0,  -500,     0,   169,   170,   171,   172,   173,
     174,     0,     0,     0,     0,   221,     0,     0,     0,   175,
     144,   145,   146,     0,   176,   222,   149,   150,   151,   152,
     153,   154,   223,  -560,  -564,     0,     0,     0,   224,     0,
       0,     0,     0,   157,   158,   159,   160,   161,   162,     0,
       0,     0,     0,     0,     0,     0,  -203,  -203,     0,     0,
       0,   163,   164,   165,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   166,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    81,   177,   178,     0,
     179,   225,   226,     0,     0,     0,     0,     0,     0,     0,
       0,   169,   170,   171,   172,   173,   174,     0,     0,     0,
       0,     0,     0,     0,     0,   175,     0,   144,   145,   146,
     176,   147,   148,   149,   150,   151,   152,   153,   154,   223,
    -560,   573,     0,     0,     0,   357,     0,     0,     0,     0,
     157,   158,   159,   160,   161,   162,     0,     0,     0,     0,
       0,     0,     0,  -203,  -203,     4,     0,     5,   163,   164,
     165,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   166,     6,     0,     0,     0,     0,     0,     0,
       0,     0,    81,   177,   178,     0,   179,   225,   226,     0,
       0,     0,     0,     0,     0,     0,     0,   168,   169,   170,
     171,   172,   173,   174,     0,     0,     0,     0,     0,     0,
       0,     0,   574,    13,    14,    15,    16,   176,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,     0,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,     0,     0,     0,     0,     0,     0,    81,
     177,   556,    84,   179,   180,    86,    87,   144,   145,   146,
       0,   147,   148,   149,   150,   151,   152,   153,   154,   223,
    -560,   654,     0,     0,     0,   357,     0,     0,     0,     0,
     157,   158,   159,   160,   161,   162,     0,     0,     0,     0,
       0,     0,     0,  -203,  -203,     4,     0,     5,   163,   164,
     165,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   166,     6,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   168,   169,   170,
     171,   172,   173,   174,     0,     0,     0,     0,     0,     0,
       0,     0,   175,    13,    14,    15,    16,   176,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,     0,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,     0,     0,     0,     0,     0,     0,    81,
     177,   556,    84,   179,   180,    86,    87,   144,   145,   146,
       0,   147,   148,   149,   150,   151,   152,   153,   154,   223,
    -560,   666,     0,     0,     0,   357,     0,     0,     0,     0,
     157,   158,   159,   160,   161,   162,     0,     0,     0,     0,
       0,     0,     0,  -203,  -203,     4,     0,     5,   163,   164,
     165,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   166,     6,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   168,   169,   170,
     171,   172,   173,   174,     0,     0,     0,     0,     0,     0,
       0,     0,   667,    13,    14,    15,    16,   176,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,     0,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,     0,     0,     0,     0,     0,     0,    81,
     177,   556,    84,   179,   180,    86,    87,   144,   145,   146,
       0,   147,   148,   149,   150,   151,   152,   153,   154,   223,
    -560,   665,     0,     0,     0,   357,     0,     0,     0,     0,
     157,   158,   159,   160,   161,   162,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   163,   164,
     165,   144,   145,   146,     0,   147,   148,   149,   150,   151,
     152,   153,   154,   223,  -560,   669,     0,     0,     0,   357,
       0,     0,   166,     0,   157,   158,   159,   160,   161,   162,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   163,   164,   165,     0,     0,   168,   169,   170,
     171,   172,   173,   174,     0,     0,     0,     0,     0,     0,
       0,     0,   175,     0,     0,     0,   166,   176,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   168,   169,   170,   171,   172,   173,   174,     0,     0,
       0,     0,     0,     0,     0,     0,   670,     0,   144,   145,
     146,   176,   147,   148,   149,   150,   151,   152,   153,   154,
     223,  -560,   729,     0,     0,     0,   357,     0,     0,     0,
       0,   157,   158,   159,   160,   161,   162,     0,     0,    81,
     177,   178,     0,   179,   180,    86,     0,     0,     0,   163,
     164,   165,   144,   145,   146,     0,   147,   148,   149,   150,
     151,   152,   153,   154,   223,  -560,   807,     0,     0,     0,
     357,     0,     0,   166,     0,   157,   158,   159,   160,   161,
     162,     0,     0,    81,   177,   178,     0,   179,   180,    86,
       0,     0,     0,   163,   164,   165,     0,     0,   168,   169,
     170,   171,   172,   173,   174,     0,     0,     0,     0,     0,
       0,     0,     0,   175,     0,     0,     0,   166,   176,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   168,   169,   170,   171,   172,   173,   174,     0,
       0,     0,     0,     0,     0,     0,     0,   175,     0,   144,
     145,   146,   176,   147,   148,   149,   150,   151,   152,   153,
     154,   223,  -560,   808,     0,     0,     0,   357,     0,     0,
       0,     0,   157,   158,   159,   160,   161,   162,     0,     0,
      81,   177,   178,     0,   179,   180,    86,     0,     0,     0,
     163,   164,   165,   144,   145,   146,     0,   147,   148,   149,
     150,   151,   152,   153,   154,   223,  -560,   810,     0,     0,
       0,   357,     0,     0,   166,     0,   157,   158,   159,   160,
     161,   162,     0,     0,    81,   177,   178,     0,   179,   180,
      86,     0,     0,     0,   163,   164,   165,     0,     0,   168,
     169,   170,   171,   172,   173,   174,     0,     0,     0,     0,
       0,     0,     0,     0,   809,     0,     0,     0,   166,   176,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   168,   169,   170,   171,   172,   173,   174,
       0,     0,     0,     0,     0,     0,     0,     0,   175,     0,
     144,   145,   146,   176,   147,   148,   149,   150,   151,   152,
     153,   154,   223,  -560,   943,     0,     0,     0,   357,     0,
       0,     0,     0,   157,   158,   159,   160,   161,   162,     0,
       0,    81,   177,   178,     0,   179,   180,    86,     0,     0,
       0,   163,   164,   165,   144,   145,   146,     0,   147,   148,
     149,   150,   151,   152,   153,   154,   223,  -560,     0,     0,
       0,     0,   357,     0,     0,   166,     0,   157,   158,   159,
     160,   161,   162,     0,     0,    81,   177,   178,     0,   179,
     180,    86,     0,     0,     0,   163,   164,   165,     0,     0,
     168,   169,   170,   171,   172,   173,   174,     0,     0,     0,
       0,     0,     0,     0,     0,   175,     0,     0,     0,   166,
     176,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   168,   169,   170,   171,   172,   173,
     174,  -136,     0,     0,     0,     0,  -136,     0,     0,   175,
       0,     0,     0,     0,   176,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     4,     0,     5,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    81,   177,   178,     0,   179,   180,    86,     0,
       0,     0,     0,     0,     6,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    81,   177,   178,     0,
     179,   180,    86,     0,    13,    14,    15,    16,     0,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,     0,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,  -563,     0,     0,     0,     0,     0,
       0,     0,   138,    84,     0,     0,     0,    87,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     4,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    13,    14,    15,    16,
       0,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,     0,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,     0,     0,     0,     0,
       0,   711,  -703,     0,   138,    84,   298,     0,     0,    87,
       0,   157,   158,   159,   160,   161,   162,     0,     0,     0,
       0,     0,   630,     0,     0,     0,     0,   298,     0,   163,
     164,   165,   157,   158,   159,   160,   161,   162,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   711,
     163,   164,   165,   166,   298,     0,     0,     0,     0,   157,
     158,   159,   160,   161,   162,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   166,     0,     0,   163,   164,   165,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   176,     0,
       0,   166,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   176,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -279,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     3,   176,     0,     0,     0,
       0,     0,     0,     0,     0,     4,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      81,   299,   300,     0,   179,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    81,   299,   300,     0,   179,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    81,   299,
     300,     0,   179,    13,    14,    15,    16,     0,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,     0,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,     0,     0,     0,     0,     0,     0,    81,
      82,    83,    84,   298,    85,    86,    87,     0,   157,   158,
     159,   160,   161,   162,     0,     0,     0,     0,     0,     0,
       0,  -203,  -203,     0,   298,   516,   163,   164,   165,   157,
     158,   159,   160,   161,   162,   298,     0,     0,   596,     0,
     157,   158,   159,   160,   161,   162,     0,   163,   164,   165,
     166,     0,     0,     0,     0,     0,   298,   994,   163,   164,
     165,   157,   158,   159,   160,   161,   162,   298,     0,     0,
     691,   166,   157,   158,   159,   160,   161,   162,     0,   163,
     164,   165,   166,     0,     0,     0,     0,     0,     0,     0,
     163,   164,   165,     0,     0,   176,     0,     0,     0,   298,
    -259,     0,     0,   166,   157,   158,   159,   160,   161,   162,
       0,     0,     0,     0,   166,     0,   176,     0,     0,     0,
       0,     0,   163,   164,   165,     0,   298,   176,     0,     0,
       0,   157,   158,   159,   160,   161,   162,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   166,     0,   176,   163,
     164,   165,     0,     0,     0,   345,     0,     0,     0,   176,
     157,   158,   159,   160,   161,   162,     0,    81,   299,   300,
       0,   179,     0,   166,     0,     0,     0,     0,   163,   164,
     165,     0,     0,     0,     0,     0,     0,     0,    81,   299,
     300,   176,   179,     0,     0,     0,     0,     0,     0,    81,
     299,   300,   166,   179,   724,     0,     0,     0,     0,   157,
     158,   159,   160,   161,   162,     0,     0,     0,   176,     0,
      81,   299,   300,     0,   179,     0,     0,   163,   164,   165,
       0,    81,   299,   300,   726,   179,     0,     0,     0,   157,
     158,   159,   160,   161,   162,     0,     0,   176,     0,     0,
       0,   166,     0,     0,     0,     0,     0,   163,   164,   165,
       0,     0,     0,    81,   299,   300,     0,   179,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   166,     0,     0,     0,     0,     0,     0,     0,     0,
      81,   299,   300,   732,   179,     0,   176,     0,   733,   734,
     735,   736,   737,   738,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   163,   739,   740,    81,
     299,   300,     0,   179,     0,     0,   176,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     741,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    81,   299,
     300,     0,   179,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   176,     0,     0,     0,     0,
       0,     0,     0,     0,     4,     0,     5,     0,    81,   299,
     300,     0,   179,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -423,  -423,
    -423,     0,     6,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    81,   742,   743,
       0,   179,    13,    14,    15,    16,     0,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,     0,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,     4,     0,     5,     0,     0,     0,     0,     0,
     138,    84,     0,     0,     0,    87,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       6,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      13,    14,    15,    16,     0,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
       4,     0,     0,     0,     0,     0,    81,  1107,   138,    84,
       0,     0,     0,    87,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -423,  -423,  -423,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    13,    14,
      15,    16,     0,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,     0,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,     4,     0,
       0,     0,     0,     0,     0,     0,   138,    84,     0,     0,
       0,    87,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    10,    11,    12,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    13,    14,    15,    16,
       0,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,     0,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,     4,     0,     5,     0,
       0,     0,     0,     0,   138,    84,     0,     0,     0,    87,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     6,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    13,    14,    15,    16,     0,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,     0,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,     4,     0,     0,     0,     0,     0,
       0,     0,   138,    84,     0,     0,     0,    87,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    13,    14,    15,    16,     0,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,     0,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,     0,     0,     0,     0,     0,     0,     0,     0,
     138,    84,     0,     0,     0,    87
};

static const short yycheck[] =
{
       0,     0,     5,   441,   144,     5,     0,   122,   334,     9,
      10,    11,    12,   461,   405,   132,   406,   395,   396,     0,
     407,   459,   397,   398,     5,   598,   659,   551,     9,   939,
      10,   357,   628,   553,   235,   659,     3,   659,   705,   313,
     403,   404,    24,   157,   158,   159,   160,   161,   162,   931,
     948,    10,    34,   951,    27,   399,   400,   401,   402,   442,
     663,   224,   315,     5,    10,   967,   229,   268,   231,   507,
      21,     5,   832,   791,    25,     0,     0,   837,     5,    24,
       5,   841,     7,    25,   663,   559,    56,   720,   806,    89,
      89,    25,    28,   475,    24,    89,   720,    24,   720,  1119,
    1120,     0,    21,   577,    34,    18,    25,    34,    89,    45,
    1053,    24,    21,   844,    25,    26,    25,    28,    24,   850,
     693,    34,   122,    21,    21,    21,    41,    25,    34,    25,
      27,    50,    51,    28,    45,   659,    11,    12,    19,   659,
     140,   122,    57,  1053,  1054,    54,    55,    10,    34,    21,
      45,   151,    10,    25,    50,    51,   156,    25,    26,   140,
    1042,  1043,   600,   130,    89,    89,   492,  1187,    21,  1071,
     151,   288,    25,   140,   612,   175,   156,   844,   103,   681,
    1078,    18,  1080,   850,   944,    24,    39,    26,   791,   114,
     115,    11,    12,    18,  1137,    34,   720,   156,    23,  1142,
     720,   201,    88,   806,    19,     5,   188,   189,   190,   209,
     156,   211,   791,   213,   415,   140,   216,   187,  1128,   192,
    1130,   201,    41,   476,   224,    25,    24,   806,   345,   229,
     613,   231,   614,   213,     5,  1117,   216,   951,    57,    18,
     971,   192,   201,   663,   244,   245,   188,   189,   190,  1192,
     209,   193,   194,   579,   213,   201,    88,   216,   188,   189,
     708,   188,   189,   209,     5,   245,    21,   213,   659,   659,
     216,   663,   659,   436,   437,   188,   189,   190,   392,   393,
     394,   659,   188,   189,   659,    21,   245,   287,   287,    25,
     290,   291,   292,   156,   817,   928,   659,   663,   156,   245,
      24,   441,   188,   189,   971,    24,   287,   193,   194,   290,
     291,   292,   312,   312,   816,   659,    26,   819,   318,   459,
     188,   189,   190,  1083,    34,   193,   194,  1237,    21,   720,
     720,   312,    22,   720,    27,   609,   303,   318,   201,    50,
      51,    21,   720,   201,    34,   720,   209,    27,    21,   224,
     213,   209,    25,   216,   229,   213,   231,   720,   216,    34,
     360,    34,    35,    36,  1078,    24,  1080,   507,   368,   244,
     370,   791,    24,   188,   189,   190,   720,   302,   193,   194,
     497,   495,   245,   979,   822,    24,   806,   245,   188,   189,
     190,    32,    33,   193,   194,   833,  1029,   921,    18,   791,
      18,    21,   975,   923,   224,  1029,    21,  1029,    18,   229,
      25,   231,     5,   861,   806,   415,    21,   188,   189,   190,
      25,    24,   193,   194,   244,   791,    21,   950,    16,   952,
      25,    24,    25,    26,    29,   415,   436,   437,    21,   433,
     806,    34,    25,   443,    24,   445,   445,   188,   189,   190,
     444,    22,   193,   194,   454,    26,   415,    28,    54,    55,
     600,     5,   465,    26,   445,   465,   583,   467,    34,   415,
      16,    34,   612,   454,    45,   475,    25,    26,   478,    28,
      24,  1114,   482,    26,   465,    28,   467,    26,    16,    28,
      34,    89,    90,    24,   475,    26,    45,   478,   188,   189,
     190,   482,    45,   193,   194,  1029,    45,    18,   475,  1029,
      21,   511,    24,   188,   189,   190,    15,   634,   193,   194,
     520,   521,    34,   121,   122,    25,    26,   918,    28,   919,
     908,   909,   102,   920,    21,   910,   911,   135,    25,   520,
     521,    25,    26,    16,    28,    45,   112,   113,   114,     6,
       7,  1184,   415,   916,   917,    22,    21,   415,   558,   559,
      25,   436,   437,    50,    51,   559,   566,   566,   912,   913,
     914,   915,    37,    38,   574,    37,    38,   577,   578,    24,
      20,    21,    27,   577,    26,   566,    28,    52,    53,    34,
      52,    53,    22,   708,    21,   188,   189,   190,    25,   558,
     193,   194,    22,    45,    10,    11,    12,   724,    18,   726,
      29,    21,   558,    23,   614,   732,   436,   437,    39,   733,
     734,   735,   736,   737,   738,   188,   189,   190,    40,    18,
     193,   194,    21,   614,    37,    38,    25,    95,  1029,  1029,
     184,   185,  1029,    18,   188,   189,    21,   614,   192,    52,
      53,  1029,    42,    43,  1029,   655,   656,   931,    21,   659,
     986,    56,    25,    13,    14,    15,  1029,   667,   668,    24,
     670,    26,   184,   185,    37,    38,   188,   189,    24,    21,
     192,    27,   822,    25,   684,  1029,   686,    95,    34,    52,
      53,    18,    22,   833,    21,   558,   621,   697,    25,   973,
     558,    19,    21,   684,   704,   686,    25,   707,   708,   709,
      21,    22,    34,    21,  1162,    21,   697,    25,    18,    25,
     720,    21,   689,   704,    32,    33,   707,   708,    34,    35,
      36,    50,    51,    24,    23,    26,   876,    26,    24,    28,
      26,   708,   192,   188,   189,   190,   861,   192,    34,     5,
     156,    10,    11,    12,   104,   105,   106,   107,   108,   109,
     110,   111,    22,   113,  1038,    22,   116,    21,    24,    25,
      26,    25,    24,  1211,  1048,    24,    21,    26,    34,    28,
      25,    24,   132,    26,   134,   135,   136,    32,    33,    19,
     140,   905,   906,   907,  1068,   201,    45,    21,    21,    48,
      49,    25,    25,   209,    32,    33,   156,   213,  1246,   809,
     216,  1085,    24,   163,    26,   188,   189,   190,   224,   225,
     193,   194,    34,   229,    21,   231,    21,    21,    25,   829,
      25,    25,   832,    95,   834,   185,    21,   837,   244,   245,
      25,   841,   188,   189,   190,    20,   192,    95,   829,  1123,
      21,   832,    24,   834,    25,    21,   837,    18,    21,    25,
     841,   861,    25,    68,    69,    70,   188,   189,   190,   869,
    1144,   193,   194,   195,   224,    24,    27,    26,   992,    28,
     861,    23,    21,    21,    54,    55,    25,    25,   869,   814,
      18,    21,   817,    21,   861,    25,    45,   156,    25,    48,
      49,    21,   188,   189,   190,    25,   211,   193,   194,   195,
      18,    21,    18,    21,   264,    25,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    21,    18,    21,    21,
      25,   931,    25,    25,    18,    50,    51,    21,   288,   939,
     290,   291,   201,    21,   944,    21,    23,    25,   298,    25,
     209,    21,    21,   303,   213,    25,    25,   216,    21,    24,
      21,    18,    25,   944,    25,   224,    22,   373,   318,    21,
     229,    21,   231,    25,    25,    25,   188,   189,   190,    21,
    1097,   193,   194,    25,    21,   244,   245,    18,    25,    18,
      21,    24,    21,    20,    21,   345,    24,   997,   998,    34,
      35,    36,    20,    21,    10,    11,    12,   357,    25,   415,
      34,    35,    36,    52,    53,    54,   997,   998,    21,    22,
      32,    33,    18,   948,    18,   950,   951,   952,    18,  1029,
     436,   437,   114,   115,    18,    18,     9,    19,    25,    11,
    1040,    11,  1042,  1043,    24,    91,  1040,  1162,    24,    27,
      21,  1051,    19,  1053,  1054,   360,    19,    19,    19,    91,
      24,    21,    18,   368,    22,   370,    25,    21,    25,    21,
    1070,  1211,    25,    11,    25,  1075,  1075,    24,    24,    24,
      20,    25,   432,  1083,    27,  1225,    23,    19,  1088,  1088,
      20,    19,    23,  1093,  1075,    21,    21,    24,    27,     5,
      19,   451,  1083,   453,    25,   455,  1246,  1088,   458,    22,
      24,   461,  1093,   463,  1114,  1115,  1116,  1117,    25,  1119,
    1120,  1088,   472,    20,    20,   475,    25,    27,  1128,    27,
    1130,    73,   482,  1133,  1115,  1116,    25,  1137,   443,  1139,
    1140,    18,  1142,    21,    25,  1148,    21,   497,  1148,    22,
     156,    39,   558,  1078,    24,  1080,   415,    29,  1139,  1140,
      40,    56,  1162,    73,    74,    75,    76,  1148,    25,   189,
      80,    81,    82,    83,    84,    85,    86,   436,   437,    91,
      91,  1162,    91,    91,  1184,  1185,  1186,  1187,    91,    25,
      25,    18,  1192,    22,    25,   201,    24,    91,    20,    25,
      25,    25,    18,   209,  1185,  1186,   511,   213,    25,    21,
     216,    18,  1212,  1212,    27,   192,    20,    40,   224,    18,
      21,    23,    18,   229,    24,   231,    91,    22,   194,    22,
     580,  1212,    21,   583,    21,    20,    22,  1237,   244,   245,
      20,    91,    25,    25,    20,    18,    27,   196,    40,   599,
      27,    25,    20,   939,   559,    27,   606,   607,   608,    25,
     318,  1237,  1205,  1133,   614,  1032,   695,  1105,    89,  1041,
    1184,  1070,   577,   578,   829,   889,   838,    10,    19,    20,
     185,   804,   583,    24,   634,    26,  1212,    28,    29,    30,
      31,    32,    33,    34,   686,   645,   646,   684,   130,   558,
     861,   303,   707,    12,  1168,   244,    47,    48,    49,   659,
     355,   511,   415,   711,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,   720,   675,   867,  1029,   866,    -1,
      71,    -1,    -1,   683,    -1,   685,    -1,    -1,    -1,   689,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   698,   699,
     655,   656,    -1,   703,    -1,    -1,   112,   707,   708,    -1,
     116,    -1,   118,   668,   120,    -1,    -1,    -1,    -1,   125,
     720,    -1,    -1,    -1,   724,   116,   726,   144,    -1,    -1,
      -1,   137,   732,   139,    -1,    -1,    -1,    -1,    -1,    -1,
     157,   158,   159,   160,   161,   162,    -1,   164,   165,   132,
      -1,    -1,    -1,    -1,   709,    -1,    -1,    -1,    -1,   415,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   154,    -1,   156,    -1,    -1,   182,    -1,    18,    -1,
     436,   437,    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,
      30,    31,    32,    33,    34,    -1,    -1,   188,   189,   190,
      -1,   192,   193,   194,    -1,    -1,    -1,    47,    48,    49,
      -1,   348,   812,    -1,    -1,    -1,    -1,    -1,   201,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   209,    -1,    -1,    -1,
     213,    71,    -1,   216,    -1,    -1,    -1,   374,    -1,    -1,
      -1,   224,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,    23,    -1,    -1,    -1,    -1,    -1,    -1,
     860,   861,   245,   863,    -1,   271,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   412,   116,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    -1,    -1,
     306,    -1,   558,   309,    -1,    10,    11,    12,    -1,    -1,
      18,   317,    -1,    -1,   320,   298,    24,    -1,    -1,    -1,
      -1,    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    47,
      48,    49,   325,   326,   327,   328,    -1,   947,   188,   189,
     190,    -1,   192,    -1,   954,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   345,    71,    -1,    -1,   349,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   357,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,    -1,   375,    -1,    -1,    -1,    -1,    -1,    -1,    10,
      11,    12,    -1,    -1,    -1,    -1,    -1,    -1,   116,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   441,    -1,   432,    -1,    -1,  1029,
      -1,    -1,   415,    -1,    -1,    -1,   442,    -1,    -1,    -1,
     423,   447,   459,    -1,    -1,   451,    -1,   453,    -1,    -1,
      -1,   156,    -1,    -1,    -1,    -1,    -1,    -1,    10,    11,
      12,    -1,    -1,    -1,   470,    -1,    -1,    -1,   474,    -1,
      -1,    -1,  1072,    -1,    -1,    -1,    -1,    -1,   495,    -1,
     188,   189,   190,    -1,   192,    -1,    -1,    -1,  1088,    -1,
     507,  1091,    -1,   630,    -1,    -1,   201,  1097,    -1,    -1,
    1100,  1101,    -1,    -1,   209,   642,    -1,    -1,   213,    -1,
      -1,   216,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   224,
      -1,    -1,    -1,    -1,   229,    -1,   231,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   551,    -1,   553,    -1,    -1,   244,
     245,    -1,    19,  1143,    -1,   156,    -1,    24,    -1,    -1,
    1150,  1151,    29,    30,    31,    32,    33,    34,    -1,    -1,
     697,    -1,  1162,    -1,    -1,    42,    43,    -1,    -1,   552,
      47,    48,    49,    -1,   711,   558,    -1,    -1,    10,    11,
      12,    -1,    -1,   600,    -1,    -1,    -1,    -1,  1188,    -1,
     201,    -1,   598,    -1,    71,   612,    -1,    -1,   209,    -1,
      -1,    -1,   213,    -1,   156,   216,    -1,   613,  1208,  1209,
      -1,    -1,    -1,   224,    -1,  1215,    -1,    -1,   229,    -1,
     231,    -1,    -1,    -1,    -1,    -1,   632,    -1,    -1,    -1,
     647,   648,    -1,   244,   245,    -1,    -1,    -1,    -1,   116,
      -1,    -1,   659,    -1,    -1,   628,    -1,    -1,    -1,   201,
      -1,    -1,    -1,    -1,   660,    -1,   662,   209,    -1,    -1,
      -1,   213,    -1,    -1,   216,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   224,    -1,   657,    -1,    -1,   229,   661,   231,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   694,    -1,
      -1,    -1,   244,   245,    -1,   832,    -1,    -1,    -1,    -1,
     837,    -1,    -1,   720,   841,    -1,    -1,    -1,    -1,    -1,
     415,   188,   189,   190,    -1,   192,   733,   734,   735,   736,
     737,   738,   739,   740,   156,    -1,    -1,    -1,    -1,    -1,
     867,   436,   437,    -1,    -1,    -1,   719,    -1,   744,    -1,
      -1,   724,    -1,   726,    -1,    -1,    -1,    -1,    -1,   732,
      -1,   888,   889,    -1,    -1,    -1,    -1,   894,   895,   896,
     897,   898,   899,   900,   901,   902,   903,   904,    -1,   201,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   209,    -1,    -1,
      -1,   213,    -1,    -1,   216,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   224,   799,   800,    -1,    -1,   229,    -1,   231,
      -1,    -1,    -1,    -1,   415,   822,    -1,   944,    -1,    -1,
      -1,    -1,   244,   245,    -1,    -1,   833,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   436,   437,    -1,    19,    -1,
      -1,    -1,    -1,    24,    -1,    -1,    -1,   843,    29,    30,
      31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    42,    43,   558,    -1,    -1,    47,    48,    49,   876,
      -1,    -1,    -1,   415,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      71,    -1,    -1,    -1,   436,   437,    -1,    -1,   905,   906,
     907,   908,   909,   910,   911,   912,   913,   914,   915,   916,
     917,   918,   919,   920,   921,    19,   923,   890,    -1,    -1,
      24,    -1,    26,    -1,    28,    29,    30,    31,    32,    33,
      34,    -1,    -1,    -1,    -1,   116,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    47,    48,    49,    -1,    -1,    -1,    -1,
      -1,   947,    -1,    -1,    -1,    -1,  1083,   558,    -1,    -1,
      -1,    -1,    -1,   123,   124,   125,   126,    71,   128,    -1,
      -1,    -1,    -1,   133,   134,    -1,    -1,   137,   138,   975,
     140,   141,   142,   143,    -1,   992,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   415,    -1,   155,   156,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   979,   188,   189,   190,
      -1,   192,   116,    -1,   436,   437,   558,    -1,    -1,    -1,
      -1,   181,  1029,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   191,     1,    -1,    -1,    -1,    -1,     6,     7,     8,
      -1,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    -1,    -1,    -1,  1027,    24,    -1,    -1,    -1,    -1,
      29,    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    42,    43,    -1,    -1,  1073,    47,    48,
      49,    -1,    -1,    -1,   188,   189,   190,    -1,   192,   193,
     194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1092,
      -1,    -1,    -1,    -1,    -1,    -1,    95,    96,    97,    98,
      99,   100,   101,   102,    -1,    -1,   558,     0,     1,    -1,
      -1,    -1,   111,    -1,    -1,    -1,    -1,   116,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    18,  1152,    -1,    -1,    -1,
      -1,    24,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    44,    -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1211,    68,    69,    70,    -1,    72,
      -1,    -1,    -1,    -1,    77,    78,    79,    -1,  1225,   188,
     189,   190,    -1,   192,   193,   194,    -1,    -1,    -1,    92,
      93,    94,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1246,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1244,   112,
     113,   114,   115,    -1,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,    -1,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,     0,
       1,    -1,    -1,    -1,    -1,   188,   189,   190,   191,    -1,
     193,   194,   195,    -1,    -1,    -1,    -1,    18,    -1,    -1,
      -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    44,    -1,    46,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    70,
      -1,    72,    -1,    -1,    -1,    -1,    77,    78,    79,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    92,    93,    94,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   112,   113,   114,   115,    -1,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,    -1,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,    -1,    -1,    -1,    -1,    -1,    -1,   188,   189,   190,
     191,     1,   193,   194,   195,    -1,     6,     7,     8,    -1,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,
      30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,
      70,    71,    72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    96,    97,    98,    99,
     100,   101,   102,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,    -1,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,    -1,    -1,    -1,    -1,    -1,    -1,   188,   189,
     190,   191,   192,   193,   194,   195,     1,    -1,    -1,    -1,
      -1,     6,     7,     8,    -1,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    -1,    -1,    -1,    -1,    24,
      -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    44,
      -1,    -1,    47,    48,    49,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    69,    70,    71,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    96,    97,    98,    99,   100,   101,   102,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,    -1,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,    -1,    -1,    -1,
      -1,    -1,    -1,   188,   189,   190,   191,   192,   193,   194,
     195,     1,    -1,    -1,    -1,    -1,     6,     7,     8,    -1,
      -1,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,
      30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    43,    44,    -1,    -1,    47,    48,    49,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,
      70,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    97,    98,    99,
     100,   101,   102,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,    -1,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,    -1,    -1,    -1,    -1,    -1,    -1,   188,   189,
     190,   191,   192,   193,   194,   195,     1,    -1,    -1,    -1,
      -1,     6,     7,     8,    -1,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      -1,    26,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    -1,
      45,    -1,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    -1,    -1,    -1,    71,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    96,    97,    98,    99,   100,   101,   102,    -1,    -1,
      -1,    -1,    -1,     1,    -1,    -1,   111,    -1,     6,     7,
       8,   116,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    -1,    -1,    -1,    -1,    24,    -1,    -1,    -1,
      -1,    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    43,    -1,    -1,    -1,    47,
      48,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    71,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   188,   189,   190,    -1,   192,   193,   194,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    95,    96,    97,
      98,    99,   100,   101,   102,    -1,    -1,    -1,    -1,     1,
      -1,    -1,    -1,   111,     6,     7,     8,    -1,   116,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    -1,
      -1,    -1,    24,    25,    -1,    -1,    -1,    29,    30,    31,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      42,    43,    -1,    -1,    -1,    47,    48,    49,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     188,   189,   190,    -1,   192,   193,   194,    -1,    -1,    -1,
      -1,    -1,    -1,    95,    -1,    97,    98,    99,   100,   101,
     102,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,   111,
      -1,     6,     7,     8,   116,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    24,
      -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,
      -1,    -1,    47,    48,    49,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    71,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   188,   189,   190,    -1,
     192,   193,   194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    96,    97,    98,    99,   100,   101,   102,    -1,    -1,
      -1,    -1,    -1,     1,    -1,    -1,   111,    -1,     6,     7,
       8,   116,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    -1,    -1,    -1,    -1,    24,    -1,    -1,    -1,
      -1,    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    43,    -1,    -1,    -1,    47,
      48,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    71,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   188,   189,   190,    -1,   192,   193,   194,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    96,    97,
      98,    99,   100,   101,   102,    -1,    -1,    -1,    -1,     1,
      -1,    -1,    -1,   111,     6,     7,     8,    -1,   116,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    -1,
      -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      42,    43,    -1,    -1,    -1,    47,    48,    49,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     188,   189,   190,    -1,   192,   193,   194,    -1,    -1,    -1,
      -1,    -1,    -1,    95,    -1,    97,    98,    99,   100,   101,
     102,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,   111,
       6,     7,     8,    -1,   116,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    -1,    -1,    -1,    24,    -1,
      -1,    -1,    -1,    29,    30,    31,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,    -1,
      -1,    47,    48,    49,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    71,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   188,   189,   190,    -1,
     192,   193,   194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    97,    98,    99,   100,   101,   102,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   111,    -1,     6,     7,     8,
     116,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,
      29,    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    71,    72,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   188,   189,   190,    -1,   192,   193,   194,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    96,    97,    98,
      99,   100,   101,   102,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,    -1,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,    -1,    -1,    -1,    -1,    -1,    -1,   188,
     189,   190,   191,   192,   193,   194,   195,     6,     7,     8,
      -1,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,
      29,    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    71,    72,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    96,    97,    98,
      99,   100,   101,   102,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,    -1,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,    -1,    -1,    -1,    -1,    -1,    -1,   188,
     189,   190,   191,   192,   193,   194,   195,     6,     7,     8,
      -1,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,
      29,    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    71,    72,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    96,    97,    98,
      99,   100,   101,   102,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,    -1,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,    -1,    -1,    -1,    -1,    -1,    -1,   188,
     189,   190,   191,   192,   193,   194,   195,     6,     7,     8,
      -1,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,
      29,    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    47,    48,
      49,     6,     7,     8,    -1,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    24,
      -1,    -1,    71,    -1,    29,    30,    31,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    47,    48,    49,    -1,    -1,    96,    97,    98,
      99,   100,   101,   102,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   111,    -1,    -1,    -1,    71,   116,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    96,    97,    98,    99,   100,   101,   102,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   111,    -1,     6,     7,
       8,   116,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    -1,    -1,    -1,    24,    -1,    -1,    -1,
      -1,    29,    30,    31,    32,    33,    34,    -1,    -1,   188,
     189,   190,    -1,   192,   193,   194,    -1,    -1,    -1,    47,
      48,    49,     6,     7,     8,    -1,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
      24,    -1,    -1,    71,    -1,    29,    30,    31,    32,    33,
      34,    -1,    -1,   188,   189,   190,    -1,   192,   193,   194,
      -1,    -1,    -1,    47,    48,    49,    -1,    -1,    96,    97,
      98,    99,   100,   101,   102,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   111,    -1,    -1,    -1,    71,   116,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    96,    97,    98,    99,   100,   101,   102,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,    -1,     6,
       7,     8,   116,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    -1,    -1,    -1,    24,    -1,    -1,
      -1,    -1,    29,    30,    31,    32,    33,    34,    -1,    -1,
     188,   189,   190,    -1,   192,   193,   194,    -1,    -1,    -1,
      47,    48,    49,     6,     7,     8,    -1,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    -1,    -1,
      -1,    24,    -1,    -1,    71,    -1,    29,    30,    31,    32,
      33,    34,    -1,    -1,   188,   189,   190,    -1,   192,   193,
     194,    -1,    -1,    -1,    47,    48,    49,    -1,    -1,    96,
      97,    98,    99,   100,   101,   102,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   111,    -1,    -1,    -1,    71,   116,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    96,    97,    98,    99,   100,   101,   102,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,    -1,
       6,     7,     8,   116,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    -1,    -1,    -1,    24,    -1,
      -1,    -1,    -1,    29,    30,    31,    32,    33,    34,    -1,
      -1,   188,   189,   190,    -1,   192,   193,   194,    -1,    -1,
      -1,    47,    48,    49,     6,     7,     8,    -1,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    -1,    -1,
      -1,    -1,    24,    -1,    -1,    71,    -1,    29,    30,    31,
      32,    33,    34,    -1,    -1,   188,   189,   190,    -1,   192,
     193,   194,    -1,    -1,    -1,    47,    48,    49,    -1,    -1,
      96,    97,    98,    99,   100,   101,   102,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   111,    -1,    -1,    -1,    71,
     116,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    96,    97,    98,    99,   100,   101,
     102,    19,    -1,    -1,    -1,    -1,    24,    -1,    -1,   111,
      -1,    -1,    -1,    -1,   116,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    44,    -1,    46,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   188,   189,   190,    -1,   192,   193,   194,    -1,
      -1,    -1,    -1,    -1,    72,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   188,   189,   190,    -1,
     192,   193,   194,    -1,   112,   113,   114,   115,    -1,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,    -1,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,    20,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   190,   191,    -1,    -1,    -1,   195,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   112,   113,   114,   115,
      -1,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,    -1,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,    -1,    -1,    -1,    -1,
      -1,    19,    20,    -1,   190,   191,    24,    -1,    -1,   195,
      -1,    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    19,    -1,    -1,    -1,    -1,    24,    -1,    47,
      48,    49,    29,    30,    31,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,
      47,    48,    49,    71,    24,    -1,    -1,    -1,    -1,    29,
      30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    71,    -1,    -1,    47,    48,    49,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   116,    -1,
      -1,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   116,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    34,   116,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    44,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     188,   189,   190,    -1,   192,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   188,   189,   190,    -1,   192,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   188,   189,
     190,    -1,   192,   112,   113,   114,   115,    -1,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,    -1,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,    -1,    -1,    -1,    -1,    -1,    -1,   188,
     189,   190,   191,    24,   193,   194,   195,    -1,    29,    30,
      31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    42,    43,    -1,    24,    25,    47,    48,    49,    29,
      30,    31,    32,    33,    34,    24,    -1,    -1,    27,    -1,
      29,    30,    31,    32,    33,    34,    -1,    47,    48,    49,
      71,    -1,    -1,    -1,    -1,    -1,    24,    25,    47,    48,
      49,    29,    30,    31,    32,    33,    34,    24,    -1,    -1,
      27,    71,    29,    30,    31,    32,    33,    34,    -1,    47,
      48,    49,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      47,    48,    49,    -1,    -1,   116,    -1,    -1,    -1,    24,
      25,    -1,    -1,    71,    29,    30,    31,    32,    33,    34,
      -1,    -1,    -1,    -1,    71,    -1,   116,    -1,    -1,    -1,
      -1,    -1,    47,    48,    49,    -1,    24,   116,    -1,    -1,
      -1,    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    71,    -1,   116,    47,
      48,    49,    -1,    -1,    -1,    24,    -1,    -1,    -1,   116,
      29,    30,    31,    32,    33,    34,    -1,   188,   189,   190,
      -1,   192,    -1,    71,    -1,    -1,    -1,    -1,    47,    48,
      49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   188,   189,
     190,   116,   192,    -1,    -1,    -1,    -1,    -1,    -1,   188,
     189,   190,    71,   192,    24,    -1,    -1,    -1,    -1,    29,
      30,    31,    32,    33,    34,    -1,    -1,    -1,   116,    -1,
     188,   189,   190,    -1,   192,    -1,    -1,    47,    48,    49,
      -1,   188,   189,   190,    24,   192,    -1,    -1,    -1,    29,
      30,    31,    32,    33,    34,    -1,    -1,   116,    -1,    -1,
      -1,    71,    -1,    -1,    -1,    -1,    -1,    47,    48,    49,
      -1,    -1,    -1,   188,   189,   190,    -1,   192,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     188,   189,   190,    24,   192,    -1,   116,    -1,    29,    30,
      31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    47,    48,    49,   188,
     189,   190,    -1,   192,    -1,    -1,   116,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   188,   189,
     190,    -1,   192,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   116,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    44,    -1,    46,    -1,   188,   189,
     190,    -1,   192,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,
      70,    -1,    72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   188,   189,   190,
      -1,   192,   112,   113,   114,   115,    -1,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,    -1,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,    44,    -1,    46,    -1,    -1,    -1,    -1,    -1,
     190,   191,    -1,    -1,    -1,   195,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     112,   113,   114,   115,    -1,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,    -1,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
      44,    -1,    -1,    -1,    -1,    -1,   188,   189,   190,   191,
      -1,    -1,    -1,   195,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    69,    70,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,   113,
     114,   115,    -1,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,    -1,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,    44,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   190,   191,    -1,    -1,
      -1,   195,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    92,    93,    94,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   112,   113,   114,   115,
      -1,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,    -1,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,    44,    -1,    46,    -1,
      -1,    -1,    -1,    -1,   190,   191,    -1,    -1,    -1,   195,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    72,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   112,   113,   114,   115,    -1,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,    -1,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,    44,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   190,   191,    -1,    -1,    -1,   195,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   112,   113,   114,   115,    -1,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,    -1,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     190,   191,    -1,    -1,    -1,   195
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const unsigned short yystos[] =
{
       0,     1,    18,    34,    44,    46,    72,    77,    78,    79,
      92,    93,    94,   112,   113,   114,   115,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   188,   189,   190,   191,   193,   194,   195,   198,   199,
     200,   201,   202,   206,   212,   215,   216,   256,   261,   301,
     302,   308,   310,   322,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   345,   347,   350,   359,
     364,   369,   373,   466,   467,   468,   112,   113,   114,   371,
     372,   373,    24,   306,   312,   313,   345,   369,   190,   345,
     203,   190,   467,     1,     6,     7,     8,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    24,    29,    30,    31,
      32,    33,    34,    47,    48,    49,    71,    95,    96,    97,
      98,    99,   100,   101,   102,   111,   116,   189,   190,   192,
     193,   269,   271,   273,   275,   278,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   292,   294,   297,   298,
     386,   391,   401,   402,   403,   405,   408,   412,   413,   421,
     427,   428,   429,   432,   434,   440,   460,   462,   463,   466,
     467,     1,    11,    18,    24,   193,   194,   298,   387,   389,
     390,   391,   394,   396,   397,   399,   400,   403,   405,   408,
     413,   417,   426,   428,   433,   460,   463,   387,   388,   310,
     310,   310,   359,   359,   359,   359,   359,   359,   359,   359,
     359,   359,     0,   200,    26,   311,    19,   257,   259,    18,
     464,    24,   345,   348,   310,   310,   310,   310,   310,   310,
     310,   310,   359,   310,   348,   348,   310,   359,    88,   359,
      68,    69,    70,   359,   206,   359,   371,   373,    24,   189,
     190,   298,   310,   344,   381,   466,    21,   310,   310,   309,
     310,   359,   359,   204,   205,   209,   310,   345,   373,   467,
      24,   273,   294,   300,   409,    24,    24,    24,    24,   467,
      18,    18,    18,   298,   270,   298,   381,   402,   281,   281,
     281,   281,   281,   281,   310,    24,   273,   273,    24,    24,
      16,    16,    16,    16,    15,   102,   404,    24,   385,   386,
     391,   403,   405,   408,   411,   413,   426,   429,   432,   434,
     460,   461,   463,   435,    24,    26,    48,    49,   359,    23,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
     276,   310,    34,    35,    36,    32,    33,    50,    51,    37,
      38,    52,    53,    54,    55,    29,    39,    40,    56,    41,
      57,    18,    21,   402,    95,    19,   420,   402,   385,   402,
     192,   402,    22,    24,   298,   396,   413,    18,    95,   396,
     396,   301,   345,   422,    19,    20,   398,   389,   402,    95,
      27,   310,    24,   258,   422,   359,    18,   369,   346,   381,
     310,   467,   310,   467,    19,   467,   298,    25,   345,    26,
     310,   373,   382,   384,    25,   359,    18,   359,    18,    23,
     369,   464,    26,   311,    24,   359,   209,     5,   359,   370,
     376,   377,   378,   406,    22,   298,   298,   298,   298,   299,
      18,    18,    24,   411,    25,    25,    25,    24,   381,   297,
     298,    18,    18,    18,    18,    18,   404,     6,     7,   411,
     385,    19,   419,   385,   385,   413,    25,   272,   297,   298,
      28,    45,   297,   297,   297,   297,   297,   297,   297,   297,
     297,   297,   297,   279,   277,   281,   281,   281,   282,   282,
     283,   283,   284,   284,   284,   284,   285,   285,   286,   287,
     288,   291,   295,   293,   297,    20,   190,   402,   421,   422,
     414,     9,    11,   298,    25,    24,   359,   301,   396,    11,
     300,    25,   370,    20,   111,   385,   418,   422,   425,   260,
     369,   359,    91,    21,    19,   310,   359,    19,   310,   359,
     366,   367,   467,    19,   310,   310,    27,   300,    24,   384,
      26,   310,   306,   195,   305,   306,   314,   315,   307,   359,
      91,    27,   310,    24,   359,   205,   374,   375,   467,    25,
      21,   310,   380,   467,    22,    25,   431,    25,    18,    25,
      19,   281,   381,    25,    21,    25,   300,   410,    25,   418,
      11,    24,    21,    25,    27,   467,   467,    42,    43,   280,
     289,   298,   290,    20,    20,   425,   430,    24,    25,   395,
     369,    24,    27,   207,    25,    20,    20,   111,   425,    20,
     111,   385,   411,   310,    23,   303,   346,    20,   355,    19,
      20,   357,    19,    20,    21,    23,   365,    27,    25,   359,
     376,    27,   300,    24,    21,   310,   310,   310,    23,   464,
     300,    25,   370,   205,    21,   213,     5,   379,   345,    25,
     299,    19,   297,   423,   424,   359,   381,   407,    22,    24,
     436,   297,   310,   310,    24,   273,    24,   273,    22,    20,
     385,   298,    24,    29,    30,    31,    32,    33,    34,    48,
      49,    71,   189,   190,   271,   273,   276,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   292,   437,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   458,   466,   298,   359,    73,
      74,    75,    76,    80,    81,    82,    83,    84,    85,    86,
     233,   235,   237,   238,   240,   241,   242,   247,   248,   254,
     255,   323,   324,   326,   327,   328,   208,    20,    20,   111,
      20,    25,   304,   310,   415,    20,   351,   415,    20,   353,
     310,   367,   310,   366,   382,    25,    27,    25,   376,   359,
     246,   247,    19,    26,    28,   297,   317,   318,   319,   320,
     467,   310,   310,    27,   210,    25,   310,     5,   467,   234,
     236,   238,   240,   242,   248,   324,   328,   380,   206,   310,
     368,   373,   383,   384,   385,    18,   423,    21,   465,    21,
      25,    22,   298,   437,   381,   381,   296,    25,   298,   381,
     281,   281,   281,   281,   281,   281,   273,   273,    24,    24,
      26,    48,    49,   359,    23,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    34,    35,    36,    32,    33,
      50,    51,    37,    38,    52,    53,    54,    55,    29,    39,
      40,    56,    41,    57,    25,   438,    25,   189,   244,   245,
     239,   243,   233,    91,    91,    91,   359,   359,    91,   330,
     334,    91,   233,    20,   310,   316,   215,   345,   360,   361,
     415,   360,   415,   300,    20,    25,    25,   305,    18,   317,
     321,   300,   467,   317,    23,   320,    22,   317,    91,   359,
     234,   211,    25,   214,   234,    24,   310,   195,   368,   392,
     465,   424,    20,   274,   467,    25,    25,    25,    25,   294,
      18,    25,    25,   297,    25,   272,   298,    28,    45,   297,
     297,   297,   297,   297,   297,   297,   297,   297,   297,   297,
     281,   281,   281,   282,   282,   283,   283,   284,   284,   284,
     284,   285,   285,   286,   287,   288,   289,   456,   290,    21,
      18,   440,    40,    89,    90,   121,   122,   135,   249,   250,
     251,   253,    24,    34,   189,   190,   262,   263,   265,   464,
     466,   325,     5,    24,    34,   184,   185,   189,   192,   217,
     218,   224,   225,   226,   228,   229,   230,   231,   331,   466,
     329,   317,    18,    21,   310,   359,   361,   416,   360,   416,
     360,   310,    20,    21,    27,   316,   234,   464,   359,   299,
      20,    25,    26,    28,    18,   411,   281,    21,    25,    27,
     467,   467,   298,   439,   244,    21,   464,   189,   252,   301,
     466,   251,   263,   263,    26,    28,    45,    21,   464,    24,
      34,   189,   266,   268,   466,   220,   228,   230,    24,   230,
      23,    56,   187,   223,    52,    53,    54,   227,    26,    28,
      45,   219,    24,   464,   267,   268,   316,   310,   359,    18,
      22,   362,   363,   369,   356,   416,   358,   416,    20,   317,
     464,    91,   373,   393,   310,   298,   467,   194,   459,   381,
     310,   310,    22,   250,    25,    27,   263,   264,   440,   467,
     467,   263,   266,   266,    26,    28,    45,    21,   464,    22,
      32,    33,   232,    25,   230,   218,   221,   230,   224,   230,
     228,    27,   192,   467,   467,    22,   228,   310,   464,    18,
     306,   310,    21,   310,   359,    22,    20,   352,    20,   354,
      91,    25,    27,   414,    25,   457,    27,    25,    27,   264,
     467,   467,   266,   310,   196,   222,   228,    40,    27,   222,
      25,   310,   310,   300,   363,    18,   310,    20,    20,   294,
      27,    25,   221,   359,   300,   349
};

#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# if defined (__STDC__) || defined (__cplusplus)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# endif
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrlab1


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { 								\
      yyerror ("syntax error: cannot back up");\
      YYERROR;							\
    }								\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

/* YYLLOC_DEFAULT -- Compute the default location (before the actions
   are run).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)         \
  Current.first_line   = Rhs[1].first_line;      \
  Current.first_column = Rhs[1].first_column;    \
  Current.last_line    = Rhs[N].last_line;       \
  Current.last_column  = Rhs[N].last_column;
#endif

/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (YYLEX_PARAM)
#else
# define YYLEX yylex ()
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)

# define YYDSYMPRINT(Args)			\
do {						\
  if (yydebug)					\
    yysymprint Args;				\
} while (0)

# define YYDSYMPRINTF(Title, Token, Value, Location)		\
do {								\
  if (yydebug)							\
    {								\
      YYFPRINTF (stderr, "%s ", Title);				\
      yysymprint (stderr, 					\
                  Token, Value);	\
      YYFPRINTF (stderr, "\n");					\
    }								\
} while (0)

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (cinluded).                                                   |
`------------------------------------------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yy_stack_print (short *bottom, short *top)
#else
static void
yy_stack_print (bottom, top)
    short *bottom;
    short *top;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (/* Nothing. */; bottom <= top; ++bottom)
    YYFPRINTF (stderr, " %d", *bottom);
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yy_reduce_print (int yyrule)
#else
static void
yy_reduce_print (yyrule)
    int yyrule;
#endif
{
  int yyi;
  unsigned int yylineno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %u), ",
             yyrule - 1, yylineno);
  /* Print the symbols being reduced, and their result.  */
  for (yyi = yyprhs[yyrule]; 0 <= yyrhs[yyi]; yyi++)
    YYFPRINTF (stderr, "%s ", yytname [yyrhs[yyi]]);
  YYFPRINTF (stderr, "-> %s\n", yytname [yyr1[yyrule]]);
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (Rule);		\
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YYDSYMPRINT(Args)
# define YYDSYMPRINTF(Title, Token, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#if YYMAXDEPTH == 0
# undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined (__GLIBC__) && defined (_STRING_H)
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
#   if defined (__STDC__) || defined (__cplusplus)
yystrlen (const char *yystr)
#   else
yystrlen (yystr)
     const char *yystr;
#   endif
{
  register const char *yys = yystr;

  while (*yys++ != '\0')
    continue;

  return yys - yystr - 1;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#   if defined (__STDC__) || defined (__cplusplus)
yystpcpy (char *yydest, const char *yysrc)
#   else
yystpcpy (yydest, yysrc)
     char *yydest;
     const char *yysrc;
#   endif
{
  register char *yyd = yydest;
  register const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

#endif /* !YYERROR_VERBOSE */



#if YYDEBUG
/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yysymprint (FILE *yyoutput, int yytype, cgrammar_YYSTYPE *yyvaluep)
#else
static void
yysymprint (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    cgrammar_YYSTYPE *yyvaluep;
#endif
{
  /* Pacify ``unused variable'' warnings.  */
  (void) yyvaluep;

  if (yytype < YYNTOKENS)
    {
      YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
# ifdef YYPRINT
      YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
    }
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  switch (yytype)
    {
      default:
        break;
    }
  YYFPRINTF (yyoutput, ")");
}

#endif /* ! YYDEBUG */
/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yydestruct (int yytype, cgrammar_YYSTYPE *yyvaluep)
#else
static void
yydestruct (yytype, yyvaluep)
    int yytype;
    cgrammar_YYSTYPE *yyvaluep;
#endif
{
  /* Pacify ``unused variable'' warnings.  */
  (void) yyvaluep;

  switch (yytype)
    {

      default:
        break;
    }
}


/* Prevent warnings from -Wmissing-prototypes.  */

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
int yyparse (void *YYPARSE_PARAM);
# else
int yyparse ();
# endif
#else /* ! YYPARSE_PARAM */
#if defined (__STDC__) || defined (__cplusplus)
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */



/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
cgrammar_YYSTYPE yylval;

/* Number of syntax errors so far.  */
int yynerrs;



/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
int yyparse (void *YYPARSE_PARAM)
# else
int yyparse (YYPARSE_PARAM)
  void *YYPARSE_PARAM;
# endif
#else /* ! YYPARSE_PARAM */
#if defined (__STDC__) || defined (__cplusplus)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
  
  register int yystate;
  register int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack.  */
  short	yyssa[YYINITDEPTH];
  short *yyss = yyssa;
  register short *yyssp;

  /* The semantic value stack.  */
  cgrammar_YYSTYPE yyvsa[YYINITDEPTH];
  cgrammar_YYSTYPE *yyvs = yyvsa;
  register cgrammar_YYSTYPE *yyvsp;



#define YYPOPSTACK   (yyvsp--, yyssp--)

  YYSIZE_T yystacksize = YYINITDEPTH;

  /* The variables used to return semantic value and location from the
     action routines.  */
  cgrammar_YYSTYPE yyval;


  /* When reducing, the number of symbols on the RHS of the reduced
     rule.  */
  int yylen;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack. Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	cgrammar_YYSTYPE *yyvs1 = yyvs;
	short *yyss1 = yyss;


	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),

		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyoverflowlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyoverflowlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	short *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyoverflowlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);

#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;


      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YYDSYMPRINTF ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */
  YYDPRINTF ((stderr, "Shifting token %s, ", yytname[yytoken]));

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;


  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  yystate = yyn;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 4:

    { context_checkGlobalScope (); ;}
    break;

  case 5:

    { context_checkGlobalScope (); ;}
    break;

  case 6:

    { uentry_clearDecl (); ;}
    break;

  case 7:

    { uentry_clearDecl (); ;}
    break;

  case 8:

    { uentry_clearDecl (); ;}
    break;

  case 9:

    { uentry_clearDecl (); ;}
    break;

  case 10:

    { uentry_clearDecl (); ;}
    break;

  case 11:

    { uentry_checkDecl (); exprNode_free (yyvsp[0].expr); ;}
    break;

  case 12:

    { uentry_clearDecl (); lltok_free (yyvsp[0].tok); /* evans 2002-02-08: okay to have a null statement */ ;}
    break;

  case 13:

    { uentry_clearDecl (); ;}
    break;

  case 14:

    { checkConstant (yyvsp[-6].qtyp, yyvsp[-4].ntyp); lltok_free2 (yyvsp[-7].tok, yyvsp[0].tok); ;}
    break;

  case 15:

    { checkValueConstant (yyvsp[-9].qtyp, yyvsp[-7].ntyp, yyvsp[-3].expr); lltok_free3 (yyvsp[-10].tok, yyvsp[-5].tok, yyvsp[0].tok); ;}
    break;

  case 16:

    { context_enterFunctionHeader (); ;}
    break;

  case 17:

    { 
     declareStaticFunction (yyvsp[-2].ntyp); context_quietExitFunction (); 
     context_exitFunctionHeader (); 
     lltok_free2 (yyvsp[-4].tok, yyvsp[0].tok); /*!*/
   ;}
    break;

  case 18:

    { 
     qtype qint = qtype_create (ctype_int);
     yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, qint);
     qtype_free (qint);
   ;}
    break;

  case 19:

    { yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, yyvsp[-2].qtyp); ;}
    break;

  case 21:

    { yyval.ntyp = yyvsp[0].ntyp; qtype_adjustPointers (yyvsp[-1].pointers, idDecl_getTyp (yyval.ntyp)); ;}
    break;

  case 22:

    { yyval.ntyp = idDecl_create (yyvsp[0].cname, qtype_unknown ()); ;}
    break;

  case 23:

    { yyval.ntyp = idDecl_expectFunction (yyvsp[-2].ntyp); lltok_free2 (yyvsp[-4].tok, yyvsp[0].tok); ;}
    break;

  case 24:

    { yyval.ntyp = idDecl_replaceCtype (yyvsp[-2].ntyp, ctype_makeInnerArray (idDecl_getCtype (yyvsp[-2].ntyp))); lltok_free2 (yyvsp[-1].tok, yyvsp[0].tok); ;}
    break;

  case 25:

    {
     exprNode_findValue (yyvsp[-2].expr);
     idDecl_notExpectingFunction (yyvsp[-5].ntyp);

     if (exprNode_hasValue (yyvsp[-2].expr)) 
       {
	 yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ctype_makeInnerFixedArray (idDecl_getCtype (yyvsp[-5].ntyp), 
								  exprNode_getLongValue (yyvsp[-2].expr)));
       } 
     else
       {
	 yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ctype_makeInnerArray (idDecl_getCtype (yyvsp[-5].ntyp))); 
       }

     lltok_free2 (yyvsp[-4].tok, yyvsp[-1].tok);
   ;}
    break;

  case 26:

    { setCurrentParams (uentryList_missingParams); ;}
    break;

  case 27:

    { /* need to support globals and modifies here! */
     functionClauseList fcl;
     ctype ct = ctype_makeFunction (idDecl_getCtype (yyvsp[-5].ntyp), 
				    uentryList_makeMissingParams ());
     
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ct);

     /*drl 7/25/01 added*/
     setImplicitfcnConstraints();

     DPRINTF((message("namedDeclBase PushType TLPAREN TRPAREN...:\n adding implict constraints to functionClause List: %s",
		      functionClauseList_unparse(yyvsp[0].funcclauselist)
		      )
	      ));
     
     fcl = functionClauseList_setImplicitConstraints(yyvsp[0].funcclauselist);

     idDecl_addClauses (yyval.ntyp, fcl);

     DPRINTF((message("1 added fuctionClause List: %s to the Id",
		      functionClauseList_unparse(fcl)
		      )
	      ));

     
     context_popLoc ();
     lltok_free2 (yyvsp[-3].tok, yyvsp[-2].tok);
   ;}
    break;

  case 28:

    { setCurrentParams (yyvsp[-1].entrylist); ;}
    break;

  case 29:

    {
     functionClauseList fcl;
     setImplicitfcnConstraints ();
     clearCurrentParams ();
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-6].ntyp, ctype_makeFunction (idDecl_getCtype (yyvsp[-6].ntyp), yyvsp[-3].entrylist));

     DPRINTF((message("namedDeclBase PushType TLPAREN genericParamList TRPAREN...:\n adding implict constraints to functionClause List: %s",
		      functionClauseList_unparse(yyvsp[0].funcclauselist)
		      )
	      )) ;
     
     fcl = functionClauseList_setImplicitConstraints(yyvsp[0].funcclauselist);

     idDecl_addClauses (yyval.ntyp, fcl);

     DPRINTF((message("added fuctionClause List: %s to the Id",
		      functionClauseList_unparse(fcl)
		      )
	      ));

     
     context_popLoc (); 
     lltok_free2 (yyvsp[-4].tok, yyvsp[-2].tok);
   ;}
    break;

  case 30:

    { yyval.ntyp = idDecl_create (yyvsp[0].cname, qtype_unknown ()); ;}
    break;

  case 31:

    { yyval.ntyp = idDecl_expectFunction (yyvsp[-2].ntyp); lltok_free2 (yyvsp[-4].tok, yyvsp[0].tok); ;}
    break;

  case 32:

    { yyval.ntyp = idDecl_replaceCtype (yyvsp[-2].ntyp, ctype_makeInnerArray (idDecl_getCtype (yyvsp[-2].ntyp))); 
     lltok_free2 (yyvsp[-1].tok, yyvsp[0].tok); 
   ;}
    break;

  case 33:

    { 
     int value;

     if (exprNode_hasValue (yyvsp[-2].expr) 
	 && multiVal_isInt (exprNode_getValue (yyvsp[-2].expr)))
       {
	 value = (int) multiVal_forceInt (exprNode_getValue (yyvsp[-2].expr));
       }
     else
       {
	 value = 0;
       }

     yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ctype_makeInnerFixedArray (idDecl_getCtype (yyvsp[-5].ntyp), value));
     lltok_free2 (yyvsp[-4].tok, yyvsp[-1].tok);
   ;}
    break;

  case 34:

    { setCurrentParams (uentryList_missingParams); ;}
    break;

  case 35:

    {
     ctype ct = ctype_makeFunction (idDecl_getCtype (yyvsp[-5].ntyp), 
				    uentryList_makeMissingParams ());
     
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ct);
     idDecl_addClauses (yyval.ntyp, yyvsp[0].funcclauselist);
     context_popLoc (); 
     lltok_free2 (yyvsp[-3].tok, yyvsp[-2].tok);
   ;}
    break;

  case 36:

    { setCurrentParams (yyvsp[-1].entrylist); ;}
    break;

  case 37:

    { 
     clearCurrentParams ();
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-6].ntyp, ctype_makeFunction (idDecl_getCtype (yyvsp[-6].ntyp), yyvsp[-3].entrylist));
     idDecl_addClauses (yyval.ntyp, yyvsp[0].funcclauselist);
     context_popLoc (); 
     lltok_free (yyvsp[-4].tok);
     /*!! lltok_free2 ($3, $5); */
   ;}
    break;

  case 38:

    { setCurrentParams (yyvsp[-1].entrylist); ;}
    break;

  case 39:

    { clearCurrentParams (); ;}
    break;

  case 40:

    { declareCIter (yyvsp[-8].cname, yyvsp[-6].entrylist); 
     lltok_free3 (yyvsp[-9].tok, yyvsp[-7].tok, yyvsp[-5].tok); 
   ;}
    break;

  case 41:

    { exprNode_checkMacroBody (yyvsp[-1].expr); lltok_free2 (yyvsp[-2].tok, yyvsp[0].tok); ;}
    break;

  case 42:

    { exprNode_checkIterBody (yyvsp[-1].expr); lltok_free2 (yyvsp[-2].tok, yyvsp[0].tok); ;}
    break;

  case 43:

    { exprNode_checkIterEnd (yyvsp[-1].expr); lltok_free2 (yyvsp[-2].tok, yyvsp[0].tok);;}
    break;

  case 44:

    { exprChecks_checkEmptyMacroBody (); lltok_free2 (yyvsp[-1].tok, yyvsp[0].tok); ;}
    break;

  case 45:

    { clabstract_declareFunction (yyvsp[0].ntyp); ;}
    break;

  case 46:

    { yyval.msconstraint = metaStateConstraint_create (yyvsp[-2].msspec, yyvsp[0].msexpr); lltok_free (yyvsp[-1].tok); ;}
    break;

  case 47:

    { cscannerHelp_expectingMetaStateName (); ;}
    break;

  case 48:

    { cscannerHelp_clearExpectingMetaStateName ();
      yyval.msspec = metaStateSpecifier_create (yyvsp[-3].sr, yyvsp[0].msinfo); 
      lltok_free (yyvsp[-1].tok); 
    ;}
    break;

  case 49:

    { cscannerHelp_expectingMetaStateName (); ;}
    break;

  case 50:

    { cscannerHelp_clearExpectingMetaStateName ();
      yyval.msspec = metaStateSpecifier_createElipsis (yyvsp[0].msinfo); 
      lltok_free2 (yyvsp[-3].tok, yyvsp[-1].tok);
    ;}
    break;

  case 51:

    { yyval.msexpr = metaStateExpression_create (yyvsp[0].msspec); ;}
    break;

  case 52:

    { yyval.msexpr = metaStateExpression_createMerge (yyvsp[-2].msspec, yyvsp[0].msexpr); lltok_free (yyvsp[-1].tok); ;}
    break;

  case 56:

    { yyval.conL = constraintList_add (yyvsp[0].conL, yyvsp[-2].con); ;}
    break;

  case 57:

    { yyval.conL = constraintList_single (yyvsp[0].con); ;}
    break;

  case 58:

    {
 yyval.con = makeConstraintParse3 (yyvsp[-2].conE, yyvsp[-1].tok, yyvsp[0].conE);
 DPRINTF(("Done BufConstraint1\n")); ;}
    break;

  case 65:

    {yyval.conE = constraintExpr_parseMakeUnaryOp (yyvsp[-3].tok, yyvsp[-1].conE);  DPRINTF( ("Got BufConstraintExpr UNary Op ") ); ;}
    break;

  case 66:

    {
   DPRINTF( ("Got BufConstraintExpr BINary Op ") );
   yyval.conE = constraintExpr_parseMakeBinaryOp (yyvsp[-3].conE, yyvsp[-2].tok, yyvsp[-1].conE); ;}
    break;

  case 67:

    { yyval.conE =  constraintExpr_makeTermsRef (yyvsp[0].sr);;}
    break;

  case 68:

    { yyval.conE = constraintExpr_makeIntLiteral (exprNode_getLongValue (yyvsp[0].expr)); ;}
    break;

  case 69:

    { /*@-onlytrans@*/ yyval.sr = checkbufferConstraintClausesId (yyvsp[0].entry); /*@=onlytrans@*/ /*@i523@*/ ;}
    break;

  case 70:

    { yyval.sr = fixStateClausesId (yyvsp[0].cname); ;}
    break;

  case 71:

    { yyval.sr = sRef_makeAnyArrayFetch (yyvsp[-2].sr); ;}
    break;

  case 72:

    {
    /*
    char *t; int c; 
    t =  cstring_toCharsSafe (exprNode_unparse($3)); 
    c = atoi( t );
    */
    yyval.sr = sRef_makeArrayFetchKnown (yyvsp[-3].sr, exprNode_getLongValue (yyvsp[-1].expr));
  ;}
    break;

  case 73:

    { yyval.sr = sRef_constructPointer (yyvsp[0].sr); ;}
    break;

  case 74:

    { yyval.sr = yyvsp[-1].sr; ;}
    break;

  case 75:

    { cstring_markOwned (yyvsp[0].cname); yyval.sr = sRef_buildField (yyvsp[-2].sr, yyvsp[0].cname); ;}
    break;

  case 76:

    { cstring_markOwned (yyvsp[0].cname); yyval.sr = sRef_makeArrow (yyvsp[-2].sr, yyvsp[0].cname); ;}
    break;

  case 80:

    { yyval.funcclauselist = functionClauseList_new (); ;}
    break;

  case 81:

    { yyval.funcclauselist = functionClauseList_prepend (yyvsp[0].funcclauselist, yyvsp[-1].funcclause); ;}
    break;

  case 82:

    { yyval.funcclauselist = functionClauseList_new (); ;}
    break;

  case 83:

    { yyval.funcclauselist = functionClauseList_prepend (yyvsp[0].funcclauselist, yyvsp[-1].funcclause); ;}
    break;

  case 84:

    { yyval.funcclause = functionClause_createGlobals (yyvsp[0].globsclause); ;}
    break;

  case 85:

    { yyval.funcclause = functionClause_createModifies (yyvsp[0].modsclause); ;}
    break;

  case 86:

    { yyval.funcclause = functionClause_createModifies (yyvsp[0].modsclause); ;}
    break;

  case 87:

    { yyval.funcclause = functionClause_createState (yyvsp[0].stateclause); ;}
    break;

  case 88:

    { yyval.funcclause = yyvsp[0].funcclause; ;}
    break;

  case 89:

    { yyval.funcclause = functionClause_createWarn (yyvsp[0].warnclause); ;}
    break;

  case 90:

    { yyval.funcclause = functionClause_createGlobals (yyvsp[0].globsclause); ;}
    break;

  case 91:

    { yyval.funcclause = functionClause_createModifies (yyvsp[0].modsclause); ;}
    break;

  case 92:

    { yyval.funcclause = functionClause_createModifies (yyvsp[0].modsclause); ;}
    break;

  case 93:

    { yyval.funcclause = functionClause_createState (yyvsp[0].stateclause); ;}
    break;

  case 94:

    { yyval.funcclause = yyvsp[0].funcclause; ;}
    break;

  case 95:

    { yyval.funcclause = functionClause_createWarn (yyvsp[0].warnclause); ;}
    break;

  case 96:

    { yyval.globsclause = yyvsp[-1].globsclause; ;}
    break;

  case 97:

    { setProcessingGlobalsList (); ;}
    break;

  case 98:

    { 
     unsetProcessingGlobals (); 
     yyval.globsclause = globalsClause_create (yyvsp[-3].tok, yyvsp[-1].globset); 
   ;}
    break;

  case 99:

    { yyval.modsclause = modifiesClause_createNoMods (yyvsp[0].tok); ;}
    break;

  case 100:

    { yyval.modsclause = yyvsp[-1].modsclause; ;}
    break;

  case 101:

    {
     context_setProtectVars (); enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;}
    break;

  case 102:

    { 
     exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
     yyval.modsclause = modifiesClause_create (yyvsp[-2].tok, yyvsp[0].srset);
   ;}
    break;

  case 103:

    { yyval.flagspec = flagSpec_createPlain (yyvsp[0].cname); ;}
    break;

  case 104:

    { yyval.flagspec = flagSpec_createOr (yyvsp[-2].cname, yyvsp[0].flagspec); ;}
    break;

  case 107:

    { yyval.warnclause = warnClause_undefined; ;}
    break;

  case 108:

    { yyval.warnclause = yyvsp[-1].warnclause; ;}
    break;

  case 109:

    {      
     llassert (exprNode_knownStringValue (yyvsp[0].expr));
     yyval.warnclause = warnClause_create (yyvsp[-2].tok, yyvsp[-1].flagspec, cstring_copy (multiVal_forceString (exprNode_getValue (yyvsp[0].expr)))); 
     exprNode_free (yyvsp[0].expr);
   ;}
    break;

  case 110:

    { yyval.warnclause = warnClause_create (yyvsp[-1].tok, yyvsp[0].flagspec, cstring_undefined); ;}
    break;

  case 111:

    { yyval.globset = globSet_single (yyvsp[0].sr); ;}
    break;

  case 112:

    { yyval.globset = globSet_insert (yyvsp[-2].globset, yyvsp[0].sr); ;}
    break;

  case 113:

    { yyval.sr = clabstract_createGlobal (yyvsp[0].sr, yyvsp[-1].tquallist); ;}
    break;

  case 114:

    { yyval.tquallist = qualList_undefined; ;}
    break;

  case 115:

    { yyval.tquallist = qualList_add (yyvsp[0].tquallist, yyvsp[-1].typequal); ;}
    break;

  case 116:

    { yyval.sr = uentry_getSref (yyvsp[0].entry); ;}
    break;

  case 117:

    { yyval.sr = clabstract_unrecognizedGlobal (yyvsp[0].cname); ;}
    break;

  case 118:

    { yyval.sr = clabstract_checkGlobal (yyvsp[0].expr); ;}
    break;

  case 119:

    { yyval.typequal = qual_createUndef (); ;}
    break;

  case 120:

    { yyval.typequal = qual_createKilled (); ;}
    break;

  case 121:

    { yyval.typequal = qual_createOut (); ;}
    break;

  case 122:

    { yyval.typequal = qual_createIn (); ;}
    break;

  case 123:

    { yyval.typequal = qual_createPartial (); ;}
    break;

  case 131:

    { 
     /**!!! deal with fred; fred (int); declarations! **/
     qtype qint = qtype_create (ctype_int); 
     yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, qint);
     qtype_free (qint);
   ;}
    break;

  case 132:

    { yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, yyvsp[-2].qtyp); ;}
    break;

  case 133:

    { checkDoneParams (); context_enterInnerContext (); ;}
    break;

  case 134:

    {  
     exprNode_checkFunctionBody (yyvsp[0].expr); yyval.expr = yyvsp[0].expr; 
     context_exitInner (yyvsp[0].expr); 
   ;}
    break;

  case 135:

    { context_enterOldStyleScope (); ;}
    break;

  case 136:

    { oldStyleDoneParams (); context_enterInnerContext (); ;}
    break;

  case 137:

    {
     exprNode_checkFunctionBody (yyvsp[0].expr); 
     yyval.expr = yyvsp[0].expr; /* oldstyle */ 
     context_exitInner (yyvsp[0].expr);
   ;}
    break;

  case 138:

    { 
     context_setFunctionDefined (exprNode_loc (yyvsp[0].expr)); 
     exprNode_checkFunction (context_getHeader (),  yyvsp[0].expr); 
     /* DRL 8 8 2000 */
     
     context_exitFunction ();
   ;}
    break;

  case 139:

    { yyval.srset = yyvsp[-1].srset; ;}
    break;

  case 140:

    { yyval.srset = sRefSet_new (); ;}
    break;

  case 141:

    { yyval.sr = uentry_getSref (yyvsp[0].entry); checkModifiesId (yyvsp[0].entry); ;}
    break;

  case 142:

    { yyval.sr = fixModifiesId (yyvsp[0].cname); ;}
    break;

  case 143:

    { yyval.sr = fixModifiesId (yyvsp[0].cname); ;}
    break;

  case 144:

    { yyval.sr = modListArrayFetch (yyvsp[-2].sr, sRef_undefined); ;}
    break;

  case 145:

    { yyval.sr = modListArrayFetch (yyvsp[-3].sr, yyvsp[-1].sr); ;}
    break;

  case 146:

    { yyval.sr = modListPointer (yyvsp[0].sr); ;}
    break;

  case 147:

    { yyval.sr = yyvsp[-1].sr; ;}
    break;

  case 148:

    { yyval.sr = modListFieldAccess (yyvsp[-2].sr, yyvsp[0].cname); ;}
    break;

  case 149:

    { yyval.sr = modListArrowAccess (yyvsp[-2].sr, yyvsp[0].cname); ;}
    break;

  case 150:

    { yyval.sr = yyvsp[0].sr; ;}
    break;

  case 151:

    { yyval.sr = sRef_makeUnknown (); /* sRef_makeConstant ($1); ? */ ;}
    break;

  case 152:

    { yyval.srset = sRefSet_single (yyvsp[0].sr); ;}
    break;

  case 153:

    { yyval.srset = sRefSet_insert (yyvsp[-2].srset, yyvsp[0].sr); ;}
    break;

  case 154:

    { yyval.sr = checkStateClausesId (yyvsp[0].entry); ;}
    break;

  case 155:

    { yyval.sr = fixStateClausesId (yyvsp[0].cname); ;}
    break;

  case 156:

    { yyval.sr = sRef_makeAnyArrayFetch (yyvsp[-2].sr); ;}
    break;

  case 157:

    { yyval.sr = sRef_makeAnyArrayFetch (yyvsp[-3].sr); ;}
    break;

  case 158:

    { yyval.sr = sRef_constructPointer (yyvsp[0].sr); ;}
    break;

  case 159:

    { yyval.sr = yyvsp[-1].sr; ;}
    break;

  case 160:

    { cstring_markOwned (yyvsp[0].cname);
					    yyval.sr = sRef_buildField (yyvsp[-2].sr, yyvsp[0].cname); ;}
    break;

  case 161:

    { cstring_markOwned (yyvsp[0].cname);
                                            yyval.sr = sRef_makeArrow (yyvsp[-2].sr, yyvsp[0].cname); ;}
    break;

  case 162:

    { DPRINTF ((message("Empty optSpecClauseList") )); yyval.srset = sRefSet_undefined ;}
    break;

  case 164:

    { if (sRef_isValid (yyvsp[0].sr)) { yyval.srset = sRefSet_single (yyvsp[0].sr); } 
      else {
	DPRINTF((message("returning sRefSEt_undefined ")  ));
	yyval.srset = sRefSet_undefined; } 
    ;}
    break;

  case 165:

    { if (sRef_isValid (yyvsp[0].sr))
	{
	  yyval.srset = sRefSet_insert (yyvsp[-2].srset, yyvsp[0].sr); 
	}
      else
	{
	  yyval.srset = yyvsp[-2].srset;
	}
    ;}
    break;

  case 166:

    { yyval.expr = exprNode_fromIdentifier (yyvsp[0].entry); ;}
    break;

  case 167:

    { yyval.expr = exprNode_fromUIO (yyvsp[0].cname); ;}
    break;

  case 169:

    { yyval.expr = exprNode_addParens (yyvsp[-2].tok, yyvsp[-1].expr); ;}
    break;

  case 170:

    { yyval.expr = exprNode_fromIdentifier (cscannerHelp_coerceId (yyvsp[0].cname)); ;}
    break;

  case 171:

    { yyval.expr = exprNode_makeError (); ;}
    break;

  case 172:

    { exprChecks_inCompoundStatementExpression (); ;}
    break;

  case 173:

    { exprChecks_leaveCompoundStatementExpression (); yyval.expr = exprNode_compoundStatementExpression (yyvsp[-3].tok, yyvsp[-1].expr); ;}
    break;

  case 175:

    { yyval.expr = exprNode_arrayFetch (yyvsp[-3].expr, yyvsp[-1].expr); ;}
    break;

  case 176:

    { yyval.expr = exprNode_functionCall (yyvsp[-2].expr, exprNodeList_new ()); ;}
    break;

  case 177:

    { yyval.expr = exprNode_functionCall (yyvsp[-3].expr, yyvsp[-1].exprlist); ;}
    break;

  case 178:

    { yyval.expr = exprNode_vaArg (yyvsp[-5].tok, yyvsp[-3].expr, yyvsp[-1].qtyp); ;}
    break;

  case 179:

    { yyval.expr = exprNode_fieldAccess (yyvsp[-4].expr, yyvsp[-2].tok, yyvsp[-1].cname); ;}
    break;

  case 180:

    { yyval.expr = exprNode_arrowAccess (yyvsp[-4].expr, yyvsp[-2].tok, yyvsp[-1].cname); ;}
    break;

  case 181:

    { yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;}
    break;

  case 182:

    { yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;}
    break;

  case 183:

    { /* added for C99 */ yyval.expr = exprNode_undefined; /*@i87 no checking */ ;}
    break;

  case 184:

    { yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;}
    break;

  case 185:

    { yyval.exprlist = exprNodeList_push (yyvsp[-2].exprlist, yyvsp[0].expr); ;}
    break;

  case 187:

    { yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 188:

    { yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 189:

    { yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 190:

    { yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 191:

    { yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 192:

    { yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 193:

    { yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 194:

    { yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 195:

    { yyval.expr = yyvsp[-1].expr; ;}
    break;

  case 196:

    { yyval.expr = yyvsp[0].expr; ;}
    break;

  case 197:

    { yyval.cstringlist = cstringList_add (yyvsp[-2].cstringlist, yyvsp[0].cname); lltok_free (yyvsp[-1].tok); ;}
    break;

  case 198:

    { yyval.cstringlist = yyvsp[-3].cstringlist; lltok_free2 (yyvsp[-2].tok, yyvsp[0].tok); ;}
    break;

  case 199:

    { yyval.cstringlist = cstringList_single (yyvsp[0].cname); ;}
    break;

  case 200:

    { yyval.expr = exprNode_offsetof (yyvsp[-5].qtyp, yyvsp[-2].cstringlist); 
     lltok_free3 (yyvsp[-8].tok, yyvsp[-6].tok, yyvsp[-3].tok); lltok_free (yyvsp[-1].tok); ;}
    break;

  case 201:

    { context_setProtectVars (); ;}
    break;

  case 202:

    { context_sizeofReleaseVars (); yyval.expr = yyvsp[0].expr; ;}
    break;

  case 203:

    {context_enterSizeof();}
    break;

  case 204:

    {context_leaveSizeof();}
    break;

  case 205:

    { yyval.expr = exprNode_sizeofType (yyvsp[-1].qtyp); lltok_free3 (yyvsp[-3].tok, yyvsp[-2].tok, yyvsp[0].tok);  ;}
    break;

  case 206:

    { yyval.expr = exprNode_sizeofExpr (yyvsp[0].expr); lltok_free (yyvsp[-1].tok); ;}
    break;

  case 207:

    { yyval.expr = exprNode_alignofType (yyvsp[-1].qtyp); lltok_free3 (yyvsp[-3].tok, yyvsp[-2].tok, yyvsp[0].tok); ;}
    break;

  case 208:

    { yyval.expr = exprNode_alignofExpr (yyvsp[0].expr); lltok_free (yyvsp[-1].tok); ;}
    break;

  case 210:

    { yyval.expr = exprNode_cast (yyvsp[-3].tok, yyvsp[0].expr, yyvsp[-2].qtyp); lltok_free (yyvsp[-1].tok); ;}
    break;

  case 212:

    { yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 213:

    { yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 214:

    { yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 216:

    { yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 217:

    { yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 219:

    { yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 220:

    { yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 222:

    { yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 223:

    { yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 224:

    { yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 225:

    { yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 227:

    { yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 228:

    { yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 230:

    { yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 232:

    { yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 234:

    { yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 236:

    { exprNode_produceGuards (yyvsp[-1].expr); 
     context_enterAndClause (yyvsp[-1].expr); 
   ;}
    break;

  case 237:

    { 
     yyval.expr = exprNode_op (yyvsp[-3].expr, yyvsp[0].expr, yyvsp[-2].tok); 
     context_exitAndClause (yyval.expr, yyvsp[0].expr);
   ;}
    break;

  case 239:

    { 
     exprNode_produceGuards (yyvsp[-1].expr);
     context_enterOrClause (yyvsp[-1].expr); 
   ;}
    break;

  case 240:

    { 
     yyval.expr = exprNode_op (yyvsp[-3].expr, yyvsp[0].expr, yyvsp[-2].tok); 
     context_exitOrClause (yyval.expr, yyvsp[0].expr);
   ;}
    break;

  case 242:

    { exprNode_produceGuards (yyvsp[-1].expr); context_enterTrueClause (yyvsp[-1].expr); ;}
    break;

  case 243:

    { context_enterFalseClause (yyvsp[-4].expr); ;}
    break;

  case 244:

    { yyval.expr = exprNode_cond (yyvsp[-6].expr, yyvsp[-3].expr, yyvsp[0].expr); context_exitClause (yyvsp[-6].expr, yyvsp[-3].expr, yyvsp[0].expr); ;}
    break;

  case 246:

    { yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 247:

    { yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 248:

    { yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 249:

    { yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 250:

    { yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 251:

    { yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 252:

    { yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 253:

    { yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 254:

    { yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 255:

    { yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 256:

    { yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 258:

    { yyval.expr = exprNode_comma (yyvsp[-2].expr, yyvsp[0].expr); ;}
    break;

  case 259:

    { yyval.expr = exprNode_undefined; ;}
    break;

  case 262:

    { yyval.expr = yyvsp[0].expr; ;}
    break;

  case 263:

    { doVaDcl (); yyval.expr = exprNode_makeError (); ;}
    break;

  case 264:

    { yyval.expr = exprNode_makeError (); ;}
    break;

  case 265:

    { yyval.expr = exprNode_makeError (); ;}
    break;

  case 266:

    {
     setProcessingVars (yyvsp[-3].qtyp); 
     processNamedDecl (yyvsp[-1].ntyp); 
   ;}
    break;

  case 267:

    { 
     unsetProcessingVars (); 
     yyval.expr = exprNode_makeEmptyInitialization (yyvsp[-6].ntyp); 
     DPRINTF (("Empty initialization: %s", exprNode_unparse (yyval.expr)));
   ;}
    break;

  case 268:

    { setProcessingVars (yyvsp[-4].qtyp); processNamedDecl (yyvsp[-2].ntyp); ;}
    break;

  case 269:

    { yyval.expr = exprNode_concat (yyvsp[-2].expr, exprNode_makeInitialization (yyvsp[-8].ntyp, yyvsp[-3].expr)); 
     unsetProcessingVars ();
   ;}
    break;

  case 270:

    { yyval.expr = yyvsp[0].expr; ;}
    break;

  case 271:

    { yyval.expr = exprNode_fromIdentifier (usymtab_getTypeEntry (ctype_typeId (yyvsp[0].ctyp))); ;}
    break;

  case 272:

    { 
     processNamedDecl (yyvsp[-1].ntyp); 
     yyval.expr = exprNode_makeEmptyInitialization (yyvsp[-1].ntyp);
   ;}
    break;

  case 273:

    { processNamedDecl (yyvsp[-2].ntyp); ;}
    break;

  case 274:

    { yyval.expr = exprNode_makeInitialization (yyvsp[-5].ntyp, yyvsp[0].expr); ;}
    break;

  case 275:

    { setProcessingTypedef (yyvsp[0].qtyp); ;}
    break;

  case 276:

    { clabstract_declareType (yyvsp[-3].exprlist, yyvsp[-1].warnclause); ;}
    break;

  case 277:

    { /* in the ANSI grammar, semantics unclear */ ;}
    break;

  case 278:

    { /* in the ANSI grammar, semantics unclear */ ;}
    break;

  case 279:

    { cscannerHelp_setExpectingTypeName (); ;}
    break;

  case 280:

    { cscannerHelp_setExpectingTypeName (); context_pushLoc (); ;}
    break;

  case 281:

    { yyval.exprlist = yyvsp[-1].exprlist; ;}
    break;

  case 282:

    { yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;}
    break;

  case 283:

    { yyval.exprlist = exprNodeList_push (yyvsp[-3].exprlist, yyvsp[0].expr); ;}
    break;

  case 284:

    { yyval.exprlist = yyvsp[-1].exprlist; ;}
    break;

  case 285:

    { yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;}
    break;

  case 286:

    { yyval.exprlist = exprNodeList_push (yyvsp[-3].exprlist, yyvsp[0].expr); ;}
    break;

  case 287:

    { yyval.expr = exprNode_makeError (); ;}
    break;

  case 288:

    { yyval.expr = exprNode_concat (yyvsp[-3].expr, yyvsp[0].expr); ;}
    break;

  case 290:

    { yyval.expr = exprNode_makeInitBlock (yyvsp[-2].tok, yyvsp[-1].exprlist); lltok_free (yyvsp[0].tok); ;}
    break;

  case 291:

    { yyval.expr = exprNode_makeInitBlock (yyvsp[-3].tok, yyvsp[-2].exprlist); lltok_free2 (yyvsp[-1].tok, yyvsp[0].tok); ;}
    break;

  case 292:

    { yyval.expr = exprNode_undefined; ;}
    break;

  case 293:

    { yyval.expr = yyvsp[-1].expr; ;}
    break;

  case 294:

    { yyval.expr = exprNode_undefined; 
                                     /* gcc extension, obsolete since 2.5 */ ;}
    break;

  case 295:

    { yyval.expr = exprNode_undefined; ;}
    break;

  case 296:

    { yyval.expr = exprNode_undefined; ;}
    break;

  case 297:

    { yyval.expr = exprNode_undefined; ;}
    break;

  case 298:

    { yyval.expr = exprNode_undefined; ;}
    break;

  case 299:

    { yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;}
    break;

  case 300:

    { yyval.exprlist = exprNodeList_push (yyvsp[-2].exprlist, yyvsp[0].expr); ;}
    break;

  case 301:

    { setStorageClass (SCEXTERN); yyval.typequal = qual_createExtern (); ;}
    break;

  case 302:

    { yyval.typequal = qual_createInline (); ;}
    break;

  case 303:

    { setStorageClass (SCSTATIC); yyval.typequal = qual_createStatic (); ;}
    break;

  case 304:

    { yyval.typequal = qual_createAuto (); ;}
    break;

  case 305:

    { yyval.typequal = qual_createRegister (); ;}
    break;

  case 306:

    { yyval.stateclause = yyvsp[-1].stateclause; ;}
    break;

  case 307:

    {
     context_setProtectVars (); 
     enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;}
    break;

  case 308:

    { 
     exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
     yyval.stateclause = stateClause_createPlain (yyvsp[-5].tok, yyvsp[-2].srset);
   ;}
    break;

  case 309:

    { yyval.funcclause = yyvsp[-1].funcclause; ;}
    break;

  case 310:

    { yyval.tok = yyvsp[-1].tok; context_enterFunctionHeader (); ;}
    break;

  case 311:

    {
     context_exitFunctionHeader ();
     context_setProtectVars (); 
     enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;}
    break;

  case 312:

    { 
     exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
     yyval.funcclause = functionClause_createState (stateClause_create (yyvsp[-5].tok, yyvsp[-4].typequal, yyvsp[-2].srset));
   ;}
    break;

  case 313:

    {
     context_setProtectVars (); 
     enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;}
    break;

  case 314:

    {
     context_exitFunctionHeader ();
     exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
     DPRINTF (("done optGlobBufConstraintsAux\n"));

     if (lltok_isEnsures (yyvsp[-4].tok)) 
       {
	 yyval.funcclause = functionClause_createEnsures (yyvsp[-2].fcnconstraint);
       }
     else if (lltok_isRequires (yyvsp[-4].tok))
       {
	 yyval.funcclause = functionClause_createRequires (yyvsp[-2].fcnconstraint);
       }
     else
       {
	 BADBRANCH;
       }

     DPRINTF (("FunctionclauseS: %s", functionClause_unparse (yyval.funcclause)));
   ;}
    break;

  case 315:

    { yyval.fcnconstraint = functionConstraint_createBufferConstraint (yyvsp[0].conL); ;}
    break;

  case 316:

    { yyval.fcnconstraint = functionConstraint_createMetaStateConstraint (yyvsp[0].msconstraint); DPRINTF (("Made constraint: %s", functionConstraint_unparse (yyval.fcnconstraint))); ;}
    break;

  case 317:

    { yyval.typequal = qual_createExits (); ;}
    break;

  case 318:

    { yyval.typequal = qual_createMayExit (); ;}
    break;

  case 319:

    { yyval.typequal = qual_createTrueExit (); ;}
    break;

  case 320:

    { yyval.typequal = qual_createFalseExit (); ;}
    break;

  case 321:

    { yyval.typequal = qual_createNeverExit (); ;}
    break;

  case 322:

    { yyval.typequal = qual_createChecked (); ;}
    break;

  case 323:

    { yyval.typequal = qual_createCheckMod (); ;}
    break;

  case 324:

    { yyval.typequal = qual_createUnchecked (); ;}
    break;

  case 325:

    { yyval.typequal = qual_createCheckedStrict (); ;}
    break;

  case 326:

    { yyval.typequal = qual_createOwned (); ;}
    break;

  case 327:

    { yyval.typequal = qual_createDependent (); ;}
    break;

  case 328:

    { yyval.typequal = qual_createYield (); ;}
    break;

  case 329:

    { yyval.typequal = qual_createTemp (); ;}
    break;

  case 330:

    { yyval.typequal = qual_createOnly (); ;}
    break;

  case 331:

    { yyval.typequal = qual_createKeep (); ;}
    break;

  case 332:

    { yyval.typequal = qual_createKept (); ;}
    break;

  case 333:

    { yyval.typequal = qual_createShared (); ;}
    break;

  case 334:

    { yyval.typequal = qual_createUnique (); ;}
    break;

  case 335:

    { yyval.typequal = qual_createNull (); ;}
    break;

  case 336:

    { yyval.typequal = qual_createIsNull (); ;}
    break;

  case 337:

    { yyval.typequal = qual_createRelNull (); ;}
    break;

  case 338:

    { yyval.typequal = qual_createNotNull (); ;}
    break;

  case 339:

    { yyval.typequal = qual_createExposed (); ;}
    break;

  case 340:

    { yyval.typequal = qual_createObserver (); ;}
    break;

  case 341:

    { yyval.typequal = qual_createNullTerminated (); ;}
    break;

  case 342:

    { yyval.typequal = qual_createMetaState (yyvsp[0].annotation); ;}
    break;

  case 343:

    { yyval.typequal = qual_createReturned (); ;}
    break;

  case 344:

    { yyval.typequal = qual_createSef (); ;}
    break;

  case 345:

    { yyval.typequal = qual_createUnused (); ;}
    break;

  case 346:

    { yyval.typequal = qual_createExternal (); ;}
    break;

  case 347:

    { yyval.typequal = qual_createTrueNull (); ;}
    break;

  case 348:

    { yyval.typequal = qual_createFalseNull (); ;}
    break;

  case 349:

    { yyval.typequal = qual_createAbstract (); ;}
    break;

  case 350:

    { yyval.typequal = qual_createNumAbstract (); ;}
    break;

  case 351:

    { yyval.typequal = qual_createConcrete (); ;}
    break;

  case 352:

    { yyval.typequal = qual_createMutable (); ;}
    break;

  case 353:

    { yyval.typequal = qual_createImmutable (); ;}
    break;

  case 354:

    { yyval.typequal = qual_createRefCounted (); ;}
    break;

  case 355:

    { yyval.typequal = qual_createRefs (); ;}
    break;

  case 356:

    { yyval.typequal = qual_createKillRef (); ;}
    break;

  case 357:

    { yyval.typequal = qual_createRelDef (); ;}
    break;

  case 358:

    { yyval.typequal = qual_createNewRef (); ;}
    break;

  case 359:

    { yyval.typequal = qual_createTempRef (); ;}
    break;

  case 360:

    { yyval.typequal = qual_createShort (); ;}
    break;

  case 361:

    { yyval.typequal = qual_createLong (); ;}
    break;

  case 362:

    { yyval.typequal = qual_createSigned (); ;}
    break;

  case 363:

    { yyval.typequal = qual_createUnsigned (); ;}
    break;

  case 364:

    { yyval.typequal = qual_createOut (); ;}
    break;

  case 365:

    { yyval.typequal = qual_createIn (); ;}
    break;

  case 366:

    { yyval.typequal = qual_createPartial (); ;}
    break;

  case 367:

    { yyval.typequal = qual_createSpecial (); ;}
    break;

  case 368:

    { yyval.typequal = qual_createConst (); ;}
    break;

  case 369:

    { yyval.typequal = qual_createVolatile (); ;}
    break;

  case 370:

    { yyval.typequal = qual_createRestrict (); ;}
    break;

  case 371:

    { yyval.typequal = yyvsp[-1].typequal; ;}
    break;

  case 372:

    { yyval.typequal = yyvsp[-1].typequal; ;}
    break;

  case 373:

    { yyval.typequal = yyvsp[-1].typequal; ;}
    break;

  case 374:

    { yyval.typequal = yyvsp[-1].typequal; ;}
    break;

  case 375:

    { yyval.typequal = yyvsp[-1].typequal; ;}
    break;

  case 376:

    { yyval.typequal = yyvsp[-1].typequal; ;}
    break;

  case 377:

    { yyval.typequal = yyvsp[-1].typequal; ;}
    break;

  case 378:

    { yyval.typequal = yyvsp[-1].typequal; ;}
    break;

  case 379:

    { yyval.typequal = yyvsp[-1].typequal; ;}
    break;

  case 386:

    { yyval.ctyp = ctype_makeAnytype (); ;}
    break;

  case 387:

    { yyval.ctyp = ctype_anyintegral; ;}
    break;

  case 388:

    { yyval.ctyp = ctype_unsignedintegral; ;}
    break;

  case 389:

    { yyval.ctyp = ctype_signedintegral; ;}
    break;

  case 393:

    { yyval.ctyp = ctype_fromQual (yyvsp[-1].typequal); ;}
    break;

  case 394:

    { yyval.qtyp = qtype_resolve (yyvsp[-1].qtyp); ;}
    break;

  case 395:

    { yyval.qtyp = yyvsp[0].qtyp; ;}
    break;

  case 396:

    { yyval.qtyp = qtype_mergeAlt (yyvsp[-3].qtyp, yyvsp[-1].qtyp); ;}
    break;

  case 398:

    { yyval.qtyp = qtype_mergeAlt (yyvsp[-2].qtyp, yyvsp[0].qtyp); ;}
    break;

  case 399:

    { yyval.qtyp = qtype_addQual (yyvsp[0].qtyp, yyvsp[-1].typequal); ;}
    break;

  case 400:

    { yyval.qtyp = qtype_addQual (yyvsp[0].qtyp, yyvsp[-1].typequal); ;}
    break;

  case 401:

    { yyval.qtyp = qtype_combine (yyvsp[0].qtyp, yyvsp[-1].ctyp); ;}
    break;

  case 402:

    { yyval.qtyp = qtype_unknown (); ;}
    break;

  case 403:

    { yyval.qtyp = yyvsp[0].qtyp; ;}
    break;

  case 404:

    { yyval.conL = constraintList_undefined; ;}
    break;

  case 405:

    { sRef_setGlobalScopeSafe (); ;}
    break;

  case 406:

    { sRef_clearGlobalScopeSafe (); ;}
    break;

  case 407:

    { ctype ct; ct = declareStruct (yyvsp[-9].cname, yyvsp[-4].flist); /* context_setGlobalStructInfo(ct, $12); */ yyval.ctyp = ct; ;}
    break;

  case 408:

    { sRef_setGlobalScopeSafe (); ;}
    break;

  case 409:

    { sRef_clearGlobalScopeSafe (); ;}
    break;

  case 410:

    { yyval.ctyp = declareUnion (yyvsp[-8].cname, yyvsp[-3].flist); ;}
    break;

  case 411:

    { yyval.ctyp = declareStruct (yyvsp[-3].cname, uentryList_new ()); ;}
    break;

  case 412:

    { yyval.ctyp = declareUnion (yyvsp[-3].cname, uentryList_new ()); ;}
    break;

  case 413:

    { sRef_setGlobalScopeSafe (); ;}
    break;

  case 414:

    { sRef_clearGlobalScopeSafe (); ;}
    break;

  case 415:

    { yyval.ctyp = declareUnnamedStruct (yyvsp[-3].flist); ;}
    break;

  case 416:

    { sRef_setGlobalScopeSafe (); ;}
    break;

  case 417:

    { sRef_clearGlobalScopeSafe (); ;}
    break;

  case 418:

    { yyval.ctyp = declareUnnamedUnion (yyvsp[-3].flist); ;}
    break;

  case 419:

    { yyval.ctyp = ctype_createUnnamedStruct (uentryList_new ()); ;}
    break;

  case 420:

    { yyval.ctyp = ctype_createUnnamedUnion (uentryList_new ()); ;}
    break;

  case 421:

    { yyval.ctyp = handleStruct (yyvsp[-1].cname); ;}
    break;

  case 422:

    { yyval.ctyp = handleUnion (yyvsp[-1].cname); ;}
    break;

  case 423:

    { cscannerHelp_clearExpectingTypeName (); ;}
    break;

  case 425:

    { yyval.flist = uentryList_undefined; /* bogus! */ ;}
    break;

  case 426:

    { yyval.flist = uentryList_mergeFields (yyvsp[-1].flist, yyvsp[0].flist); ;}
    break;

  case 427:

    { yyval.flist = fixUentryList (yyvsp[-2].ntyplist, yyvsp[-4].qtyp); ;}
    break;

  case 428:

    { yyval.flist = fixUnnamedDecl (yyvsp[-2].qtyp); ;}
    break;

  case 429:

    { yyval.ntyplist = idDeclList_singleton (yyvsp[-1].ntyp); ;}
    break;

  case 430:

    { yyval.ntyplist = idDeclList_add (yyvsp[-3].ntyplist, yyvsp[-1].ntyp); ;}
    break;

  case 431:

    { yyval.ntyp = yyvsp[0].ntyp; ;}
    break;

  case 432:

    { yyval.ntyp = idDecl_undefined; ;}
    break;

  case 433:

    { yyval.ntyp = yyvsp[-3].ntyp; ;}
    break;

  case 434:

    { yyval.ctyp = declareUnnamedEnum (yyvsp[-2].enumnamelist); ;}
    break;

  case 435:

    { context_pushLoc (); ;}
    break;

  case 436:

    { context_popLoc (); yyval.ctyp = declareEnum (yyvsp[-5].cname, yyvsp[-2].enumnamelist); ;}
    break;

  case 437:

    { yyval.ctyp = handleEnum (yyvsp[-1].cname); ;}
    break;

  case 438:

    { yyval.enumnamelist = enumNameList_single (yyvsp[0].cname); ;}
    break;

  case 439:

    { yyval.enumnamelist = enumNameList_push (yyvsp[-2].enumnamelist, yyvsp[0].cname); ;}
    break;

  case 441:

    { uentry ue = uentry_makeEnumConstant (yyvsp[0].cname, ctype_unknown);
     usymtab_supGlobalEntry (ue);
     yyval.cname = yyvsp[0].cname;
   ;}
    break;

  case 442:

    { uentry ue = uentry_makeEnumInitializedConstant (yyvsp[-3].cname, ctype_unknown, yyvsp[0].expr);
     usymtab_supGlobalEntry (ue);
     yyval.cname = yyvsp[-3].cname; 
   ;}
    break;

  case 444:

    { yyval.ntyp = idDecl_create (cstring_undefined, qtype_create (yyvsp[0].ctyp)); ;}
    break;

  case 445:

    { 
     qtype qt = qtype_unknown ();
     qtype_adjustPointers (yyvsp[-1].pointers, qt);
     yyval.ntyp = idDecl_create (cstring_copy (cscannerHelp_observeLastIdentifier ()), qt);
   ;}
    break;

  case 446:

    { yyval.ntyp = yyvsp[0].ntyp; qtype_adjustPointers (yyvsp[-1].pointers, idDecl_getTyp (yyval.ntyp)); ;}
    break;

  case 448:

    { yyval.ntyp = yyvsp[0].ntyp; qtype_adjustPointers (yyvsp[-1].pointers, idDecl_getTyp (yyval.ntyp)); ;}
    break;

  case 449:

    { yyval.entrylist = handleParamTypeList (yyvsp[0].entrylist); ;}
    break;

  case 450:

    { yyval.entrylist = handleParamIdList (yyvsp[0].entrylist); ;}
    break;

  case 451:

    { yyval.typequal = qual_createConst (); ;}
    break;

  case 452:

    { yyval.typequal = qual_createRestrict (); ;}
    break;

  case 453:

    { yyval.typequal = qual_createVolatile (); ;}
    break;

  case 454:

    { yyval.tquallist = qualList_single (yyvsp[0].typequal); ;}
    break;

  case 455:

    { yyval.tquallist = qualList_add (yyvsp[-1].tquallist, yyvsp[0].typequal); ;}
    break;

  case 456:

    { yyval.pointers = pointers_create (yyvsp[0].tok); ;}
    break;

  case 457:

    { yyval.pointers = pointers_createMods (yyvsp[-1].tok, yyvsp[0].tquallist); ;}
    break;

  case 458:

    { yyval.pointers = pointers_extend (pointers_create (yyvsp[-1].tok), yyvsp[0].pointers); ;}
    break;

  case 459:

    { yyval.pointers = pointers_extend (pointers_createMods (yyvsp[-2].tok, yyvsp[-1].tquallist), yyvsp[0].pointers); ;}
    break;

  case 461:

    { yyval.entrylist = uentryList_add (yyvsp[-2].entrylist, uentry_makeElipsisMarker ()); ;}
    break;

  case 462:

    { yyval.entrylist = uentryList_single (uentry_makeVariableLoc (yyvsp[0].cname, ctype_int)); ;}
    break;

  case 463:

    { yyval.entrylist = uentryList_add (yyvsp[-2].entrylist, uentry_makeVariableLoc (yyvsp[0].cname, ctype_int)); ;}
    break;

  case 464:

    { yyval.entrylist = uentryList_single (uentry_makeElipsisMarker ()); ;}
    break;

  case 466:

    { yyval.entrylist = uentryList_add (yyvsp[-2].entrylist, uentry_makeElipsisMarker ()); ;}
    break;

  case 467:

    { storeLoc (); ;}
    break;

  case 468:

    { yyval.entrylist = uentryList_single (yyvsp[0].oentry); ;}
    break;

  case 469:

    { storeLoc (); ;}
    break;

  case 470:

    { yyval.entrylist = uentryList_add (yyvsp[-3].entrylist, yyvsp[0].oentry); ;}
    break;

  case 471:

    { 
     if (isFlipOldStyle ()) 
       { 
	 llparseerror (cstring_makeLiteral ("Inconsistent function parameter syntax (mixing old and new style declaration)")); 
       }
     else 
       { 
	 setNewStyle (); 
       }
     yyval.oentry = makeCurrentParam (idDecl_fixParamBase (yyvsp[-1].ntyp, yyvsp[-2].qtyp)); 
   ;}
    break;

  case 472:

    { 
     idDecl tparam = idDecl_create (yyvsp[0].cname, qtype_unknown ());

     if (isNewStyle ()) 
       {
	 llparseerror (message ("Inconsistent function parameter syntax: %q",
				idDecl_unparse (tparam))); 
       }

     setFlipOldStyle ();
     yyval.oentry = makeCurrentParam (tparam);
     idDecl_free (tparam);
   ;}
    break;

  case 474:

    { yyval.qtyp = qtype_newBase (yyvsp[-1].qtyp, yyvsp[0].ctyp); ;}
    break;

  case 475:

    { yyval.ctyp = ctype_adjustPointers (yyvsp[0].pointers, ctype_unknown); ;}
    break;

  case 477:

    { yyval.ctyp = ctype_adjustPointers (yyvsp[-1].pointers, yyvsp[0].ctyp); ;}
    break;

  case 478:

    { yyval.ctyp = ctype_unknown; ;}
    break;

  case 480:

    { yyval.ctyp = ctype_expectFunction (yyvsp[-1].ctyp); ;}
    break;

  case 481:

    { yyval.ctyp = ctype_makeArray (ctype_unknown); ;}
    break;

  case 482:

    { yyval.ctyp = ctype_makeFixedArray (ctype_unknown, exprNode_getLongValue (yyvsp[-1].expr)); ;}
    break;

  case 483:

    { yyval.ctyp = ctype_makeInnerArray (yyvsp[-2].ctyp); ;}
    break;

  case 484:

    { yyval.ctyp = ctype_makeInnerFixedArray (yyvsp[-3].ctyp, exprNode_getLongValue (yyvsp[-1].expr)); ;}
    break;

  case 485:

    { yyval.ctyp = ctype_makeFunction (ctype_unknown, uentryList_makeMissingParams ()); ;}
    break;

  case 486:

    { yyval.ctyp = ctype_makeParamsFunction (ctype_unknown, yyvsp[-1].entrylist); ;}
    break;

  case 487:

    { yyval.ctyp = ctype_makeFunction (yyvsp[-3].ctyp, uentryList_makeMissingParams ()); ;}
    break;

  case 488:

    { yyval.ctyp = ctype_makeParamsFunction (yyvsp[-4].ctyp, yyvsp[-1].entrylist); ;}
    break;

  case 499:

    { exprNode_revealState (yyvsp[-1].expr); yyval.expr = exprNode_undefined; ;}
    break;

  case 500:

    { yyval.expr = yyvsp[0].expr; ;}
    break;

  case 503:

    { yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;}
    break;

  case 504:

    { yyval.expr = exprNode_while (yyvsp[-1].expr, yyvsp[0].expr); ;}
    break;

  case 505:

    { yyval.expr = exprNode_doWhile (yyvsp[-5].expr, yyvsp[-2].expr); ;}
    break;

  case 506:

    { yyval.expr = exprNode_doWhile (yyvsp[-4].expr, yyvsp[-1].expr); ;}
    break;

  case 507:

    { yyval.expr = exprNode_for (yyvsp[-1].expr, yyvsp[0].expr); ;}
    break;

  case 508:

    { context_setProtectVars (); ;}
    break;

  case 509:

    { context_sizeofReleaseVars (); ;}
    break;

  case 510:

    { yyval.expr = exprNode_forPred (yyvsp[-7].expr, yyvsp[-5].expr, yyvsp[-2].expr); 
     context_enterForClause (yyvsp[-5].expr); ;}
    break;

  case 511:

    { setProcessingIterVars (yyvsp[-2].entry); ;}
    break;

  case 512:

    { yyval.expr = exprNode_iterStart (yyvsp[-5].entry, yyvsp[-1].exprlist); ;}
    break;

  case 513:

    { yyval.expr = exprNode_createId (yyvsp[0].entry); ;}
    break;

  case 517:

    { yyval.expr = yyvsp[-1].expr; DPRINTF (("def stmt: %s", exprNode_unparse (yyval.expr))); ;}
    break;

  case 525:

    { yyval.expr = yyvsp[-1].expr; ;}
    break;

  case 526:

    { yyval.expr = exprNode_makeError (); ;}
    break;

  case 527:

    { exprNode_checkIfPred (yyvsp[0].expr); ;}
    break;

  case 528:

    { /* don't: context_exitTrueClause ($1, $2); */
     yyval.expr = exprNode_if (yyvsp[-2].expr, yyvsp[0].expr); 
   ;}
    break;

  case 529:

    { yyval.expr = exprNode_createTok (yyvsp[0].tok); ;}
    break;

  case 530:

    { yyval.expr = exprNode_createTok (yyvsp[0].tok); ;}
    break;

  case 541:

    { yyval.expr = exprNode_addParens (yyvsp[-2].tok, yyvsp[-1].expr); ;}
    break;

  case 544:

    { yyval.expr = exprNode_makeError (); ;}
    break;

  case 545:

    { yyval.expr = exprNode_labelMarker (yyvsp[-1].cname); ;}
    break;

  case 546:

    { yyval.expr = exprNode_notReached (yyvsp[0].expr); ;}
    break;

  case 547:

    { ; ;}
    break;

  case 548:

    { ; ;}
    break;

  case 549:

    { context_enterCaseClause (yyvsp[0].expr); ;}
    break;

  case 550:

    { yyval.expr = exprNode_caseMarker (yyvsp[-2].expr, FALSE); ;}
    break;

  case 551:

    { context_enterCaseClause (yyvsp[0].expr); ;}
    break;

  case 552:

    { yyval.expr = exprNode_caseMarker (yyvsp[-2].expr, TRUE); ;}
    break;

  case 553:

    { context_enterCaseClause (exprNode_undefined); ;}
    break;

  case 554:

    { yyval.expr = exprNode_defaultMarker (yyvsp[-2].tok, FALSE); ;}
    break;

  case 555:

    { context_enterCaseClause (exprNode_undefined); ;}
    break;

  case 556:

    { yyval.expr = exprNode_defaultMarker (yyvsp[-2].tok, TRUE); ;}
    break;

  case 557:

    { yyval.expr = yyvsp[-1].expr; ;}
    break;

  case 558:

    { yyval.expr = yyvsp[0].expr; context_exitInner (yyvsp[0].expr); ;}
    break;

  case 559:

    { yyval.expr = yyvsp[-1].expr; ;}
    break;

  case 560:

    { context_enterInnerContext (); ;}
    break;

  case 561:

    { context_exitInnerPlain (); ;}
    break;

  case 562:

    { context_enterStructInnerContext (); ;}
    break;

  case 563:

    { context_exitStructInnerContext (); ;}
    break;

  case 564:

    { context_exitInnerSafe (); ;}
    break;

  case 565:

    { yyval.expr = exprNode_createTok (yyvsp[0].tok); ;}
    break;

  case 566:

    { yyval.expr = exprNode_notReached (exprNode_createTok (yyvsp[0].tok)); ;}
    break;

  case 567:

    { yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;}
    break;

  case 568:

    { yyval.expr = exprNode_notReached (exprNode_updateLocation (yyvsp[-2].expr, lltok_getLoc (yyvsp[0].tok))); ;}
    break;

  case 569:

    { yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;}
    break;

  case 570:

    { yyval.expr = exprNode_notReached (exprNode_updateLocation (yyvsp[-2].expr, lltok_getLoc (yyvsp[0].tok))); ;}
    break;

  case 571:

    { yyval.expr = exprNode_updateLocation (exprNode_concat (yyvsp[-2].expr, yyvsp[-1].expr), lltok_getLoc (yyvsp[0].tok)); ;}
    break;

  case 572:

    { yyval.expr = exprNode_notReached (exprNode_updateLocation (exprNode_concat (yyvsp[-3].expr, yyvsp[-2].expr), 
							lltok_getLoc (yyvsp[-1].tok))); 
   ;}
    break;

  case 573:

    { yyval.expr = exprNode_makeBlock (yyvsp[0].expr); ;}
    break;

  case 574:

    { yyval.expr = exprNode_createTok (yyvsp[0].tok); ;}
    break;

  case 575:

    { yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;}
    break;

  case 576:

    { yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;}
    break;

  case 577:

    { yyval.expr = exprNode_updateLocation (exprNode_concat (yyvsp[-2].expr, yyvsp[-1].expr), lltok_getLoc (yyvsp[0].tok)); ;}
    break;

  case 579:

    { yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;}
    break;

  case 580:

    { yyval.expr = yyvsp[0].expr; ;}
    break;

  case 581:

    { yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;}
    break;

  case 582:

    { yyval.expr = yyvsp[0].expr; ;}
    break;

  case 583:

    { yyval.expr = exprNode_concat (yyvsp[-2].expr, yyvsp[0].expr); ;}
    break;

  case 584:

    { yyval.expr = yyvsp[0].expr; ;}
    break;

  case 585:

    { yyval.expr = yyvsp[-2].expr; ;}
    break;

  case 586:

    { yyval.expr = yyvsp[0].expr; ;}
    break;

  case 587:

    { yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;}
    break;

  case 588:

    { yyval.expr = exprNode_createTok (yyvsp[0].tok); ;}
    break;

  case 589:

    { yyval.expr = exprNode_statement (yyvsp[-1].expr, yyvsp[0].tok); ;}
    break;

  case 590:

    { yyval.expr = exprNode_createTok (yyvsp[0].tok); ;}
    break;

  case 591:

    { yyval.expr = exprNode_statement (yyvsp[-1].expr, yyvsp[0].tok); ;}
    break;

  case 592:

    { yyval.expr = exprNode_checkExpr (yyvsp[0].expr); ;}
    break;

  case 593:

    { 
     exprNode_produceGuards (yyvsp[-1].expr); context_enterTrueClause (yyvsp[-1].expr); 
     exprNode_checkIfPred (yyvsp[-1].expr);
     yyval.expr = yyvsp[-1].expr;
   ;}
    break;

  case 594:

    { 
     context_exitTrueClause (yyvsp[-1].expr, yyvsp[0].expr);
     yyval.expr = exprNode_if (yyvsp[-1].expr, yyvsp[0].expr); 
   ;}
    break;

  case 595:

    { context_enterFalseClause (yyvsp[-2].expr); ;}
    break;

  case 596:

    {
     context_exitClause (yyvsp[-4].expr, yyvsp[-3].expr, yyvsp[0].expr);
     yyval.expr = exprNode_ifelse (yyvsp[-4].expr, yyvsp[-3].expr, yyvsp[0].expr); 
   ;}
    break;

  case 597:

    { context_enterSwitch (yyvsp[0].expr); ;}
    break;

  case 598:

    { yyval.expr = exprNode_switch (yyvsp[-3].expr, yyvsp[0].expr); ;}
    break;

  case 599:

    { yyval.expr = exprNode_whilePred (yyvsp[-1].expr); context_enterWhileClause (yyvsp[-1].expr); ;}
    break;

  case 600:

    { yyval.expr = exprNode_whilePred(yyvsp[-1].expr); ;}
    break;

  case 601:

    { context_enterIterClause (); ;}
    break;

  case 602:

    { setProcessingIterVars (yyvsp[-3].entry); ;}
    break;

  case 603:

    { 
     yyval.expr = exprNode_iter (yyvsp[-9].entry, yyvsp[-4].exprlist, yyvsp[-2].expr, yyvsp[-1].entry); 

   ;}
    break;

  case 604:

    { yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;}
    break;

  case 605:

    { nextIterParam (); ;}
    break;

  case 606:

    { yyval.exprlist = exprNodeList_push (yyvsp[-3].exprlist, yyvsp[0].expr); ;}
    break;

  case 607:

    { yyval.expr = exprNode_iterExpr (yyvsp[0].expr); ;}
    break;

  case 608:

    { yyval.expr = exprNode_iterId (yyvsp[0].entry); ;}
    break;

  case 609:

    { uentry ue = cscannerHelp_coerceIterId (yyvsp[0].cname);

		      if (uentry_isValid (ue)) 
			{
			  yyval.expr = exprNode_iterId (ue);
			}
		      else
			{
			  yyval.expr = exprNode_iterNewId (cstring_copy (cscannerHelp_observeLastIdentifier ()));
			}
		    ;}
    break;

  case 610:

    { yyval.expr = exprNode_iterNewId (yyvsp[0].cname); ;}
    break;

  case 612:

    { yyval.expr = exprNode_combineLiterals (yyvsp[-1].expr, yyvsp[0].expr); ;}
    break;

  case 614:

    { yyval.expr = exprNode_addParens (yyvsp[-2].tok, yyvsp[-1].expr); ;}
    break;

  case 616:

    { yyval.expr = exprNode_arrayFetch (yyvsp[-3].expr, yyvsp[-1].expr); ;}
    break;

  case 617:

    { yyval.expr = exprNode_functionCall (yyvsp[-2].expr, exprNodeList_new ()); ;}
    break;

  case 618:

    { yyval.expr = exprNode_functionCall (yyvsp[-3].expr, yyvsp[-1].exprlist); ;}
    break;

  case 619:

    { yyval.expr = exprNode_vaArg (yyvsp[-5].tok, yyvsp[-3].expr, yyvsp[-1].qtyp); ;}
    break;

  case 620:

    { yyval.expr = exprNode_fieldAccess (yyvsp[-4].expr, yyvsp[-2].tok, yyvsp[-1].cname); ;}
    break;

  case 621:

    { yyval.expr = exprNode_arrowAccess (yyvsp[-4].expr, yyvsp[-2].tok, yyvsp[-1].cname); ;}
    break;

  case 622:

    { yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;}
    break;

  case 623:

    { yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;}
    break;

  case 625:

    { yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 626:

    { yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 627:

    { yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 628:

    { yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 629:

    { yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 630:

    { yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 631:

    { yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 632:

    { yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 633:

    { yyval.expr = yyvsp[0].expr; ;}
    break;

  case 635:

    { yyval.expr = exprNode_cast (yyvsp[-3].tok, yyvsp[0].expr, yyvsp[-2].qtyp); ;}
    break;

  case 637:

    { yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 638:

    { yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 639:

    { yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 641:

    { yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 642:

    { yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 644:

    { yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 645:

    { yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 647:

    { yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 648:

    { yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 649:

    { yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 650:

    { yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 652:

    { yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 653:

    { yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 655:

    { yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 657:

    { yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 659:

    { yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 661:

    { yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 663:

    { yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 665:

    { context_enterTrueClause (yyvsp[-1].expr); ;}
    break;

  case 666:

    { context_enterFalseClause (yyvsp[-4].expr); ;}
    break;

  case 667:

    { yyval.expr = exprNode_cond (yyvsp[-6].expr, yyvsp[-3].expr, yyvsp[0].expr); ;}
    break;

  case 669:

    { yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 670:

    { yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 671:

    { yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 672:

    { yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 673:

    { yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 674:

    { yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 675:

    { yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 676:

    { yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 677:

    { yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 678:

    { yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 679:

    { yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;}
    break;

  case 680:

    { yyval.entry = yyvsp[0].entry; ;}
    break;

  case 681:

    { yyval.entry = uentry_undefined; ;}
    break;

  case 682:

    { context_enterDoWhileClause (); yyval.tok = yyvsp[0].tok; ;}
    break;

  case 683:

    { yyval.expr = exprNode_while (yyvsp[-1].expr, yyvsp[0].expr); context_exitWhileClause (yyvsp[-1].expr, yyvsp[0].expr); ;}
    break;

  case 684:

    { yyval.expr = exprNode_statement (exprNode_doWhile (yyvsp[-5].expr, yyvsp[-2].expr), yyvsp[0].tok); ;}
    break;

  case 685:

    { yyval.expr = exprNode_for (yyvsp[-1].expr, yyvsp[0].expr); context_exitForClause (yyvsp[-1].expr, yyvsp[0].expr); ;}
    break;

  case 686:

    { yyval.expr = exprNode_while (yyvsp[-1].expr, yyvsp[0].expr); context_exitWhileClause (yyvsp[-1].expr, yyvsp[0].expr); ;}
    break;

  case 687:

    { yyval.expr = exprNode_statement (exprNode_doWhile (yyvsp[-5].expr, yyvsp[-2].expr), yyvsp[0].tok); ;}
    break;

  case 688:

    { yyval.expr = exprNode_doWhile (yyvsp[-4].expr, yyvsp[-1].expr); ;}
    break;

  case 689:

    { yyval.expr = exprNode_for (yyvsp[-1].expr, yyvsp[0].expr); context_exitForClause (yyvsp[-1].expr, yyvsp[0].expr); ;}
    break;

  case 690:

    { yyval.expr = exprNode_goto (yyvsp[-1].cname); ;}
    break;

  case 691:

    { yyval.expr = exprNode_continue (yyvsp[-1].tok, BADTOK); ;}
    break;

  case 692:

    { yyval.expr = exprNode_continue (yyvsp[-2].tok, QINNERCONTINUE); ;}
    break;

  case 693:

    { yyval.expr = exprNode_break (yyvsp[-1].tok, BADTOK); ;}
    break;

  case 694:

    { yyval.expr = exprNode_break (yyvsp[-1].tok, QSWITCHBREAK); ;}
    break;

  case 695:

    { yyval.expr = exprNode_break (yyvsp[-1].tok, QLOOPBREAK); ;}
    break;

  case 696:

    { yyval.expr = exprNode_break (yyvsp[-1].tok, QINNERBREAK); ;}
    break;

  case 697:

    { yyval.expr = exprNode_break (yyvsp[-1].tok, QSAFEBREAK); ;}
    break;

  case 698:

    { yyval.expr = exprNode_nullReturn (yyvsp[-1].tok); ;}
    break;

  case 699:

    { yyval.expr = exprNode_return (yyvsp[-1].expr); ;}
    break;

  case 701:

    { ; ;}
    break;

  case 703:

    { ; ;}
    break;

  case 706:

    { yyval.cname = uentry_getName (yyvsp[0].entry); ;}
    break;

  case 707:

    { yyval.cname = uentry_getName (yyvsp[0].entry); ;}
    break;

  case 708:

    { yyval.cname = uentry_getName (yyvsp[0].entry); ;}
    break;

  case 709:

    { yyval.cname = yyvsp[0].cname; ;}
    break;

  case 711:

    { yyval.ctyp = ctype_unknown; ;}
    break;

  case 712:

    { yyval.ctyp = exprNode_getType (yyvsp[-1].expr); exprNode_free (yyvsp[-1].expr); ;}
    break;

  case 713:

    { yyval.ctyp = qtype_getType (yyvsp[-1].qtyp); ;}
    break;


    }

/* Line 999 of yacc.c.  */


  yyvsp -= yylen;
  yyssp -= yylen;


  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;


  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (YYPACT_NINF < yyn && yyn < YYLAST)
	{
	  YYSIZE_T yysize = 0;
	  int yytype = YYTRANSLATE (yychar);
	  char *yymsg;
	  int yyx, yycount;

	  yycount = 0;
	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  for (yyx = yyn < 0 ? -yyn : 0;
	       yyx < (int) (sizeof (yytname) / sizeof (char *)); yyx++)
	    if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	      yysize += yystrlen (yytname[yyx]) + 15, yycount++;
	  yysize += yystrlen ("syntax error, unexpected ") + 1;
	  yysize += yystrlen (yytname[yytype]);
	  yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg != 0)
	    {
	      char *yyp = yystpcpy (yymsg, "syntax error, unexpected ");
	      yyp = yystpcpy (yyp, yytname[yytype]);

	      if (yycount < 5)
		{
		  yycount = 0;
		  for (yyx = yyn < 0 ? -yyn : 0;
		       yyx < (int) (sizeof (yytname) / sizeof (char *));
		       yyx++)
		    if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
		      {
			const char *yyq = ! yycount ? ", expecting " : " or ";
			yyp = yystpcpy (yyp, yyq);
			yyp = yystpcpy (yyp, yytname[yyx]);
			yycount++;
		      }
		}
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
	    }
	  else
	    yyerror ("syntax error; also virtual memory exhausted");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror ("syntax error");
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      /* Return failure if at end of input.  */
      if (yychar == YYEOF)
        {
	  /* Pop the error token.  */
          YYPOPSTACK;
	  /* Pop the rest of the stack.  */
	  while (yyss < yyssp)
	    {
	      YYDSYMPRINTF ("Error: popping", yystos[*yyssp], yyvsp, yylsp);
	      yydestruct (yystos[*yyssp], yyvsp);
	      YYPOPSTACK;
	    }
	  YYABORT;
        }

      YYDSYMPRINTF ("Error: discarding", yytoken, &yylval, &yylloc);
      yydestruct (yytoken, &yylval);
      yychar = YYEMPTY;

    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*----------------------------------------------------.
| yyerrlab1 -- error raised explicitly by an action.  |
`----------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;

      YYDSYMPRINTF ("Error: popping", yystos[*yyssp], yyvsp, yylsp);
      yydestruct (yystos[yystate], yyvsp);
      yyvsp--;
      yystate = *--yyssp;

      YY_STACK_PRINT (yyss, yyssp);
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  YYDPRINTF ((stderr, "Shifting error token, "));

  *++yyvsp = yylval;


  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#ifndef yyoverflow
/*----------------------------------------------.
| yyoverflowlab -- parser overflow comes here.  |
`----------------------------------------------*/
yyoverflowlab:
  yyerror ("parser stack overflow");
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  return yyresult;
}





/*@-redecl@*/ /*@-namechecks@*/
extern char *yytext;
/*@=redecl@*/ /*@=namechecks@*/

# include "bison.reset"

void yyerror (/*@unused@*/ char *s) 
{
  static bool givehint = FALSE;

  if (context_inIterDef ())
    {
      llerror (FLG_SYNTAX, message ("Iter syntax not parseable: %s", 
				    context_inFunctionName ()));
    }
  else if (context_inIterEnd ())
    {
      llerror (FLG_SYNTAX, message ("Iter finalizer syntax not parseable: %s", 
				    context_inFunctionName ()));
    }
  else if (context_inMacro ())
    {
      llerror (FLG_SYNTAX, message ("Macro syntax not parseable: %s", 
				    context_inFunctionName ()));
      
      if (context_inUnknownMacro ())
	{
	  if (!givehint)
	    {
	      llhint (cstring_makeLiteral 
		     ("Precede macro definition with /*@notfunction@*/ "
		      "to suppress checking and force expansion"));
	      givehint = TRUE;
	    }
	}

      cscannerHelp_swallowMacro ();
      context_exitAllClausesQuiet ();
    }
  else
    {
      llparseerror (cstring_undefined);
    }
}













/*
** Resets all flags in bison.head
*/


/*@=allmacros@*/
/*@=boolint@*/
/*@=charint@*/
/*@=macroparams@*/
/*@=macroundef@*/
/*@=unreachable@*/
/*@=macrospec@*/
/*@=varuse@*/
/*@=ignorequals@*/
/*@=macrostmt@*/
/*@=noeffect@*/
/*@=shadow@*/
/*@=exitarg@*/
/*@=macroredef@*/
/*@=uniondef@*/
/*@=compdef@*/
/*@=matchfields@*/
/*@=exportlocal@*/
/*@=evalorderuncon@*/
/*@=exportheader@*/
/*@=typeuse@*/
/*@=redecl@*/
/*@=redef@*/
/*@=noparams@*/
/*@=ansireserved@*/
/*@=fielduse@*/
/*@=ifblock@*/
/*@=elseifcomplete@*/
/*@=whileblock@*/
/*@=forblock@*/
/*@=branchstate@*/
/*@=readonlytrans@*/
/*@=namechecks@*/
/*@=usedef@*/
/*@=systemunrecog@*/
/*@=dependenttrans@*/
/*@=unqualifiedtrans@*/
/*@=declundef@*/


/*drl added 11/27/2001*/
/*@=bounds@*/

/*drl added 12/11/2002*/
/*@=type@*/
