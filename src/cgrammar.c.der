/*
** Inserted at beginning of c files generated by bison
** REMEMBER:  Change bison.reset too.
*/

/*@-allmacros@*/
/*@+boolint@*/
/*@+charint@*/
/*@-macroparams@*/
/*@-macroundef@*/
/*@-unreachable@*/
/*@-macrospec@*/
/*@-varuse@*/
/*@+ignorequals@*/
/*@-macrostmt@*/
/*@-noeffect@*/
/*@-shadow@*/
/*@-exitarg@*/
/*@-macroredef@*/
/*@-uniondef@*/
/*@-compdef@*/
/*@-matchfields@*/
/*@-exportlocal@*/
/*@-evalorderuncon@*/
/*@-exportheader@*/
/*@-typeuse@*/
/*@-redecl@*/
/*@-redef@*/
/*@-noparams@*/
/*@-ansireserved@*/
/*@-fielduse@*/
/*@-ifblock@*/
/*@-elseifcomplete@*/
/*@-whileblock@*/
/*@-forblock@*/
/*@-branchstate@*/
/*@-readonlytrans@*/
/*@-namechecks@*/
/*@-usedef@*/
/*@-systemunrecog@*/
/*@-dependenttrans@*/
/*@-unqualifiedtrans@*/
/*@-nullassign@*/
/*@-nullpass@*/
/*@-nullptrarith*/
/*@-usereleased@*/
/*@-declundef@*/

/*drl added 11/27/2001*/
/*@-bounds@*/
/* < end of bison.head > */


/*  A Bison parser, made from cgrammar.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	BADTOK	257
#define	SKIPTOK	258
#define	CTOK_ELIPSIS	259
#define	CASE	260
#define	DEFAULT	261
#define	CIF	262
#define	CELSE	263
#define	SWITCH	264
#define	WHILE	265
#define	DO	266
#define	CFOR	267
#define	GOTO	268
#define	CONTINUE	269
#define	BREAK	270
#define	RETURN	271
#define	TSEMI	272
#define	TLBRACE	273
#define	TRBRACE	274
#define	TCOMMA	275
#define	TCOLON	276
#define	TASSIGN	277
#define	TLPAREN	278
#define	TRPAREN	279
#define	TLSQBR	280
#define	TRSQBR	281
#define	TDOT	282
#define	TAMPERSAND	283
#define	TEXCL	284
#define	TTILDE	285
#define	TMINUS	286
#define	TPLUS	287
#define	TMULT	288
#define	TDIV	289
#define	TPERCENT	290
#define	TLT	291
#define	TGT	292
#define	TCIRC	293
#define	TBAR	294
#define	TQUEST	295
#define	CSIZEOF	296
#define	CALIGNOF	297
#define	ARROW_OP	298
#define	CTYPEDEF	299
#define	COFFSETOF	300
#define	INC_OP	301
#define	DEC_OP	302
#define	LEFT_OP	303
#define	RIGHT_OP	304
#define	LE_OP	305
#define	GE_OP	306
#define	EQ_OP	307
#define	NE_OP	308
#define	AND_OP	309
#define	OR_OP	310
#define	MUL_ASSIGN	311
#define	DIV_ASSIGN	312
#define	MOD_ASSIGN	313
#define	ADD_ASSIGN	314
#define	SUB_ASSIGN	315
#define	LEFT_ASSIGN	316
#define	RIGHT_ASSIGN	317
#define	AND_ASSIGN	318
#define	XOR_ASSIGN	319
#define	OR_ASSIGN	320
#define	CSTRUCT	321
#define	CUNION	322
#define	CENUM	323
#define	VA_ARG	324
#define	VA_DCL	325
#define	QWARN	326
#define	QGLOBALS	327
#define	QMODIFIES	328
#define	QNOMODS	329
#define	QCONSTANT	330
#define	QFUNCTION	331
#define	QITER	332
#define	QDEFINES	333
#define	QUSES	334
#define	QALLOCATES	335
#define	QSETS	336
#define	QRELEASES	337
#define	QPRECLAUSE	338
#define	QPOSTCLAUSE	339
#define	QINVARIANT	340
#define	QALT	341
#define	QUNDEF	342
#define	QKILLED	343
#define	QENDMACRO	344
#define	LLMACRO	345
#define	LLMACROITER	346
#define	LLMACROEND	347
#define	TENDMACRO	348
#define	QSWITCHBREAK	349
#define	QLOOPBREAK	350
#define	QINNERBREAK	351
#define	QSAFEBREAK	352
#define	QINNERCONTINUE	353
#define	QFALLTHROUGH	354
#define	QLINTNOTREACHED	355
#define	QLINTFALLTHROUGH	356
#define	QLINTFALLTHRU	357
#define	QARGSUSED	358
#define	QPRINTFLIKE	359
#define	QLINTPRINTFLIKE	360
#define	QSCANFLIKE	361
#define	QMESSAGELIKE	362
#define	QNOTREACHED	363
#define	QCONST	364
#define	QVOLATILE	365
#define	QINLINE	366
#define	QEXTENSION	367
#define	QEXTERN	368
#define	QSTATIC	369
#define	QAUTO	370
#define	QREGISTER	371
#define	QOUT	372
#define	QIN	373
#define	QYIELD	374
#define	QONLY	375
#define	QTEMP	376
#define	QSHARED	377
#define	QREF	378
#define	QUNIQUE	379
#define	QCHECKED	380
#define	QUNCHECKED	381
#define	QCHECKEDSTRICT	382
#define	QCHECKMOD	383
#define	QKEEP	384
#define	QKEPT	385
#define	QPARTIAL	386
#define	QSPECIAL	387
#define	QOWNED	388
#define	QDEPENDENT	389
#define	QRETURNED	390
#define	QEXPOSED	391
#define	QNULL	392
#define	QOBSERVER	393
#define	QISNULL	394
#define	QEXITS	395
#define	QMAYEXIT	396
#define	QNEVEREXIT	397
#define	QTRUEEXIT	398
#define	QFALSEEXIT	399
#define	QLONG	400
#define	QSIGNED	401
#define	QUNSIGNED	402
#define	QSHORT	403
#define	QUNUSED	404
#define	QSEF	405
#define	QNOTNULL	406
#define	QRELNULL	407
#define	QABSTRACT	408
#define	QCONCRETE	409
#define	QMUTABLE	410
#define	QIMMUTABLE	411
#define	QTRUENULL	412
#define	QFALSENULL	413
#define	QEXTERNAL	414
#define	QREFCOUNTED	415
#define	QREFS	416
#define	QNEWREF	417
#define	QTEMPREF	418
#define	QKILLREF	419
#define	QRELDEF	420
#define	CGCHAR	421
#define	CBOOL	422
#define	CINT	423
#define	CGFLOAT	424
#define	CDOUBLE	425
#define	CVOID	426
#define	QANYTYPE	427
#define	QINTEGRALTYPE	428
#define	QUNSIGNEDINTEGRALTYPE	429
#define	QSIGNEDINTEGRALTYPE	430
#define	QNULLTERMINATED	431
#define	QSETBUFFERSIZE	432
#define	QSETSTRINGLENGTH	433
#define	QMAXSET	434
#define	QMAXREAD	435
#define	QTESTINRANGE	436
#define	TCAND	437
#define	IDENTIFIER	438
#define	NEW_IDENTIFIER	439
#define	TYPE_NAME_OR_ID	440
#define	CANNOTATION	441
#define	CCONSTANT	442
#define	ITER_NAME	443
#define	ITER_ENDNAME	444
#define	TYPE_NAME	445
#define	METASTATE_NAME	446


/*
**
** cgrammar.y
**
** Yacc/Bison grammar for extended ANSI C used by Splint.
**
** original grammar by Nate Osgood ---
**    hacrat@catfish.lcs.mit.edu Mon Jun 14 13:06:32 1993
**
** changes for Splint --- handle typedef names correctly
** fix struct/union parsing bug (empty struct is accepted)
** add productions to handle macros --- require
** error correction --- main source of conflicts in grammar.
** need to process initializations sequentially, L->R
**
** production names are cryptic, so more productions fit on one line
**
** conflicts:  87 shift/reduce, 18 reduce/reduce
** most of these are due to handling macros
** a few are due to handling type expressions
*/

/*@=allmacros@*/

extern int yylex ();
extern void swallowMacro (void);
extern void yyerror (char *);

# include "splintMacros.nf"
# include "basic.h"
# include "cscanner.h"
# include "cgrammar.h"
# include "exprChecks.h"

/*@-allmacros@*/
/*@-matchfields@*/

# define SHOWCSYM FALSE

/*
** This is necessary, or else when the bison-generated code #include's malloc.h,
** there will be a parse error.
**
** Unfortunately, it means the error checking on malloc, etc. is lost for allocations
** in bison-generated files under Win32.
*/

# ifdef WIN32
# undef malloc
# undef calloc
# undef realloc
# endif


typedef union
{
  lltok tok;
  int count;
  qual typequal;
  qualList tquallist;
  ctype ctyp;
  /*@dependent@*/ sRef sr;
  /*@only@*/ sRef osr;

  /*@only@*/ functionClauseList funcclauselist;
  /*@only@*/ functionClause funcclause;  
  /*@only@*/ flagSpec flagspec;
  /*@only@*/ globalsClause globsclause;
  /*@only@*/ modifiesClause modsclause;
  /*@only@*/ warnClause warnclause;
  /*@only@*/ stateClause stateclause;

  /*@only@*/ functionConstraint fcnconstraint; 

  /*@only@*/ metaStateConstraint msconstraint;
  /*@only@*/ metaStateSpecifier msspec;
  /*@only@*/ metaStateExpression msexpr;
  /*@observer@*/ metaStateInfo msinfo;

  /*@only@*/ sRefList srlist;
  /*@only@*/ globSet globset;
  /*@only@*/ qtype qtyp;
  /*@only@*/ cstring cname;
  /*@observer@*/ annotationInfo annotation;
  /*@only@*/ idDecl ntyp;
  /*@only@*/ idDeclList ntyplist;
  /*@only@*/ uentryList flist;
  /*@owned@*/ uentryList entrylist;
  /*@observer@*/ /*@dependent@*/ uentry entry;
  /*@only@*/ uentry oentry;
  /*@only@*/ exprNode expr;
  /*@only@*/ enumNameList enumnamelist;
  /*@only@*/ exprNodeList exprlist;
  /*@only@*/ sRefSet srset; 
  /*@only@*/ cstringList cstringlist;

  /*drl
    added 1/19/2001
  */
  constraint con;
  constraintList conL;
  constraintExpr conE;
  /* drl */  
} YYSTYPE;
#ifndef YYDEBUG
#define YYDEBUG 1
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1210
#define	YYFLAG		-32768
#define	YYNTBASE	193

#define YYTRANSLATE(x) ((unsigned)(x) <= 446 ? yytranslate[x] : 454)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
   177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
   187,   188,   189,   190,   191,   192
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     1,     3,     5,     8,    11,    13,    15,    17,    19,
    21,    23,    25,    34,    46,    47,    53,    55,    59,    61,
    64,    66,    73,    77,    84,    85,    92,    93,   101,   103,
   110,   114,   121,   122,   129,   130,   138,   139,   140,   151,
   155,   159,   163,   166,   168,   172,   173,   178,   179,   184,
   186,   190,   192,   194,   196,   200,   202,   206,   208,   210,
   212,   214,   216,   218,   223,   229,   231,   233,   235,   237,
   241,   246,   249,   253,   257,   261,   263,   265,   267,   268,
   271,   272,   275,   277,   279,   281,   283,   285,   287,   289,
   291,   293,   295,   297,   299,   302,   303,   308,   310,   313,
   314,   318,   320,   324,   326,   328,   329,   332,   336,   339,
   341,   345,   348,   349,   352,   354,   356,   358,   360,   362,
   364,   366,   368,   370,   372,   374,   376,   378,   380,   382,
   384,   388,   389,   393,   394,   395,   400,   403,   406,   408,
   410,   412,   416,   421,   424,   428,   432,   436,   438,   440,
   442,   446,   448,   450,   454,   459,   462,   466,   470,   474,
   475,   477,   479,   483,   485,   487,   489,   493,   495,   497,
   499,   504,   508,   513,   520,   526,   532,   535,   538,   540,
   544,   546,   549,   552,   555,   558,   561,   564,   567,   570,
   572,   574,   578,   580,   590,   591,   595,   600,   603,   608,
   611,   613,   618,   620,   624,   628,   632,   634,   638,   642,
   644,   648,   652,   654,   658,   662,   666,   670,   672,   676,
   680,   682,   686,   688,   692,   694,   698,   700,   701,   706,
   708,   709,   714,   716,   717,   718,   726,   728,   732,   736,
   740,   744,   748,   752,   756,   760,   764,   768,   772,   774,
   778,   779,   781,   783,   785,   787,   789,   793,   794,   804,
   805,   817,   820,   821,   828,   829,   838,   843,   848,   849,
   850,   853,   855,   860,   861,   866,   868,   872,   877,   880,
   883,   886,   888,   891,   895,   898,   900,   904,   906,   908,
   910,   912,   914,   917,   918,   925,   928,   931,   932,   939,
   940,   946,   948,   950,   952,   954,   956,   958,   960,   962,
   964,   966,   968,   970,   972,   974,   976,   978,   980,   982,
   984,   986,   988,   990,   992,   994,   996,   998,  1000,  1002,
  1004,  1006,  1008,  1010,  1012,  1014,  1016,  1018,  1020,  1022,
  1024,  1026,  1028,  1030,  1032,  1034,  1036,  1038,  1040,  1042,
  1044,  1046,  1048,  1050,  1053,  1056,  1059,  1062,  1065,  1068,
  1071,  1074,  1077,  1080,  1083,  1086,  1089,  1092,  1095,  1098,
  1101,  1104,  1107,  1110,  1113,  1116,  1119,  1122,  1125,  1129,
  1131,  1136,  1138,  1142,  1145,  1148,  1151,  1152,  1154,  1155,
  1156,  1157,  1170,  1171,  1172,  1184,  1191,  1198,  1199,  1200,
  1211,  1212,  1213,  1224,  1230,  1236,  1241,  1246,  1247,  1249,
  1251,  1254,  1260,  1264,  1267,  1272,  1274,  1278,  1283,  1290,
  1291,  1300,  1305,  1307,  1311,  1314,  1316,  1321,  1323,  1325,
  1328,  1331,  1333,  1336,  1338,  1341,  1343,  1345,  1347,  1350,
  1352,  1355,  1358,  1362,  1364,  1368,  1370,  1374,  1376,  1378,
  1382,  1383,  1386,  1387,  1392,  1397,  1399,  1401,  1404,  1406,
  1408,  1411,  1412,  1414,  1420,  1423,  1427,  1431,  1436,  1440,
  1445,  1450,  1456,  1458,  1460,  1462,  1464,  1466,  1468,  1470,
  1472,  1474,  1476,  1478,  1480,  1483,  1486,  1494,  1501,  1504,
  1505,  1506,  1517,  1518,  1525,  1527,  1529,  1531,  1533,  1536,
  1538,  1540,  1542,  1544,  1546,  1548,  1550,  1554,  1556,  1557,
  1561,  1564,  1567,  1569,  1571,  1573,  1575,  1577,  1579,  1581,
  1583,  1585,  1587,  1591,  1593,  1595,  1598,  1601,  1602,  1605,
  1606,  1611,  1612,  1619,  1620,  1624,  1625,  1631,  1635,  1638,
  1642,  1643,  1644,  1645,  1646,  1647,  1649,  1652,  1655,  1659,
  1662,  1666,  1670,  1675,  1678,  1681,  1685,  1689,  1694,  1696,
  1699,  1701,  1704,  1706,  1709,  1711,  1714,  1716,  1719,  1721,
  1726,  1729,  1730,  1736,  1737,  1744,  1749,  1754,  1755,  1756,
  1767,  1769,  1770,  1775,  1777,  1779,  1781,  1783,  1785,  1788,
  1790,  1794,  1796,  1801,  1805,  1810,  1817,  1823,  1829,  1832,
  1835,  1837,  1840,  1843,  1846,  1849,  1852,  1855,  1858,  1861,
  1863,  1865,  1870,  1872,  1876,  1880,  1884,  1886,  1890,  1894,
  1896,  1900,  1904,  1906,  1910,  1914,  1918,  1922,  1924,  1928,
  1932,  1934,  1938,  1940,  1944,  1946,  1950,  1952,  1956,  1958,
  1962,  1964,  1965,  1966,  1974,  1976,  1980,  1984,  1988,  1992,
  1996,  2000,  2004,  2008,  2012,  2016,  2020,  2022,  2023,  2025,
  2028,  2036,  2039,  2042,  2050,  2057,  2060,  2064,  2067,  2071,
  2074,  2078,  2082,  2086,  2090,  2093,  2097,  2098,  2100,  2102,
  2104,  2106,  2108,  2110,  2112,  2114
};

static const short yyrhs[] = {    -1,
   194,     0,   195,     0,   194,   195,     0,   256,   450,     0,
   196,     0,   197,     0,   207,     0,   210,     0,   293,     0,
    18,     0,     1,     0,    76,   334,   348,   358,   348,   450,
   301,    90,     0,    76,   334,   348,   358,   348,    23,   301,
   306,   305,   450,    90,     0,     0,    77,   198,   199,   450,
    90,     0,   200,     0,   334,   348,   200,     0,   204,     0,
   362,   204,     0,   452,     0,   301,    24,   348,   358,   301,
    25,     0,   201,    26,    27,     0,   201,    26,   301,   292,
    27,   348,     0,     0,   201,   302,    24,    25,   202,   228,
     0,     0,   201,   302,    24,   359,    25,   203,   228,     0,
   452,     0,   301,    24,   348,   200,   301,    25,     0,   204,
    26,    27,     0,   204,    26,   301,   292,    27,   348,     0,
     0,   204,   302,    24,    25,   205,   229,     0,     0,   204,
   302,    24,   359,    25,   206,   229,     0,     0,     0,    78,
   452,    24,   359,    25,   208,   229,   209,   450,    90,     0,
    91,   389,    94,     0,    92,   375,    94,     0,    93,   376,
    94,     0,    91,    94,     0,   251,     0,   213,    23,   216,
     0,     0,   225,   214,    22,   217,     0,     0,     5,   215,
    22,   217,     0,   213,     0,   213,    40,   216,     0,   192,
     0,   183,     0,    55,     0,   220,   218,   219,     0,   220,
     0,   223,   222,   223,     0,   180,     0,   181,     0,    52,
     0,    51,     0,    53,     0,   224,     0,   226,    24,   223,
    25,     0,    24,   223,   227,   223,    25,     0,   225,     0,
   188,     0,   451,     0,   185,     0,   225,    26,    27,     0,
   225,    26,   188,    27,     0,    34,   225,     0,    24,   225,
    25,     0,   225,    28,   452,     0,   225,    44,   452,     0,
   221,     0,    33,     0,    32,     0,     0,   230,   228,     0,
     0,   231,   229,     0,   232,     0,   236,     0,   235,     0,
   312,     0,   315,     0,   242,     0,   233,     0,   237,     0,
   235,     0,   313,     0,   317,     0,   243,     0,   233,    90,
     0,     0,    73,   234,   244,   450,     0,    75,     0,   237,
    90,     0,     0,    74,   238,   257,     0,   240,     0,   240,
    40,   239,     0,   185,     0,   242,     0,     0,   243,    90,
     0,    72,   239,   426,     0,    72,   239,     0,   245,     0,
   244,    21,   245,     0,   246,   247,     0,     0,   248,   246,
     0,   451,     0,   185,     0,   293,     0,    88,     0,    89,
     0,   118,     0,   119,     0,   132,     0,    79,     0,    80,
     0,    81,     0,    82,     0,    83,     0,    84,     0,    85,
     0,   358,     0,   334,   348,   358,     0,     0,    19,   253,
   406,     0,     0,     0,   254,   410,   255,   399,     0,   211,
   252,     0,   260,   450,     0,   450,     0,   451,     0,   185,
     0,   258,    26,    27,     0,   258,    26,   259,    27,     0,
    34,   258,     0,    24,   258,    25,     0,   258,    28,   452,
     0,   258,    44,   452,     0,   258,     0,   426,     0,   258,
     0,   260,    21,   258,     0,   451,     0,   185,     0,   261,
    26,    27,     0,   261,    26,   259,    27,     0,    34,   261,
     0,    24,   261,    25,     0,   261,    28,   452,     0,   261,
    44,   452,     0,     0,   263,     0,   261,     0,   263,    21,
   261,     0,   451,     0,   185,     0,   426,     0,    24,   290,
    25,     0,   186,     0,   113,     0,   264,     0,   265,    26,
   290,    27,     0,   265,    24,    25,     0,   265,    24,   266,
    25,     0,    70,    24,   289,    21,   370,    25,     0,   265,
   348,    28,   452,   301,     0,   265,   348,    44,   452,   301,
     0,   265,    47,     0,   265,    48,     0,   289,     0,   266,
    21,   289,     0,   265,     0,    47,   267,     0,    48,   267,
     0,    29,   273,     0,    34,   273,     0,    33,   273,     0,
    32,   273,     0,    31,   273,     0,    30,   273,     0,   270,
     0,   269,     0,   268,    28,   452,     0,   452,     0,    46,
   301,    24,   370,   348,    21,   268,    25,   301,     0,     0,
   301,   271,   272,     0,    42,    24,   370,    25,     0,    42,
   267,     0,    43,    24,   370,    25,     0,    43,   267,     0,
   267,     0,    24,   370,    25,   273,     0,   273,     0,   274,
    34,   273,     0,   274,    35,   273,     0,   274,    36,   273,
     0,   274,     0,   275,    33,   274,     0,   275,    32,   274,
     0,   275,     0,   276,    49,   275,     0,   276,    50,   275,
     0,   276,     0,   277,    37,   276,     0,   277,    38,   276,
     0,   277,    51,   276,     0,   277,    52,   276,     0,   277,
     0,   278,    53,   277,     0,   278,    54,   277,     0,   278,
     0,   279,    29,   278,     0,   279,     0,   280,    39,   279,
     0,   280,     0,   281,    40,   280,     0,   281,     0,     0,
   282,    55,   283,   281,     0,   282,     0,     0,   284,    56,
   285,   282,     0,   284,     0,     0,     0,   284,    41,   287,
   290,    22,   288,   286,     0,   286,     0,   267,    23,   289,
     0,   267,    57,   289,     0,   267,    58,   289,     0,   267,
    59,   289,     0,   267,    60,   289,     0,   267,    61,   289,
     0,   267,    62,   289,     0,   267,    63,   289,     0,   267,
    64,   289,     0,   267,    65,   289,     0,   267,    66,   289,
     0,   289,     0,   290,    21,   289,     0,     0,   290,     0,
   286,     0,   294,     0,    71,     0,   299,     0,   334,   301,
    18,     0,     0,   334,   348,   358,   348,   295,   301,   305,
    18,   301,     0,     0,   334,   348,   358,   348,    23,   296,
   301,   306,   305,    18,   301,     0,   358,   348,     0,     0,
   358,   348,    23,   298,   301,   306,     0,     0,    45,   334,
   300,   348,   303,   301,   241,    18,     0,    45,   334,   301,
    18,     0,    45,   303,   301,    18,     0,     0,     0,   304,
   301,     0,   297,     0,   303,    21,   348,   297,     0,     0,
   305,    21,   348,   297,     0,   289,     0,    19,   310,    20,
     0,    19,   310,    21,    20,     0,   307,   306,     0,   308,
    23,     0,   452,    22,     0,   309,     0,   308,   309,     0,
    26,   292,    27,     0,    28,   452,     0,   306,     0,   310,
    21,   306,     0,   114,     0,   112,     0,   115,     0,   116,
     0,   117,     0,   313,    90,     0,     0,   249,   348,   314,
   263,   450,   301,     0,   317,    90,     0,   250,   348,     0,
     0,   316,   323,   318,   262,   450,   301,     0,     0,   316,
   319,   320,   450,   301,     0,   219,     0,   212,     0,   141,
     0,   142,     0,   144,     0,   145,     0,   143,     0,   126,
     0,   129,     0,   127,     0,   128,     0,   134,     0,   135,
     0,   120,     0,   122,     0,   121,     0,   130,     0,   131,
     0,   123,     0,   125,     0,   138,     0,   140,     0,   153,
     0,   152,     0,   137,     0,   139,     0,   177,     0,   187,
     0,   136,     0,   151,     0,   150,     0,   160,     0,   158,
     0,   159,     0,   154,     0,   155,     0,   156,     0,   157,
     0,   161,     0,   162,     0,   165,     0,   166,     0,   163,
     0,   164,     0,   149,     0,   146,     0,   147,     0,   148,
     0,   118,     0,   119,     0,   132,     0,   133,     0,   110,
   301,     0,   111,   301,     0,   330,   301,     0,   323,   301,
     0,   321,   301,     0,   324,   301,     0,   322,   301,     0,
   326,   301,     0,   325,   301,     0,   327,   301,     0,   328,
   301,     0,   167,   348,     0,   169,   348,     0,   168,   348,
     0,   170,   348,     0,   171,   348,     0,   172,   348,     0,
   173,   348,     0,   174,   348,     0,   175,   348,     0,   176,
   348,     0,   453,   348,     0,   339,   348,     0,   353,   348,
     0,   329,   348,     0,   301,   334,   301,     0,   336,     0,
   336,    87,   335,    90,     0,   370,     0,   370,    21,   335,
     0,   311,   337,     0,   331,   337,     0,   332,   337,     0,
     0,   334,     0,     0,     0,     0,   348,    67,   452,   301,
    19,   340,   403,   349,   404,   341,    20,   338,     0,     0,
     0,   348,    68,   452,   301,    19,   342,   403,   349,   404,
   343,    20,     0,   348,    67,   452,   301,    19,    20,     0,
   348,    68,   452,   301,    19,    20,     0,     0,     0,   348,
    67,   301,    19,   344,   403,   349,   404,   345,    20,     0,
     0,     0,   348,    68,   301,    19,   346,   403,   349,   404,
   347,    20,     0,   348,    67,   301,    19,    20,     0,   348,
    68,   301,    19,    20,     0,   348,    67,   452,   348,     0,
   348,    68,   452,   348,     0,     0,   350,     0,   210,     0,
   349,   350,     0,   334,   348,   351,   301,    18,     0,   334,
   301,    18,     0,   352,   348,     0,   351,    21,   352,   348,
     0,   358,     0,    22,   301,   292,     0,   358,    22,   301,
   292,     0,   348,    69,    19,   355,    20,   301,     0,     0,
   348,    69,   452,    19,   354,   355,    20,   301,     0,   348,
    69,   452,   301,     0,   356,     0,   355,    21,   356,     0,
   355,    21,     0,   452,     0,   452,    23,   301,   292,     0,
   201,     0,   372,     0,   362,   191,     0,   362,   357,     0,
   201,     0,   362,   201,     0,   365,     0,   348,   363,     0,
   110,     0,   111,     0,   360,     0,   361,   360,     0,    34,
     0,    34,   361,     0,    34,   362,     0,    34,   361,   362,
     0,   364,     0,   364,    21,     5,     0,   452,     0,   364,
    21,   452,     0,     5,     0,   366,     0,   366,    21,     5,
     0,     0,   367,   369,     0,     0,   366,    21,   368,   369,
     0,   301,   334,   357,   301,     0,   452,     0,   333,     0,
   333,   371,     0,   362,     0,   373,     0,   362,   373,     0,
     0,   373,     0,   301,    24,   348,   371,    25,     0,    26,
    27,     0,    26,   292,    27,     0,   373,    26,    27,     0,
   373,    26,   292,    27,     0,   301,    24,    25,     0,   301,
    24,   365,    25,     0,   373,   301,    24,    25,     0,   373,
   301,    24,   365,    25,     0,   391,     0,   393,     0,   396,
     0,   399,     0,   412,     0,   415,     0,   447,     0,   420,
     0,   449,     0,   377,     0,   375,     0,   384,     0,   377,
   384,     0,   419,   377,     0,   446,   390,    11,    24,   290,
    25,    18,     0,   446,   390,    11,    24,   290,    25,     0,
   379,   384,     0,     0,     0,    13,    24,   291,    18,   291,
    18,   380,   291,   381,    25,     0,     0,   189,   401,    24,
   383,   423,    25,     0,   190,     0,   391,     0,   393,     0,
   396,     0,   387,   410,     0,   387,     0,   388,     0,   412,
     0,   385,     0,   378,     0,   382,     0,   449,     0,    24,
   384,    25,     0,     1,     0,     0,   414,   386,   384,     0,
   401,    19,     0,   405,    20,     0,   390,     0,   409,     0,
   391,     0,   393,     0,   396,     0,   400,     0,   413,     0,
   415,     0,   420,     0,   448,     0,    24,   390,    25,     0,
   449,     0,     1,     0,   452,    22,     0,   109,   374,     0,
     0,   100,   392,     0,     0,     6,   292,   394,    22,     0,
     0,   100,   392,     6,   292,   395,    22,     0,     0,     7,
   397,    22,     0,     0,   100,   392,     7,   398,    22,     0,
    24,   399,    25,     0,   401,   407,     0,   401,   408,   402,
     0,     0,     0,     0,     0,     0,    20,     0,   109,    20,
     0,   411,    20,     0,   411,   109,    20,     0,   410,    20,
     0,   410,   109,    20,     0,   410,   411,    20,     0,   410,
   411,   109,    20,     0,    19,   406,     0,    19,    20,     0,
    19,   409,    20,     0,    19,   410,    20,     0,    19,   410,
   411,    20,     0,   390,     0,   409,   390,     0,   293,     0,
   410,   293,     0,   374,     0,   411,   374,     0,    18,     0,
   290,    18,     0,    18,     0,   290,    18,     0,   290,     0,
     8,    24,   290,    25,     0,   414,   374,     0,     0,   414,
   374,     9,   416,   374,     0,     0,    10,    24,   290,   417,
    25,   374,     0,    11,    24,   290,    25,     0,    11,    24,
   290,    25,     0,     0,     0,   189,   421,   401,    24,   422,
   423,    25,   399,   445,   402,     0,   425,     0,     0,   423,
   424,    21,   425,     0,   444,     0,   451,     0,   186,     0,
   185,     0,   188,     0,   426,   188,     0,   426,     0,    24,
   290,    25,     0,   427,     0,   265,    26,   290,    27,     0,
   265,    24,    25,     0,   265,    24,   266,    25,     0,    70,
    24,   289,    21,   370,    25,     0,   265,   348,    28,   452,
   301,     0,   265,   348,    44,   452,   301,     0,   265,    47,
     0,   265,    48,     0,   428,     0,    47,   267,     0,    48,
   267,     0,    29,   273,     0,    34,   273,     0,    33,   273,
     0,    32,   273,     0,    31,   273,     0,    30,   273,     0,
   270,     0,   429,     0,    24,   370,    25,   273,     0,   430,
     0,   274,    34,   273,     0,   274,    35,   273,     0,   274,
    36,   273,     0,   431,     0,   275,    33,   274,     0,   275,
    32,   274,     0,   432,     0,   276,    49,   275,     0,   276,
    50,   275,     0,   433,     0,   277,    37,   276,     0,   277,
    38,   276,     0,   277,    51,   276,     0,   277,    52,   276,
     0,   434,     0,   278,    53,   277,     0,   278,    54,   277,
     0,   435,     0,   279,    29,   278,     0,   436,     0,   280,
    39,   279,     0,   437,     0,   281,    40,   280,     0,   438,
     0,   282,    55,   281,     0,   439,     0,   284,    56,   282,
     0,   440,     0,     0,     0,   284,    41,   442,   290,    22,
   443,   286,     0,   441,     0,   267,    23,   289,     0,   267,
    57,   289,     0,   267,    58,   289,     0,   267,    59,   289,
     0,   267,    60,   289,     0,   267,    61,   289,     0,   267,
    62,   289,     0,   267,    63,   289,     0,   267,    64,   289,
     0,   267,    65,   289,     0,   267,    66,   289,     0,   190,
     0,     0,    12,     0,   418,   374,     0,   446,   374,    11,
    24,   290,    25,    18,     0,   379,   374,     0,   418,   390,
     0,   446,   390,    11,    24,   290,    25,    18,     0,   446,
   390,    11,    24,   290,    25,     0,   379,   390,     0,    14,
   452,    18,     0,    15,    18,     0,    99,    15,    18,     0,
    16,    18,     0,    95,    16,    18,     0,    96,    16,    18,
     0,    97,    16,    18,     0,    98,    16,    18,     0,    17,
    18,     0,    17,   290,    18,     0,     0,    18,     0,   184,
     0,   185,     0,   189,     0,   190,     0,   451,     0,   186,
     0,   191,     0,   186,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   324,   325,   328,   329,   332,   333,   334,   335,   336,   337,
   338,   339,   342,   344,   348,   348,   355,   361,   365,   366,
   370,   371,   373,   375,   390,   393,   403,   406,   414,   415,
   417,   419,   435,   438,   446,   449,   457,   459,   459,   463,
   464,   465,   466,   469,   472,   476,   476,   479,   479,   484,
   485,   488,   493,   494,   497,   498,   501,   506,   507,   510,
   511,   512,   515,   516,   517,   522,   523,   526,   528,   530,
   532,   541,   543,   545,   547,   563,   567,   568,   575,   576,
   584,   586,   590,   591,   592,   593,   594,   595,   598,   599,
   600,   601,   602,   603,   606,   609,   610,   617,   620,   623,
   629,   637,   639,   643,   646,   647,   650,   653,   659,   663,
   664,   667,   670,   671,   674,   675,   676,   679,   680,   681,
   682,   683,   686,   687,   688,   689,   690,   693,   694,   697,
   703,   707,   709,   713,   714,   716,   723,   733,   734,   737,
   738,   739,   740,   741,   742,   743,   744,   748,   749,   753,
   754,   757,   759,   761,   762,   763,   764,   765,   767,   771,
   772,   775,   779,   791,   792,   793,   794,   795,   796,   799,
   800,   801,   802,   803,   804,   805,   806,   807,   810,   811,
   814,   815,   816,   817,   818,   819,   820,   821,   822,   823,
   824,   827,   828,   831,   835,   836,   839,   840,   841,   842,
   845,   846,   850,   851,   852,   853,   856,   857,   858,   861,
   862,   863,   866,   867,   868,   869,   870,   873,   874,   875,
   878,   879,   882,   883,   887,   888,   891,   892,   897,   903,
   904,   910,   916,   917,   917,   919,   922,   923,   924,   925,
   926,   927,   928,   929,   930,   931,   932,   933,   936,   937,
   940,   941,   944,   949,   950,   951,   954,   968,   973,   979,
   981,   987,   992,   992,   996,   997,   999,  1000,  1003,  1006,
  1009,  1012,  1013,  1016,  1017,  1020,  1021,  1022,  1023,  1030,
  1031,  1035,  1036,  1039,  1040,  1043,  1045,  1054,  1055,  1056,
  1057,  1058,  1061,  1064,  1070,  1079,  1082,  1085,  1092,  1099,
  1105,  1130,  1131,  1134,  1135,  1136,  1137,  1138,  1141,  1142,
  1143,  1144,  1147,  1148,  1149,  1150,  1151,  1152,  1153,  1154,
  1155,  1156,  1157,  1158,  1159,  1160,  1161,  1162,  1163,  1167,
  1168,  1171,  1172,  1175,  1176,  1179,  1180,  1181,  1182,  1185,
  1186,  1187,  1188,  1189,  1190,  1193,  1194,  1195,  1196,  1199,
  1200,  1201,  1202,  1205,  1206,  1207,  1208,  1209,  1210,  1211,
  1212,  1213,  1214,  1215,  1222,  1223,  1224,  1225,  1226,  1227,
  1228,  1229,  1230,  1231,  1232,  1233,  1234,  1235,  1238,  1242,
  1243,  1247,  1248,  1252,  1253,  1254,  1257,  1258,  1262,  1269,
  1271,  1273,  1274,  1276,  1278,  1279,  1281,  1283,  1285,  1287,
  1288,  1289,  1292,  1293,  1295,  1297,  1298,  1301,  1304,  1305,
  1306,  1309,  1311,  1315,  1317,  1321,  1322,  1323,  1327,  1329,
  1329,  1331,  1334,  1336,  1338,  1341,  1346,  1353,  1354,  1355,
  1362,  1366,  1367,  1371,  1372,  1375,  1376,  1379,  1380,  1383,
  1384,  1385,  1386,  1389,  1390,  1393,  1394,  1397,  1398,  1399,
  1402,  1402,  1403,  1404,  1407,  1419,  1435,  1436,  1439,  1440,
  1441,  1444,  1445,  1448,  1450,  1451,  1453,  1454,  1456,  1458,
  1460,  1462,  1468,  1469,  1470,  1471,  1472,  1473,  1474,  1475,
  1476,  1480,  1483,  1486,  1487,  1491,  1493,  1495,  1497,  1501,
  1502,  1504,  1508,  1510,  1512,  1515,  1516,  1517,  1518,  1519,
  1520,  1521,  1522,  1523,  1524,  1525,  1526,  1527,  1530,  1531,
  1536,  1539,  1542,  1543,  1546,  1547,  1548,  1549,  1550,  1551,
  1552,  1553,  1554,  1555,  1556,  1559,  1560,  1567,  1568,  1574,
  1575,  1576,  1577,  1580,  1581,  1582,  1583,  1586,  1587,  1591,
  1594,  1597,  1600,  1603,  1606,  1609,  1610,  1611,  1612,  1614,
  1615,  1617,  1619,  1625,  1629,  1631,  1633,  1635,  1639,  1640,
  1643,  1644,  1647,  1648,  1651,  1652,  1655,  1656,  1657,  1660,
  1673,  1678,  1679,  1683,  1684,  1687,  1692,  1695,  1696,  1697,
  1705,  1706,  1706,  1710,  1711,  1712,  1723,  1730,  1731,  1734,
  1735,  1738,  1739,  1740,  1741,  1742,  1744,  1745,  1746,  1747,
  1750,  1751,  1752,  1753,  1754,  1755,  1756,  1757,  1758,  1759,
  1762,  1763,  1766,  1767,  1768,  1769,  1772,  1773,  1774,  1777,
  1778,  1779,  1782,  1783,  1784,  1785,  1786,  1789,  1790,  1791,
  1794,  1795,  1798,  1799,  1803,  1804,  1807,  1808,  1811,  1812,
  1815,  1816,  1817,  1818,  1821,  1822,  1823,  1824,  1825,  1826,
  1827,  1828,  1829,  1830,  1831,  1832,  1835,  1836,  1839,  1842,
  1844,  1846,  1850,  1851,  1853,  1855,  1858,  1859,  1860,  1862,
  1863,  1864,  1865,  1866,  1867,  1868,  1871,  1872,  1875,  1878,
  1879,  1880,  1881,  1882,  1885,  1886
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","BADTOK",
"SKIPTOK","CTOK_ELIPSIS","CASE","DEFAULT","CIF","CELSE","SWITCH","WHILE","DO",
"CFOR","GOTO","CONTINUE","BREAK","RETURN","TSEMI","TLBRACE","TRBRACE","TCOMMA",
"TCOLON","TASSIGN","TLPAREN","TRPAREN","TLSQBR","TRSQBR","TDOT","TAMPERSAND",
"TEXCL","TTILDE","TMINUS","TPLUS","TMULT","TDIV","TPERCENT","TLT","TGT","TCIRC",
"TBAR","TQUEST","CSIZEOF","CALIGNOF","ARROW_OP","CTYPEDEF","COFFSETOF","INC_OP",
"DEC_OP","LEFT_OP","RIGHT_OP","LE_OP","GE_OP","EQ_OP","NE_OP","AND_OP","OR_OP",
"MUL_ASSIGN","DIV_ASSIGN","MOD_ASSIGN","ADD_ASSIGN","SUB_ASSIGN","LEFT_ASSIGN",
"RIGHT_ASSIGN","AND_ASSIGN","XOR_ASSIGN","OR_ASSIGN","CSTRUCT","CUNION","CENUM",
"VA_ARG","VA_DCL","QWARN","QGLOBALS","QMODIFIES","QNOMODS","QCONSTANT","QFUNCTION",
"QITER","QDEFINES","QUSES","QALLOCATES","QSETS","QRELEASES","QPRECLAUSE","QPOSTCLAUSE",
"QINVARIANT","QALT","QUNDEF","QKILLED","QENDMACRO","LLMACRO","LLMACROITER","LLMACROEND",
"TENDMACRO","QSWITCHBREAK","QLOOPBREAK","QINNERBREAK","QSAFEBREAK","QINNERCONTINUE",
"QFALLTHROUGH","QLINTNOTREACHED","QLINTFALLTHROUGH","QLINTFALLTHRU","QARGSUSED",
"QPRINTFLIKE","QLINTPRINTFLIKE","QSCANFLIKE","QMESSAGELIKE","QNOTREACHED","QCONST",
"QVOLATILE","QINLINE","QEXTENSION","QEXTERN","QSTATIC","QAUTO","QREGISTER","QOUT",
"QIN","QYIELD","QONLY","QTEMP","QSHARED","QREF","QUNIQUE","QCHECKED","QUNCHECKED",
"QCHECKEDSTRICT","QCHECKMOD","QKEEP","QKEPT","QPARTIAL","QSPECIAL","QOWNED",
"QDEPENDENT","QRETURNED","QEXPOSED","QNULL","QOBSERVER","QISNULL","QEXITS","QMAYEXIT",
"QNEVEREXIT","QTRUEEXIT","QFALSEEXIT","QLONG","QSIGNED","QUNSIGNED","QSHORT",
"QUNUSED","QSEF","QNOTNULL","QRELNULL","QABSTRACT","QCONCRETE","QMUTABLE","QIMMUTABLE",
"QTRUENULL","QFALSENULL","QEXTERNAL","QREFCOUNTED","QREFS","QNEWREF","QTEMPREF",
"QKILLREF","QRELDEF","CGCHAR","CBOOL","CINT","CGFLOAT","CDOUBLE","CVOID","QANYTYPE",
"QINTEGRALTYPE","QUNSIGNEDINTEGRALTYPE","QSIGNEDINTEGRALTYPE","QNULLTERMINATED",
"QSETBUFFERSIZE","QSETSTRINGLENGTH","QMAXSET","QMAXREAD","QTESTINRANGE","TCAND",
"IDENTIFIER","NEW_IDENTIFIER","TYPE_NAME_OR_ID","CANNOTATION","CCONSTANT","ITER_NAME",
"ITER_ENDNAME","TYPE_NAME","METASTATE_NAME","file","externalDefs","externalDef",
"constantDecl","fcnDecl","@1","plainFcn","plainNamedDecl","namedDeclBase","@2",
"@3","plainNamedDeclBase","@4","@5","iterDecl","@6","@7","macroDef","fcnDefHdr",
"metaStateConstraint","metaStateSpecifier","@8","@9","metaStateExpression","metaStateName",
"constraintSeperator","BufConstraintList","BufConstraint","bufferModifier","relationalOp",
"BufConstraintExpr","BufConstraintTerm","BufConstraintSrefExpr","BufUnaryOp",
"BufBinaryOp","functionClauses","functionClausesPlain","functionClause","functionClausePlain",
"globalsClause","globalsClausePlain","@10","nomodsClause","modifiesClause","modifiesClausePlain",
"@11","flagSpec","flagId","optWarnClause","warnClause","warnClausePlain","globIdList",
"globIdListExpr","optGlobQuals","globId","globQual","stateTag","conditionTag",
"fcnDefHdrAux","fcnBody","@12","@13","@14","fcnDef","locModifies","modListExpr",
"mExpr","modList","specClauseListExpr","optSpecClauseList","specClauseList",
"primaryExpr","postfixExpr","argumentExprList","unaryExpr","fieldDesignator",
"offsetofExpr","sizeofExpr","@15","sizeofExprAux","castExpr","timesExpr","plusExpr",
"shiftExpr","relationalExpr","equalityExpr","bitandExpr","xorExpr","bitorExpr",
"andExpr","@16","orExpr","@17","conditionalExpr","@18","@19","assignExpr","expr",
"optExpr","constantExpr","initializer","instanceDecl","@20","@21","namedInitializer",
"@22","typeDecl","@23","IsType","PushType","namedInitializerList","namedInitializerListAux",
"optDeclarators","init","designation","designatorList","designator","initList",
"storageSpecifier","stateClause","stateClausePlain","@24","conditionClause",
"startConditionClause","conditionClausePlain","@25","@26","functionConstraint",
"exitsQualifier","checkQualifier","stateQualifier","paramQualifier","visibilityQualifier",
"returnQualifier","typedefQualifier","refcountQualifier","typeModifier","definedQualifier",
"typeQualifier","typeSpecifier","completeType","completeTypeSpecifier","altType",
"completeTypeSpecifierAux","optCompleteType","optStructInvariant","suSpc","@27",
"@28","@29","@30","@31","@32","@33","@34","NotType","structDeclList","structDecl",
"structNamedDeclList","structNamedDecl","enumSpc","@35","enumeratorList","enumerator",
"optNamedDecl","namedDecl","genericParamList","innerMods","innerModsList","pointers",
"paramIdList","idList","paramTypeList","paramList","@36","@37","paramDecl","typeExpression",
"abstractDecl","optAbstractDeclBase","abstractDeclBase","stmt","iterBody","endBody",
"iterDefStmtList","iterDefIterationStmt","forPred","@38","@39","partialIterStmt",
"@40","iterDefStmt","iterSelectionStmt","@41","openScope","closeScope","macroBody",
"stmtErr","labeledStmt","optExtraFallThroughs","caseStmt","@42","@43","defaultStmt",
"@44","@45","compoundStmt","compoundStmtErr","CreateInnerScope","DeleteInnerScope",
"CreateStructInnerScope","DeleteStructInnerScope","DeleteInnerScopeSafe","compoundStmtRest",
"compoundStmtAux","compoundStmtAuxErr","stmtListErr","initializerList","stmtList",
"expressionStmt","expressionStmtErr","ifPred","selectionStmt","@46","@47","whilePred",
"iterWhilePred","iterStmt","@48","@49","iterArgList","@50","iterArgExpr","cconstantExpr",
"primaryIterExpr","postfixIterExpr","unaryIterExpr","castIterExpr","timesIterExpr",
"plusIterExpr","shiftIterExpr","relationalIterExpr","equalityIterExpr","bitandIterExpr",
"xorIterExpr","bitorIterExpr","andIterExpr","orIterExpr","conditionalIterExpr",
"@51","@52","assignIterExpr","endIter","doHeader","iterationStmt","iterationStmtErr",
"jumpStmt","optSemi","id","newId","typeName", NULL
};
#endif

static const short yyr1[] = {     0,
   193,   193,   194,   194,   195,   195,   195,   195,   195,   195,
   195,   195,   196,   196,   198,   197,   199,   199,   200,   200,
   201,   201,   201,   201,   202,   201,   203,   201,   204,   204,
   204,   204,   205,   204,   206,   204,   208,   209,   207,   210,
   210,   210,   210,   211,   212,   214,   213,   215,   213,   216,
   216,   217,   218,   218,   219,   219,   220,   221,   221,   222,
   222,   222,   223,   223,   223,   224,   224,   225,   225,   225,
   225,   225,   225,   225,   225,   226,   227,   227,   228,   228,
   229,   229,   230,   230,   230,   230,   230,   230,   231,   231,
   231,   231,   231,   231,   232,   234,   233,   235,   236,   238,
   237,   239,   239,   240,   241,   241,   242,   243,   243,   244,
   244,   245,   246,   246,   247,   247,   247,   248,   248,   248,
   248,   248,   249,   249,   249,   249,   249,   250,   250,   251,
   251,   253,   252,   254,   255,   252,   256,   257,   257,   258,
   258,   258,   258,   258,   258,   258,   258,   259,   259,   260,
   260,   261,   261,   261,   261,   261,   261,   261,   261,   262,
   262,   263,   263,   264,   264,   264,   264,   264,   264,   265,
   265,   265,   265,   265,   265,   265,   265,   265,   266,   266,
   267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
   267,   268,   268,   269,   271,   270,   272,   272,   272,   272,
   273,   273,   274,   274,   274,   274,   275,   275,   275,   276,
   276,   276,   277,   277,   277,   277,   277,   278,   278,   278,
   279,   279,   280,   280,   281,   281,   282,   283,   282,   284,
   285,   284,   286,   287,   288,   286,   289,   289,   289,   289,
   289,   289,   289,   289,   289,   289,   289,   289,   290,   290,
   291,   291,   292,   293,   293,   293,   294,   295,   294,   296,
   294,   297,   298,   297,   300,   299,   299,   299,   301,   302,
   303,   304,   304,   305,   305,   306,   306,   306,   306,   307,
   307,   308,   308,   309,   309,   310,   310,   311,   311,   311,
   311,   311,   312,   314,   313,   315,   316,   318,   317,   319,
   317,   320,   320,   321,   321,   321,   321,   321,   322,   322,
   322,   322,   323,   323,   323,   323,   323,   323,   323,   323,
   323,   323,   323,   323,   323,   323,   323,   323,   323,   324,
   324,   325,   325,   326,   326,   327,   327,   327,   327,   328,
   328,   328,   328,   328,   328,   329,   329,   329,   329,   330,
   330,   330,   330,   331,   331,   331,   331,   331,   331,   331,
   331,   331,   331,   331,   332,   332,   332,   332,   332,   332,
   332,   332,   332,   332,   332,   332,   332,   332,   333,   334,
   334,   335,   335,   336,   336,   336,   337,   337,   338,   340,
   341,   339,   342,   343,   339,   339,   339,   344,   345,   339,
   346,   347,   339,   339,   339,   339,   339,   348,   349,   349,
   349,   350,   350,   351,   351,   352,   352,   352,   353,   354,
   353,   353,   355,   355,   355,   356,   356,   357,   357,   357,
   357,   358,   358,   359,   359,   360,   360,   361,   361,   362,
   362,   362,   362,   363,   363,   364,   364,   365,   365,   365,
   367,   366,   368,   366,   369,   369,   370,   370,   371,   371,
   371,   372,   372,   373,   373,   373,   373,   373,   373,   373,
   373,   373,   374,   374,   374,   374,   374,   374,   374,   374,
   374,   375,   376,   377,   377,   378,   378,   378,   378,   380,
   381,   379,   383,   382,   382,   384,   384,   384,   384,   384,
   384,   384,   384,   384,   384,   384,   384,   384,   386,   385,
   387,   388,   389,   389,   390,   390,   390,   390,   390,   390,
   390,   390,   390,   390,   390,   391,   391,   392,   392,   394,
   393,   395,   393,   397,   396,   398,   396,   399,   399,   400,
   401,   402,   403,   404,   405,   406,   406,   406,   406,   406,
   406,   406,   406,   407,   408,   408,   408,   408,   409,   409,
   410,   410,   411,   411,   412,   412,   413,   413,   413,   414,
   415,   416,   415,   417,   415,   418,   419,   421,   422,   420,
   423,   424,   423,   425,   425,   425,   425,   426,   426,   427,
   427,   428,   428,   428,   428,   428,   428,   428,   428,   428,
   429,   429,   429,   429,   429,   429,   429,   429,   429,   429,
   430,   430,   431,   431,   431,   431,   432,   432,   432,   433,
   433,   433,   434,   434,   434,   434,   434,   435,   435,   435,
   436,   436,   437,   437,   438,   438,   439,   439,   440,   440,
   441,   442,   443,   441,   444,   444,   444,   444,   444,   444,
   444,   444,   444,   444,   444,   444,   445,   445,   446,   447,
   447,   447,   448,   448,   448,   448,   449,   449,   449,   449,
   449,   449,   449,   449,   449,   449,   450,   450,   451,   452,
   452,   452,   452,   452,   453,   453
};

static const short yyr2[] = {     0,
     0,     1,     1,     2,     2,     1,     1,     1,     1,     1,
     1,     1,     8,    11,     0,     5,     1,     3,     1,     2,
     1,     6,     3,     6,     0,     6,     0,     7,     1,     6,
     3,     6,     0,     6,     0,     7,     0,     0,    10,     3,
     3,     3,     2,     1,     3,     0,     4,     0,     4,     1,
     3,     1,     1,     1,     3,     1,     3,     1,     1,     1,
     1,     1,     1,     4,     5,     1,     1,     1,     1,     3,
     4,     2,     3,     3,     3,     1,     1,     1,     0,     2,
     0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     2,     0,     4,     1,     2,     0,
     3,     1,     3,     1,     1,     0,     2,     3,     2,     1,
     3,     2,     0,     2,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     3,     0,     3,     0,     0,     4,     2,     2,     1,     1,
     1,     3,     4,     2,     3,     3,     3,     1,     1,     1,
     3,     1,     1,     3,     4,     2,     3,     3,     3,     0,
     1,     1,     3,     1,     1,     1,     3,     1,     1,     1,
     4,     3,     4,     6,     5,     5,     2,     2,     1,     3,
     1,     2,     2,     2,     2,     2,     2,     2,     2,     1,
     1,     3,     1,     9,     0,     3,     4,     2,     4,     2,
     1,     4,     1,     3,     3,     3,     1,     3,     3,     1,
     3,     3,     1,     3,     3,     3,     3,     1,     3,     3,
     1,     3,     1,     3,     1,     3,     1,     0,     4,     1,
     0,     4,     1,     0,     0,     7,     1,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     1,     3,
     0,     1,     1,     1,     1,     1,     3,     0,     9,     0,
    11,     2,     0,     6,     0,     8,     4,     4,     0,     0,
     2,     1,     4,     0,     4,     1,     3,     4,     2,     2,
     2,     1,     2,     3,     2,     1,     3,     1,     1,     1,
     1,     1,     2,     0,     6,     2,     2,     0,     6,     0,
     5,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     3,     1,
     4,     1,     3,     2,     2,     2,     0,     1,     0,     0,
     0,    12,     0,     0,    11,     6,     6,     0,     0,    10,
     0,     0,    10,     5,     5,     4,     4,     0,     1,     1,
     2,     5,     3,     2,     4,     1,     3,     4,     6,     0,
     8,     4,     1,     3,     2,     1,     4,     1,     1,     2,
     2,     1,     2,     1,     2,     1,     1,     1,     2,     1,
     2,     2,     3,     1,     3,     1,     3,     1,     1,     3,
     0,     2,     0,     4,     4,     1,     1,     2,     1,     1,
     2,     0,     1,     5,     2,     3,     3,     4,     3,     4,
     4,     5,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     2,     2,     7,     6,     2,     0,
     0,    10,     0,     6,     1,     1,     1,     1,     2,     1,
     1,     1,     1,     1,     1,     1,     3,     1,     0,     3,
     2,     2,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     3,     1,     1,     2,     2,     0,     2,     0,
     4,     0,     6,     0,     3,     0,     5,     3,     2,     3,
     0,     0,     0,     0,     0,     1,     2,     2,     3,     2,
     3,     3,     4,     2,     2,     3,     3,     4,     1,     2,
     1,     2,     1,     2,     1,     2,     1,     2,     1,     4,
     2,     0,     5,     0,     6,     4,     4,     0,     0,    10,
     1,     0,     4,     1,     1,     1,     1,     1,     2,     1,
     3,     1,     4,     3,     4,     6,     5,     5,     2,     2,
     1,     2,     2,     2,     2,     2,     2,     2,     2,     1,
     1,     4,     1,     3,     3,     3,     1,     3,     3,     1,
     3,     3,     1,     3,     3,     3,     3,     1,     3,     3,
     1,     3,     1,     3,     1,     3,     1,     3,     1,     3,
     1,     0,     0,     7,     1,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     1,     0,     1,     2,
     7,     2,     2,     7,     6,     2,     3,     2,     3,     2,
     3,     3,     3,     3,     2,     3,     0,     1,     1,     1,
     1,     1,     1,     1,     1,     1
};

static const short yydefact[] = {     0,
    12,    11,   440,   408,   255,   408,    15,     0,     0,     0,
     0,   269,   269,   289,   288,   290,   291,   292,   350,   351,
   315,   317,   316,   320,   321,   309,   311,   312,   310,   318,
   319,   352,   353,   313,   314,   330,   326,   322,   327,   323,
   304,   305,   308,   306,   307,   347,   348,   349,   346,   332,
   331,   325,   324,   336,   337,   338,   339,   334,   335,   333,
   340,   341,   344,   345,   342,   343,   408,   408,   408,   408,
   408,   408,   408,   408,   408,   408,   328,   679,   680,   684,
   329,   681,   682,   685,     0,     3,     6,     7,   432,     8,
     9,   134,    44,   677,    10,   254,   256,     0,   387,   269,
   269,   269,   269,   269,   269,   269,   269,   408,   269,   387,
   387,   408,   380,   408,     0,   408,   130,   269,   683,    21,
   408,   436,   437,   438,   441,   442,   272,   269,   269,   265,
   408,   686,   408,   408,   684,     0,   525,   269,   534,     0,
     0,     0,   659,     0,     0,     0,     0,   269,   567,     0,
   269,   269,   269,   269,   269,   269,   269,   269,   269,     0,
    43,     0,     0,     0,     0,     0,   528,   269,   169,   165,
   168,   588,   578,   170,   181,   201,   191,   190,   203,   207,
   210,   213,   218,   221,   223,   225,   227,   230,   233,   237,
   249,   569,   195,     0,     0,   559,   515,   516,   517,   518,
     0,     0,   519,   269,   520,     0,   521,   166,     0,   522,
   524,   164,     0,   508,     0,   565,     0,   541,   495,     0,
     0,     0,   504,     0,   505,   484,   503,   500,   501,   496,
   497,   498,     0,     0,   502,   509,     0,     0,   506,   483,
     0,   354,   355,   365,   367,   366,   368,   369,   370,   371,
   372,   373,   374,     4,   269,     0,   132,   137,   408,   678,
     5,   408,   388,   384,   358,   360,   357,   359,   362,   361,
   363,   364,   378,   356,   385,   386,     0,   269,   269,   376,
   269,   269,     0,   377,   433,   375,   439,   443,   408,     0,
   271,   408,     0,   262,   269,   677,    17,    19,     0,   408,
   269,    29,   451,   269,   165,   168,   201,   253,   530,   164,
     0,   269,   269,   269,   269,     0,   668,   670,   675,     0,
     0,   408,   457,     0,     0,   184,   189,   188,   187,   186,
   185,     0,   269,   182,   183,   269,     0,     0,     0,     0,
     0,   528,     0,   269,   527,   269,   473,   474,   475,   476,
     0,   477,   478,   269,   480,   269,   479,   481,   541,   269,
   269,   177,   178,     0,   269,   269,   269,   269,   269,   269,
   269,   269,   269,   269,   269,   269,   269,   269,   269,   269,
   269,   269,   269,   269,   269,   269,   269,   269,   269,   269,
   269,   228,   234,   231,   568,   269,     0,   666,    40,     0,
   542,   560,   571,   663,   589,     0,   526,   269,     0,     0,
     0,   566,    41,   485,   489,   561,   408,   499,   511,   512,
     0,     0,     0,    42,    23,   269,   451,   408,   408,   269,
   257,   131,   408,     0,   382,     0,   408,     0,   408,     0,
   269,   269,   268,   269,   267,   263,   408,     0,   269,     0,
   408,   269,    20,   448,     0,     0,   434,   449,   269,     0,
     0,   535,     0,   574,     0,   252,     0,   667,   676,   167,
   269,   269,     0,   459,   458,   460,   269,   523,   269,     0,
   671,   672,   673,   674,   669,   529,   269,   536,     0,   662,
   408,   539,   660,     0,     0,   172,     0,   179,     0,     0,
     0,   238,   239,   240,   241,   242,   243,   244,   245,   246,
   247,   248,   204,   205,   206,   209,   208,   211,   212,   214,
   215,   216,   217,   219,   220,   222,   224,   226,   269,   269,
   269,   250,   269,   269,   196,   555,   168,   559,     0,   408,
   540,   572,     0,     0,   507,   493,   269,   562,   510,     0,
     0,    25,     0,   546,   269,   563,   133,   408,   269,   541,
   269,   258,   381,   269,   398,     0,   406,   401,     0,   407,
     0,   423,   426,   420,   422,   273,   269,   269,   677,    16,
    31,   269,   451,   269,    18,   435,   444,   446,    37,   453,
   408,   452,   456,   531,   570,     0,   576,   269,   379,   465,
     0,   451,   461,   269,     0,   202,   408,   269,   532,     0,
   538,   554,     0,   579,   269,   173,   171,   269,   269,   229,
     0,   232,   269,   198,   269,   200,   556,   557,   269,   269,
   269,   577,   269,   408,   269,   408,    79,    27,   547,   550,
   269,   269,   548,   269,   564,   541,   136,     0,   260,   269,
   383,   404,   543,   390,   405,   543,   393,   269,   425,   269,
     0,   106,   269,   269,   269,     0,    33,     0,   269,     0,
    81,   450,   269,   462,   269,     0,   466,   469,   269,     0,
   467,     0,   451,     0,     0,     0,   537,   269,   269,   180,
   175,   176,   235,     0,     0,   558,   573,     0,   269,   269,
   269,   269,   269,   269,   269,   269,   269,     0,   165,   168,
   181,   201,   190,   207,   210,   213,   218,   221,   223,   225,
   227,   230,     0,   582,   581,   166,   592,   601,   611,   613,
   617,   620,   623,   628,   631,   633,   635,   637,   639,   641,
   645,   584,   164,     0,    24,     0,    96,   100,    98,   123,
   124,   125,   126,   127,   128,   129,    26,    79,    83,     0,
    85,    84,     0,    88,     0,   408,   408,    86,     0,    87,
   300,     0,    79,   551,   552,   269,   549,    22,   269,   274,
   408,   396,   543,   408,   397,   543,   419,   424,   269,     0,
     0,   105,   269,   269,     0,   276,   264,   269,     0,   282,
     0,   269,     0,   408,    81,    35,     0,   445,   447,    38,
    81,    89,    91,    90,    94,    92,    93,   454,   428,     0,
   269,   462,   429,   463,   575,   490,     0,   470,   468,   471,
     0,     0,   174,   533,     0,   582,   269,   197,   199,   665,
     0,     0,   184,   189,   188,   187,   186,   185,   182,   183,
   269,   269,   269,   177,   178,     0,   269,   269,   269,   269,
   269,   269,   269,   269,   269,   269,   269,   269,   269,   269,
   269,   269,   269,   269,   269,   269,   269,   269,   269,   269,
   269,   269,   269,   228,   642,   231,   494,     0,   488,   104,
   109,   102,   113,   677,    80,    95,    99,   107,   294,   297,
   293,     0,   298,   296,    28,   553,   269,     0,   410,   408,
   408,   409,   408,   408,   408,   427,   269,   266,   286,     0,
     0,   285,   279,   280,   283,   281,   274,    13,    32,    34,
    81,    30,   677,    82,   451,   455,   430,   431,   269,   464,
   472,     0,   193,     0,   541,   236,   664,   167,   269,     0,
   172,     0,     0,     0,     0,   646,   647,   648,   649,   650,
   651,   652,   653,   654,   655,   656,   204,   205,   206,   209,
   208,   211,   212,   214,   215,   216,   217,   219,   220,   222,
   224,   226,   638,   269,   640,   269,   487,   108,     0,   118,
   119,   120,   121,   122,   677,   110,   408,   113,     0,     0,
   141,   101,   150,   677,   139,   140,     0,    48,     0,     0,
    58,    59,    69,    67,   303,     0,   302,    56,    76,     0,
    63,    66,     0,   677,    68,   160,   274,   269,   408,     0,
   269,   411,   399,   408,   402,   408,   421,   277,   269,   284,
   677,    36,     0,   269,   491,   269,     0,   661,   658,   202,
   269,   173,   171,   269,   269,     0,   583,   103,   113,    97,
   116,   112,   117,   115,   114,     0,   144,     0,     0,     0,
     0,   138,     0,     0,   153,   162,   677,   152,     0,     0,
    66,     0,    72,     0,    54,    53,     0,    61,    60,    62,
     0,     0,     0,     0,     0,     0,   269,   677,   161,     0,
   259,   269,   413,   269,   269,   408,   416,     0,   391,     0,
   394,   278,   287,     0,    39,   269,     0,   194,   192,   657,
   542,     0,   175,   176,   643,   111,   145,   142,   148,     0,
   149,   146,   147,   151,     0,   156,     0,     0,     0,     0,
   269,     0,    78,    77,     0,    73,     0,    50,    45,    46,
    55,    66,    57,    70,     0,    74,    75,     0,     0,   301,
   269,   269,   275,   269,   269,     0,   414,   269,   400,     0,
   403,     0,    14,   492,   580,   174,   269,   143,   157,   154,
     0,   158,   159,   163,   295,    52,    49,     0,     0,    71,
    47,    64,   299,   261,   417,   408,   412,   269,   389,   395,
   644,   155,    65,    51,   415,   418,   392,     0,     0,     0
};

static const short yydefgoto[] = {  1208,
    85,    86,    87,    88,   134,   296,   297,    89,   637,   773,
   298,   805,   931,    90,   671,   933,   909,    92,  1015,  1148,
  1095,  1079,  1149,  1187,  1087,  1017,  1018,  1019,  1091,  1020,
  1021,  1152,  1023,  1145,   757,   810,   758,   811,   759,   812,
   893,   813,   762,   814,   894,   891,   892,   791,   764,   765,
   995,   996,   997,  1062,   998,   766,   767,    93,   258,   428,
   259,   560,    94,  1002,  1129,  1130,  1004,  1076,  1098,  1077,
   174,   175,   497,   176,   942,   177,   178,   397,   535,   179,
   180,   181,   182,   183,   184,   185,   186,   187,   188,   529,
   189,   531,   190,   530,   837,   191,   220,   467,   309,   416,
    96,   650,   779,   127,   578,    97,   292,   193,   256,   128,
   129,   908,   797,   798,   799,   800,   920,    99,   768,   816,
  1007,   770,   771,   817,  1026,   902,  1024,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   323,
   417,   434,   113,   264,  1207,   114,   783,  1170,   786,  1172,
   653,  1108,   656,  1110,   115,   911,   912,  1105,  1106,   116,
   661,   571,   572,   821,   131,   456,   124,   125,   118,   586,
   587,   457,   458,   459,   673,   592,   324,   827,   823,   476,
   345,   221,   241,   222,   223,   346,   939,  1117,   225,   633,
   226,   227,   421,   228,   229,   195,   402,   347,   343,   348,
   461,   686,   349,   311,   610,   350,   200,   351,   541,   781,
  1033,   234,   557,   492,   401,   202,   558,   559,   352,   203,
   204,   353,   630,   596,   354,   237,   355,   359,   689,   724,
   888,   725,   208,   727,   728,   729,   730,   731,   732,   733,
   734,   735,   736,   737,   738,   739,   740,   741,   984,  1177,
   742,  1121,   356,   357,   210,   358,   261,   310,   213,   121
};

static const short yypact[] = {  2153,
-32768,-32768,    37,  5269,-32768,  6398,-32768,   493,  3112,  3409,
  3409,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   450,
-32768,-32768,-32768,-32768,  2352,-32768,-32768,-32768,   364,-32768,
-32768,    54,-32768,    86,-32768,-32768,-32768,   131,  6233,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  6233,
  6233,   169,   113,-32768,   828,-32768,-32768,   493,-32768,-32768,
-32768,-32768,-32768,-32768,    37,-32768,-32768,   184,-32768,   169,
-32768,-32768,-32768,  5269,-32768,   209,-32768,  5499,-32768,   216,
   225,   234,-32768,   245,   493,   262,   320,   852,-32768,  2730,
  5499,  5499,  5499,  5499,  5499,  5499,-32768,  5524,  5524,   324,
-32768,   345,   356,   362,   404,   419,   350,  4685,-32768,   436,
   445,-32768,   460,-32768,   681,   677,-32768,-32768,-32768,  1030,
   132,   261,   554,   354,   461,   463,   470,   491,   100,-32768,
-32768,   337,-32768,  3535,   457,   462,-32768,-32768,-32768,-32768,
   559,  3156,-32768,  4685,-32768,  3535,-32768,   397,  3535,-32768,
-32768,   571,   599,-32768,   575,-32768,  2921,   460,   615,   458,
   555,  3305,-32768,  3409,-32768,-32768,-32768,  5856,-32768,-32768,
-32768,-32768,   661,   670,-32768,-32768,  3409,  3535,-32768,-32768,
   591,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   706,   738,-32768,-32768,  6122,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   752,   532,-32768,-32768,
   493,   493,   391,-32768,   364,-32768,-32768,-32768,-32768,   757,
-32768,-32768,   766,   722,   532,    86,-32768,   403,   784,-32768,
   493,-32768,    41,  5499,-32768,-32768,-32768,-32768,-32768,-32768,
   788,  5499,  5499,  5499,  1753,   801,-32768,-32768,-32768,   601,
   782,  5723,   283,   808,   850,-32768,-32768,-32768,-32768,-32768,
-32768,   879,  5499,-32768,-32768,  5499,   891,   917,   933,   965,
   970,   350,   665,  5126,-32768,  4685,-32768,-32768,-32768,-32768,
   983,-32768,-32768,  4685,-32768,  4685,-32768,-32768,-32768,  1275,
  5499,-32768,-32768,    66,  5499,  5499,  5499,  5499,  5499,  5499,
  5499,  5499,  5499,  5499,  5499,  5499,  5499,  5499,  5499,  5499,
  5499,  5499,  5499,  5499,  5499,  5499,  5499,  5499,  5499,  5499,
  5499,-32768,-32768,-32768,-32768,  5499,   479,-32768,-32768,  2539,
-32768,-32768,   999,-32768,-32768,  1024,-32768,  5499,   966,  1026,
  1034,-32768,-32768,-32768,-32768,-32768,   169,  5856,-32768,-32768,
  3409,  1972,  1056,-32768,-32768,  5499,   309,  3639,  4767,   532,
-32768,   515,  6398,   990,  1077,  1087,  1095,  1098,  1095,   493,
  1099,   532,-32768,   532,-32768,-32768,-32768,  1031,  1093,  1100,
-32768,   532,   403,-32768,   493,  1107,-32768,  1112,   493,   272,
  1113,-32768,   295,  1115,   439,  1115,  1116,-32768,-32768,-32768,
-32768,  5437,  1118,   415,-32768,   688,  5499,-32768,-32768,  1122,
-32768,-32768,-32768,-32768,-32768,-32768,  5499,-32768,  1119,-32768,
  3639,-32768,-32768,  1135,  1123,-32768,   471,-32768,    60,   493,
   493,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  1030,  1030,   132,   132,   261,
   261,   261,   261,   554,   554,   354,   461,   463,  5499,  5499,
  5499,-32768,  5556,  5611,-32768,-32768,  5115,-32768,  3349,  3825,
-32768,-32768,  1125,   548,-32768,-32768,   532,-32768,-32768,  1127,
  1129,-32768,  1132,-32768,  4197,-32768,-32768,  4011,  4241,  1130,
-32768,  1136,-32768,-32768,  1141,  1143,-32768,  1144,  1148,-32768,
   699,-32768,  1146,-32768,-32768,-32768,   184,-32768,    82,-32768,
-32768,  5499,   342,   532,-32768,-32768,  1147,-32768,-32768,  1166,
  6398,-32768,-32768,-32768,-32768,  1149,-32768,  1753,-32768,-32768,
  1150,   519,   688,  5448,  1151,-32768,-32768,-32768,-32768,  1154,
-32768,-32768,  1155,-32768,  5499,-32768,-32768,-32768,-32768,   470,
   733,   491,  5499,-32768,  5499,-32768,-32768,-32768,  4345,  4685,
  5499,-32768,  5644,-32768,  5499,-32768,   896,-32768,-32768,-32768,
  4389,  4493,-32768,  4537,-32768,  1130,-32768,  1153,-32768,-32768,
-32768,-32768,-32768,  1160,-32768,-32768,  1161,-32768,   493,-32768,
   493,  1101,  5034,-32768,-32768,  1156,-32768,  1159,-32768,   466,
   896,-32768,   493,   740,  4685,  1168,-32768,-32768,   148,  1163,
-32768,  1164,    78,  1171,  1169,  1173,-32768,  5499,  5644,-32768,
-32768,-32768,-32768,  1172,  1174,-32768,-32768,   577,  5499,  5499,
  5499,  5499,  5499,  5499,  5499,  5524,  5524,  1176,   800,   827,
   977,   882,   844,  1091,   759,   777,   798,   804,  1193,  1184,
  1158,  1138,   263,  1199,-32768,    53,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   853,   867,-32768,  1040,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   896,-32768,  1137,
-32768,-32768,  1139,-32768,  1140,-32768,-32768,-32768,  1162,-32768,
  1538,  1165,   896,-32768,-32768,  4641,-32768,-32768,-32768,-32768,
  6320,-32768,-32768,  6320,-32768,-32768,-32768,-32768,  5499,   846,
  1208,-32768,  5034,  5499,   493,-32768,-32768,  5034,   620,-32768,
  1206,  5034,  1170,-32768,   896,-32768,  1209,-32768,-32768,-32768,
   896,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   364,  1207,
-32768,   727,-32768,   688,-32768,-32768,  1210,-32768,-32768,-32768,
  1211,   493,-32768,-32768,   902,  1212,  5499,-32768,-32768,  1215,
   913,  1213,   931,   932,   995,   997,   998,  1027,  1028,  1029,
  5499,  5468,  5499,  1035,  1036,   195,  5499,  5499,  5499,  5499,
  5499,  5499,  5499,  5499,  5499,  5499,  5499,  5499,  5499,  5499,
  5499,  5499,  5499,  5499,  5499,  5499,  5499,  5499,  5499,  5499,
  5499,  5499,  5499,  5499,-32768,  5499,-32768,  1218,  1222,-32768,
  1053,  1203,   576,   155,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   289,-32768,-32768,-32768,-32768,  5034,   639,-32768,   169,
  4845,-32768,  6320,  4845,  6320,-32768,-32768,-32768,-32768,   894,
  1219,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   896,-32768,    86,-32768,   411,-32768,-32768,-32768,  5479,-32768,
-32768,   735,-32768,  1227,  1130,-32768,-32768,  1038,  5499,  1228,
  1051,  1054,   110,   493,   493,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  1064,  1065,  1067,   885,
   938,   822,   839,    71,   142,   539,   582,    91,   731,    55,
   817,   101,   470,  5499,   491,  5644,-32768,   397,  1040,-32768,
-32768,-32768,-32768,-32768,   768,-32768,  5989,   576,   218,   218,
-32768,-32768,   107,   859,-32768,-32768,   319,-32768,   518,   432,
-32768,-32768,-32768,-32768,-32768,  1225,-32768,     3,-32768,  1078,
-32768,   640,  1226,    86,-32768,   319,-32768,-32768,-32768,  1236,
   507,-32768,-32768,  4845,-32768,  4845,-32768,-32768,  5009,-32768,
   869,-32768,  1175,   747,-32768,-32768,   493,-32768,  1066,  1074,
-32768,  1076,  1079,-32768,-32768,  1008,-32768,-32768,   576,-32768,
-32768,-32768,-32768,-32768,-32768,   437,   107,   810,   493,   493,
   218,-32768,   319,   319,-32768,   373,   946,-32768,  1240,  1010,
   721,   432,   535,    83,-32768,-32768,   518,-32768,-32768,-32768,
   518,    28,   493,   493,  1241,   518,-32768,    86,  1243,   964,
-32768,   532,-32768,-32768,  1246,-32768,  1247,  1248,-32768,  1250,
-32768,-32768,-32768,  1183,-32768,   229,  1249,-32768,-32768,-32768,
-32768,  1252,  1082,  1084,-32768,-32768,-32768,-32768,   107,  1253,
   397,-32768,-32768,   107,   762,   373,   829,   493,   493,   319,
-32768,  1092,-32768,-32768,   518,-32768,   721,  1239,-32768,   535,
-32768,   535,-32768,-32768,  1255,-32768,-32768,  1092,  1258,-32768,
-32768,-32768,-32768,  5499,   507,  1267,-32768,-32768,-32768,  1266,
-32768,  1270,-32768,-32768,-32768,  1090,  5499,-32768,-32768,-32768,
  1260,-32768,-32768,   373,-32768,-32768,-32768,  1271,    83,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  5499,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1291,  1297,-32768
};

static const short yypgoto[] = {-32768,
-32768,  1230,-32768,-32768,-32768,-32768,  -400,  -112,-32768,-32768,
  1009,-32768,-32768,-32768,-32768,-32768,    59,-32768,-32768,   396,
-32768,-32768,   122,   154,-32768,   226,-32768,-32768,-32768,  -942,
-32768,  -848,-32768,-32768,  -409,  -716,-32768,-32768,-32768,  -580,
-32768,  -544,-32768,  -512,-32768,   327,-32768,-32768,   655,  -639,
-32768,   259,   326,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  -876,   188,-32768,  -960,-32768,   300,
-32768,  -592,   475,  1263,-32768,-32768,  -591,-32768,-32768,   -90,
  -363,  -362,  -361,  -360,  -368,  -359,  -358,  -514,  -481,-32768,
  -588,-32768,  -136,-32768,-32768,   836,   174,  -564,  -397,    14,
-32768,-32768,-32768,  -435,-32768,-32768,-32768,   711,  -242,   884,
-32768,  -857,  -754,-32768,-32768,   533,-32768,-32768,-32768,  -507,
-32768,-32768,-32768,  -335,-32768,-32768,-32768,-32768,-32768,   560,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
    47,   769,-32768,   967,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  1145,  -744,  -652,-32768,   170,-32768,
-32768,   676,   679,   517,     1,  -384,  1221,-32768,     2,-32768,
-32768,  -572,-32768,-32768,-32768,   667,  -266,  1021,-32768,  -462,
   129,  1336,-32768,  1111,-32768,   187,-32768,-32768,-32768,-32768,
  -145,-32768,-32768,-32768,-32768,-32768,   168,  1283,  1007,  1292,
-32768,-32768,  1332,-32768,-32768,  -341,-32768,    26,   230,  -565,
  -846,-32768,   861,-32768,-32768,   950,  -190,  -456,   128,-32768,
   149,    51,-32768,-32768,    97,-32768,   106,-32768,-32768,   664,
-32768,   368,  -607,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  1389,-32768,-32768,  1626,  -247,     0,   449,-32768
};


#define	YYLAST		6589


static const short yytable[] = {   119,
   117,   308,   489,   119,   126,   285,   576,   119,   212,   212,
   212,   603,   435,    95,   620,   516,   517,  1003,   518,   519,
   526,   520,   521,   522,   523,   726,   524,   525,   551,   680,
   527,   815,   528,   676,   201,   233,   233,   418,   919,   914,
   711,   713,   553,   923,   723,   454,   112,   927,   448,   622,
   130,   585,   133,  1022,  1154,   450,   760,  1085,    91,   205,
   326,   327,   328,   329,   330,   331,  1080,  1035,   429,  1041,
     3,   410,   257,  -590,   601,  -632,   414,  -590,   415,  -632,
   396,   726,   454,   629,   119,   117,   617,  1008,   930,   609,
   784,  -624,   761,   500,   934,  -624,   711,   713,    95,   260,
   723,   642,   830,   260,   664,   206,  1082,   387,   388,   501,
   831,  -629,  1135,  1136,   207,  -629,  1010,   119,   721,   381,
   382,  -636,  1066,  1067,   763,  -636,   288,   383,   384,   769,
   396,   112,  1068,   119,  1069,   301,  1053,   235,   235,   390,
   393,   385,   386,    91,   119,   263,   122,   123,  1153,   212,
  1070,   722,  1027,  1159,   262,   394,   263,   263,   236,   236,
  1081,  1083,  -625,   379,   380,   815,  -625,   212,  1034,  1100,
  1036,   815,   260,   472,   721,   201,   196,   760,   999,  1184,
   300,     3,   192,   669,   666,  1086,  -269,  1109,  1000,  1111,
   381,   382,   760,   212,  1134,   194,   224,   224,   668,   279,
   205,   212,  1188,   212,   289,   212,   682,   722,   212,   540,
   450,   824,   607,   761,  1042,  1155,   212,   913,   647,   201,
   915,   212,   954,   212,  -408,  -408,  -408,   201,   761,  -408,
  -408,   201,   303,  1147,   201,  1150,   212,   212,   955,   312,
   405,   999,   233,   411,   205,   763,   206,   233,   313,   233,
   769,  1000,   205,  -459,   472,   207,   205,   314,  1032,   205,
   763,  1032,   233,   201,   718,   769,    78,  1013,   315,   714,
   715,   716,   717,   719,   720,   549,   414,   119,   432,   317,
   119,   119,   119,   988,  1113,   513,   514,   515,   205,   308,
   206,   815,   396,  1008,   119,   447,   470,   435,   206,   207,
   119,   772,   206,   885,   489,   206,  -269,   207,   472,   381,
   382,   207,  1009,   454,   207,   396,     3,   325,   886,   595,
   718,   320,  1010,   321,   474,   714,   715,   716,   717,   719,
   720,   665,   403,   552,   206,   308,   194,   318,    78,  1001,
  1150,   685,  1073,   207,   235,   212,   454,   336,   895,   235,
   308,   235,  1074,   212,   395,   212,   694,   396,   695,   824,
   337,   398,   680,   905,   235,   236,   667,   192,   471,   983,
   236,   338,   236,   404,  1045,   192,   406,   339,   726,   192,
   194,  1032,   192,  1032,   495,   236,   606,  -270,   194,   255,
   409,   916,   194,   711,   713,   194,   921,   723,  1137,   212,
  1138,    78,  1001,   224,   985,   423,   387,   388,   224,   440,
   224,   192,    78,    79,   135,   454,  1139,    82,    83,   340,
   212,   212,   772,   224,   194,   201,  -270,   212,   449,   119,
   561,   548,   842,   341,  -408,   678,  -408,   772,  -269,   119,
   472,   119,   548,   119,  -408,   308,   233,   233,   120,   342,
   205,   119,   120,   301,   119,  1082,   136,  -680,   119,   396,
  1131,  1127,  1068,   597,  1069,  1010,  -684,   308,  1011,  1012,
   808,   721,    78,  1013,   490,   412,  1014,   460,   396,   471,
  1070,  -681,   493,  -686,   494,   463,   464,   465,   466,   389,
   212,   615,  -408,  -408,  -408,   616,   206,  -408,  -408,   119,
   119,   390,    78,  1075,   722,   207,   460,   970,   971,   391,
   972,   973,   980,   974,   975,   976,   977,   460,   978,   979,
   533,   534,   981,   454,   982,  -408,  -408,  -408,  1104,  1131,
  -408,  -408,  -408,   120,   499,  -408,  -686,  -408,   212,   212,
     3,  1009,  -408,   678,  -408,   392,   119,   634,   235,   235,
   399,  1010,  -408,   548,   212,  -513,   556,   212,   212,  -626,
  1092,   819,  1093,  -626,   201,     3,   120,   538,   396,   236,
   236,   548,   632,   192,    78,    79,   135,   400,  1094,    82,
    83,   544,   302,   119,   405,   301,   194,   381,   382,   205,
   383,   384,  -683,   316,  -408,  -408,  -408,   396,   408,  -408,
  -408,   840,  -627,  1049,   385,   386,  -627,   224,   224,   843,
   844,   845,   846,   847,   848,    78,  1013,   718,   469,   556,
   407,   396,   714,   715,   716,   717,   719,   720,   212,   212,
   381,   382,   743,  -686,  -686,   206,  -682,   674,  -686,  -686,
   212,   212,   924,   212,   207,   794,  1005,   795,   413,    78,
    79,   135,   308,   603,    82,    83,  1028,   308,   119,  1029,
   119,   -46,   212,   990,   991,  1092,  1163,  1093,   556,   119,
   487,   488,   119,   119,   212,   822,    78,    79,   135,   419,
   474,    82,    83,  1094,   424,  1043,   556,   645,   743,   420,
    78,    79,   135,   992,   993,    82,    83,  1011,  1012,   365,
   946,    78,  1013,   621,   360,  1014,   361,   994,  -408,   819,
    98,  -269,   192,   604,    98,    78,    79,   135,   658,   659,
    82,    83,   242,   243,  -408,   194,   120,   362,   363,   437,
   439,   441,   425,   366,   367,   368,   369,   370,   371,   372,
   373,   374,   375,   120,   446,  1146,  1092,  1060,  1093,   302,
  -269,  -630,   472,   396,   693,  -630,  1072,   645,   697,  1046,
     3,   427,  1047,  -269,  1094,   472,  1195,   383,   384,   431,
   645,   466,   472,     3,   443,   212,  1097,   967,   968,   969,
     3,   385,   386,   445,  1122,   260,  1179,  1137,  1059,  1138,
   871,   872,   212,  1114,   119,    98,   460,   212,   460,   395,
  1206,   212,   396,   825,   698,  1139,   470,   451,   744,   462,
   265,   266,   267,   268,   269,   270,   271,   272,   468,   274,
  -587,   119,   277,   822,  -587,   873,   874,   910,    98,  1141,
   910,   119,   477,   999,   875,   876,  1128,  -634,   290,   291,
   293,  -634,  -621,  1000,   299,   389,  -621,  -586,   877,   878,
  1161,  -586,   999,   379,   380,  1180,   879,   880,  1050,  -622,
   322,   835,  1000,  -622,  -610,   917,   659,   332,  -610,   319,
   379,   380,   841,  -585,   478,   304,   260,  -585,   120,  1071,
   151,   152,   153,   154,   155,   156,   260,   396,   573,  1029,
   120,   889,   120,  1006,   281,   282,   283,   157,   158,   159,
   302,  1025,   479,   588,   857,  -619,   212,   593,   481,  -619,
    78,    79,   135,  1038,  1039,    82,    83,   937,   376,   377,
   378,   160,   396,    78,    79,   135,   944,   322,    82,    83,
    78,    79,   135,   396,   482,    82,    83,   948,   858,   859,
   860,   861,   862,   863,   864,   865,   866,   867,   618,   619,
   483,  -604,  -609,   119,   119,  -604,  -609,   910,  -618,   910,
   910,   910,  -618,   260,   169,   426,  1140,   746,   747,   748,
   749,   376,   377,   378,   750,   751,   752,   753,   754,   755,
   756,  1162,   484,   412,  1029,   743,   396,   485,    98,   433,
   470,   436,   438,    78,  1001,   120,  1064,   172,  1006,  1006,
   852,   491,   853,   285,  -408,    98,  1078,   542,  1025,  1025,
  1063,   299,    78,  1001,   322,  -608,   172,  -607,  -606,  -608,
  -408,  -607,  -606,   854,   855,  1078,   953,   308,   396,  1125,
   119,  1107,   302,   473,   543,    78,   305,   306,   212,   172,
  1201,  1143,  1144,   119,   561,  1116,   119,  -605,  -602,  -603,
   545,  -605,  -602,  -603,   322,  -599,  -600,   546,  -591,  -599,
  -600,   308,  -591,   376,   377,   378,   550,  1006,   119,   119,
  1006,  -594,  1078,  1078,   615,  -594,   275,   276,  1052,   563,
   910,  1025,   910,  1025,  -614,  -615,  1025,  -616,  -614,  -615,
  1025,  -616,   119,   119,  -612,  1025,  -595,   564,  -612,  -593,
  -595,   119,  -597,  -593,  -598,   565,  -597,   573,  -598,   573,
  -596,   801,   466,  -269,  -596,   119,   568,   574,   809,   581,
   580,   593,   120,   583,   868,   869,   870,   277,  1088,  1089,
  1090,   589,   590,   598,   594,   396,  1006,   119,   119,  1078,
    98,   602,   608,   611,  1025,   613,   614,   566,   631,   569,
   635,   575,    98,   646,    98,   636,   638,  1056,   649,   582,
   652,   654,   299,   655,   119,  1107,   657,   670,   660,   591,
   672,   480,   746,   675,   683,   687,   677,   778,   688,   782,
   785,   599,   804,   806,   473,   826,   605,   828,  1025,   433,
   829,   832,   884,   833,   834,   498,   838,   883,   839,   851,
   502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
   512,   244,   245,   246,   247,   248,   249,   250,   251,   252,
   253,   881,   882,   887,   890,   918,   896,   926,   897,   898,
   935,   532,   947,   932,   940,   941,   945,   949,   986,   987,
   172,   801,   989,   922,  1048,  1040,   801,  1084,  1051,  1096,
   801,   901,   273,  1103,   904,  1120,   278,    98,   280,   928,
   284,  1142,  1158,  1140,  1115,   286,  1165,  1169,  1168,  1171,
   120,   648,  1173,  1174,   433,   294,  1176,   295,  1189,  1178,
   943,  1190,  1192,  1186,  1197,  1199,  1202,   662,   663,  1200,
  1209,   197,   230,   230,   299,  1203,  1210,  1016,   304,   496,
   198,   231,   231,   151,   152,   153,   154,   155,   156,   453,
  1204,  1191,  1151,   605,   254,  1058,   792,  1126,   433,   364,
   157,   158,   159,  1065,  1181,  1099,   952,   577,   691,   692,
   903,   925,   651,   322,  1196,   322,   790,   788,   938,   818,
   199,   232,   232,   475,   160,   287,   240,   422,   486,   539,
  1175,   612,   836,  1057,     0,   801,     0,     0,     0,     0,
   780,     0,     0,     0,     0,     0,     0,     0,   787,     0,
   789,     0,     0,     0,   802,   803,     0,     0,     0,   807,
     0,     0,     0,   591,   820,     0,     0,   169,     0,   473,
     0,     0,     0,     0,     0,     0,     0,   209,   238,   238,
   307,     0,  1054,  1055,     0,     0,   430,     0,     0,   322,
     0,     0,     0,   307,   307,   307,   307,   307,   307,     0,
   334,   335,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   197,   442,     0,     0,   444,     0,     0,     0,
     0,   198,     0,     0,   452,     0,     0,   455,     0,     0,
   690,     0,     0,     0,     0,     0,     0,     0,    78,   305,
   306,     0,   172,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   197,     0,     0,   120,
     0,   199,     0,     0,   197,   198,     0,   801,   197,   907,
     0,   197,   120,   198,     0,  1119,     0,   198,   796,   230,
   198,     0,     0,     0,   230,     0,   230,     0,   231,     0,
     0,     0,     0,   231,     0,   231,     0,  1132,  1133,   230,
   197,     0,     0,     0,     0,   199,     0,     0,   231,   198,
     0,   936,   820,   199,   605,     0,     0,   199,   209,     0,
   199,  1156,  1157,     0,     0,     0,     0,     0,   232,     0,
   120,     0,     0,   232,     0,   232,     0,     0,     0,     0,
     0,   547,     0,     0,   120,     0,     0,     0,   232,   199,
     0,   455,     0,     0,     0,     0,   562,     0,     0,     0,
     0,   567,   209,   570,     0,     0,  1182,  1183,     0,     0,
   209,   579,     0,     0,   209,   584,     0,   209,     0,     0,
     0,     0,     0,     0,     0,   238,     0,     0,     0,     0,
   238,     0,   238,   120,     0,     0,     0,     0,     0,     0,
  1030,     0,     0,     0,     0,   238,   209,  1037,   796,     0,
     0,     0,     0,   796,   211,   239,   239,   796,   307,   307,
   307,   307,   307,   307,   307,   307,   307,   307,   307,   307,
   307,   307,   307,   307,     0,     0,     0,    21,    22,    23,
    24,     0,    25,     0,     0,     0,     0,    30,    31,     0,
     0,    34,    35,     0,    37,    38,    39,    40,     0,     0,
     0,     0,   197,     0,     0,     0,   950,   498,   307,    52,
    53,   198,   956,   957,   958,   959,   960,   961,   962,   963,
   964,   965,   966,   230,   230,     0,     0,     0,     0,     0,
     0,     0,   231,   231,    77,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    81,     0,     0,   455,     0,     0,
     0,   199,     0,     0,   307,     0,     0,     0,  1101,   307,
     0,    98,   796,     0,     0,     0,   679,     0,     0,   307,
     0,   684,   232,   232,   820,     0,  1118,     0,     0,     0,
     0,   433,     0,     0,  1123,  1124,     0,     0,     0,     0,
  -251,     0,     0,     0,     0,   211,   304,     0,   562,     0,
   745,   151,   152,   153,   154,   155,   156,     0,   209,     0,
     0,   307,     0,   307,     0,   624,   626,     0,   157,   158,
   159,     0,     0,     0,     0,     0,     0,  1160,     0,   238,
   238,     0,    98,     0,  1164,  1166,     0,     0,     0,   211,
     0,   197,   160,     0,     0,     0,   820,   211,     0,     0,
   198,   211,     0,     0,   211,     0,     0,     0,     0,     0,
     0,     0,   239,     0,   307,     0,     0,   239,     0,   239,
     0,  1185,     0,     0,     0,   856,     0,     0,     0,     0,
     0,     0,   239,   211,     0,   169,   307,     0,     0,     0,
   199,  1193,  1194,     0,   796,    98,     0,     0,  1198,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   712,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   899,   900,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   209,     0,     0,
     0,     0,     0,     0,     0,     0,    78,   305,   306,     0,
   172,     0,     0,     0,     0,     0,     0,     0,   929,     0,
     0,   712,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   307,   307,   307,   307,   307,   307,   849,   850,
     0,     0,   214,     0,     0,     0,     0,   138,   139,   140,
     0,     0,   215,   143,   144,   145,   146,   147,   148,   216,
  -486,  -486,     0,     0,     0,   217,  -486,     0,     0,     0,
   151,   152,   153,   154,   155,   156,     0,     0,     0,     0,
     0,     0,     0,  -269,  -269,     0,     0,   157,   158,   159,
     0,     0,     0,     0,     0,   211,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   160,     0,     0,     0,     0,   239,   239,     0,     0,
     0,   307,     0,     0,  1031,     0,   307,     0,     0,     0,
     0,     0,     0,     0,     0,  -486,   162,   163,   164,   165,
   166,   167,     0,     0,     0,     0,     0,     0,     0,  1044,
   168,     0,     0,     0,   169,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   307,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   307,   307,   307,   307,   307,   307,   307,   307,   307,   307,
   307,   307,   307,   307,   307,   307,   307,     0,   307,     0,
     0,     0,    -1,     1,     0,    78,   170,   171,     0,   172,
   218,   219,     0,     0,   211,     0,     0,     0,     0,     0,
     2,     0,     0,  1102,     0,     0,  -269,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     3,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     4,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   307,     0,     0,     0,     0,     0,     0,     0,  -408,
  -408,  -408,     0,     5,     0,     0,     0,     0,     6,     7,
     8,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     9,    10,    11,     0,     0,   712,     0,
  1167,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    12,    13,    14,     0,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,     0,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
     0,     0,     0,     0,     0,     0,    78,    79,    80,    81,
  1205,    82,    83,    84,     0,     0,     0,     0,     0,     0,
     0,    -2,     1,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     0,     0,     0,     0,     0,  -269,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     3,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     4,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,  -408,  -408,
  -408,     0,     5,     0,     0,     0,   307,     6,     7,     8,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   307,
     0,     0,     9,    10,    11,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   307,    12,    13,    14,     0,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,     0,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    73,    74,    75,    76,    77,     0,
     0,     0,     0,     0,     0,    78,    79,    80,    81,   137,
    82,    83,    84,     0,   138,   139,   140,     0,   141,   142,
   143,   144,   145,   146,   147,   148,   149,  -541,   536,     0,
     0,     0,   150,     0,     0,     0,     0,   151,   152,   153,
   154,   155,   156,     0,     0,     0,     0,     0,     0,     0,
  -269,  -269,     0,     4,   157,   158,   159,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,  -408,  -408,  -408,   160,     5,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   162,   163,   164,   165,   166,   167,     0,
     0,     0,     0,     0,     0,     0,     0,   168,    12,    13,
    14,   169,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,     0,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
    62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
    72,    73,    74,    75,    76,    77,     0,     0,     0,     0,
     0,     0,    78,   170,   537,    81,   172,   173,    83,    84,
   137,     0,     0,     0,     0,   138,   139,   140,     0,   141,
   142,   143,   144,   145,   146,   147,   148,   149,  -541,     0,
     0,     0,     0,   150,     0,     0,     0,     0,   151,   152,
   153,   154,   155,   156,     0,     0,     0,     0,     0,     0,
     0,  -269,  -269,     0,     0,   157,   158,   159,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,  -269,  -269,  -269,   160,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   162,   163,   164,   165,   166,   167,
     0,     0,     0,     0,     0,     0,     0,     0,   168,  -269,
  -269,  -269,   169,  -269,  -269,  -269,  -269,  -269,  -269,  -269,
  -269,  -269,  -269,     0,  -269,  -269,  -269,  -269,  -269,  -269,
  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,
  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,
  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,
  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,
  -269,  -269,  -269,  -269,  -269,  -269,  -269,     0,     0,     0,
     0,     0,     0,    78,   170,   171,  -269,   172,   173,    83,
  -269,   214,     0,     0,     0,     0,   138,   139,   140,     0,
     0,   215,   143,   144,   145,   146,   147,   148,   216,  -541,
  -545,     0,     0,     0,   217,     0,     0,     0,     0,   151,
   152,   153,   154,   155,   156,     0,     0,     0,     0,     0,
     0,     0,  -269,  -269,     0,     0,   157,   158,   159,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,  -269,  -269,  -269,
   160,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   162,   163,   164,   165,   166,
   167,     0,     0,     0,     0,     0,     0,     0,     0,   168,
  -269,  -269,  -269,   169,  -269,  -269,  -269,  -269,  -269,  -269,
  -269,  -269,  -269,  -269,     0,  -269,  -269,  -269,  -269,  -269,
  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,
  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,
  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,
  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,
  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,     0,     0,
     0,     0,     0,     0,    78,   170,   171,  -269,   172,   218,
   219,  -269,   137,     0,     0,     0,     0,   138,   139,   140,
     0,   141,   142,   143,   144,   145,   146,   147,   148,   149,
  -541,     0,     0,     0,     0,   150,     0,     0,     0,     0,
   151,   152,   153,   154,   155,   156,     0,     0,     0,     0,
     0,     0,     0,  -269,  -269,     0,   137,   157,   158,   159,
     0,   138,   139,   140,     0,   141,   142,   143,   144,   145,
   146,   147,   148,   149,  -541,     0,     0,     0,     0,   150,
     0,   160,     0,     0,   151,   152,   153,   154,   155,   156,
     0,     0,     0,     0,     0,     0,     0,  -269,  -269,     0,
     0,   157,   158,   159,     0,   161,   162,   163,   164,   165,
   166,   167,     0,     0,     0,     0,     0,     0,     0,     0,
   168,     0,     0,     0,   169,   160,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,  -514,
   162,   163,   164,   165,   166,   167,     0,     0,     0,     0,
     0,     0,     0,     0,   168,     0,     0,     0,   169,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    78,   170,   171,     0,   172,
   173,    83,     0,     0,     0,   214,     0,     0,     0,     0,
   138,   139,   140,     0,     0,   215,   143,   144,   145,   146,
   147,   148,   216,  -541,  -545,     0,     0,     0,   217,     0,
     0,     0,     0,   151,   152,   153,   154,   155,   156,    78,
   170,   171,     0,   172,   173,    83,  -269,  -269,     0,   137,
   157,   158,   159,     0,   138,   139,   140,     0,   141,   142,
   143,   144,   145,   146,   147,   148,   149,  -541,   627,     0,
     0,     0,   150,     0,   160,     0,     0,   151,   152,   153,
   154,   155,   156,     0,     0,     0,     0,     0,     0,     0,
  -269,  -269,     0,     0,   157,   158,   159,     0,  -482,   162,
   163,   164,   165,   166,   167,     0,     0,     0,     0,   214,
     0,     0,     0,   168,   138,   139,   140,   169,   160,   215,
   143,   144,   145,   146,   147,   148,   216,  -541,  -545,     0,
     0,     0,   217,     0,     0,     0,     0,   151,   152,   153,
   154,   155,   156,   162,   163,   164,   165,   166,   167,     0,
  -269,  -269,     0,     0,   157,   158,   159,   168,     0,     0,
     0,   169,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   160,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    78,   170,
   171,     0,   172,   218,   219,     0,     0,     0,     0,     0,
     0,     0,     0,   162,   163,   164,   165,   166,   167,     0,
     0,     0,     0,     0,     0,     0,     0,   168,     0,     0,
     0,   169,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    78,   170,   171,   137,   172,   173,    83,     0,
   138,   139,   140,     0,   141,   142,   143,   144,   145,   146,
   147,   148,   149,  -541,     0,     0,     0,     0,   150,     0,
     0,     0,     0,   151,   152,   153,   154,   155,   156,     0,
     0,     0,     0,     0,     0,     0,  -269,  -269,     0,     0,
   157,   158,   159,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    78,   170,   171,     0,   172,   218,   219,     0,
     0,     0,     0,     0,   160,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   162,
   163,   164,   165,   166,   167,     0,     0,     0,     0,     0,
     0,     0,     0,   168,   138,   139,   140,   169,   141,   142,
   143,   144,   145,   146,   147,   148,   216,  -541,   554,     0,
     0,     0,   344,     0,     0,     0,     0,   151,   152,   153,
   154,   155,   156,     0,     0,     0,     0,     0,     0,     0,
  -269,  -269,     0,     4,   157,   158,   159,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   160,     5,
     0,     0,     0,     0,     0,     0,     0,     0,    78,   170,
   171,     0,   172,   173,    83,     0,     0,     0,     0,     0,
     0,     0,     0,   162,   163,   164,   165,   166,   167,     0,
     0,     0,     0,     0,     0,     0,     0,   555,    12,    13,
    14,   169,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,     0,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
    62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
    72,    73,    74,    75,    76,    77,     0,     0,     0,     0,
     0,     0,    78,   170,   537,    81,   172,   173,    83,    84,
   138,   139,   140,     0,   141,   142,   143,   144,   145,   146,
   147,   148,   216,  -541,   628,     0,     0,     0,   344,     0,
     0,     0,     0,   151,   152,   153,   154,   155,   156,     0,
     0,     0,     0,     0,     0,     0,  -269,  -269,     0,     4,
   157,   158,   159,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   160,     5,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   162,
   163,   164,   165,   166,   167,     0,     0,     0,     0,     0,
     0,     0,     0,   168,    12,    13,    14,   169,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,     0,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,     0,     0,     0,     0,     0,     0,    78,   170,
   537,    81,   172,   173,    83,    84,   138,   139,   140,     0,
   141,   142,   143,   144,   145,   146,   147,   148,   216,  -541,
   640,     0,     0,     0,   344,     0,     0,     0,     0,   151,
   152,   153,   154,   155,   156,     0,     0,     0,     0,     0,
     0,     0,  -269,  -269,     0,     4,   157,   158,   159,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   160,     5,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   162,   163,   164,   165,   166,
   167,     0,     0,     0,     0,     0,     0,     0,     0,   641,
    12,    13,    14,   169,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,     0,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
    70,    71,    72,    73,    74,    75,    76,    77,     0,     0,
     0,     0,     0,     0,    78,   170,   537,    81,   172,   173,
    83,    84,   138,   139,   140,     0,   141,   142,   143,   144,
   145,   146,   147,   148,   216,  -541,   639,     0,     0,     0,
   344,     0,     0,     0,     0,   151,   152,   153,   154,   155,
   156,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   157,   158,   159,     0,   138,   139,   140,     0,
   141,   142,   143,   144,   145,   146,   147,   148,   216,  -541,
   643,     0,     0,     0,   344,     0,   160,     0,     0,   151,
   152,   153,   154,   155,   156,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   157,   158,   159,     0,
     0,   162,   163,   164,   165,   166,   167,     0,     0,     0,
     0,     0,     0,     0,     0,   168,     0,     0,     0,   169,
   160,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   162,   163,   164,   165,   166,
   167,     0,     0,     0,     0,     0,     0,     0,     0,   644,
   138,   139,   140,   169,   141,   142,   143,   144,   145,   146,
   147,   148,   216,  -541,   696,     0,     0,     0,   344,     0,
     0,     0,     0,   151,   152,   153,   154,   155,   156,     0,
    78,   170,   171,     0,   172,   173,    83,     0,     0,     0,
   157,   158,   159,     0,   138,   139,   140,     0,   141,   142,
   143,   144,   145,   146,   147,   148,   216,  -541,   774,     0,
     0,     0,   344,     0,   160,     0,     0,   151,   152,   153,
   154,   155,   156,     0,    78,   170,   171,     0,   172,   173,
    83,     0,     0,     0,   157,   158,   159,     0,     0,   162,
   163,   164,   165,   166,   167,     0,     0,     0,     0,     0,
     0,     0,     0,   168,     0,     0,     0,   169,   160,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   162,   163,   164,   165,   166,   167,     0,
     0,     0,     0,     0,     0,     0,     0,   168,   138,   139,
   140,   169,   141,   142,   143,   144,   145,   146,   147,   148,
   216,  -541,   775,     0,     0,     0,   344,     0,     0,     0,
     0,   151,   152,   153,   154,   155,   156,     0,    78,   170,
   171,     0,   172,   173,    83,     0,     0,     0,   157,   158,
   159,     0,   138,   139,   140,     0,   141,   142,   143,   144,
   145,   146,   147,   148,   216,  -541,   777,     0,     0,     0,
   344,     0,   160,     0,     0,   151,   152,   153,   154,   155,
   156,     0,    78,   170,   171,     0,   172,   173,    83,     0,
     0,     0,   157,   158,   159,     0,     0,   162,   163,   164,
   165,   166,   167,     0,     0,     0,     0,     0,     0,     0,
     0,   776,     0,     0,     0,   169,   160,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   162,   163,   164,   165,   166,   167,     0,     0,     0,
     0,     0,     0,     0,     0,   168,   138,   139,   140,   169,
   141,   142,   143,   144,   145,   146,   147,   148,   216,  -541,
   906,     0,     0,     0,   344,     0,     0,     0,     0,   151,
   152,   153,   154,   155,   156,     0,    78,   170,   171,     0,
   172,   173,    83,     0,     0,     0,   157,   158,   159,     0,
   138,   139,   140,     0,   141,   142,   143,   144,   145,   146,
   147,   148,   216,  -541,     0,     0,     0,     0,   344,     0,
   160,     0,     0,   151,   152,   153,   154,   155,   156,     0,
    78,   170,   171,     0,   172,   173,    83,     0,     0,     0,
   157,   158,   159,     0,     0,   162,   163,   164,   165,   166,
   167,     0,     0,     0,     0,     0,     0,     0,     0,   168,
     0,     0,     0,   169,   160,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   162,
   163,   164,   165,   166,   167,  -135,     0,     0,     0,     0,
  -135,     0,     0,   168,     0,     0,     0,   169,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     4,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    78,   170,   171,     0,   172,   173,
    83,     0,     0,     0,     0,     0,     0,     5,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,  -544,     0,     0,     0,    78,   170,
   171,     0,   172,   173,    83,     0,    12,    13,    14,     0,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
     0,    25,    26,    27,    28,    29,    30,    31,    32,    33,
    34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
    74,    75,    76,    77,     0,     0,     0,     0,     0,     0,
     0,     0,   132,    81,    12,    13,    14,    84,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,     0,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,     0,     0,     0,     0,     0,   793,  1112,     0,
   132,    81,   304,     0,   794,    84,   795,   151,   152,   153,
   154,   155,   156,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   793,     0,   157,   158,   159,   304,     0,   794,
     0,   795,   151,   152,   153,   154,   155,   156,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   160,   157,
   158,   159,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   160,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   169,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,  -684,     0,     0,     0,
     0,     0,     0,     0,  -541,     0,   169,     0,     0,   344,
     0,     0,     0,     0,   151,   152,   153,   154,   155,   156,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   157,   158,   159,     0,     0,     0,     0,     0,     0,
     0,  -686,  -686,  -686,     0,     0,     0,     0,     0,     0,
     0,     0,    78,   170,   171,   160,   172,    82,    83,     0,
     0,  -686,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    78,   170,   171,
     0,   172,    82,    83,  -686,  -686,  -686,     0,  -686,  -686,
  -686,  -686,  -686,  -686,  -686,  -686,  -686,  -686,   169,  -686,
  -686,  -686,  -686,  -686,  -686,  -686,  -686,  -686,  -686,  -686,
  -686,  -686,  -686,  -686,  -686,  -686,  -686,  -686,  -686,  -686,
  -686,  -686,  -686,  -686,  -686,  -686,  -686,  -686,  -686,  -686,
  -686,  -686,  -686,  -686,  -686,  -686,  -686,  -686,  -686,  -686,
  -686,  -686,  -686,  -686,  -686,  -686,  -686,  -686,  -686,  -686,
  -686,  -686,  -269,     0,     0,     0,     0,     0,     0,     0,
     0,  -686,     3,     0,     0,  -686,     0,     0,     0,    78,
   305,   306,     0,   172,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    12,    13,
    14,     0,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,     0,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
    62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
    72,    73,    74,    75,    76,    77,     0,     0,     0,     0,
     0,     0,    78,    79,    80,    81,     0,    82,    83,    84,
   304,     0,     0,   600,     0,   151,   152,   153,   154,   155,
   156,   304,     0,     0,   681,     0,   151,   152,   153,   154,
   155,   156,   157,   158,   159,     0,     0,     0,     0,     0,
     0,   304,   951,   157,   158,   159,   151,   152,   153,   154,
   155,   156,   304,  -251,     0,     0,   160,   151,   152,   153,
   154,   155,   156,   157,   158,   159,     0,   160,     0,     0,
     0,     0,   304,     0,   157,   158,   159,   151,   152,   153,
   154,   155,   156,     0,     0,     0,     0,   160,     0,     0,
     0,     0,     0,     0,   157,   158,   159,   333,   160,   169,
     0,     0,   151,   152,   153,   154,   155,   156,     0,     0,
   169,     0,     0,     0,     0,     0,     0,     0,   160,   157,
   158,   159,     0,     0,     0,     0,     0,     0,     0,   623,
   169,     0,     0,     0,   151,   152,   153,   154,   155,   156,
     0,   169,     0,   160,     0,     0,     0,     0,     0,     0,
     0,   157,   158,   159,     0,     0,     0,     0,     0,     0,
     0,   169,     0,     0,     0,     0,     0,     0,     0,     0,
    78,   305,   306,     0,   172,   160,     0,     0,     0,     0,
     0,    78,   305,   306,   625,   172,   169,     0,     0,   151,
   152,   153,   154,   155,   156,     0,     0,     0,     0,     0,
     0,    78,   305,   306,     0,   172,   157,   158,   159,     0,
     0,     0,    78,   305,   306,     0,   172,   699,   169,     0,
     0,     0,   700,   701,   702,   703,   704,   705,     0,     0,
   160,     0,    78,   305,   306,     0,   172,     0,     0,   157,
   706,   707,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    78,   305,   306,
     0,   172,     0,   708,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   169,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    78,
   305,   306,     0,   172,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   169,     0,     0,     0,
     0,     0,     0,     0,  -195,  -195,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    78,   305,   306,     0,   172,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    78,   709,   710,
     0,   172,    12,    13,    14,     0,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,     0,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
     4,     0,     0,     0,     0,     0,     0,     0,   132,    81,
     0,     0,     0,    84,     0,     0,     0,     0,     0,     0,
     0,     0,  -408,  -408,  -408,     0,     5,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    12,    13,    14,     0,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
    65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
    75,    76,    77,     4,     0,     0,     0,     0,     0,     0,
     0,   132,    81,     0,     0,     0,    84,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     5,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    12,    13,
    14,     0,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,     0,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
    62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
    72,    73,    74,    75,    76,    77,     4,     0,     0,     0,
     0,     0,    78,  1061,   132,    81,     0,     0,     0,    84,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     5,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    12,    13,    14,     0,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,     0,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    73,    74,    75,    76,    77,  -408,
  -408,  -408,     0,     0,     0,     0,     0,   132,    81,     0,
     0,     0,    84,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    12,    13,    14,     0,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,     0,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
     9,    10,    11,     0,     0,     0,     0,     0,   132,    81,
     0,     0,     0,    84,     0,     0,     0,     0,     0,    12,
    13,    14,     0,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,     0,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
    51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
    61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
    71,    72,    73,    74,    75,    76,    77,     0,     0,     0,
     0,     0,     0,     0,     0,   132,    81,    12,    13,    14,
    84,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,     0,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
    73,    74,    75,    76,    77,     0,     0,     0,     0,     0,
     0,     0,     0,   132,    81,     0,     0,     0,    84
};

static const short yycheck[] = {     0,
     0,   138,   344,     4,     3,   118,   442,     8,     9,    10,
    11,   474,   279,     0,   529,   379,   380,   894,   381,   382,
   389,   383,   384,   385,   386,   633,   387,   388,   426,   602,
   390,   671,   391,   598,     9,    10,    11,   228,   793,   784,
   633,   633,   427,   798,   633,     5,     0,   802,   296,   531,
     4,   452,     6,   902,    27,   298,   637,    55,     0,     9,
   151,   152,   153,   154,   155,   156,  1009,   914,   259,   927,
    34,   217,    19,    21,   472,    21,   222,    25,   224,    25,
    21,   689,     5,   540,    85,    85,    27,     5,   805,   487,
   656,    21,   637,    28,   811,    25,   689,   689,    85,    18,
   689,   558,    25,    18,    23,     9,    24,    53,    54,    44,
   683,    21,  1073,  1074,     9,    25,    34,   118,   633,    49,
    50,    21,   999,  1000,   637,    25,   125,    37,    38,   637,
    21,    85,    26,   134,    28,   134,    27,    10,    11,    39,
    41,    51,    52,    85,   145,    99,   110,   111,  1091,   150,
    44,   633,   907,  1096,    24,    56,   110,   111,    10,    11,
  1009,  1010,    21,    32,    33,   805,    25,   168,   913,  1027,
   915,   811,    18,    26,   689,   150,     9,   758,    24,  1140,
   134,    34,     9,   584,   582,   183,    18,  1034,    34,  1036,
    49,    50,   773,   194,  1071,     9,    10,    11,   583,    87,
   150,   202,  1145,   204,    21,   206,   604,   689,   209,   400,
   453,   674,   479,   758,   931,   188,   217,   783,   560,   194,
   786,   222,    28,   224,   184,   185,   186,   202,   773,   189,
   190,   206,    24,  1082,   209,  1084,   237,   238,    44,    24,
   188,    24,   217,   218,   194,   758,   150,   222,    24,   224,
   758,    34,   202,    25,    26,   150,   206,    24,   911,   209,
   773,   914,   237,   238,   633,   773,   184,   185,    24,   633,
   633,   633,   633,   633,   633,   421,   422,   278,   278,    18,
   281,   282,   283,   891,  1039,   376,   377,   378,   238,   426,
   194,   931,    21,     5,   295,   295,    25,   564,   202,   194,
   301,   637,   206,    41,   646,   209,    24,   202,    26,    49,
    50,   206,    24,     5,   209,    21,    34,   150,    56,    25,
   689,   148,    34,   150,   323,   689,   689,   689,   689,   689,
   689,   579,   204,    25,   238,   472,   150,    18,   184,   185,
  1189,   608,    24,   238,   217,   346,     5,    24,   758,   222,
   487,   224,    34,   354,    18,   356,   623,    21,   625,   822,
    16,   194,   935,   773,   237,   217,    25,   194,   322,   884,
   222,    16,   224,   206,   939,   202,   209,    16,   986,   206,
   194,  1034,   209,  1036,   359,   237,   477,    24,   202,    26,
   217,   789,   206,   986,   986,   209,   794,   986,    26,   400,
    28,   184,   185,   217,   886,   238,    53,    54,   222,    19,
   224,   238,   184,   185,   186,     5,    44,   189,   190,    16,
   421,   422,   758,   237,   238,   400,    24,   428,    26,   430,
   430,   418,   699,    15,    24,    25,    26,   773,    24,   440,
    26,   442,   429,   444,    34,   582,   421,   422,     0,   100,
   400,   452,     4,   452,   455,    24,     8,    22,   459,    21,
  1068,    25,    26,    25,    28,    34,    22,   604,   180,   181,
     5,   986,   184,   185,   346,    18,   188,   304,    21,   433,
    44,    22,   354,    34,   356,   312,   313,   314,   315,    29,
   491,    21,   184,   185,   186,    25,   400,   189,   190,   500,
   501,    39,   184,   185,   986,   400,   333,   871,   872,    40,
   873,   874,   881,   875,   876,   877,   878,   344,   879,   880,
    42,    43,   882,     5,   883,   184,   185,   186,    22,  1137,
   189,   190,    18,    85,   361,    21,    87,    23,   539,   540,
    34,    24,    24,    25,    26,    55,   547,   547,   421,   422,
    94,    34,    34,   540,   555,    94,   428,   558,   559,    21,
    26,   674,    28,    25,   539,    34,   118,   400,    21,   421,
   422,   558,    25,   400,   184,   185,   186,    19,    44,   189,
   190,   408,   134,   584,   188,   584,   400,    49,    50,   539,
    37,    38,    22,   145,   184,   185,   186,    21,    24,   189,
   190,    25,    21,   945,    51,    52,    25,   421,   422,   700,
   701,   702,   703,   704,   705,   184,   185,   986,    18,   491,
    22,    21,   986,   986,   986,   986,   986,   986,   629,   630,
    49,    50,   633,   184,   185,   539,    22,   591,   189,   190,
   641,   642,    23,   644,   539,    26,   894,    28,    94,   184,
   185,   186,   789,  1116,   189,   190,    18,   794,   659,    21,
   661,    22,   663,    88,    89,    26,  1102,    28,   540,   670,
     6,     7,   673,   674,   675,   674,   184,   185,   186,    19,
   679,   189,   190,    44,    94,   933,   558,   559,   689,    20,
   184,   185,   186,   118,   119,   189,   190,   180,   181,    23,
   837,   184,   185,   530,    24,   188,    26,   132,    28,   822,
     0,    24,   539,    26,     4,   184,   185,   186,    20,    21,
   189,   190,    12,    13,    44,   539,   278,    47,    48,   281,
   282,   283,    27,    57,    58,    59,    60,    61,    62,    63,
    64,    65,    66,   295,    23,    25,    26,   995,    28,   301,
    24,    21,    26,    21,    22,    25,  1004,   629,   630,    25,
    34,    24,    28,    24,    44,    26,  1164,    37,    38,    18,
   642,   598,    26,    34,    18,   776,  1024,   868,   869,   870,
    34,    51,    52,    18,  1051,    18,    25,    26,    21,    28,
    32,    33,   793,  1041,   795,    85,   623,   798,   625,    18,
  1198,   802,    21,   675,   631,    44,    25,    24,   635,    22,
   100,   101,   102,   103,   104,   105,   106,   107,    18,   109,
    21,   822,   112,   822,    25,    49,    50,   781,   118,  1077,
   784,   832,    25,    24,    37,    38,    27,    21,   128,   129,
   130,    25,    21,    34,   134,    29,    25,    21,    51,    52,
  1098,    25,    24,    32,    33,    27,    53,    54,   949,    21,
   150,   688,    34,    25,    21,    20,    21,   157,    25,    18,
    32,    33,   699,    21,    25,    24,    18,    25,   430,    21,
    29,    30,    31,    32,    33,    34,    18,    21,   440,    21,
   442,    25,   444,   894,    67,    68,    69,    46,    47,    48,
   452,   902,    24,   455,    23,    21,   907,   459,    18,    25,
   184,   185,   186,    20,    21,   189,   190,   191,    34,    35,
    36,    70,    21,   184,   185,   186,    25,   217,   189,   190,
   184,   185,   186,    21,    18,   189,   190,    25,    57,    58,
    59,    60,    61,    62,    63,    64,    65,    66,   500,   501,
    18,    21,    21,   954,   955,    25,    25,   911,    21,   913,
   914,   915,    25,    18,   113,   255,    21,    72,    73,    74,
    75,    34,    35,    36,    79,    80,    81,    82,    83,    84,
    85,    18,    18,    18,    21,   986,    21,    18,   278,   279,
    25,   281,   282,   184,   185,   547,   997,   188,   999,  1000,
    24,    19,    26,  1116,    28,   295,  1007,     9,  1009,  1010,
   997,   301,   184,   185,   304,    21,   188,    21,    21,    25,
    44,    25,    25,    47,    48,  1026,   853,  1164,    21,    22,
  1031,  1031,   584,   323,    11,   184,   185,   186,  1039,   188,
  1177,    32,    33,  1044,  1044,  1044,  1047,    21,    21,    21,
    25,    25,    25,    25,   344,    21,    21,    24,    21,    25,
    25,  1198,    25,    34,    35,    36,    11,  1068,  1069,  1070,
  1071,    21,  1073,  1074,    21,    25,   110,   111,    25,    90,
  1034,  1082,  1036,  1084,    21,    21,  1087,    21,    25,    25,
  1091,    25,  1093,  1094,    21,  1096,    21,    21,    25,    21,
    25,  1102,    21,    25,    21,    19,    25,   659,    25,   661,
    21,   663,   939,    19,    25,  1116,    19,    19,   670,    27,
    90,   673,   674,    24,    34,    35,    36,   417,    51,    52,
    53,    25,    21,    18,    22,    21,  1137,  1138,  1139,  1140,
   430,    24,    21,    25,  1145,    11,    24,   437,    24,   439,
    24,   441,   442,    24,   444,    27,    25,   984,    23,   449,
    20,    19,   452,    20,  1165,  1165,    19,    21,    23,   459,
     5,   336,    72,    25,    24,    22,    27,    25,    24,    20,
    20,   471,    27,    25,   474,    18,   476,    25,  1189,   479,
    27,    21,    55,    25,    22,   360,    25,    40,    25,    24,
   365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
   375,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    29,    39,    25,   185,    18,    90,    22,    90,    90,
    24,   396,    18,    25,    25,    25,    25,    25,    21,    18,
   188,   793,    40,   795,    18,    27,   798,    23,    21,    24,
   802,    90,   108,    18,    90,   190,   112,   547,   114,    90,
   116,    22,    22,    21,    90,   121,    21,    20,    22,    20,
   822,   561,    90,    25,   564,   131,    25,   133,    40,    27,
   832,    27,    25,   192,    18,    20,    27,   577,   578,    20,
     0,     9,    10,    11,   584,    25,     0,   902,    24,    25,
     9,    10,    11,    29,    30,    31,    32,    33,    34,   301,
  1189,  1158,  1087,   603,    85,   989,   662,  1059,   608,   175,
    46,    47,    48,   998,  1137,  1026,   852,   444,   618,   619,
   771,   799,   564,   623,  1165,   625,   661,   659,   822,   673,
     9,    10,    11,   323,    70,   125,    11,   237,   342,   400,
  1121,   491,   689,   986,    -1,   907,    -1,    -1,    -1,    -1,
   650,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   658,    -1,
   660,    -1,    -1,    -1,   664,   665,    -1,    -1,    -1,   669,
    -1,    -1,    -1,   673,   674,    -1,    -1,   113,    -1,   679,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,     9,    10,    11,
   138,    -1,   954,   955,    -1,    -1,   262,    -1,    -1,   699,
    -1,    -1,    -1,   151,   152,   153,   154,   155,   156,    -1,
   158,   159,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   150,   289,    -1,    -1,   292,    -1,    -1,    -1,
    -1,   150,    -1,    -1,   300,    -1,    -1,   303,    -1,    -1,
   615,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   184,   185,
   186,    -1,   188,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   194,    -1,    -1,  1031,
    -1,   150,    -1,    -1,   202,   194,    -1,  1039,   206,   779,
    -1,   209,  1044,   202,    -1,  1047,    -1,   206,   663,   217,
   209,    -1,    -1,    -1,   222,    -1,   224,    -1,   217,    -1,
    -1,    -1,    -1,   222,    -1,   224,    -1,  1069,  1070,   237,
   238,    -1,    -1,    -1,    -1,   194,    -1,    -1,   237,   238,
    -1,   821,   822,   202,   824,    -1,    -1,   206,   150,    -1,
   209,  1093,  1094,    -1,    -1,    -1,    -1,    -1,   217,    -1,
  1102,    -1,    -1,   222,    -1,   224,    -1,    -1,    -1,    -1,
    -1,   417,    -1,    -1,  1116,    -1,    -1,    -1,   237,   238,
    -1,   427,    -1,    -1,    -1,    -1,   432,    -1,    -1,    -1,
    -1,   437,   194,   439,    -1,    -1,  1138,  1139,    -1,    -1,
   202,   447,    -1,    -1,   206,   451,    -1,   209,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   217,    -1,    -1,    -1,    -1,
   222,    -1,   224,  1165,    -1,    -1,    -1,    -1,    -1,    -1,
   910,    -1,    -1,    -1,    -1,   237,   238,   917,   793,    -1,
    -1,    -1,    -1,   798,     9,    10,    11,   802,   376,   377,
   378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
   388,   389,   390,   391,    -1,    -1,    -1,   120,   121,   122,
   123,    -1,   125,    -1,    -1,    -1,    -1,   130,   131,    -1,
    -1,   134,   135,    -1,   137,   138,   139,   140,    -1,    -1,
    -1,    -1,   400,    -1,    -1,    -1,   851,   852,   426,   152,
   153,   400,   857,   858,   859,   860,   861,   862,   863,   864,
   865,   866,   867,   421,   422,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   421,   422,   177,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   187,    -1,    -1,   583,    -1,    -1,
    -1,   400,    -1,    -1,   472,    -1,    -1,    -1,  1028,   477,
    -1,  1031,   907,    -1,    -1,    -1,   602,    -1,    -1,   487,
    -1,   607,   421,   422,  1044,    -1,  1046,    -1,    -1,    -1,
    -1,  1051,    -1,    -1,  1054,  1055,    -1,    -1,    -1,    -1,
    18,    -1,    -1,    -1,    -1,   150,    24,    -1,   634,    -1,
   636,    29,    30,    31,    32,    33,    34,    -1,   400,    -1,
    -1,   529,    -1,   531,    -1,   533,   534,    -1,    46,    47,
    48,    -1,    -1,    -1,    -1,    -1,    -1,  1097,    -1,   421,
   422,    -1,  1102,    -1,  1104,  1105,    -1,    -1,    -1,   194,
    -1,   539,    70,    -1,    -1,    -1,  1116,   202,    -1,    -1,
   539,   206,    -1,    -1,   209,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   217,    -1,   582,    -1,    -1,   222,    -1,   224,
    -1,  1141,    -1,    -1,    -1,   711,    -1,    -1,    -1,    -1,
    -1,    -1,   237,   238,    -1,   113,   604,    -1,    -1,    -1,
   539,  1161,  1162,    -1,  1039,  1165,    -1,    -1,  1168,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   633,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   766,   767,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   539,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   184,   185,   186,    -1,
   188,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   804,    -1,
    -1,   689,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   700,   701,   702,   703,   704,   705,   706,   707,
    -1,    -1,     1,    -1,    -1,    -1,    -1,     6,     7,     8,
    -1,    -1,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    -1,    -1,    -1,    24,    25,    -1,    -1,    -1,
    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    42,    43,    -1,    -1,    46,    47,    48,
    -1,    -1,    -1,    -1,    -1,   400,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    70,    -1,    -1,    -1,    -1,   421,   422,    -1,    -1,
    -1,   789,    -1,    -1,   910,    -1,   794,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    94,    95,    96,    97,    98,
    99,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   935,
   109,    -1,    -1,    -1,   113,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   837,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   868,   869,   870,   871,   872,   873,   874,   875,   876,   877,
   878,   879,   880,   881,   882,   883,   884,    -1,   886,    -1,
    -1,    -1,     0,     1,    -1,   184,   185,   186,    -1,   188,
   189,   190,    -1,    -1,   539,    -1,    -1,    -1,    -1,    -1,
    18,    -1,    -1,  1029,    -1,    -1,    24,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   949,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
    68,    69,    -1,    71,    -1,    -1,    -1,    -1,    76,    77,
    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    91,    92,    93,    -1,    -1,   986,    -1,
  1106,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   110,   111,   112,    -1,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,    -1,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
   158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
   168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
    -1,    -1,    -1,    -1,    -1,    -1,   184,   185,   186,   187,
  1196,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     0,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    18,
    -1,    -1,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    34,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    45,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,
    69,    -1,    71,    -1,    -1,    -1,  1164,    76,    77,    78,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1177,
    -1,    -1,    91,    92,    93,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
  1198,   110,   111,   112,    -1,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
   159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
   169,   170,   171,   172,   173,   174,   175,   176,   177,    -1,
    -1,    -1,    -1,    -1,    -1,   184,   185,   186,   187,     1,
   189,   190,   191,    -1,     6,     7,     8,    -1,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    -1,
    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,
    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    42,    43,    -1,    45,    46,    47,    48,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    70,    71,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    95,    96,    97,    98,    99,   100,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,    -1,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
   152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
   162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
   172,   173,   174,   175,   176,   177,    -1,    -1,    -1,    -1,
    -1,    -1,   184,   185,   186,   187,   188,   189,   190,   191,
     1,    -1,    -1,    -1,    -1,     6,     7,     8,    -1,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    -1,
    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,
    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    42,    43,    -1,    -1,    46,    47,    48,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    70,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    95,    96,    97,    98,    99,   100,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,    -1,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
   161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
   171,   172,   173,   174,   175,   176,   177,    -1,    -1,    -1,
    -1,    -1,    -1,   184,   185,   186,   187,   188,   189,   190,
   191,     1,    -1,    -1,    -1,    -1,     6,     7,     8,    -1,
    -1,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,
    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    42,    43,    -1,    -1,    46,    47,    48,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,
    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    95,    96,    97,    98,    99,
   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,    -1,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
   150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
   160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
   170,   171,   172,   173,   174,   175,   176,   177,    -1,    -1,
    -1,    -1,    -1,    -1,   184,   185,   186,   187,   188,   189,
   190,   191,     1,    -1,    -1,    -1,    -1,     6,     7,     8,
    -1,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    -1,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,
    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    42,    43,    -1,     1,    46,    47,    48,
    -1,     6,     7,     8,    -1,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    -1,    -1,    -1,    -1,    24,
    -1,    70,    -1,    -1,    29,    30,    31,    32,    33,    34,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,
    -1,    46,    47,    48,    -1,    94,    95,    96,    97,    98,
    99,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   109,    -1,    -1,    -1,   113,    70,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    94,
    95,    96,    97,    98,    99,   100,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   184,   185,   186,    -1,   188,
   189,   190,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,
     6,     7,     8,    -1,    -1,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    -1,    -1,    -1,    24,    -1,
    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,   184,
   185,   186,    -1,   188,   189,   190,    42,    43,    -1,     1,
    46,    47,    48,    -1,     6,     7,     8,    -1,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    -1,
    -1,    -1,    24,    -1,    70,    -1,    -1,    29,    30,    31,
    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    42,    43,    -1,    -1,    46,    47,    48,    -1,    94,    95,
    96,    97,    98,    99,   100,    -1,    -1,    -1,    -1,     1,
    -1,    -1,    -1,   109,     6,     7,     8,   113,    70,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    -1,
    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,
    32,    33,    34,    95,    96,    97,    98,    99,   100,    -1,
    42,    43,    -1,    -1,    46,    47,    48,   109,    -1,    -1,
    -1,   113,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   184,   185,
   186,    -1,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    95,    96,    97,    98,    99,   100,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,    -1,    -1,
    -1,   113,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   184,   185,   186,     1,   188,   189,   190,    -1,
     6,     7,     8,    -1,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    -1,    -1,    -1,    -1,    24,    -1,
    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,    -1,
    46,    47,    48,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   184,   185,   186,    -1,   188,   189,   190,    -1,
    -1,    -1,    -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    95,
    96,    97,    98,    99,   100,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   109,     6,     7,     8,   113,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    -1,
    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,
    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    42,    43,    -1,    45,    46,    47,    48,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   184,   185,
   186,    -1,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    95,    96,    97,    98,    99,   100,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,    -1,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
   152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
   162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
   172,   173,   174,   175,   176,   177,    -1,    -1,    -1,    -1,
    -1,    -1,   184,   185,   186,   187,   188,   189,   190,   191,
     6,     7,     8,    -1,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    -1,    -1,    -1,    24,    -1,
    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,    45,
    46,    47,    48,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    70,    71,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    95,
    96,    97,    98,    99,   100,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,    -1,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
   156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
   166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
   176,   177,    -1,    -1,    -1,    -1,    -1,    -1,   184,   185,
   186,   187,   188,   189,   190,   191,     6,     7,     8,    -1,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,
    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    42,    43,    -1,    45,    46,    47,    48,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    70,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    95,    96,    97,    98,    99,
   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,    -1,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
   150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
   160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
   170,   171,   172,   173,   174,   175,   176,   177,    -1,    -1,
    -1,    -1,    -1,    -1,   184,   185,   186,   187,   188,   189,
   190,   191,     6,     7,     8,    -1,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
    24,    -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,
    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    46,    47,    48,    -1,     6,     7,     8,    -1,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    -1,    -1,    -1,    24,    -1,    70,    -1,    -1,    29,
    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    46,    47,    48,    -1,
    -1,    95,    96,    97,    98,    99,   100,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,
    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    95,    96,    97,    98,    99,
   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,
     6,     7,     8,   113,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    -1,    -1,    -1,    24,    -1,
    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,    -1,
   184,   185,   186,    -1,   188,   189,   190,    -1,    -1,    -1,
    46,    47,    48,    -1,     6,     7,     8,    -1,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    -1,
    -1,    -1,    24,    -1,    70,    -1,    -1,    29,    30,    31,
    32,    33,    34,    -1,   184,   185,   186,    -1,   188,   189,
   190,    -1,    -1,    -1,    46,    47,    48,    -1,    -1,    95,
    96,    97,    98,    99,   100,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,    70,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    95,    96,    97,    98,    99,   100,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,     6,     7,
     8,   113,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    -1,    -1,    -1,    24,    -1,    -1,    -1,
    -1,    29,    30,    31,    32,    33,    34,    -1,   184,   185,
   186,    -1,   188,   189,   190,    -1,    -1,    -1,    46,    47,
    48,    -1,     6,     7,     8,    -1,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
    24,    -1,    70,    -1,    -1,    29,    30,    31,    32,    33,
    34,    -1,   184,   185,   186,    -1,   188,   189,   190,    -1,
    -1,    -1,    46,    47,    48,    -1,    -1,    95,    96,    97,
    98,    99,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   109,    -1,    -1,    -1,   113,    70,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    95,    96,    97,    98,    99,   100,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   109,     6,     7,     8,   113,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,
    30,    31,    32,    33,    34,    -1,   184,   185,   186,    -1,
   188,   189,   190,    -1,    -1,    -1,    46,    47,    48,    -1,
     6,     7,     8,    -1,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    -1,    -1,    -1,    -1,    24,    -1,
    70,    -1,    -1,    29,    30,    31,    32,    33,    34,    -1,
   184,   185,   186,    -1,   188,   189,   190,    -1,    -1,    -1,
    46,    47,    48,    -1,    -1,    95,    96,    97,    98,    99,
   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,
    -1,    -1,    -1,   113,    70,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    95,
    96,    97,    98,    99,   100,    19,    -1,    -1,    -1,    -1,
    24,    -1,    -1,   109,    -1,    -1,    -1,   113,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   184,   185,   186,    -1,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,    -1,    71,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    20,    -1,    -1,    -1,   184,   185,
   186,    -1,   188,   189,   190,    -1,   110,   111,   112,    -1,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
    -1,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
   154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
   164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
   174,   175,   176,   177,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   186,   187,   110,   111,   112,   191,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,    -1,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
   156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
   166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
   176,   177,    -1,    -1,    -1,    -1,    -1,    19,    20,    -1,
   186,   187,    24,    -1,    26,   191,    28,    29,    30,    31,
    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    19,    -1,    46,    47,    48,    24,    -1,    26,
    -1,    28,    29,    30,    31,    32,    33,    34,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    46,
    47,    48,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   113,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    22,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    19,    -1,   113,    -1,    -1,    24,
    -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    46,    47,    48,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    67,    68,    69,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   184,   185,   186,    70,   188,   189,   190,    -1,
    -1,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   184,   185,   186,
    -1,   188,   189,   190,   110,   111,   112,    -1,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   113,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
   156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
   166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
   176,   177,    24,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   187,    34,    -1,    -1,   191,    -1,    -1,    -1,   184,
   185,   186,    -1,   188,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
   112,    -1,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,    -1,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
   152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
   162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
   172,   173,   174,   175,   176,   177,    -1,    -1,    -1,    -1,
    -1,    -1,   184,   185,   186,   187,    -1,   189,   190,   191,
    24,    -1,    -1,    27,    -1,    29,    30,    31,    32,    33,
    34,    24,    -1,    -1,    27,    -1,    29,    30,    31,    32,
    33,    34,    46,    47,    48,    -1,    -1,    -1,    -1,    -1,
    -1,    24,    25,    46,    47,    48,    29,    30,    31,    32,
    33,    34,    24,    25,    -1,    -1,    70,    29,    30,    31,
    32,    33,    34,    46,    47,    48,    -1,    70,    -1,    -1,
    -1,    -1,    24,    -1,    46,    47,    48,    29,    30,    31,
    32,    33,    34,    -1,    -1,    -1,    -1,    70,    -1,    -1,
    -1,    -1,    -1,    -1,    46,    47,    48,    24,    70,   113,
    -1,    -1,    29,    30,    31,    32,    33,    34,    -1,    -1,
   113,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    46,
    47,    48,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    24,
   113,    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,
    -1,   113,    -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    46,    47,    48,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   113,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   184,   185,   186,    -1,   188,    70,    -1,    -1,    -1,    -1,
    -1,   184,   185,   186,    24,   188,   113,    -1,    -1,    29,
    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
    -1,   184,   185,   186,    -1,   188,    46,    47,    48,    -1,
    -1,    -1,   184,   185,   186,    -1,   188,    24,   113,    -1,
    -1,    -1,    29,    30,    31,    32,    33,    34,    -1,    -1,
    70,    -1,   184,   185,   186,    -1,   188,    -1,    -1,    46,
    47,    48,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   184,   185,   186,
    -1,   188,    -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   113,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   184,
   185,   186,    -1,   188,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   113,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    42,    43,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   184,   185,   186,    -1,   188,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   184,   185,   186,
    -1,   188,   110,   111,   112,    -1,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,    -1,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
   158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
   168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   186,   187,
    -1,    -1,    -1,   191,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    67,    68,    69,    -1,    71,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   110,   111,   112,    -1,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,    -1,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
   155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
   165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
   175,   176,   177,    45,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   186,   187,    -1,    -1,    -1,   191,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
   112,    -1,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,    -1,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
   152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
   162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
   172,   173,   174,   175,   176,   177,    45,    -1,    -1,    -1,
    -1,    -1,   184,   185,   186,   187,    -1,    -1,    -1,   191,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   110,   111,   112,    -1,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
   159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
   169,   170,   171,   172,   173,   174,   175,   176,   177,    67,
    68,    69,    -1,    -1,    -1,    -1,    -1,   186,   187,    -1,
    -1,    -1,   191,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   110,   111,   112,    -1,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,    -1,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
   158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
   168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
    91,    92,    93,    -1,    -1,    -1,    -1,    -1,   186,   187,
    -1,    -1,    -1,   191,    -1,    -1,    -1,    -1,    -1,   110,
   111,   112,    -1,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,    -1,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
   161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
   171,   172,   173,   174,   175,   176,   177,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   186,   187,   110,   111,   112,
   191,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,    -1,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
   163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
   173,   174,   175,   176,   177,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   186,   187,    -1,    -1,    -1,   191
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */

/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif



/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 3:
{ context_checkGlobalScope (); ;
    break;}
case 4:
{ context_checkGlobalScope (); ;
    break;}
case 5:
{ uentry_clearDecl (); ;
    break;}
case 6:
{ uentry_clearDecl (); ;
    break;}
case 7:
{ uentry_clearDecl (); ;
    break;}
case 8:
{ uentry_clearDecl (); ;
    break;}
case 9:
{ uentry_clearDecl (); ;
    break;}
case 10:
{ uentry_checkDecl (); exprNode_free (yyvsp[0].expr); ;
    break;}
case 11:
{ uentry_clearDecl (); /* evans 2002-02-08: okay to have a null statement */ ;
    break;}
case 12:
{ uentry_clearDecl (); ;
    break;}
case 13:
{ checkConstant (yyvsp[-6].qtyp, yyvsp[-4].ntyp); ;
    break;}
case 14:
{ checkValueConstant (yyvsp[-9].qtyp, yyvsp[-7].ntyp, yyvsp[-3].expr) ; ;
    break;}
case 15:
{ context_enterFunctionHeader (); ;
    break;}
case 16:
{ 
     declareStaticFunction (yyvsp[-2].ntyp); context_quietExitFunction (); 
     context_exitFunctionHeader (); 
   ;
    break;}
case 17:
{ 
     qtype qint = qtype_create (ctype_int);
     yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, qint);
     qtype_free (qint);
   ;
    break;}
case 18:
{ yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, yyvsp[-2].qtyp); ;
    break;}
case 20:
{ yyval.ntyp = yyvsp[0].ntyp; qtype_adjustPointers (yyvsp[-1].count, idDecl_getTyp (yyval.ntyp)); ;
    break;}
case 21:
{ yyval.ntyp = idDecl_create (yyvsp[0].cname, qtype_unknown ()); ;
    break;}
case 22:
{ yyval.ntyp = idDecl_expectFunction (yyvsp[-2].ntyp); ;
    break;}
case 23:
{ yyval.ntyp = idDecl_replaceCtype (yyvsp[-2].ntyp, ctype_makeArray (idDecl_getCtype (yyvsp[-2].ntyp))); ;
    break;}
case 24:
{
     exprNode_findValue (yyvsp[-2].expr);
     idDecl_notExpectingFunction (yyvsp[-5].ntyp);

     if (exprNode_hasValue (yyvsp[-2].expr)) 
       {
	 yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ctype_makeInnerFixedArray (idDecl_getCtype (yyvsp[-5].ntyp), 
								  exprNode_getLongValue (yyvsp[-2].expr)));
       } 
     else
       {
	 yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ctype_makeArray (idDecl_getCtype (yyvsp[-5].ntyp))); 
       }
   ;
    break;}
case 25:
{ setCurrentParams (uentryList_missingParams); ;
    break;}
case 26:
{ /* need to support globals and modifies here! */
     ctype ct = ctype_makeFunction (idDecl_getCtype (yyvsp[-5].ntyp), 
				    uentryList_makeMissingParams ());
     
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ct);
     idDecl_addClauses (yyval.ntyp, yyvsp[0].funcclauselist);
     context_popLoc ();
     /*drl 7/25/01 added*/
     setImplictfcnConstraints();
   ;
    break;}
case 27:
{ setCurrentParams (yyvsp[-1].entrylist); ;
    break;}
case 28:
{ setImplictfcnConstraints ();
     clearCurrentParams ();
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-6].ntyp, ctype_makeFunction (idDecl_getCtype (yyvsp[-6].ntyp), yyvsp[-3].entrylist));
     idDecl_addClauses (yyval.ntyp, yyvsp[0].funcclauselist);
     context_popLoc (); 
   ;
    break;}
case 29:
{ yyval.ntyp = idDecl_create (yyvsp[0].cname, qtype_unknown ()); ;
    break;}
case 30:
{ yyval.ntyp = idDecl_expectFunction (yyvsp[-2].ntyp); ;
    break;}
case 31:
{ yyval.ntyp = idDecl_replaceCtype (yyvsp[-2].ntyp, ctype_makeArray (idDecl_getCtype (yyvsp[-2].ntyp))); ;
    break;}
case 32:
{ 
     int value;

     if (exprNode_hasValue (yyvsp[-2].expr) 
	 && multiVal_isInt (exprNode_getValue (yyvsp[-2].expr)))
       {
	 value = (int) multiVal_forceInt (exprNode_getValue (yyvsp[-2].expr));
       }
     else
       {
	 value = 0;
       }

     yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ctype_makeFixedArray (idDecl_getCtype (yyvsp[-5].ntyp), value));
   ;
    break;}
case 33:
{ setCurrentParams (uentryList_missingParams); ;
    break;}
case 34:
{
     ctype ct = ctype_makeFunction (idDecl_getCtype (yyvsp[-5].ntyp), 
				    uentryList_makeMissingParams ());
     
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ct);
     idDecl_addClauses (yyval.ntyp, yyvsp[0].funcclauselist);
     context_popLoc (); 
   ;
    break;}
case 35:
{ setCurrentParams (yyvsp[-1].entrylist); ;
    break;}
case 36:
{ 
     clearCurrentParams ();
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-6].ntyp, ctype_makeFunction (idDecl_getCtype (yyvsp[-6].ntyp), yyvsp[-3].entrylist));
     idDecl_addClauses (yyval.ntyp, yyvsp[0].funcclauselist);
     context_popLoc (); 
   ;
    break;}
case 37:
{ setCurrentParams (yyvsp[-1].entrylist); ;
    break;}
case 38:
{ clearCurrentParams (); ;
    break;}
case 39:
{ declareCIter (yyvsp[-8].cname, yyvsp[-6].entrylist); ;
    break;}
case 40:
{ exprNode_checkMacroBody (yyvsp[-1].expr); ;
    break;}
case 41:
{ exprNode_checkIterBody (yyvsp[-1].expr); ;
    break;}
case 42:
{ exprNode_checkIterEnd (yyvsp[-1].expr); ;
    break;}
case 43:
{ exprChecks_checkEmptyMacroBody (); ;
    break;}
case 44:
{ clabstract_declareFunction (yyvsp[0].ntyp); ;
    break;}
case 45:
{ yyval.msconstraint = metaStateConstraint_create (yyvsp[-2].msspec, yyvsp[0].msexpr); ;
    break;}
case 46:
{ cscanner_expectingMetaStateName (); ;
    break;}
case 47:
{ cscanner_clearExpectingMetaStateName ();
      yyval.msspec = metaStateSpecifier_create (yyvsp[-3].sr, yyvsp[0].msinfo); ;
    break;}
case 48:
{ cscanner_expectingMetaStateName (); ;
    break;}
case 49:
{ cscanner_clearExpectingMetaStateName ();
      yyval.msspec = metaStateSpecifier_createElipsis (yyvsp[0].msinfo); ;
    break;}
case 50:
{ yyval.msexpr = metaStateExpression_create (yyvsp[0].msspec); ;
    break;}
case 51:
{ yyval.msexpr = metaStateExpression_createMerge (yyvsp[-2].msspec, yyvsp[0].msexpr); ;
    break;}
case 55:
{ yyval.conL = constraintList_add (yyvsp[0].conL, yyvsp[-2].con); ;
    break;}
case 56:
{ yyval.conL = constraintList_single (yyvsp[0].con); ;
    break;}
case 57:
{
 yyval.con = makeConstraintParse3 (yyvsp[-2].conE, yyvsp[-1].tok, yyvsp[0].conE);
 DPRINTF(("Done BufConstraint1\n")); ;
    break;}
case 64:
{yyval.conE = constraintExpr_parseMakeUnaryOp (yyvsp[-3].tok, yyvsp[-1].conE);  DPRINTF( ("Got BufConstraintExpr UNary Op ") ); ;
    break;}
case 65:
{
   DPRINTF( ("Got BufConstraintExpr BINary Op ") );
   yyval.conE = constraintExpr_parseMakeBinaryOp (yyvsp[-3].conE, yyvsp[-2].tok, yyvsp[-1].conE); ;
    break;}
case 66:
{ yyval.conE =  constraintExpr_makeTermsRef (yyvsp[0].sr);;
    break;}
case 67:
{ yyval.conE = constraintExpr_makeIntLiteral (exprNode_getLongValue (yyvsp[0].expr)); ;
    break;}
case 68:
{ /*@-onlytrans@*/ yyval.sr = checkbufferConstraintClausesId (yyvsp[0].entry); /*@=onlytrans@*/ /*@i523@*/ ;
    break;}
case 69:
{ yyval.sr = fixStateClausesId (yyvsp[0].cname); ;
    break;}
case 70:
{ yyval.sr = sRef_makeAnyArrayFetch (yyvsp[-2].sr); ;
    break;}
case 71:
{
    /*
    char *t; int c; 
    t =  cstring_toCharsSafe (exprNode_unparse($3)); 
    c = atoi( t );
    */
    yyval.sr = sRef_makeArrayFetchKnown (yyvsp[-3].sr, exprNode_getLongValue (yyvsp[-1].expr));
  ;
    break;}
case 72:
{ yyval.sr = sRef_constructPointer (yyvsp[0].sr); ;
    break;}
case 73:
{ yyval.sr = yyvsp[-1].sr; ;
    break;}
case 74:
{ cstring_markOwned (yyvsp[0].cname); yyval.sr = sRef_buildField (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 75:
{ cstring_markOwned (yyvsp[0].cname); yyval.sr = sRef_makeArrow (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 79:
{ yyval.funcclauselist = functionClauseList_new (); ;
    break;}
case 80:
{ yyval.funcclauselist = functionClauseList_prepend (yyvsp[0].funcclauselist, yyvsp[-1].funcclause); ;
    break;}
case 81:
{ yyval.funcclauselist = functionClauseList_new (); ;
    break;}
case 82:
{ yyval.funcclauselist = functionClauseList_prepend (yyvsp[0].funcclauselist, yyvsp[-1].funcclause); ;
    break;}
case 83:
{ yyval.funcclause = functionClause_createGlobals (yyvsp[0].globsclause); ;
    break;}
case 84:
{ yyval.funcclause = functionClause_createModifies (yyvsp[0].modsclause); ;
    break;}
case 85:
{ yyval.funcclause = functionClause_createModifies (yyvsp[0].modsclause); ;
    break;}
case 86:
{ yyval.funcclause = functionClause_createState (yyvsp[0].stateclause); ;
    break;}
case 87:
{ yyval.funcclause = yyvsp[0].funcclause; ;
    break;}
case 88:
{ yyval.funcclause = functionClause_createWarn (yyvsp[0].warnclause); ;
    break;}
case 89:
{ yyval.funcclause = functionClause_createGlobals (yyvsp[0].globsclause); ;
    break;}
case 90:
{ yyval.funcclause = functionClause_createModifies (yyvsp[0].modsclause); ;
    break;}
case 91:
{ yyval.funcclause = functionClause_createModifies (yyvsp[0].modsclause); ;
    break;}
case 92:
{ yyval.funcclause = functionClause_createState (yyvsp[0].stateclause); ;
    break;}
case 93:
{ yyval.funcclause = yyvsp[0].funcclause; ;
    break;}
case 94:
{ yyval.funcclause = functionClause_createWarn (yyvsp[0].warnclause); ;
    break;}
case 95:
{ yyval.globsclause = yyvsp[-1].globsclause; ;
    break;}
case 96:
{ setProcessingGlobalsList (); ;
    break;}
case 97:
{ 
     unsetProcessingGlobals (); 
     yyval.globsclause = globalsClause_create (yyvsp[-3].tok, yyvsp[-1].globset); 
   ;
    break;}
case 98:
{ yyval.modsclause = modifiesClause_createNoMods (yyvsp[0].tok); ;
    break;}
case 99:
{ yyval.modsclause = yyvsp[-1].modsclause; ;
    break;}
case 100:
{
     context_setProtectVars (); enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;
    break;}
case 101:
{ 
     exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
     yyval.modsclause = modifiesClause_create (yyvsp[-2].tok, yyvsp[0].srset);
   ;
    break;}
case 102:
{ yyval.flagspec = flagSpec_createPlain (yyvsp[0].cname); ;
    break;}
case 103:
{ yyval.flagspec = flagSpec_createOr (yyvsp[-2].cname, yyvsp[0].flagspec); ;
    break;}
case 106:
{ yyval.warnclause = warnClause_undefined; ;
    break;}
case 107:
{ yyval.warnclause = yyvsp[-1].warnclause; ;
    break;}
case 108:
{      
     llassert (exprNode_knownStringValue (yyvsp[0].expr));
     yyval.warnclause = warnClause_create (yyvsp[-2].tok, yyvsp[-1].flagspec, cstring_copy (multiVal_forceString (exprNode_getValue (yyvsp[0].expr)))); 
     exprNode_free (yyvsp[0].expr);
   ;
    break;}
case 109:
{ yyval.warnclause = warnClause_create (yyvsp[-1].tok, yyvsp[0].flagspec, cstring_undefined); ;
    break;}
case 110:
{ yyval.globset = globSet_single (yyvsp[0].sr); ;
    break;}
case 111:
{ yyval.globset = globSet_insert (yyvsp[-2].globset, yyvsp[0].sr); ;
    break;}
case 112:
{ yyval.sr = clabstract_createGlobal (yyvsp[0].sr, yyvsp[-1].tquallist); ;
    break;}
case 113:
{ yyval.tquallist = qualList_undefined; ;
    break;}
case 114:
{ yyval.tquallist = qualList_add (yyvsp[0].tquallist, yyvsp[-1].typequal); ;
    break;}
case 115:
{ yyval.sr = uentry_getSref (yyvsp[0].entry); ;
    break;}
case 116:
{ yyval.sr = clabstract_unrecognizedGlobal (yyvsp[0].cname); ;
    break;}
case 117:
{ yyval.sr = clabstract_checkGlobal (yyvsp[0].expr); ;
    break;}
case 118:
{ yyval.typequal = qual_createUndef (); ;
    break;}
case 119:
{ yyval.typequal = qual_createKilled (); ;
    break;}
case 120:
{ yyval.typequal = qual_createOut (); ;
    break;}
case 121:
{ yyval.typequal = qual_createIn (); ;
    break;}
case 122:
{ yyval.typequal = qual_createPartial (); ;
    break;}
case 130:
{ 
     qtype qint = qtype_create (ctype_int);
     yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, qint);
     qtype_free (qint);
   ;
    break;}
case 131:
{ yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, yyvsp[-2].qtyp); ;
    break;}
case 132:
{ checkDoneParams (); context_enterInnerContext (); ;
    break;}
case 133:
{  
     exprNode_checkFunctionBody (yyvsp[0].expr); yyval.expr = yyvsp[0].expr; 
     context_exitInner (yyvsp[0].expr); 
   ;
    break;}
case 134:
{ context_enterOldStyleScope (); ;
    break;}
case 135:
{ oldStyleDoneParams (); context_enterInnerContext (); ;
    break;}
case 136:
{
     exprNode_checkFunctionBody (yyvsp[0].expr); 
     yyval.expr = yyvsp[0].expr; /* oldstyle */ 
     context_exitInner (yyvsp[0].expr);
   ;
    break;}
case 137:
{ 
     context_setFunctionDefined (exprNode_loc (yyvsp[0].expr)); 
     exprNode_checkFunction (context_getHeader (),  yyvsp[0].expr); 
     /* DRL 8 8 2000 */
     
     context_exitFunction ();
   ;
    break;}
case 138:
{ yyval.srset = yyvsp[-1].srset; ;
    break;}
case 139:
{ yyval.srset = sRefSet_new (); ;
    break;}
case 140:
{ yyval.sr = uentry_getSref (yyvsp[0].entry); checkModifiesId (yyvsp[0].entry); ;
    break;}
case 141:
{ yyval.sr = fixModifiesId (yyvsp[0].cname); ;
    break;}
case 142:
{ yyval.sr = modListArrayFetch (yyvsp[-2].sr, sRef_undefined); ;
    break;}
case 143:
{ yyval.sr = modListArrayFetch (yyvsp[-3].sr, yyvsp[-1].sr); ;
    break;}
case 144:
{ yyval.sr = modListPointer (yyvsp[0].sr); ;
    break;}
case 145:
{ yyval.sr = yyvsp[-1].sr; ;
    break;}
case 146:
{ yyval.sr = modListFieldAccess (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 147:
{ yyval.sr = modListArrowAccess (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 148:
{ yyval.sr = yyvsp[0].sr; ;
    break;}
case 149:
{ yyval.sr = sRef_makeUnknown (); /* sRef_makeConstant ($1); ? */ ;
    break;}
case 150:
{ yyval.srset = sRefSet_single (yyvsp[0].sr); ;
    break;}
case 151:
{ yyval.srset = sRefSet_insert (yyvsp[-2].srset, yyvsp[0].sr); ;
    break;}
case 152:
{ yyval.sr = checkStateClausesId (yyvsp[0].entry); ;
    break;}
case 153:
{ yyval.sr = fixStateClausesId (yyvsp[0].cname); ;
    break;}
case 154:
{ yyval.sr = sRef_makeAnyArrayFetch (yyvsp[-2].sr); ;
    break;}
case 155:
{ yyval.sr = sRef_makeAnyArrayFetch (yyvsp[-3].sr); ;
    break;}
case 156:
{ yyval.sr = sRef_constructPointer (yyvsp[0].sr); ;
    break;}
case 157:
{ yyval.sr = yyvsp[-1].sr; ;
    break;}
case 158:
{ cstring_markOwned (yyvsp[0].cname);
					    yyval.sr = sRef_buildField (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 159:
{ cstring_markOwned (yyvsp[0].cname);
                                            yyval.sr = sRef_makeArrow (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 160:
{ yyval.srset = sRefSet_undefined ;
    break;}
case 162:
{ if (sRef_isValid (yyvsp[0].sr)) { yyval.srset = sRefSet_single (yyvsp[0].sr); } 
      else { yyval.srset = sRefSet_undefined; } 
    ;
    break;}
case 163:
{ if (sRef_isValid (yyvsp[0].sr))
	{
	  yyval.srset = sRefSet_insert (yyvsp[-2].srset, yyvsp[0].sr); 
	}
      else
	{
	  yyval.srset = yyvsp[-2].srset;
	}
    ;
    break;}
case 164:
{ yyval.expr = exprNode_fromIdentifier (yyvsp[0].entry); ;
    break;}
case 165:
{ yyval.expr = exprNode_fromUIO (yyvsp[0].cname); ;
    break;}
case 167:
{ yyval.expr = exprNode_addParens (yyvsp[-2].tok, yyvsp[-1].expr); ;
    break;}
case 168:
{ yyval.expr = exprNode_fromIdentifier (coerceId (yyvsp[0].cname)); ;
    break;}
case 169:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 171:
{ yyval.expr = exprNode_arrayFetch (yyvsp[-3].expr, yyvsp[-1].expr); ;
    break;}
case 172:
{ yyval.expr = exprNode_functionCall (yyvsp[-2].expr, exprNodeList_new ()); ;
    break;}
case 173:
{ yyval.expr = exprNode_functionCall (yyvsp[-3].expr, yyvsp[-1].exprlist); ;
    break;}
case 174:
{ yyval.expr = exprNode_vaArg (yyvsp[-5].tok, yyvsp[-3].expr, yyvsp[-1].qtyp); ;
    break;}
case 175:
{ yyval.expr = exprNode_fieldAccess (yyvsp[-4].expr, yyvsp[-2].tok, yyvsp[-1].cname); ;
    break;}
case 176:
{ yyval.expr = exprNode_arrowAccess (yyvsp[-4].expr, yyvsp[-2].tok, yyvsp[-1].cname); ;
    break;}
case 177:
{ yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 178:
{ yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 179:
{ yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 180:
{ yyval.exprlist = exprNodeList_push (yyvsp[-2].exprlist, yyvsp[0].expr); ;
    break;}
case 182:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 183:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 184:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 185:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 186:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 187:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 188:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 189:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 190:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 191:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 192:
{ yyval.cstringlist = cstringList_add (yyvsp[-2].cstringlist, yyvsp[0].cname); ;
    break;}
case 193:
{ yyval.cstringlist = cstringList_single (yyvsp[0].cname); ;
    break;}
case 194:
{ yyval.expr = exprNode_offsetof (yyvsp[-5].qtyp, yyvsp[-2].cstringlist); ;
    break;}
case 195:
{ context_setProtectVars (); ;
    break;}
case 196:
{ context_sizeofReleaseVars (); yyval.expr = yyvsp[0].expr; ;
    break;}
case 197:
{ yyval.expr = exprNode_sizeofType (yyvsp[-1].qtyp); ;
    break;}
case 198:
{ yyval.expr = exprNode_sizeofExpr (yyvsp[0].expr); ;
    break;}
case 199:
{ yyval.expr = exprNode_alignofType (yyvsp[-1].qtyp); ;
    break;}
case 200:
{ yyval.expr = exprNode_alignofExpr (yyvsp[0].expr); ;
    break;}
case 202:
{ yyval.expr = exprNode_cast (yyvsp[-3].tok, yyvsp[0].expr, yyvsp[-2].qtyp); ;
    break;}
case 204:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 205:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 206:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 208:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 209:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 211:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 212:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 214:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 215:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 216:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 217:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 219:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 220:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 222:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 224:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 226:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 228:
{ exprNode_produceGuards (yyvsp[-1].expr); 
     context_enterAndClause (yyvsp[-1].expr); 
   ;
    break;}
case 229:
{ 
     yyval.expr = exprNode_op (yyvsp[-3].expr, yyvsp[0].expr, yyvsp[-2].tok); 
     context_exitAndClause (yyval.expr, yyvsp[0].expr);
   ;
    break;}
case 231:
{ 
     exprNode_produceGuards (yyvsp[-1].expr);
     context_enterOrClause (yyvsp[-1].expr); 
   ;
    break;}
case 232:
{ 
     yyval.expr = exprNode_op (yyvsp[-3].expr, yyvsp[0].expr, yyvsp[-2].tok); 
     context_exitOrClause (yyval.expr, yyvsp[0].expr);
   ;
    break;}
case 234:
{ exprNode_produceGuards (yyvsp[-1].expr); context_enterTrueClause (yyvsp[-1].expr); ;
    break;}
case 235:
{ context_enterFalseClause (yyvsp[-4].expr); ;
    break;}
case 236:
{ yyval.expr = exprNode_cond (yyvsp[-6].expr, yyvsp[-3].expr, yyvsp[0].expr); context_exitClause (yyvsp[-6].expr, yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 238:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 239:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 240:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 241:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 242:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 243:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 244:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 245:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 246:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 247:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 248:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 250:
{ yyval.expr = exprNode_comma (yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 251:
{ yyval.expr = exprNode_undefined; ;
    break;}
case 254:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 255:
{ doVaDcl (); yyval.expr = exprNode_makeError (); ;
    break;}
case 256:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 257:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 258:
{
     setProcessingVars (yyvsp[-3].qtyp); 
     processNamedDecl (yyvsp[-1].ntyp); 
   ;
    break;}
case 259:
{ 
     unsetProcessingVars (); 
     yyval.expr = exprNode_makeEmptyInitialization (yyvsp[-6].ntyp); 
     DPRINTF (("Empty initialization: %s", exprNode_unparse (yyval.expr)));
   ;
    break;}
case 260:
{ setProcessingVars (yyvsp[-4].qtyp); processNamedDecl (yyvsp[-2].ntyp); ;
    break;}
case 261:
{ yyval.expr = exprNode_concat (yyvsp[-2].expr, exprNode_makeInitialization (yyvsp[-8].ntyp, yyvsp[-3].expr)); 
     unsetProcessingVars ();
   ;
    break;}
case 262:
{ 
     processNamedDecl (yyvsp[-1].ntyp); 
     yyval.expr = exprNode_makeEmptyInitialization (yyvsp[-1].ntyp);
   ;
    break;}
case 263:
{ processNamedDecl (yyvsp[-2].ntyp); ;
    break;}
case 264:
{ yyval.expr = exprNode_makeInitialization (yyvsp[-5].ntyp, yyvsp[0].expr); ;
    break;}
case 265:
{ setProcessingTypedef (yyvsp[0].qtyp); ;
    break;}
case 266:
{ clabstract_declareType (yyvsp[-3].exprlist, yyvsp[-1].warnclause); ;
    break;}
case 267:
{ /* in the ANSI grammar, semantics unclear */ ;
    break;}
case 268:
{ /* in the ANSI grammar, semantics unclear */ ;
    break;}
case 269:
{ g_expectingTypeName = TRUE; ;
    break;}
case 270:
{ g_expectingTypeName = TRUE; context_pushLoc (); ;
    break;}
case 271:
{ yyval.exprlist = yyvsp[-1].exprlist; ;
    break;}
case 272:
{ yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 273:
{ yyval.exprlist = exprNodeList_push (yyvsp[-3].exprlist, yyvsp[0].expr); ;
    break;}
case 274:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 275:
{ yyval.expr = exprNode_concat (yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 277:
{ yyval.expr = exprNode_makeInitBlock (yyvsp[-2].tok, yyvsp[-1].exprlist); ;
    break;}
case 278:
{ yyval.expr = exprNode_makeInitBlock (yyvsp[-3].tok, yyvsp[-2].exprlist); ;
    break;}
case 279:
{ yyval.expr = exprNode_undefined; ;
    break;}
case 280:
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 281:
{ yyval.expr = exprNode_undefined; 
                                     /* gcc extension, obsolete since 2.5 */ ;
    break;}
case 282:
{ yyval.expr = exprNode_undefined; ;
    break;}
case 283:
{ yyval.expr = exprNode_undefined; ;
    break;}
case 284:
{ yyval.expr = exprNode_undefined; ;
    break;}
case 285:
{ yyval.expr = exprNode_undefined; ;
    break;}
case 286:
{ yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 287:
{ yyval.exprlist = exprNodeList_push (yyvsp[-2].exprlist, yyvsp[0].expr); ;
    break;}
case 288:
{ setStorageClass (SCEXTERN); yyval.typequal = qual_createExtern (); ;
    break;}
case 289:
{ yyval.typequal = qual_createInline (); ;
    break;}
case 290:
{ setStorageClass (SCSTATIC); yyval.typequal = qual_createStatic (); ;
    break;}
case 291:
{ yyval.typequal = qual_createAuto (); ;
    break;}
case 292:
{ yyval.typequal = qual_createRegister (); ;
    break;}
case 293:
{ yyval.stateclause = yyvsp[-1].stateclause; ;
    break;}
case 294:
{
     context_setProtectVars (); 
     enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;
    break;}
case 295:
{ 
     exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
     yyval.stateclause = stateClause_createPlain (yyvsp[-5].tok, yyvsp[-2].srset);
   ;
    break;}
case 296:
{ yyval.funcclause = yyvsp[-1].funcclause; ;
    break;}
case 297:
{ yyval.tok = yyvsp[-1].tok; context_enterFunctionHeader (); ;
    break;}
case 298:
{
     context_exitFunctionHeader ();
     context_setProtectVars (); 
     enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;
    break;}
case 299:
{ 
     exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
     yyval.funcclause = functionClause_createState (stateClause_create (yyvsp[-5].tok, yyvsp[-4].typequal, yyvsp[-2].srset));
   ;
    break;}
case 300:
{
     context_setProtectVars (); 
     enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;
    break;}
case 301:
{
     context_exitFunctionHeader ();
     exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
     DPRINTF (("done optGlobBufConstraintsAux\n"));

     if (lltok_isEnsures (yyvsp[-4].tok)) 
       {
	 yyval.funcclause = functionClause_createEnsures (yyvsp[-2].fcnconstraint);
       }
     else if (lltok_isRequires (yyvsp[-4].tok))
       {
	 yyval.funcclause = functionClause_createRequires (yyvsp[-2].fcnconstraint);
       }
     else
       {
	 BADBRANCH;
       }

     DPRINTF (("FunctionclauseS: %s", functionClause_unparse (yyval.funcclause)));
   ;
    break;}
case 302:
{ yyval.fcnconstraint = functionConstraint_createBufferConstraint (yyvsp[0].conL); ;
    break;}
case 303:
{ yyval.fcnconstraint = functionConstraint_createMetaStateConstraint (yyvsp[0].msconstraint); DPRINTF (("Made constraint: %s", functionConstraint_unparse (yyval.fcnconstraint))); ;
    break;}
case 304:
{ yyval.typequal = qual_createExits (); ;
    break;}
case 305:
{ yyval.typequal = qual_createMayExit (); ;
    break;}
case 306:
{ yyval.typequal = qual_createTrueExit (); ;
    break;}
case 307:
{ yyval.typequal = qual_createFalseExit (); ;
    break;}
case 308:
{ yyval.typequal = qual_createNeverExit (); ;
    break;}
case 309:
{ yyval.typequal = qual_createChecked (); ;
    break;}
case 310:
{ yyval.typequal = qual_createCheckMod (); ;
    break;}
case 311:
{ yyval.typequal = qual_createUnchecked (); ;
    break;}
case 312:
{ yyval.typequal = qual_createCheckedStrict (); ;
    break;}
case 313:
{ yyval.typequal = qual_createOwned (); ;
    break;}
case 314:
{ yyval.typequal = qual_createDependent (); ;
    break;}
case 315:
{ yyval.typequal = qual_createYield (); ;
    break;}
case 316:
{ yyval.typequal = qual_createTemp (); ;
    break;}
case 317:
{ yyval.typequal = qual_createOnly (); ;
    break;}
case 318:
{ yyval.typequal = qual_createKeep (); ;
    break;}
case 319:
{ yyval.typequal = qual_createKept (); ;
    break;}
case 320:
{ yyval.typequal = qual_createShared (); ;
    break;}
case 321:
{ yyval.typequal = qual_createUnique (); ;
    break;}
case 322:
{ yyval.typequal = qual_createNull (); ;
    break;}
case 323:
{ yyval.typequal = qual_createIsNull (); ;
    break;}
case 324:
{ yyval.typequal = qual_createRelNull (); ;
    break;}
case 325:
{ yyval.typequal = qual_createNotNull (); ;
    break;}
case 326:
{ yyval.typequal = qual_createExposed (); ;
    break;}
case 327:
{ yyval.typequal = qual_createObserver (); ;
    break;}
case 328:
{ yyval.typequal = qual_createNullTerminated (); ;
    break;}
case 329:
{ yyval.typequal = qual_createMetaState (yyvsp[0].annotation); ;
    break;}
case 330:
{ yyval.typequal = qual_createReturned (); ;
    break;}
case 331:
{ yyval.typequal = qual_createSef (); ;
    break;}
case 332:
{ yyval.typequal = qual_createUnused (); ;
    break;}
case 333:
{ yyval.typequal = qual_createExternal (); ;
    break;}
case 334:
{ yyval.typequal = qual_createTrueNull (); ;
    break;}
case 335:
{ yyval.typequal = qual_createFalseNull (); ;
    break;}
case 336:
{ yyval.typequal = qual_createAbstract (); ;
    break;}
case 337:
{ yyval.typequal = qual_createConcrete (); ;
    break;}
case 338:
{ yyval.typequal = qual_createMutable (); ;
    break;}
case 339:
{ yyval.typequal = qual_createImmutable (); ;
    break;}
case 340:
{ yyval.typequal = qual_createRefCounted (); ;
    break;}
case 341:
{ yyval.typequal = qual_createRefs (); ;
    break;}
case 342:
{ yyval.typequal = qual_createKillRef (); ;
    break;}
case 343:
{ yyval.typequal = qual_createRelDef (); ;
    break;}
case 344:
{ yyval.typequal = qual_createNewRef (); ;
    break;}
case 345:
{ yyval.typequal = qual_createTempRef (); ;
    break;}
case 346:
{ yyval.typequal = qual_createShort (); ;
    break;}
case 347:
{ yyval.typequal = qual_createLong (); ;
    break;}
case 348:
{ yyval.typequal = qual_createSigned (); ;
    break;}
case 349:
{ yyval.typequal = qual_createUnsigned (); ;
    break;}
case 350:
{ yyval.typequal = qual_createOut (); ;
    break;}
case 351:
{ yyval.typequal = qual_createIn (); ;
    break;}
case 352:
{ yyval.typequal = qual_createPartial (); ;
    break;}
case 353:
{ yyval.typequal = qual_createSpecial (); ;
    break;}
case 354:
{ yyval.typequal = qual_createConst (); ;
    break;}
case 355:
{ yyval.typequal = qual_createVolatile (); ;
    break;}
case 356:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 357:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 358:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 359:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 360:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 361:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 362:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 363:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 364:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 371:
{ yyval.ctyp = ctype_unknown; ;
    break;}
case 372:
{ yyval.ctyp = ctype_anyintegral; ;
    break;}
case 373:
{ yyval.ctyp = ctype_unsignedintegral; ;
    break;}
case 374:
{ yyval.ctyp = ctype_signedintegral; ;
    break;}
case 378:
{ yyval.ctyp = ctype_fromQual (yyvsp[-1].typequal); ;
    break;}
case 379:
{ yyval.qtyp = qtype_resolve (yyvsp[-1].qtyp); ;
    break;}
case 380:
{ yyval.qtyp = yyvsp[0].qtyp; ;
    break;}
case 381:
{ yyval.qtyp = qtype_mergeAlt (yyvsp[-3].qtyp, yyvsp[-1].qtyp); ;
    break;}
case 383:
{ yyval.qtyp = qtype_mergeAlt (yyvsp[-2].qtyp, yyvsp[0].qtyp); ;
    break;}
case 384:
{ yyval.qtyp = qtype_addQual (yyvsp[0].qtyp, yyvsp[-1].typequal); ;
    break;}
case 385:
{ yyval.qtyp = qtype_addQual (yyvsp[0].qtyp, yyvsp[-1].typequal); ;
    break;}
case 386:
{ yyval.qtyp = qtype_combine (yyvsp[0].qtyp, yyvsp[-1].ctyp); ;
    break;}
case 387:
{ yyval.qtyp = qtype_unknown (); ;
    break;}
case 388:
{ yyval.qtyp = yyvsp[0].qtyp; ;
    break;}
case 389:
{ yyval.conL = constraintList_undefined; ;
    break;}
case 390:
{ sRef_setGlobalScopeSafe (); ;
    break;}
case 391:
{ sRef_clearGlobalScopeSafe (); ;
    break;}
case 392:
{ {ctype ct; ct = declareStruct (yyvsp[-9].cname, yyvsp[-4].flist); /* setGlobalStructInfo(ct, $12);*/ yyval.ctyp = ct;} ;
    break;}
case 393:
{ sRef_setGlobalScopeSafe (); ;
    break;}
case 394:
{ sRef_clearGlobalScopeSafe (); ;
    break;}
case 395:
{ yyval.ctyp = declareUnion (yyvsp[-8].cname, yyvsp[-3].flist); ;
    break;}
case 396:
{ yyval.ctyp = declareStruct (yyvsp[-3].cname, uentryList_new ()); ;
    break;}
case 397:
{ yyval.ctyp = declareUnion (yyvsp[-3].cname, uentryList_new ()); ;
    break;}
case 398:
{ sRef_setGlobalScopeSafe (); ;
    break;}
case 399:
{ sRef_clearGlobalScopeSafe (); ;
    break;}
case 400:
{ yyval.ctyp = declareUnnamedStruct (yyvsp[-3].flist); ;
    break;}
case 401:
{ sRef_setGlobalScopeSafe (); ;
    break;}
case 402:
{ sRef_clearGlobalScopeSafe (); ;
    break;}
case 403:
{ yyval.ctyp = declareUnnamedUnion (yyvsp[-3].flist); ;
    break;}
case 404:
{ yyval.ctyp = ctype_createUnnamedStruct (uentryList_new ()); ;
    break;}
case 405:
{ yyval.ctyp = ctype_createUnnamedUnion (uentryList_new ()); ;
    break;}
case 406:
{ yyval.ctyp = handleStruct (yyvsp[-1].cname); ;
    break;}
case 407:
{ yyval.ctyp = handleUnion (yyvsp[-1].cname); ;
    break;}
case 408:
{ g_expectingTypeName = FALSE; ;
    break;}
case 410:
{ yyval.flist = uentryList_undefined; /* bogus! */ ;
    break;}
case 411:
{ yyval.flist = uentryList_mergeFields (yyvsp[-1].flist, yyvsp[0].flist); ;
    break;}
case 412:
{ yyval.flist = fixUentryList (yyvsp[-2].ntyplist, yyvsp[-4].qtyp); ;
    break;}
case 413:
{ yyval.flist = fixUnnamedDecl (yyvsp[-2].qtyp); ;
    break;}
case 414:
{ yyval.ntyplist = idDeclList_singleton (yyvsp[-1].ntyp); ;
    break;}
case 415:
{ yyval.ntyplist = idDeclList_add (yyvsp[-3].ntyplist, yyvsp[-1].ntyp); ;
    break;}
case 416:
{ yyval.ntyp = yyvsp[0].ntyp; ;
    break;}
case 417:
{ yyval.ntyp = idDecl_undefined; ;
    break;}
case 418:
{ yyval.ntyp = yyvsp[-3].ntyp; ;
    break;}
case 419:
{ yyval.ctyp = declareUnnamedEnum (yyvsp[-2].enumnamelist); ;
    break;}
case 420:
{ context_pushLoc (); ;
    break;}
case 421:
{ context_popLoc (); yyval.ctyp = declareEnum (yyvsp[-5].cname, yyvsp[-2].enumnamelist); ;
    break;}
case 422:
{ yyval.ctyp = handleEnum (yyvsp[-1].cname); ;
    break;}
case 423:
{ yyval.enumnamelist = enumNameList_single (yyvsp[0].cname); ;
    break;}
case 424:
{ yyval.enumnamelist = enumNameList_push (yyvsp[-2].enumnamelist, yyvsp[0].cname); ;
    break;}
case 426:
{ uentry ue = uentry_makeEnumConstant (yyvsp[0].cname, ctype_unknown);
     usymtab_supGlobalEntry (ue);
     yyval.cname = yyvsp[0].cname;
   ;
    break;}
case 427:
{ uentry ue = uentry_makeEnumInitializedConstant (yyvsp[-3].cname, ctype_unknown, yyvsp[0].expr);
     usymtab_supGlobalEntry (ue);
     yyval.cname = yyvsp[-3].cname; 
   ;
    break;}
case 429:
{ yyval.ntyp = idDecl_create (cstring_undefined, qtype_create (yyvsp[0].ctyp)); ;
    break;}
case 430:
{ 
     qtype qt = qtype_unknown ();

     qtype_adjustPointers (yyvsp[-1].count, qt);
     yyval.ntyp = idDecl_create (cstring_copy (LastIdentifier ()), qt);
   ;
    break;}
case 431:
{ yyval.ntyp = yyvsp[0].ntyp; qtype_adjustPointers (yyvsp[-1].count, idDecl_getTyp (yyval.ntyp)); ;
    break;}
case 433:
{ yyval.ntyp = yyvsp[0].ntyp; qtype_adjustPointers (yyvsp[-1].count, idDecl_getTyp (yyval.ntyp)); ;
    break;}
case 434:
{ yyval.entrylist = handleParamTypeList (yyvsp[0].entrylist); ;
    break;}
case 435:
{ yyval.entrylist = handleParamIdList (yyvsp[0].entrylist); ;
    break;}
case 436:
{ /* ignored for now */; ;
    break;}
case 437:
{ ; ;
    break;}
case 438:
{ ; ;
    break;}
case 439:
{ ; ;
    break;}
case 440:
{ yyval.count = 1; ;
    break;}
case 441:
{ yyval.count = 1; ;
    break;}
case 442:
{ yyval.count = 1 + yyvsp[0].count; ;
    break;}
case 443:
{ yyval.count = 1 + yyvsp[0].count; ;
    break;}
case 445:
{ yyval.entrylist = uentryList_add (yyvsp[-2].entrylist, uentry_makeElipsisMarker ()); ;
    break;}
case 446:
{ yyval.entrylist = uentryList_single (uentry_makeVariableLoc (yyvsp[0].cname, ctype_int)); ;
    break;}
case 447:
{ yyval.entrylist = uentryList_add (yyvsp[-2].entrylist, uentry_makeVariableLoc (yyvsp[0].cname, ctype_int)); ;
    break;}
case 448:
{ yyval.entrylist = uentryList_single (uentry_makeElipsisMarker ()); ;
    break;}
case 450:
{ yyval.entrylist = uentryList_add (yyvsp[-2].entrylist, uentry_makeElipsisMarker ()); ;
    break;}
case 451:
{ storeLoc (); ;
    break;}
case 452:
{ yyval.entrylist = uentryList_single (yyvsp[0].oentry); ;
    break;}
case 453:
{ storeLoc (); ;
    break;}
case 454:
{ yyval.entrylist = uentryList_add (yyvsp[-3].entrylist, yyvsp[0].oentry); ;
    break;}
case 455:
{ 
     if (isFlipOldStyle ()) 
       { 
	 llparseerror (cstring_makeLiteral ("Inconsistent function parameter syntax (mixing old and new style declaration)")); 
       }
     else 
       { 
	 setNewStyle (); 
       }
     yyval.oentry = makeCurrentParam (idDecl_fixParamBase (yyvsp[-1].ntyp, yyvsp[-2].qtyp)); 
   ;
    break;}
case 456:
{ 
     idDecl tparam = idDecl_create (yyvsp[0].cname, qtype_unknown ());

     if (isNewStyle ()) 
       {
	 llparseerror (message ("Inconsistent function parameter syntax: %q",
				idDecl_unparse (tparam))); 
       }

     setFlipOldStyle ();
     yyval.oentry = makeCurrentParam (tparam);
     idDecl_free (tparam);
   ;
    break;}
case 458:
{ yyval.qtyp = qtype_newBase (yyvsp[-1].qtyp, yyvsp[0].ctyp); ;
    break;}
case 459:
{ yyval.ctyp = ctype_adjustPointers (yyvsp[0].count, ctype_unknown); ;
    break;}
case 461:
{ yyval.ctyp = ctype_adjustPointers (yyvsp[-1].count, yyvsp[0].ctyp); ;
    break;}
case 462:
{ yyval.ctyp = ctype_unknown; ;
    break;}
case 464:
{ yyval.ctyp = ctype_expectFunction (yyvsp[-1].ctyp); ;
    break;}
case 465:
{ yyval.ctyp = ctype_makeArray (ctype_unknown); ;
    break;}
case 466:
{ yyval.ctyp = ctype_makeFixedArray (ctype_unknown, exprNode_getLongValue (yyvsp[-1].expr)); ;
    break;}
case 467:
{ yyval.ctyp = ctype_makeArray (yyvsp[-2].ctyp); ;
    break;}
case 468:
{ yyval.ctyp = ctype_makeInnerFixedArray (yyvsp[-3].ctyp, exprNode_getLongValue (yyvsp[-1].expr)); ;
    break;}
case 469:
{ yyval.ctyp = ctype_makeFunction (ctype_unknown, uentryList_makeMissingParams ()); ;
    break;}
case 470:
{ yyval.ctyp = ctype_makeParamsFunction (ctype_unknown, yyvsp[-1].entrylist); ;
    break;}
case 471:
{ yyval.ctyp = ctype_makeFunction (yyvsp[-3].ctyp, uentryList_makeMissingParams ()); ;
    break;}
case 472:
{ yyval.ctyp = ctype_makeParamsFunction (yyvsp[-4].ctyp, yyvsp[-1].entrylist); ;
    break;}
case 482:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 485:
{ yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 486:
{ yyval.expr = exprNode_while (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 487:
{ yyval.expr = exprNode_doWhile (yyvsp[-5].expr, yyvsp[-2].expr); ;
    break;}
case 488:
{ yyval.expr = exprNode_doWhile (yyvsp[-4].expr, yyvsp[-1].expr); ;
    break;}
case 489:
{ yyval.expr = exprNode_for (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 490:
{ context_setProtectVars (); ;
    break;}
case 491:
{ context_sizeofReleaseVars (); ;
    break;}
case 492:
{ yyval.expr = exprNode_forPred (yyvsp[-7].expr, yyvsp[-5].expr, yyvsp[-2].expr); 
     context_enterForClause (yyvsp[-5].expr); ;
    break;}
case 493:
{ setProcessingIterVars (yyvsp[-2].entry); ;
    break;}
case 494:
{ yyval.expr = exprNode_iterStart (yyvsp[-5].entry, yyvsp[-1].exprlist); ;
    break;}
case 495:
{ yyval.expr = exprNode_createId (yyvsp[0].entry); ;
    break;}
case 499:
{ yyval.expr = yyvsp[-1].expr; DPRINTF (("def stmt: %s", exprNode_unparse (yyval.expr))); ;
    break;}
case 507:
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 508:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 509:
{ exprNode_checkIfPred (yyvsp[0].expr); ;
    break;}
case 510:
{ /* don't: context_exitTrueClause ($1, $2); */
     yyval.expr = exprNode_if (yyvsp[-2].expr, yyvsp[0].expr); 
   ;
    break;}
case 511:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 512:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 523:
{ yyval.expr = exprNode_addParens (yyvsp[-2].tok, yyvsp[-1].expr); ;
    break;}
case 525:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 526:
{ yyval.expr = exprNode_labelMarker (yyvsp[-1].cname); ;
    break;}
case 527:
{ yyval.expr = exprNode_notReached (yyvsp[0].expr); ;
    break;}
case 528:
{ ; ;
    break;}
case 529:
{ ; ;
    break;}
case 530:
{ context_enterCaseClause (yyvsp[0].expr); ;
    break;}
case 531:
{ yyval.expr = exprNode_caseMarker (yyvsp[-2].expr, FALSE); ;
    break;}
case 532:
{ context_enterCaseClause (yyvsp[0].expr); ;
    break;}
case 533:
{ yyval.expr = exprNode_caseMarker (yyvsp[-2].expr, TRUE); ;
    break;}
case 534:
{ context_enterCaseClause (exprNode_undefined); ;
    break;}
case 535:
{ yyval.expr = exprNode_defaultMarker (yyvsp[-2].tok, FALSE); ;
    break;}
case 536:
{ context_enterCaseClause (exprNode_undefined); ;
    break;}
case 537:
{ yyval.expr = exprNode_defaultMarker (yyvsp[-2].tok, TRUE); ;
    break;}
case 538:
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 539:
{ yyval.expr = yyvsp[0].expr; context_exitInner (yyvsp[0].expr); ;
    break;}
case 540:
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 541:
{ context_enterInnerContext (); ;
    break;}
case 542:
{ context_exitInnerPlain (); ;
    break;}
case 543:
{ context_enterStructInnerContext (); ;
    break;}
case 544:
{ context_exitStructInnerContext (); ;
    break;}
case 545:
{ context_exitInnerSafe (); ;
    break;}
case 546:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 547:
{ yyval.expr = exprNode_notReached (exprNode_createTok (yyvsp[0].tok)); ;
    break;}
case 548:
{ yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 549:
{ yyval.expr = exprNode_notReached (exprNode_updateLocation (yyvsp[-2].expr, lltok_getLoc (yyvsp[0].tok))); ;
    break;}
case 550:
{ yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 551:
{ yyval.expr = exprNode_notReached (exprNode_updateLocation (yyvsp[-2].expr, lltok_getLoc (yyvsp[0].tok))); ;
    break;}
case 552:
{ yyval.expr = exprNode_updateLocation (exprNode_concat (yyvsp[-2].expr, yyvsp[-1].expr), lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 553:
{ yyval.expr = exprNode_notReached (exprNode_updateLocation (exprNode_concat (yyvsp[-3].expr, yyvsp[-2].expr), 
							lltok_getLoc (yyvsp[-1].tok))); 
   ;
    break;}
case 554:
{ yyval.expr = exprNode_makeBlock (yyvsp[0].expr); ;
    break;}
case 555:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 556:
{ yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 557:
{ yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 558:
{ yyval.expr = exprNode_updateLocation (exprNode_concat (yyvsp[-2].expr, yyvsp[-1].expr), lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 560:
{ yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 561:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 562:
{ yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 563:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 564:
{ yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 565:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 566:
{ yyval.expr = exprNode_statement (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 567:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 568:
{ yyval.expr = exprNode_statement (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 569:
{ yyval.expr = exprNode_checkExpr (yyvsp[0].expr); ;
    break;}
case 570:
{ 
     exprNode_produceGuards (yyvsp[-1].expr); context_enterTrueClause (yyvsp[-1].expr); 
     exprNode_checkIfPred (yyvsp[-1].expr);
     yyval.expr = yyvsp[-1].expr;
   ;
    break;}
case 571:
{ 
     context_exitTrueClause (yyvsp[-1].expr, yyvsp[0].expr);
     yyval.expr = exprNode_if (yyvsp[-1].expr, yyvsp[0].expr); 
   ;
    break;}
case 572:
{ context_enterFalseClause (yyvsp[-2].expr); ;
    break;}
case 573:
{
     context_exitClause (yyvsp[-4].expr, yyvsp[-3].expr, yyvsp[0].expr);
     yyval.expr = exprNode_ifelse (yyvsp[-4].expr, yyvsp[-3].expr, yyvsp[0].expr); 
   ;
    break;}
case 574:
{ context_enterSwitch (yyvsp[0].expr); ;
    break;}
case 575:
{ yyval.expr = exprNode_switch (yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 576:
{ yyval.expr = exprNode_whilePred (yyvsp[-1].expr); context_enterWhileClause (yyvsp[-1].expr); ;
    break;}
case 577:
{ yyval.expr = exprNode_whilePred(yyvsp[-1].expr); ;
    break;}
case 578:
{ context_enterIterClause (); ;
    break;}
case 579:
{ setProcessingIterVars (yyvsp[-3].entry); ;
    break;}
case 580:
{ 
     yyval.expr = exprNode_iter (yyvsp[-9].entry, yyvsp[-4].exprlist, yyvsp[-2].expr, yyvsp[-1].entry); 

   ;
    break;}
case 581:
{ yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 582:
{ nextIterParam (); ;
    break;}
case 583:
{ yyval.exprlist = exprNodeList_push (yyvsp[-3].exprlist, yyvsp[0].expr); ;
    break;}
case 584:
{ yyval.expr = exprNode_iterExpr (yyvsp[0].expr); ;
    break;}
case 585:
{ yyval.expr = exprNode_iterId (yyvsp[0].entry); ;
    break;}
case 586:
{ uentry ue = coerceIterId (yyvsp[0].cname);

		      if (uentry_isValid (ue)) 
			{
			  yyval.expr = exprNode_iterId (ue);
			}
		      else
			{
			  yyval.expr = exprNode_iterNewId (cstring_copy (LastIdentifier ()));
			}
		    ;
    break;}
case 587:
{ yyval.expr = exprNode_iterNewId (yyvsp[0].cname); ;
    break;}
case 589:
{ yyval.expr = exprNode_combineLiterals (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 591:
{ yyval.expr = exprNode_addParens (yyvsp[-2].tok, yyvsp[-1].expr); ;
    break;}
case 593:
{ yyval.expr = exprNode_arrayFetch (yyvsp[-3].expr, yyvsp[-1].expr); ;
    break;}
case 594:
{ yyval.expr = exprNode_functionCall (yyvsp[-2].expr, exprNodeList_new ()); ;
    break;}
case 595:
{ yyval.expr = exprNode_functionCall (yyvsp[-3].expr, yyvsp[-1].exprlist); ;
    break;}
case 596:
{ yyval.expr = exprNode_vaArg (yyvsp[-5].tok, yyvsp[-3].expr, yyvsp[-1].qtyp); ;
    break;}
case 597:
{ yyval.expr = exprNode_fieldAccess (yyvsp[-4].expr, yyvsp[-2].tok, yyvsp[-1].cname); ;
    break;}
case 598:
{ yyval.expr = exprNode_arrowAccess (yyvsp[-4].expr, yyvsp[-2].tok, yyvsp[-1].cname); ;
    break;}
case 599:
{ yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 600:
{ yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 602:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 603:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 604:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 605:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 606:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 607:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 608:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 609:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 610:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 612:
{ yyval.expr = exprNode_cast (yyvsp[-3].tok, yyvsp[0].expr, yyvsp[-2].qtyp); ;
    break;}
case 614:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 615:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 616:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 618:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 619:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 621:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 622:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 624:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 625:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 626:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 627:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 629:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 630:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 632:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 634:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 636:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 638:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 640:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 642:
{ context_enterTrueClause (yyvsp[-1].expr); ;
    break;}
case 643:
{ context_enterFalseClause (yyvsp[-4].expr); ;
    break;}
case 644:
{ yyval.expr = exprNode_cond (yyvsp[-6].expr, yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 646:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 647:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 648:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 649:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 650:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 651:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 652:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 653:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 654:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 655:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 656:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 657:
{ yyval.entry = yyvsp[0].entry; ;
    break;}
case 658:
{ yyval.entry = uentry_undefined; ;
    break;}
case 659:
{ context_enterDoWhileClause (); yyval.tok = yyvsp[0].tok; ;
    break;}
case 660:
{ yyval.expr = exprNode_while (yyvsp[-1].expr, yyvsp[0].expr); context_exitWhileClause (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 661:
{ yyval.expr = exprNode_statement (exprNode_doWhile (yyvsp[-5].expr, yyvsp[-2].expr), yyvsp[0].tok); ;
    break;}
case 662:
{ yyval.expr = exprNode_for (yyvsp[-1].expr, yyvsp[0].expr); context_exitForClause (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 663:
{ yyval.expr = exprNode_while (yyvsp[-1].expr, yyvsp[0].expr); context_exitWhileClause (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 664:
{ yyval.expr = exprNode_statement (exprNode_doWhile (yyvsp[-5].expr, yyvsp[-2].expr), yyvsp[0].tok); ;
    break;}
case 665:
{ yyval.expr = exprNode_doWhile (yyvsp[-4].expr, yyvsp[-1].expr); ;
    break;}
case 666:
{ yyval.expr = exprNode_for (yyvsp[-1].expr, yyvsp[0].expr); context_exitForClause (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 667:
{ yyval.expr = exprNode_goto (yyvsp[-1].cname); ;
    break;}
case 668:
{ yyval.expr = exprNode_continue (yyvsp[-1].tok, BADTOK); ;
    break;}
case 669:
{ yyval.expr = exprNode_continue (yyvsp[-2].tok, QINNERCONTINUE); ;
    break;}
case 670:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, BADTOK); ;
    break;}
case 671:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, QSWITCHBREAK); ;
    break;}
case 672:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, QLOOPBREAK); ;
    break;}
case 673:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, QINNERBREAK); ;
    break;}
case 674:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, QSAFEBREAK); ;
    break;}
case 675:
{ yyval.expr = exprNode_nullReturn (yyvsp[-1].tok); ;
    break;}
case 676:
{ yyval.expr = exprNode_return (yyvsp[-1].expr); ;
    break;}
case 678:
{ ; ;
    break;}
case 681:
{ yyval.cname = uentry_getName (yyvsp[0].entry); ;
    break;}
case 682:
{ yyval.cname = uentry_getName (yyvsp[0].entry); ;
    break;}
case 683:
{ yyval.cname = uentry_getName (yyvsp[0].entry); ;
    break;}
case 684:
{ yyval.cname = yyvsp[0].cname; ;
    break;}
case 686:
{ yyval.ctyp = ctype_unknown; ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */


  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}


/*@-redecl@*/ /*@-namechecks@*/
extern char *yytext;
/*@=redecl@*/ /*@=namechecks@*/

# include "bison.reset"

void yyerror (/*@unused@*/ char *s) 
{
  static bool givehint = FALSE;

  if (context_inIterDef ())
    {
      llerror (FLG_SYNTAX, message ("Iter syntax not parseable: %s", 
				    context_inFunctionName ()));
    }
  else if (context_inIterEnd ())
    {
      llerror (FLG_SYNTAX, message ("Iter finalizer syntax not parseable: %s", 
				    context_inFunctionName ()));
    }
  else if (context_inMacro ())
    {
      llerror (FLG_SYNTAX, message ("Macro syntax not parseable: %s", 
				    context_inFunctionName ()));
      
      if (context_inUnknownMacro ())
	{
	  if (!givehint)
	    {
	      llhint (cstring_makeLiteral 
		     ("Precede macro definition with /*@notfunction@*/ "
		      "to suppress checking and force expansion"));
	      givehint = TRUE;
	    }
	}

      swallowMacro ();
      context_exitAllClausesQuiet ();
    }
  else
    {
      llparseerror (cstring_undefined);
    }
}












/*
** Resets all flags in bison.head
*/


/*@=allmacros@*/
/*@=boolint@*/
/*@=charint@*/
/*@=macroparams@*/
/*@=macroundef@*/
/*@=unreachable@*/
/*@=macrospec@*/
/*@=varuse@*/
/*@=ignorequals@*/
/*@=macrostmt@*/
/*@=noeffect@*/
/*@=shadow@*/
/*@=exitarg@*/
/*@=macroredef@*/
/*@=uniondef@*/
/*@=compdef@*/
/*@=matchfields@*/
/*@=exportlocal@*/
/*@=evalorderuncon@*/
/*@=exportheader@*/
/*@=typeuse@*/
/*@=redecl@*/
/*@=redef@*/
/*@=noparams@*/
/*@=ansireserved@*/
/*@=fielduse@*/
/*@=ifblock@*/
/*@=elseifcomplete@*/
/*@=whileblock@*/
/*@=forblock@*/
/*@=branchstate@*/
/*@=readonlytrans@*/
/*@=namechecks@*/
/*@=usedef@*/
/*@=systemunrecog@*/
/*@=dependenttrans@*/
/*@=unqualifiedtrans@*/
/*@=declundef@*/


/*drl added 11/27/2001*/
/*@=bounds@*/
