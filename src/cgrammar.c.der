/*
** Inserted at beginning of c files generated by bison
** REMEMBER:  Change bison.reset too.
*/

/*@-allmacros@*/
/*@+boolint@*/
/*@+charint@*/
/*@-macroparams@*/
/*@-macroundef@*/
/*@-unreachable@*/
/*@-macrospec@*/
/*@-varuse@*/
/*@+ignorequals@*/
/*@-macrostmt@*/
/*@-noeffect@*/
/*@-shadow@*/
/*@-exitarg@*/
/*@-macroredef@*/
/*@-uniondef@*/
/*@-compdef@*/
/*@-matchfields@*/
/*@-exportlocal@*/
/*@-evalorderuncon@*/
/*@-exportheader@*/
/*@-typeuse@*/
/*@-redecl@*/
/*@-redef@*/
/*@-noparams@*/
/*@-ansireserved@*/
/*@-fielduse@*/
/*@-ifblock@*/
/*@-elseifcomplete@*/
/*@-whileblock@*/
/*@-forblock@*/
/*@-branchstate@*/
/*@-readonlytrans@*/
/*@-namechecks@*/
/*@-usedef@*/
/*@-systemunrecog@*/
/*@-dependenttrans@*/
/*@-unqualifiedtrans@*/
/*@-nullassign@*/
/*@-nullpass@*/
/*@-nullptrarith*/
/*@-usereleased@*/
/*@-declundef@*/

/*drl added 11/27/2001*/
/*@-bounds@*/
/* < end of bison.head > */


/*  A Bison parser, made from cgrammar.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	BADTOK	257
#define	SKIPTOK	258
#define	CTOK_ELIPSIS	259
#define	CASE	260
#define	DEFAULT	261
#define	CIF	262
#define	CELSE	263
#define	SWITCH	264
#define	WHILE	265
#define	DO	266
#define	CFOR	267
#define	GOTO	268
#define	CONTINUE	269
#define	BREAK	270
#define	RETURN	271
#define	TSEMI	272
#define	TLBRACE	273
#define	TRBRACE	274
#define	TCOMMA	275
#define	TCOLON	276
#define	TASSIGN	277
#define	TLPAREN	278
#define	TRPAREN	279
#define	TLSQBR	280
#define	TRSQBR	281
#define	TDOT	282
#define	TAMPERSAND	283
#define	TEXCL	284
#define	TTILDE	285
#define	TMINUS	286
#define	TPLUS	287
#define	TMULT	288
#define	TDIV	289
#define	TPERCENT	290
#define	TLT	291
#define	TGT	292
#define	TCIRC	293
#define	TBAR	294
#define	TQUEST	295
#define	CSIZEOF	296
#define	CALIGNOF	297
#define	CTYPEOF	298
#define	ARROW_OP	299
#define	CTYPEDEF	300
#define	COFFSETOF	301
#define	INC_OP	302
#define	DEC_OP	303
#define	LEFT_OP	304
#define	RIGHT_OP	305
#define	LE_OP	306
#define	GE_OP	307
#define	EQ_OP	308
#define	NE_OP	309
#define	AND_OP	310
#define	OR_OP	311
#define	MUL_ASSIGN	312
#define	DIV_ASSIGN	313
#define	MOD_ASSIGN	314
#define	ADD_ASSIGN	315
#define	SUB_ASSIGN	316
#define	LEFT_ASSIGN	317
#define	RIGHT_ASSIGN	318
#define	AND_ASSIGN	319
#define	XOR_ASSIGN	320
#define	OR_ASSIGN	321
#define	CSTRUCT	322
#define	CUNION	323
#define	CENUM	324
#define	VA_ARG	325
#define	VA_DCL	326
#define	QWARN	327
#define	QGLOBALS	328
#define	QMODIFIES	329
#define	QNOMODS	330
#define	QCONSTANT	331
#define	QFUNCTION	332
#define	QITER	333
#define	QDEFINES	334
#define	QUSES	335
#define	QALLOCATES	336
#define	QSETS	337
#define	QRELEASES	338
#define	QPRECLAUSE	339
#define	QPOSTCLAUSE	340
#define	QINVARIANT	341
#define	QALT	342
#define	QUNDEF	343
#define	QKILLED	344
#define	QENDMACRO	345
#define	LLMACRO	346
#define	LLMACROITER	347
#define	LLMACROEND	348
#define	TENDMACRO	349
#define	QSWITCHBREAK	350
#define	QLOOPBREAK	351
#define	QINNERBREAK	352
#define	QSAFEBREAK	353
#define	QINNERCONTINUE	354
#define	QFALLTHROUGH	355
#define	QLINTNOTREACHED	356
#define	QLINTFALLTHROUGH	357
#define	QLINTFALLTHRU	358
#define	QARGSUSED	359
#define	QPRINTFLIKE	360
#define	QLINTPRINTFLIKE	361
#define	QSCANFLIKE	362
#define	QMESSAGELIKE	363
#define	QNOTREACHED	364
#define	QCONST	365
#define	QRESTRICT	366
#define	QVOLATILE	367
#define	QINLINE	368
#define	QEXTENSION	369
#define	QEXTERN	370
#define	QSTATIC	371
#define	QAUTO	372
#define	QREGISTER	373
#define	QOUT	374
#define	QIN	375
#define	QYIELD	376
#define	QONLY	377
#define	QTEMP	378
#define	QSHARED	379
#define	QREF	380
#define	QUNIQUE	381
#define	QCHECKED	382
#define	QUNCHECKED	383
#define	QCHECKEDSTRICT	384
#define	QCHECKMOD	385
#define	QKEEP	386
#define	QKEPT	387
#define	QPARTIAL	388
#define	QSPECIAL	389
#define	QOWNED	390
#define	QDEPENDENT	391
#define	QRETURNED	392
#define	QEXPOSED	393
#define	QNULL	394
#define	QOBSERVER	395
#define	QISNULL	396
#define	QEXITS	397
#define	QMAYEXIT	398
#define	QNEVEREXIT	399
#define	QTRUEEXIT	400
#define	QFALSEEXIT	401
#define	QLONG	402
#define	QSIGNED	403
#define	QUNSIGNED	404
#define	QSHORT	405
#define	QUNUSED	406
#define	QSEF	407
#define	QNOTNULL	408
#define	QRELNULL	409
#define	QABSTRACT	410
#define	QCONCRETE	411
#define	QMUTABLE	412
#define	QIMMUTABLE	413
#define	QTRUENULL	414
#define	QFALSENULL	415
#define	QEXTERNAL	416
#define	QREFCOUNTED	417
#define	QREFS	418
#define	QNEWREF	419
#define	QTEMPREF	420
#define	QKILLREF	421
#define	QRELDEF	422
#define	CGCHAR	423
#define	CBOOL	424
#define	CINT	425
#define	CGFLOAT	426
#define	CDOUBLE	427
#define	CVOID	428
#define	QANYTYPE	429
#define	QINTEGRALTYPE	430
#define	QUNSIGNEDINTEGRALTYPE	431
#define	QSIGNEDINTEGRALTYPE	432
#define	QNULLTERMINATED	433
#define	QSETBUFFERSIZE	434
#define	QSETSTRINGLENGTH	435
#define	QMAXSET	436
#define	QMAXREAD	437
#define	QTESTINRANGE	438
#define	TCAND	439
#define	IDENTIFIER	440
#define	NEW_IDENTIFIER	441
#define	TYPE_NAME_OR_ID	442
#define	CANNOTATION	443
#define	CCONSTANT	444
#define	ITER_NAME	445
#define	ITER_ENDNAME	446
#define	TYPE_NAME	447
#define	METASTATE_NAME	448


/*
**
** cgrammar.y
**
** Yacc/Bison grammar for extended ANSI C used by Splint.
**
** original grammar by Nate Osgood ---
**    hacrat@catfish.lcs.mit.edu Mon Jun 14 13:06:32 1993
**
** changes for Splint --- handle typedef names correctly
** fix struct/union parsing bug (empty struct is accepted)
** add productions to handle macros --- require
** error correction --- main source of conflicts in grammar.
** need to process initializations sequentially, L->R
**
** production names are cryptic, so more productions fit on one line
**
** conflicts:  87 shift/reduce, 18 reduce/reduce
** most of these are due to handling macros
** a few are due to handling type expressions
*/

/*@=allmacros@*/

extern int yylex ();
extern void swallowMacro (void);
extern void yyerror (char *);

# include "splintMacros.nf"
# include "basic.h"
# include "cscanner.h"
# include "cgrammar.h"
# include "exprChecks.h"

/*@-allmacros@*/
/*@-matchfields@*/

# define SHOWCSYM FALSE

/*
** This is necessary, or else when the bison-generated code #include's malloc.h,
** there will be a parse error.
**
** Unfortunately, it means the error checking on malloc, etc. is lost for allocations
** in bison-generated files under Win32.
*/

# ifdef WIN32
# undef malloc
# undef calloc
# undef realloc
# endif


typedef union
{
  lltok tok;
  int count;
  qual typequal;
  qualList tquallist;
  ctype ctyp;
  /*@dependent@*/ sRef sr;
  /*@only@*/ sRef osr;

  /*@only@*/ functionClauseList funcclauselist;
  /*@only@*/ functionClause funcclause;  
  /*@only@*/ flagSpec flagspec;
  /*@only@*/ globalsClause globsclause;
  /*@only@*/ modifiesClause modsclause;
  /*@only@*/ warnClause warnclause;
  /*@only@*/ stateClause stateclause;
  /*@only@*/ pointers pointers;
  /*@only@*/ functionConstraint fcnconstraint; 

  /*@only@*/ metaStateConstraint msconstraint;
  /*@only@*/ metaStateSpecifier msspec;
  /*@only@*/ metaStateExpression msexpr;
  /*@observer@*/ metaStateInfo msinfo;

  /*@only@*/ sRefList srlist;
  /*@only@*/ globSet globset;
  /*@only@*/ qtype qtyp;
  /*@only@*/ cstring cname;
  /*@observer@*/ annotationInfo annotation;
  /*@only@*/ idDecl ntyp;
  /*@only@*/ idDeclList ntyplist;
  /*@only@*/ uentryList flist;
  /*@owned@*/ uentryList entrylist;
  /*@observer@*/ /*@dependent@*/ uentry entry;
  /*@only@*/ uentry oentry;
  /*@only@*/ exprNode expr;
  /*@only@*/ enumNameList enumnamelist;
  /*@only@*/ exprNodeList exprlist;
  /*@only@*/ sRefSet srset; 
  /*@only@*/ cstringList cstringlist;

  /*drl
    added 1/19/2001
  */
  constraint con;
  constraintList conL;
  constraintExpr conE;
  /* drl */  
} YYSTYPE;
#ifndef YYDEBUG
#define YYDEBUG 1
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1239
#define	YYFLAG		-32768
#define	YYNTBASE	195

#define YYTRANSLATE(x) ((unsigned)(x) <= 448 ? yytranslate[x] : 460)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
   177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
   187,   188,   189,   190,   191,   192,   193,   194
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     1,     3,     5,     8,    11,    13,    15,    17,    19,
    21,    23,    25,    34,    46,    47,    53,    55,    59,    61,
    64,    66,    73,    77,    84,    85,    92,    93,   101,   103,
   110,   114,   121,   122,   129,   130,   138,   139,   140,   151,
   155,   159,   163,   166,   168,   172,   173,   178,   179,   184,
   186,   190,   192,   194,   196,   200,   202,   206,   208,   210,
   212,   214,   216,   218,   223,   229,   231,   233,   235,   237,
   241,   246,   249,   253,   257,   261,   263,   265,   267,   268,
   271,   272,   275,   277,   279,   281,   283,   285,   287,   289,
   291,   293,   295,   297,   299,   302,   303,   308,   310,   313,
   314,   318,   320,   324,   326,   328,   329,   332,   336,   339,
   341,   345,   348,   349,   352,   354,   356,   358,   360,   362,
   364,   366,   368,   370,   372,   374,   376,   378,   380,   382,
   384,   388,   389,   393,   394,   395,   400,   403,   406,   408,
   410,   412,   416,   421,   424,   428,   432,   436,   438,   440,
   442,   446,   448,   450,   454,   459,   462,   466,   470,   474,
   475,   477,   479,   483,   485,   487,   489,   493,   495,   497,
   498,   503,   505,   510,   514,   519,   526,   532,   538,   541,
   544,   552,   554,   558,   560,   563,   566,   569,   572,   575,
   578,   581,   584,   586,   588,   592,   597,   599,   609,   610,
   614,   619,   622,   627,   630,   632,   637,   639,   643,   647,
   651,   653,   657,   661,   663,   667,   671,   673,   677,   681,
   685,   689,   691,   695,   699,   701,   705,   707,   711,   713,
   717,   719,   720,   725,   727,   728,   733,   735,   736,   737,
   745,   747,   751,   755,   759,   763,   767,   771,   775,   779,
   783,   787,   791,   793,   797,   798,   800,   802,   804,   806,
   808,   812,   813,   823,   824,   836,   839,   840,   847,   848,
   857,   862,   867,   868,   869,   872,   874,   879,   880,   885,
   887,   891,   896,   899,   902,   905,   907,   910,   914,   917,
   919,   923,   925,   927,   929,   931,   933,   936,   937,   944,
   947,   950,   951,   958,   959,   965,   967,   969,   971,   973,
   975,   977,   979,   981,   983,   985,   987,   989,   991,   993,
   995,   997,   999,  1001,  1003,  1005,  1007,  1009,  1011,  1013,
  1015,  1017,  1019,  1021,  1023,  1025,  1027,  1029,  1031,  1033,
  1035,  1037,  1039,  1041,  1043,  1045,  1047,  1049,  1051,  1053,
  1055,  1057,  1059,  1061,  1063,  1065,  1067,  1069,  1072,  1075,
  1078,  1081,  1084,  1087,  1090,  1093,  1096,  1099,  1102,  1105,
  1108,  1111,  1114,  1117,  1120,  1123,  1126,  1129,  1132,  1135,
  1138,  1141,  1144,  1147,  1151,  1153,  1158,  1160,  1164,  1167,
  1170,  1173,  1174,  1176,  1177,  1178,  1179,  1192,  1193,  1194,
  1206,  1213,  1220,  1221,  1222,  1233,  1234,  1235,  1246,  1252,
  1258,  1263,  1268,  1269,  1271,  1273,  1276,  1282,  1286,  1289,
  1294,  1296,  1300,  1305,  1312,  1313,  1322,  1327,  1329,  1333,
  1336,  1338,  1343,  1345,  1347,  1350,  1353,  1355,  1358,  1360,
  1363,  1365,  1367,  1369,  1371,  1374,  1376,  1379,  1382,  1386,
  1388,  1392,  1394,  1398,  1400,  1402,  1406,  1407,  1410,  1411,
  1416,  1421,  1423,  1425,  1428,  1430,  1432,  1435,  1436,  1438,
  1444,  1447,  1451,  1455,  1460,  1464,  1469,  1474,  1480,  1482,
  1484,  1486,  1488,  1490,  1492,  1494,  1496,  1498,  1500,  1502,
  1504,  1507,  1510,  1518,  1525,  1528,  1529,  1530,  1541,  1542,
  1549,  1551,  1553,  1555,  1557,  1560,  1562,  1564,  1566,  1568,
  1570,  1572,  1574,  1578,  1580,  1581,  1585,  1588,  1591,  1593,
  1595,  1597,  1599,  1601,  1603,  1605,  1607,  1609,  1611,  1615,
  1617,  1619,  1622,  1625,  1626,  1629,  1630,  1635,  1636,  1643,
  1644,  1648,  1649,  1655,  1659,  1662,  1666,  1667,  1668,  1669,
  1670,  1671,  1673,  1676,  1679,  1683,  1686,  1690,  1694,  1699,
  1702,  1705,  1709,  1713,  1718,  1720,  1723,  1725,  1728,  1730,
  1734,  1736,  1741,  1743,  1746,  1748,  1751,  1753,  1756,  1758,
  1763,  1766,  1767,  1773,  1774,  1781,  1786,  1791,  1792,  1793,
  1804,  1806,  1807,  1812,  1814,  1816,  1818,  1820,  1822,  1825,
  1827,  1831,  1833,  1838,  1842,  1847,  1854,  1860,  1866,  1869,
  1872,  1874,  1877,  1880,  1883,  1886,  1889,  1892,  1895,  1898,
  1900,  1902,  1907,  1909,  1913,  1917,  1921,  1923,  1927,  1931,
  1933,  1937,  1941,  1943,  1947,  1951,  1955,  1959,  1961,  1965,
  1969,  1971,  1975,  1977,  1981,  1983,  1987,  1989,  1993,  1995,
  1999,  2001,  2002,  2003,  2011,  2013,  2017,  2021,  2025,  2029,
  2033,  2037,  2041,  2045,  2049,  2053,  2057,  2059,  2060,  2062,
  2065,  2073,  2076,  2079,  2087,  2094,  2097,  2101,  2104,  2108,
  2111,  2115,  2119,  2123,  2127,  2130,  2134,  2135,  2137,  2138,
  2140,  2142,  2144,  2146,  2148,  2150,  2152,  2154,  2156,  2161
};

static const short yyrhs[] = {    -1,
   196,     0,   197,     0,   196,   197,     0,   258,   455,     0,
   198,     0,   199,     0,   209,     0,   212,     0,   296,     0,
    18,     0,     1,     0,    77,   337,   351,   361,   351,   455,
   304,    91,     0,    77,   337,   351,   361,   351,    23,   304,
   309,   308,   455,    91,     0,     0,    78,   200,   201,   455,
    91,     0,   202,     0,   337,   351,   202,     0,   206,     0,
   365,   206,     0,   458,     0,   304,    24,   351,   361,   304,
    25,     0,   203,    26,    27,     0,   203,    26,   304,   295,
    27,   351,     0,     0,   203,   305,    24,    25,   204,   230,
     0,     0,   203,   305,    24,   362,    25,   205,   230,     0,
   458,     0,   304,    24,   351,   202,   304,    25,     0,   206,
    26,    27,     0,   206,    26,   304,   295,    27,   351,     0,
     0,   206,   305,    24,    25,   207,   231,     0,     0,   206,
   305,    24,   362,    25,   208,   231,     0,     0,     0,    79,
   458,    24,   362,    25,   210,   231,   211,   455,    91,     0,
    92,   392,    95,     0,    93,   378,    95,     0,    94,   379,
    95,     0,    92,    95,     0,   253,     0,   215,    23,   218,
     0,     0,   227,   216,    22,   219,     0,     0,     5,   217,
    22,   219,     0,   215,     0,   215,    40,   218,     0,   194,
     0,   185,     0,    56,     0,   222,   220,   221,     0,   222,
     0,   225,   224,   225,     0,   182,     0,   183,     0,    53,
     0,    52,     0,    54,     0,   226,     0,   228,    24,   225,
    25,     0,    24,   225,   229,   225,    25,     0,   227,     0,
   190,     0,   457,     0,   187,     0,   227,    26,    27,     0,
   227,    26,   190,    27,     0,    34,   227,     0,    24,   227,
    25,     0,   227,    28,   458,     0,   227,    45,   458,     0,
   223,     0,    33,     0,    32,     0,     0,   232,   230,     0,
     0,   233,   231,     0,   234,     0,   238,     0,   237,     0,
   315,     0,   318,     0,   244,     0,   235,     0,   239,     0,
   237,     0,   316,     0,   320,     0,   245,     0,   235,    91,
     0,     0,    74,   236,   246,   455,     0,    76,     0,   239,
    91,     0,     0,    75,   240,   259,     0,   242,     0,   242,
    40,   241,     0,   187,     0,   244,     0,     0,   245,    91,
     0,    73,   241,   431,     0,    73,   241,     0,   247,     0,
   246,    21,   247,     0,   248,   249,     0,     0,   250,   248,
     0,   457,     0,   187,     0,   296,     0,    89,     0,    90,
     0,   120,     0,   121,     0,   134,     0,    80,     0,    81,
     0,    82,     0,    83,     0,    84,     0,    85,     0,    86,
     0,   361,     0,   337,   351,   361,     0,     0,    19,   255,
   409,     0,     0,     0,   256,   413,   257,   402,     0,   213,
   254,     0,   262,   455,     0,   455,     0,   457,     0,   187,
     0,   260,    26,    27,     0,   260,    26,   261,    27,     0,
    34,   260,     0,    24,   260,    25,     0,   260,    28,   458,
     0,   260,    45,   458,     0,   260,     0,   431,     0,   260,
     0,   262,    21,   260,     0,   457,     0,   187,     0,   263,
    26,    27,     0,   263,    26,   261,    27,     0,    34,   263,
     0,    24,   263,    25,     0,   263,    28,   458,     0,   263,
    45,   458,     0,     0,   265,     0,   263,     0,   265,    21,
   263,     0,   457,     0,   187,     0,   431,     0,    24,   293,
    25,     0,   188,     0,   115,     0,     0,    24,   267,   402,
    25,     0,   266,     0,   268,    26,   293,    27,     0,   268,
    24,    25,     0,   268,    24,   269,    25,     0,    71,    24,
   292,    21,   373,    25,     0,   268,   351,    28,   458,   304,
     0,   268,   351,    45,   458,   304,     0,   268,    48,     0,
   268,    49,     0,    24,   373,    25,    19,   414,   456,    20,
     0,   292,     0,   269,    21,   292,     0,   268,     0,    48,
   270,     0,    49,   270,     0,    29,   276,     0,    34,   276,
     0,    33,   276,     0,    32,   276,     0,    31,   276,     0,
    30,   276,     0,   273,     0,   272,     0,   271,    28,   458,
     0,   271,    26,   293,    27,     0,   458,     0,    47,   304,
    24,   373,   351,    21,   271,    25,   304,     0,     0,   304,
   274,   275,     0,    42,    24,   373,    25,     0,    42,   270,
     0,    43,    24,   373,    25,     0,    43,   270,     0,   270,
     0,    24,   373,    25,   276,     0,   276,     0,   277,    34,
   276,     0,   277,    35,   276,     0,   277,    36,   276,     0,
   277,     0,   278,    33,   277,     0,   278,    32,   277,     0,
   278,     0,   279,    50,   278,     0,   279,    51,   278,     0,
   279,     0,   280,    37,   279,     0,   280,    38,   279,     0,
   280,    52,   279,     0,   280,    53,   279,     0,   280,     0,
   281,    54,   280,     0,   281,    55,   280,     0,   281,     0,
   282,    29,   281,     0,   282,     0,   283,    39,   282,     0,
   283,     0,   284,    40,   283,     0,   284,     0,     0,   285,
    56,   286,   284,     0,   285,     0,     0,   287,    57,   288,
   285,     0,   287,     0,     0,     0,   287,    41,   290,   293,
    22,   291,   289,     0,   289,     0,   270,    23,   292,     0,
   270,    58,   292,     0,   270,    59,   292,     0,   270,    60,
   292,     0,   270,    61,   292,     0,   270,    62,   292,     0,
   270,    63,   292,     0,   270,    64,   292,     0,   270,    65,
   292,     0,   270,    66,   292,     0,   270,    67,   292,     0,
   292,     0,   293,    21,   292,     0,     0,   293,     0,   289,
     0,   297,     0,    72,     0,   302,     0,   337,   304,    18,
     0,     0,   337,   351,   361,   351,   298,   304,   308,    18,
   304,     0,     0,   337,   351,   361,   351,    23,   299,   304,
   309,   308,    18,   304,     0,   361,   351,     0,     0,   361,
   351,    23,   301,   304,   309,     0,     0,    46,   337,   303,
   351,   306,   304,   243,    18,     0,    46,   337,   304,    18,
     0,    46,   306,   304,    18,     0,     0,     0,   307,   304,
     0,   300,     0,   306,    21,   351,   300,     0,     0,   308,
    21,   351,   300,     0,   292,     0,    19,   313,    20,     0,
    19,   313,    21,    20,     0,   310,   309,     0,   311,    23,
     0,   458,    22,     0,   312,     0,   311,   312,     0,    26,
   295,    27,     0,    28,   458,     0,   309,     0,   313,    21,
   309,     0,   116,     0,   114,     0,   117,     0,   118,     0,
   119,     0,   316,    91,     0,     0,   251,   351,   317,   265,
   455,   304,     0,   320,    91,     0,   252,   351,     0,     0,
   319,   326,   321,   264,   455,   304,     0,     0,   319,   322,
   323,   455,   304,     0,   221,     0,   214,     0,   143,     0,
   144,     0,   146,     0,   147,     0,   145,     0,   128,     0,
   131,     0,   129,     0,   130,     0,   136,     0,   137,     0,
   122,     0,   124,     0,   123,     0,   132,     0,   133,     0,
   125,     0,   127,     0,   140,     0,   142,     0,   155,     0,
   154,     0,   139,     0,   141,     0,   179,     0,   189,     0,
   138,     0,   153,     0,   152,     0,   162,     0,   160,     0,
   161,     0,   156,     0,   157,     0,   158,     0,   159,     0,
   163,     0,   164,     0,   167,     0,   168,     0,   165,     0,
   166,     0,   151,     0,   148,     0,   149,     0,   150,     0,
   120,     0,   121,     0,   134,     0,   135,     0,   111,   304,
     0,   113,   304,     0,   112,   304,     0,   333,   304,     0,
   326,   304,     0,   324,   304,     0,   327,   304,     0,   325,
   304,     0,   329,   304,     0,   328,   304,     0,   330,   304,
     0,   331,   304,     0,   169,   351,     0,   171,   351,     0,
   170,   351,     0,   172,   351,     0,   173,   351,     0,   174,
   351,     0,   175,   351,     0,   176,   351,     0,   177,   351,
     0,   178,   351,     0,   459,   351,     0,   342,   351,     0,
   356,   351,     0,   332,   351,     0,   304,   337,   304,     0,
   339,     0,   339,    88,   338,    91,     0,   373,     0,   373,
    21,   338,     0,   314,   340,     0,   334,   340,     0,   335,
   340,     0,     0,   337,     0,     0,     0,     0,   351,    68,
   458,   304,    19,   343,   406,   352,   407,   344,    20,   341,
     0,     0,     0,   351,    69,   458,   304,    19,   345,   406,
   352,   407,   346,    20,     0,   351,    68,   458,   304,    19,
    20,     0,   351,    69,   458,   304,    19,    20,     0,     0,
     0,   351,    68,   304,    19,   347,   406,   352,   407,   348,
    20,     0,     0,     0,   351,    69,   304,    19,   349,   406,
   352,   407,   350,    20,     0,   351,    68,   304,    19,    20,
     0,   351,    69,   304,    19,    20,     0,   351,    68,   458,
   351,     0,   351,    69,   458,   351,     0,     0,   353,     0,
   212,     0,   352,   353,     0,   337,   351,   354,   304,    18,
     0,   337,   304,    18,     0,   355,   351,     0,   354,    21,
   355,   351,     0,   361,     0,    22,   304,   295,     0,   361,
    22,   304,   295,     0,   351,    70,    19,   358,    20,   304,
     0,     0,   351,    70,   458,    19,   357,   358,    20,   304,
     0,   351,    70,   458,   304,     0,   359,     0,   358,    21,
   359,     0,   358,    21,     0,   458,     0,   458,    23,   304,
   295,     0,   203,     0,   375,     0,   365,   193,     0,   365,
   360,     0,   203,     0,   365,   203,     0,   368,     0,   351,
   366,     0,   111,     0,   112,     0,   113,     0,   363,     0,
   364,   363,     0,    34,     0,    34,   364,     0,    34,   365,
     0,    34,   364,   365,     0,   367,     0,   367,    21,     5,
     0,   458,     0,   367,    21,   458,     0,     5,     0,   369,
     0,   369,    21,     5,     0,     0,   370,   372,     0,     0,
   369,    21,   371,   372,     0,   304,   337,   360,   304,     0,
   458,     0,   336,     0,   336,   374,     0,   365,     0,   376,
     0,   365,   376,     0,     0,   376,     0,   304,    24,   351,
   374,    25,     0,    26,    27,     0,    26,   295,    27,     0,
   376,    26,    27,     0,   376,    26,   295,    27,     0,   304,
    24,    25,     0,   304,    24,   368,    25,     0,   376,   304,
    24,    25,     0,   376,   304,    24,   368,    25,     0,   394,
     0,   396,     0,   399,     0,   402,     0,   417,     0,   420,
     0,   452,     0,   425,     0,   454,     0,   380,     0,   378,
     0,   387,     0,   380,   387,     0,   424,   380,     0,   451,
   393,    11,    24,   293,    25,    18,     0,   451,   393,    11,
    24,   293,    25,     0,   382,   387,     0,     0,     0,    13,
    24,   294,    18,   294,    18,   383,   294,   384,    25,     0,
     0,   191,   404,    24,   386,   428,    25,     0,   192,     0,
   394,     0,   396,     0,   399,     0,   390,   413,     0,   390,
     0,   391,     0,   417,     0,   388,     0,   381,     0,   385,
     0,   454,     0,    24,   387,    25,     0,     1,     0,     0,
   419,   389,   387,     0,   404,    19,     0,   408,    20,     0,
   393,     0,   412,     0,   394,     0,   396,     0,   399,     0,
   403,     0,   418,     0,   420,     0,   425,     0,   453,     0,
    24,   393,    25,     0,   454,     0,     1,     0,   458,    22,
     0,   110,   377,     0,     0,   101,   395,     0,     0,     6,
   295,   397,    22,     0,     0,   101,   395,     6,   295,   398,
    22,     0,     0,     7,   400,    22,     0,     0,   101,   395,
     7,   401,    22,     0,    24,   402,    25,     0,   404,   410,
     0,   404,   411,   405,     0,     0,     0,     0,     0,     0,
    20,     0,   110,    20,     0,   416,    20,     0,   416,   110,
    20,     0,   413,    20,     0,   413,   110,    20,     0,   413,
   416,    20,     0,   413,   416,   110,    20,     0,    19,   409,
     0,    19,    20,     0,    19,   412,    20,     0,    19,   413,
    20,     0,    19,   413,   416,    20,     0,   393,     0,   412,
   393,     0,   296,     0,   413,   296,     0,   415,     0,   414,
    21,   415,     0,   292,     0,    19,   414,   456,    20,     0,
   377,     0,   416,   377,     0,    18,     0,   293,    18,     0,
    18,     0,   293,    18,     0,   293,     0,     8,    24,   293,
    25,     0,   419,   377,     0,     0,   419,   377,     9,   421,
   377,     0,     0,    10,    24,   293,   422,    25,   377,     0,
    11,    24,   293,    25,     0,    11,    24,   293,    25,     0,
     0,     0,   191,   426,   404,    24,   427,   428,    25,   402,
   450,   405,     0,   430,     0,     0,   428,   429,    21,   430,
     0,   449,     0,   457,     0,   188,     0,   187,     0,   190,
     0,   431,   190,     0,   431,     0,    24,   293,    25,     0,
   432,     0,   268,    26,   293,    27,     0,   268,    24,    25,
     0,   268,    24,   269,    25,     0,    71,    24,   292,    21,
   373,    25,     0,   268,   351,    28,   458,   304,     0,   268,
   351,    45,   458,   304,     0,   268,    48,     0,   268,    49,
     0,   433,     0,    48,   270,     0,    49,   270,     0,    29,
   276,     0,    34,   276,     0,    33,   276,     0,    32,   276,
     0,    31,   276,     0,    30,   276,     0,   273,     0,   434,
     0,    24,   373,    25,   276,     0,   435,     0,   277,    34,
   276,     0,   277,    35,   276,     0,   277,    36,   276,     0,
   436,     0,   278,    33,   277,     0,   278,    32,   277,     0,
   437,     0,   279,    50,   278,     0,   279,    51,   278,     0,
   438,     0,   280,    37,   279,     0,   280,    38,   279,     0,
   280,    52,   279,     0,   280,    53,   279,     0,   439,     0,
   281,    54,   280,     0,   281,    55,   280,     0,   440,     0,
   282,    29,   281,     0,   441,     0,   283,    39,   282,     0,
   442,     0,   284,    40,   283,     0,   443,     0,   285,    56,
   284,     0,   444,     0,   287,    57,   285,     0,   445,     0,
     0,     0,   287,    41,   447,   293,    22,   448,   289,     0,
   446,     0,   270,    23,   292,     0,   270,    58,   292,     0,
   270,    59,   292,     0,   270,    60,   292,     0,   270,    61,
   292,     0,   270,    62,   292,     0,   270,    63,   292,     0,
   270,    64,   292,     0,   270,    65,   292,     0,   270,    66,
   292,     0,   270,    67,   292,     0,   192,     0,     0,    12,
     0,   423,   377,     0,   451,   377,    11,    24,   293,    25,
    18,     0,   382,   377,     0,   423,   393,     0,   451,   393,
    11,    24,   293,    25,    18,     0,   451,   393,    11,    24,
   293,    25,     0,   382,   393,     0,    14,   458,    18,     0,
    15,    18,     0,   100,    15,    18,     0,    16,    18,     0,
    96,    16,    18,     0,    97,    16,    18,     0,    98,    16,
    18,     0,    99,    16,    18,     0,    17,    18,     0,    17,
   293,    18,     0,     0,    18,     0,     0,    21,     0,   186,
     0,   187,     0,   191,     0,   192,     0,   457,     0,   188,
     0,   193,     0,   188,     0,    44,    24,   293,    25,     0,
    44,    24,   373,    25,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   325,   326,   329,   330,   333,   334,   335,   336,   337,   338,
   339,   340,   343,   345,   349,   349,   356,   362,   366,   367,
   371,   372,   374,   376,   391,   394,   404,   407,   415,   416,
   418,   420,   436,   439,   447,   450,   458,   460,   460,   464,
   465,   466,   467,   470,   473,   477,   477,   480,   480,   485,
   486,   489,   494,   495,   498,   499,   502,   507,   508,   511,
   512,   513,   516,   517,   518,   523,   524,   527,   529,   531,
   533,   542,   544,   546,   548,   564,   568,   569,   576,   577,
   585,   587,   591,   592,   593,   594,   595,   596,   599,   600,
   601,   602,   603,   604,   607,   610,   611,   618,   621,   624,
   630,   638,   640,   644,   647,   648,   651,   654,   660,   664,
   665,   668,   671,   672,   675,   676,   677,   680,   681,   682,
   683,   684,   687,   688,   689,   690,   691,   694,   695,   698,
   705,   709,   711,   715,   716,   718,   725,   735,   736,   739,
   740,   741,   742,   743,   744,   745,   746,   750,   751,   755,
   756,   759,   761,   763,   764,   765,   766,   767,   769,   773,
   774,   777,   781,   793,   794,   795,   796,   797,   798,   799,
   800,   804,   805,   806,   807,   808,   809,   810,   811,   812,
   813,   817,   818,   821,   822,   823,   824,   825,   826,   827,
   828,   829,   830,   831,   834,   835,   837,   840,   844,   845,
   848,   849,   850,   851,   854,   855,   859,   860,   861,   862,
   865,   866,   867,   870,   871,   872,   875,   876,   877,   878,
   879,   882,   883,   884,   887,   888,   891,   892,   896,   897,
   900,   901,   906,   912,   913,   919,   925,   926,   926,   928,
   931,   932,   933,   934,   935,   936,   937,   938,   939,   940,
   941,   942,   945,   946,   949,   950,   953,   958,   959,   960,
   963,   977,   982,   988,   990,   996,  1001,  1001,  1005,  1006,
  1008,  1009,  1012,  1015,  1018,  1021,  1022,  1025,  1026,  1029,
  1030,  1031,  1032,  1039,  1040,  1044,  1045,  1048,  1049,  1052,
  1054,  1063,  1064,  1065,  1066,  1067,  1070,  1073,  1079,  1088,
  1091,  1094,  1101,  1108,  1114,  1139,  1140,  1143,  1144,  1145,
  1146,  1147,  1150,  1151,  1152,  1153,  1156,  1157,  1158,  1159,
  1160,  1161,  1162,  1163,  1164,  1165,  1166,  1167,  1168,  1169,
  1170,  1171,  1172,  1176,  1177,  1180,  1181,  1184,  1185,  1188,
  1189,  1190,  1191,  1194,  1195,  1196,  1197,  1198,  1199,  1202,
  1203,  1204,  1205,  1208,  1209,  1210,  1211,  1214,  1215,  1216,
  1217,  1218,  1219,  1220,  1221,  1222,  1223,  1224,  1225,  1232,
  1233,  1234,  1235,  1236,  1237,  1238,  1239,  1240,  1241,  1242,
  1243,  1244,  1245,  1248,  1252,  1253,  1257,  1258,  1262,  1263,
  1264,  1267,  1268,  1272,  1279,  1281,  1283,  1285,  1287,  1289,
  1290,  1292,  1294,  1296,  1298,  1299,  1300,  1303,  1304,  1306,
  1308,  1309,  1312,  1315,  1316,  1317,  1320,  1322,  1326,  1328,
  1332,  1333,  1334,  1338,  1340,  1340,  1342,  1345,  1347,  1349,
  1352,  1357,  1364,  1365,  1366,  1372,  1376,  1377,  1381,  1382,
  1385,  1386,  1387,  1390,  1391,  1394,  1395,  1396,  1397,  1400,
  1401,  1404,  1405,  1408,  1409,  1410,  1413,  1413,  1414,  1415,
  1418,  1430,  1446,  1447,  1450,  1451,  1452,  1455,  1456,  1459,
  1461,  1462,  1464,  1465,  1467,  1469,  1471,  1473,  1479,  1480,
  1481,  1482,  1483,  1484,  1485,  1486,  1487,  1491,  1494,  1497,
  1498,  1502,  1504,  1506,  1508,  1512,  1513,  1515,  1519,  1521,
  1523,  1526,  1527,  1528,  1529,  1530,  1531,  1532,  1533,  1534,
  1535,  1536,  1537,  1538,  1541,  1542,  1547,  1550,  1553,  1554,
  1557,  1558,  1559,  1560,  1561,  1562,  1563,  1564,  1565,  1566,
  1567,  1570,  1571,  1578,  1579,  1585,  1586,  1587,  1588,  1591,
  1592,  1593,  1594,  1597,  1598,  1602,  1605,  1608,  1611,  1614,
  1617,  1620,  1621,  1622,  1623,  1625,  1626,  1628,  1630,  1636,
  1640,  1642,  1644,  1646,  1650,  1651,  1654,  1655,  1658,  1659,
  1662,  1663,  1666,  1667,  1670,  1671,  1674,  1675,  1676,  1679,
  1692,  1697,  1698,  1702,  1703,  1706,  1711,  1714,  1715,  1716,
  1724,  1725,  1725,  1729,  1730,  1731,  1742,  1749,  1750,  1753,
  1754,  1757,  1758,  1759,  1760,  1761,  1763,  1764,  1765,  1766,
  1769,  1770,  1771,  1772,  1773,  1774,  1775,  1776,  1777,  1778,
  1781,  1782,  1785,  1786,  1787,  1788,  1791,  1792,  1793,  1796,
  1797,  1798,  1801,  1802,  1803,  1804,  1805,  1808,  1809,  1810,
  1813,  1814,  1817,  1818,  1822,  1823,  1826,  1827,  1830,  1831,
  1834,  1835,  1836,  1837,  1840,  1841,  1842,  1843,  1844,  1845,
  1846,  1847,  1848,  1849,  1850,  1851,  1854,  1855,  1858,  1861,
  1863,  1865,  1869,  1870,  1872,  1874,  1877,  1878,  1879,  1881,
  1882,  1883,  1884,  1885,  1886,  1887,  1890,  1891,  1894,  1895,
  1898,  1901,  1902,  1903,  1904,  1905,  1908,  1909,  1910,  1911
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","BADTOK",
"SKIPTOK","CTOK_ELIPSIS","CASE","DEFAULT","CIF","CELSE","SWITCH","WHILE","DO",
"CFOR","GOTO","CONTINUE","BREAK","RETURN","TSEMI","TLBRACE","TRBRACE","TCOMMA",
"TCOLON","TASSIGN","TLPAREN","TRPAREN","TLSQBR","TRSQBR","TDOT","TAMPERSAND",
"TEXCL","TTILDE","TMINUS","TPLUS","TMULT","TDIV","TPERCENT","TLT","TGT","TCIRC",
"TBAR","TQUEST","CSIZEOF","CALIGNOF","CTYPEOF","ARROW_OP","CTYPEDEF","COFFSETOF",
"INC_OP","DEC_OP","LEFT_OP","RIGHT_OP","LE_OP","GE_OP","EQ_OP","NE_OP","AND_OP",
"OR_OP","MUL_ASSIGN","DIV_ASSIGN","MOD_ASSIGN","ADD_ASSIGN","SUB_ASSIGN","LEFT_ASSIGN",
"RIGHT_ASSIGN","AND_ASSIGN","XOR_ASSIGN","OR_ASSIGN","CSTRUCT","CUNION","CENUM",
"VA_ARG","VA_DCL","QWARN","QGLOBALS","QMODIFIES","QNOMODS","QCONSTANT","QFUNCTION",
"QITER","QDEFINES","QUSES","QALLOCATES","QSETS","QRELEASES","QPRECLAUSE","QPOSTCLAUSE",
"QINVARIANT","QALT","QUNDEF","QKILLED","QENDMACRO","LLMACRO","LLMACROITER","LLMACROEND",
"TENDMACRO","QSWITCHBREAK","QLOOPBREAK","QINNERBREAK","QSAFEBREAK","QINNERCONTINUE",
"QFALLTHROUGH","QLINTNOTREACHED","QLINTFALLTHROUGH","QLINTFALLTHRU","QARGSUSED",
"QPRINTFLIKE","QLINTPRINTFLIKE","QSCANFLIKE","QMESSAGELIKE","QNOTREACHED","QCONST",
"QRESTRICT","QVOLATILE","QINLINE","QEXTENSION","QEXTERN","QSTATIC","QAUTO","QREGISTER",
"QOUT","QIN","QYIELD","QONLY","QTEMP","QSHARED","QREF","QUNIQUE","QCHECKED",
"QUNCHECKED","QCHECKEDSTRICT","QCHECKMOD","QKEEP","QKEPT","QPARTIAL","QSPECIAL",
"QOWNED","QDEPENDENT","QRETURNED","QEXPOSED","QNULL","QOBSERVER","QISNULL","QEXITS",
"QMAYEXIT","QNEVEREXIT","QTRUEEXIT","QFALSEEXIT","QLONG","QSIGNED","QUNSIGNED",
"QSHORT","QUNUSED","QSEF","QNOTNULL","QRELNULL","QABSTRACT","QCONCRETE","QMUTABLE",
"QIMMUTABLE","QTRUENULL","QFALSENULL","QEXTERNAL","QREFCOUNTED","QREFS","QNEWREF",
"QTEMPREF","QKILLREF","QRELDEF","CGCHAR","CBOOL","CINT","CGFLOAT","CDOUBLE",
"CVOID","QANYTYPE","QINTEGRALTYPE","QUNSIGNEDINTEGRALTYPE","QSIGNEDINTEGRALTYPE",
"QNULLTERMINATED","QSETBUFFERSIZE","QSETSTRINGLENGTH","QMAXSET","QMAXREAD","QTESTINRANGE",
"TCAND","IDENTIFIER","NEW_IDENTIFIER","TYPE_NAME_OR_ID","CANNOTATION","CCONSTANT",
"ITER_NAME","ITER_ENDNAME","TYPE_NAME","METASTATE_NAME","file","externalDefs",
"externalDef","constantDecl","fcnDecl","@1","plainFcn","plainNamedDecl","namedDeclBase",
"@2","@3","plainNamedDeclBase","@4","@5","iterDecl","@6","@7","macroDef","fcnDefHdr",
"metaStateConstraint","metaStateSpecifier","@8","@9","metaStateExpression","metaStateName",
"constraintSeperator","BufConstraintList","BufConstraint","bufferModifier","relationalOp",
"BufConstraintExpr","BufConstraintTerm","BufConstraintSrefExpr","BufUnaryOp",
"BufBinaryOp","functionClauses","functionClausesPlain","functionClause","functionClausePlain",
"globalsClause","globalsClausePlain","@10","nomodsClause","modifiesClause","modifiesClausePlain",
"@11","flagSpec","flagId","optWarnClause","warnClause","warnClausePlain","globIdList",
"globIdListExpr","optGlobQuals","globId","globQual","stateTag","conditionTag",
"fcnDefHdrAux","fcnBody","@12","@13","@14","fcnDef","locModifies","modListExpr",
"mExpr","modList","specClauseListExpr","optSpecClauseList","specClauseList",
"primaryExpr","@15","postfixExpr","argumentExprList","unaryExpr","fieldDesignator",
"offsetofExpr","sizeofExpr","@16","sizeofExprAux","castExpr","timesExpr","plusExpr",
"shiftExpr","relationalExpr","equalityExpr","bitandExpr","xorExpr","bitorExpr",
"andExpr","@17","orExpr","@18","conditionalExpr","@19","@20","assignExpr","expr",
"optExpr","constantExpr","initializer","instanceDecl","@21","@22","namedInitializer",
"@23","typeDecl","@24","IsType","PushType","namedInitializerList","namedInitializerListAux",
"optDeclarators","init","designation","designatorList","designator","initList",
"storageSpecifier","stateClause","stateClausePlain","@25","conditionClause",
"startConditionClause","conditionClausePlain","@26","@27","functionConstraint",
"exitsQualifier","checkQualifier","stateQualifier","paramQualifier","visibilityQualifier",
"returnQualifier","typedefQualifier","refcountQualifier","typeModifier","definedQualifier",
"typeQualifier","typeSpecifier","completeType","completeTypeSpecifier","altType",
"completeTypeSpecifierAux","optCompleteType","optStructInvariant","suSpc","@28",
"@29","@30","@31","@32","@33","@34","@35","NotType","structDeclList","structDecl",
"structNamedDeclList","structNamedDecl","enumSpc","@36","enumeratorList","enumerator",
"optNamedDecl","namedDecl","genericParamList","innerMods","innerModsList","pointers",
"paramIdList","idList","paramTypeList","paramList","@37","@38","paramDecl","typeExpression",
"abstractDecl","optAbstractDeclBase","abstractDeclBase","stmt","iterBody","endBody",
"iterDefStmtList","iterDefIterationStmt","forPred","@39","@40","partialIterStmt",
"@41","iterDefStmt","iterSelectionStmt","@42","openScope","closeScope","macroBody",
"stmtErr","labeledStmt","optExtraFallThroughs","caseStmt","@43","@44","defaultStmt",
"@45","@46","compoundStmt","compoundStmtErr","CreateInnerScope","DeleteInnerScope",
"CreateStructInnerScope","DeleteStructInnerScope","DeleteInnerScopeSafe","compoundStmtRest",
"compoundStmtAux","compoundStmtAuxErr","stmtListErr","initializerList","typeInitializerList",
"typeInitializer","stmtList","expressionStmt","expressionStmtErr","ifPred","selectionStmt",
"@47","@48","whilePred","iterWhilePred","iterStmt","@49","@50","iterArgList",
"@51","iterArgExpr","cconstantExpr","primaryIterExpr","postfixIterExpr","unaryIterExpr",
"castIterExpr","timesIterExpr","plusIterExpr","shiftIterExpr","relationalIterExpr",
"equalityIterExpr","bitandIterExpr","xorIterExpr","bitorIterExpr","andIterExpr",
"orIterExpr","conditionalIterExpr","@52","@53","assignIterExpr","endIter","doHeader",
"iterationStmt","iterationStmtErr","jumpStmt","optSemi","optComma","id","newId",
"typeName", NULL
};
#endif

static const short yyr1[] = {     0,
   195,   195,   196,   196,   197,   197,   197,   197,   197,   197,
   197,   197,   198,   198,   200,   199,   201,   201,   202,   202,
   203,   203,   203,   203,   204,   203,   205,   203,   206,   206,
   206,   206,   207,   206,   208,   206,   210,   211,   209,   212,
   212,   212,   212,   213,   214,   216,   215,   217,   215,   218,
   218,   219,   220,   220,   221,   221,   222,   223,   223,   224,
   224,   224,   225,   225,   225,   226,   226,   227,   227,   227,
   227,   227,   227,   227,   227,   228,   229,   229,   230,   230,
   231,   231,   232,   232,   232,   232,   232,   232,   233,   233,
   233,   233,   233,   233,   234,   236,   235,   237,   238,   240,
   239,   241,   241,   242,   243,   243,   244,   245,   245,   246,
   246,   247,   248,   248,   249,   249,   249,   250,   250,   250,
   250,   250,   251,   251,   251,   251,   251,   252,   252,   253,
   253,   255,   254,   256,   257,   254,   258,   259,   259,   260,
   260,   260,   260,   260,   260,   260,   260,   261,   261,   262,
   262,   263,   263,   263,   263,   263,   263,   263,   263,   264,
   264,   265,   265,   266,   266,   266,   266,   266,   266,   267,
   266,   268,   268,   268,   268,   268,   268,   268,   268,   268,
   268,   269,   269,   270,   270,   270,   270,   270,   270,   270,
   270,   270,   270,   270,   271,   271,   271,   272,   274,   273,
   275,   275,   275,   275,   276,   276,   277,   277,   277,   277,
   278,   278,   278,   279,   279,   279,   280,   280,   280,   280,
   280,   281,   281,   281,   282,   282,   283,   283,   284,   284,
   285,   286,   285,   287,   288,   287,   289,   290,   291,   289,
   292,   292,   292,   292,   292,   292,   292,   292,   292,   292,
   292,   292,   293,   293,   294,   294,   295,   296,   296,   296,
   297,   298,   297,   299,   297,   300,   301,   300,   303,   302,
   302,   302,   304,   305,   306,   307,   307,   308,   308,   309,
   309,   309,   309,   310,   310,   311,   311,   312,   312,   313,
   313,   314,   314,   314,   314,   314,   315,   317,   316,   318,
   319,   321,   320,   322,   320,   323,   323,   324,   324,   324,
   324,   324,   325,   325,   325,   325,   326,   326,   326,   326,
   326,   326,   326,   326,   326,   326,   326,   326,   326,   326,
   326,   326,   326,   327,   327,   328,   328,   329,   329,   330,
   330,   330,   330,   331,   331,   331,   331,   331,   331,   332,
   332,   332,   332,   333,   333,   333,   333,   334,   334,   334,
   334,   334,   334,   334,   334,   334,   334,   334,   334,   335,
   335,   335,   335,   335,   335,   335,   335,   335,   335,   335,
   335,   335,   335,   336,   337,   337,   338,   338,   339,   339,
   339,   340,   340,   341,   343,   344,   342,   345,   346,   342,
   342,   342,   347,   348,   342,   349,   350,   342,   342,   342,
   342,   342,   351,   352,   352,   352,   353,   353,   354,   354,
   355,   355,   355,   356,   357,   356,   356,   358,   358,   358,
   359,   359,   360,   360,   360,   360,   361,   361,   362,   362,
   363,   363,   363,   364,   364,   365,   365,   365,   365,   366,
   366,   367,   367,   368,   368,   368,   370,   369,   371,   369,
   372,   372,   373,   373,   374,   374,   374,   375,   375,   376,
   376,   376,   376,   376,   376,   376,   376,   376,   377,   377,
   377,   377,   377,   377,   377,   377,   377,   378,   379,   380,
   380,   381,   381,   381,   381,   383,   384,   382,   386,   385,
   385,   387,   387,   387,   387,   387,   387,   387,   387,   387,
   387,   387,   387,   387,   389,   388,   390,   391,   392,   392,
   393,   393,   393,   393,   393,   393,   393,   393,   393,   393,
   393,   394,   394,   395,   395,   397,   396,   398,   396,   400,
   399,   401,   399,   402,   402,   403,   404,   405,   406,   407,
   408,   409,   409,   409,   409,   409,   409,   409,   409,   410,
   411,   411,   411,   411,   412,   412,   413,   413,   414,   414,
   415,   415,   416,   416,   417,   417,   418,   418,   418,   419,
   420,   421,   420,   422,   420,   423,   424,   426,   427,   425,
   428,   429,   428,   430,   430,   430,   430,   431,   431,   432,
   432,   433,   433,   433,   433,   433,   433,   433,   433,   433,
   434,   434,   434,   434,   434,   434,   434,   434,   434,   434,
   435,   435,   436,   436,   436,   436,   437,   437,   437,   438,
   438,   438,   439,   439,   439,   439,   439,   440,   440,   440,
   441,   441,   442,   442,   443,   443,   444,   444,   445,   445,
   446,   447,   448,   446,   449,   449,   449,   449,   449,   449,
   449,   449,   449,   449,   449,   449,   450,   450,   451,   452,
   452,   452,   453,   453,   453,   453,   454,   454,   454,   454,
   454,   454,   454,   454,   454,   454,   455,   455,   456,   456,
   457,   458,   458,   458,   458,   458,   459,   459,   459,   459
};

static const short yyr2[] = {     0,
     0,     1,     1,     2,     2,     1,     1,     1,     1,     1,
     1,     1,     8,    11,     0,     5,     1,     3,     1,     2,
     1,     6,     3,     6,     0,     6,     0,     7,     1,     6,
     3,     6,     0,     6,     0,     7,     0,     0,    10,     3,
     3,     3,     2,     1,     3,     0,     4,     0,     4,     1,
     3,     1,     1,     1,     3,     1,     3,     1,     1,     1,
     1,     1,     1,     4,     5,     1,     1,     1,     1,     3,
     4,     2,     3,     3,     3,     1,     1,     1,     0,     2,
     0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     2,     0,     4,     1,     2,     0,
     3,     1,     3,     1,     1,     0,     2,     3,     2,     1,
     3,     2,     0,     2,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     3,     0,     3,     0,     0,     4,     2,     2,     1,     1,
     1,     3,     4,     2,     3,     3,     3,     1,     1,     1,
     3,     1,     1,     3,     4,     2,     3,     3,     3,     0,
     1,     1,     3,     1,     1,     1,     3,     1,     1,     0,
     4,     1,     4,     3,     4,     6,     5,     5,     2,     2,
     7,     1,     3,     1,     2,     2,     2,     2,     2,     2,
     2,     2,     1,     1,     3,     4,     1,     9,     0,     3,
     4,     2,     4,     2,     1,     4,     1,     3,     3,     3,
     1,     3,     3,     1,     3,     3,     1,     3,     3,     3,
     3,     1,     3,     3,     1,     3,     1,     3,     1,     3,
     1,     0,     4,     1,     0,     4,     1,     0,     0,     7,
     1,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     1,     3,     0,     1,     1,     1,     1,     1,
     3,     0,     9,     0,    11,     2,     0,     6,     0,     8,
     4,     4,     0,     0,     2,     1,     4,     0,     4,     1,
     3,     4,     2,     2,     2,     1,     2,     3,     2,     1,
     3,     1,     1,     1,     1,     1,     2,     0,     6,     2,
     2,     0,     6,     0,     5,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     3,     1,     4,     1,     3,     2,     2,
     2,     0,     1,     0,     0,     0,    12,     0,     0,    11,
     6,     6,     0,     0,    10,     0,     0,    10,     5,     5,
     4,     4,     0,     1,     1,     2,     5,     3,     2,     4,
     1,     3,     4,     6,     0,     8,     4,     1,     3,     2,
     1,     4,     1,     1,     2,     2,     1,     2,     1,     2,
     1,     1,     1,     1,     2,     1,     2,     2,     3,     1,
     3,     1,     3,     1,     1,     3,     0,     2,     0,     4,
     4,     1,     1,     2,     1,     1,     2,     0,     1,     5,
     2,     3,     3,     4,     3,     4,     4,     5,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     2,     2,     7,     6,     2,     0,     0,    10,     0,     6,
     1,     1,     1,     1,     2,     1,     1,     1,     1,     1,
     1,     1,     3,     1,     0,     3,     2,     2,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     3,     1,
     1,     2,     2,     0,     2,     0,     4,     0,     6,     0,
     3,     0,     5,     3,     2,     3,     0,     0,     0,     0,
     0,     1,     2,     2,     3,     2,     3,     3,     4,     2,
     2,     3,     3,     4,     1,     2,     1,     2,     1,     3,
     1,     4,     1,     2,     1,     2,     1,     2,     1,     4,
     2,     0,     5,     0,     6,     4,     4,     0,     0,    10,
     1,     0,     4,     1,     1,     1,     1,     1,     2,     1,
     3,     1,     4,     3,     4,     6,     5,     5,     2,     2,
     1,     2,     2,     2,     2,     2,     2,     2,     2,     1,
     1,     4,     1,     3,     3,     3,     1,     3,     3,     1,
     3,     3,     1,     3,     3,     3,     3,     1,     3,     3,
     1,     3,     1,     3,     1,     3,     1,     3,     1,     3,
     1,     0,     0,     7,     1,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     1,     0,     1,     2,
     7,     2,     2,     7,     6,     2,     3,     2,     3,     2,
     3,     3,     3,     3,     2,     3,     0,     1,     0,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     4,     4
};

static const short yydefact[] = {     0,
    12,    11,   446,     0,   413,   259,   413,    15,     0,     0,
     0,     0,   273,   273,   273,   293,   292,   294,   295,   296,
   354,   355,   319,   321,   320,   324,   325,   313,   315,   316,
   314,   322,   323,   356,   357,   317,   318,   334,   330,   326,
   331,   327,   308,   309,   312,   310,   311,   351,   352,   353,
   350,   336,   335,   329,   328,   340,   341,   342,   343,   338,
   339,   337,   344,   345,   348,   349,   346,   347,   413,   413,
   413,   413,   413,   413,   413,   413,   413,   413,   332,   691,
   692,   696,   333,   693,   694,   697,     0,     3,     6,     7,
   437,     8,     9,   134,    44,   687,    10,   258,   260,     0,
   392,   273,   273,   273,   273,   273,   273,   273,   273,   413,
   273,   392,   392,   413,   385,   413,     0,   413,   130,   273,
   695,    21,   413,   441,   442,   443,   444,   447,   448,   273,
   276,   273,   273,   269,   413,   698,   413,   413,   696,     0,
   531,   273,   540,     0,     0,     0,   669,     0,     0,     0,
     0,   273,   577,     0,   273,   273,   273,   273,   273,   273,
   273,   273,   273,     0,    43,     0,     0,     0,     0,     0,
   534,   273,   169,   165,   168,   598,   588,   172,   184,   205,
   194,   193,   207,   211,   214,   217,   222,   225,   227,   229,
   231,   234,   237,   241,   253,   579,   199,     0,     0,   565,
   521,   522,   523,   524,     0,     0,   525,   273,   526,     0,
   527,   166,     0,   528,   530,   164,     0,   514,     0,   575,
     0,   547,   501,     0,     0,     0,   510,     0,   511,   490,
   509,   506,   507,   502,   503,   504,     0,     0,   508,   515,
     0,     0,   512,   489,     0,   358,   360,   359,   370,   372,
   371,   373,   374,   375,   376,   377,   378,   379,     4,   273,
     0,   132,   137,   413,   688,     5,   413,   393,   389,   363,
   365,   362,   364,   367,   366,   368,   369,   383,   361,   390,
   391,     0,   273,   273,   381,   273,   273,     0,   382,   438,
   380,   445,   449,   273,   165,   168,     0,   413,   463,     0,
   164,   413,     0,   275,   413,     0,   266,   273,   687,    17,
    19,     0,   413,   273,    29,   457,   205,   257,   536,     0,
   273,   273,   273,   273,     0,   678,   680,   685,     0,   547,
     0,     0,     0,   187,   192,   191,   190,   189,   188,     0,
   273,   185,   186,   273,     0,     0,     0,     0,     0,   534,
     0,   273,   533,   273,   479,   480,   481,   482,     0,   483,
   484,   273,   486,   273,   485,   487,   547,   273,   273,   179,
   180,     0,   273,   273,   273,   273,   273,   273,   273,   273,
   273,   273,   273,   273,   273,   273,   273,   273,   273,   273,
   273,   273,   273,   273,   273,   273,   273,   273,   273,   232,
   238,   235,   578,   273,     0,   676,    40,     0,   548,   566,
   581,   673,   599,     0,   532,   273,     0,     0,     0,   576,
    41,   491,   495,   567,   413,   505,   517,   518,     0,     0,
     0,    42,    23,   273,   457,   413,   413,   273,   261,   131,
   413,     0,   387,     0,   413,     0,   413,     0,   273,     0,
   699,   273,   273,     0,   465,   464,   466,   700,   273,   272,
   273,   271,   267,   413,     0,   273,     0,   413,   273,    20,
   454,     0,     0,   439,   455,   273,     0,   541,     0,   584,
     0,   256,     0,   677,   686,   547,     0,   167,   273,   529,
   273,     0,     0,   681,   682,   683,   684,   679,   535,   273,
   542,     0,   672,   413,   545,   670,     0,     0,   174,     0,
   182,     0,     0,     0,   242,   243,   244,   245,   246,   247,
   248,   249,   250,   251,   252,   208,   209,   210,   213,   212,
   215,   216,   218,   219,   220,   221,   223,   224,   226,   228,
   230,   273,   273,   273,   254,   273,   273,   200,   561,   698,
   565,     0,   413,   546,   582,     0,     0,   513,   499,   273,
   568,   516,     0,     0,    25,     0,   552,   273,   573,   133,
   413,   273,   547,   273,   262,   386,   273,   403,     0,   411,
   406,     0,   412,     0,   428,   431,   425,   427,   384,   471,
     0,   457,   467,   273,     0,   277,   273,   273,   687,    16,
    31,   273,   457,   273,    18,   440,   450,   452,    37,   459,
   413,   458,   462,   537,   580,     0,   586,   273,   171,   273,
   206,   413,     0,   273,   538,     0,   544,   560,     0,   589,
   273,   175,   173,   273,   273,   233,     0,   236,   273,   202,
   273,   204,   562,   563,   273,   273,   273,   587,   273,   413,
   273,   413,    79,    27,   553,   556,   273,   273,   554,   273,
   574,   136,     0,   264,   273,   388,   409,   549,   395,   410,
   549,   398,   273,   430,   273,     0,   472,   475,   273,     0,
   473,     0,   457,   106,   273,   273,   273,     0,    33,     0,
   273,     0,    81,   456,   273,   468,   273,     0,   273,   571,
   689,   569,     0,     0,     0,   543,   273,   273,   183,   177,
   178,   239,     0,     0,   564,   583,     0,   273,   273,   273,
   273,   273,   273,   273,   273,   273,     0,   165,   168,   184,
   205,   193,   211,   214,   217,   222,   225,   227,   229,   231,
   234,     0,   592,   591,   166,   602,   611,   621,   623,   627,
   630,   633,   638,   641,   643,   645,   647,   649,   651,   655,
   594,   164,     0,    24,     0,    96,   100,    98,   123,   124,
   125,   126,   127,   128,   129,    26,    79,    83,     0,    85,
    84,     0,    88,     0,   413,   413,    86,     0,    87,   304,
     0,    79,   557,   558,   273,   555,    22,   273,   278,   413,
   401,   549,   413,   402,   549,   424,   429,   273,     0,     0,
   476,   474,   477,     0,     0,   105,   273,   273,     0,   280,
   268,   273,     0,   286,     0,   273,     0,   413,    81,    35,
     0,   451,   453,    38,    81,    89,    91,    90,    94,    92,
    93,   460,   433,     0,   273,   468,   434,   469,   585,   496,
   689,   273,     0,     0,   176,   539,     0,   592,   273,   201,
   203,   675,     0,     0,   187,   192,   191,   190,   189,   188,
   185,   186,   273,   273,   273,   179,   180,     0,   273,   273,
   273,   273,   273,   273,   273,   273,   273,   273,   273,   273,
   273,   273,   273,   273,   273,   273,   273,   273,   273,   273,
   273,   273,   273,   273,   273,   232,   652,   235,   500,     0,
   494,   104,   109,   102,   113,   687,    80,    95,    99,   107,
   298,   301,   297,     0,   302,   300,    28,   559,   273,     0,
   415,   413,   413,   414,   413,   413,   413,   432,   273,   470,
   478,   270,   290,     0,     0,   289,   283,   284,   287,   285,
   278,    13,    32,    34,    81,    30,   687,    82,   457,   461,
   435,   436,   273,     0,   570,   181,     0,   197,     0,   547,
   240,   674,   167,   273,     0,   174,     0,     0,     0,     0,
   656,   657,   658,   659,   660,   661,   662,   663,   664,   665,
   666,   208,   209,   210,   213,   212,   215,   216,   218,   219,
   220,   221,   223,   224,   226,   228,   230,   648,   273,   650,
   273,   493,   108,     0,   118,   119,   120,   121,   122,   687,
   110,   413,   113,     0,     0,   141,   101,   150,   687,   139,
   140,     0,    48,     0,     0,    58,    59,    69,    67,   307,
     0,   306,    56,    76,     0,    63,    66,     0,   687,    68,
   160,   278,   273,   413,     0,   273,   416,   404,   413,   407,
   413,   426,   281,   273,   288,   687,    36,     0,   273,   497,
   572,   273,   273,     0,   671,   668,   206,   273,   175,   173,
   273,   273,     0,   593,   103,   113,    97,   116,   112,   117,
   115,   114,     0,   144,     0,     0,     0,     0,   138,     0,
     0,   153,   162,   687,   152,     0,     0,    66,     0,    72,
     0,    54,    53,     0,    61,    60,    62,     0,     0,     0,
     0,     0,     0,   273,   687,   161,     0,   263,   273,   418,
   273,   273,   413,   421,     0,   396,     0,   399,   282,   291,
     0,    39,   273,     0,   198,     0,   195,   667,   548,     0,
   177,   178,   653,   111,   145,   142,   148,     0,   149,   146,
   147,   151,     0,   156,     0,     0,     0,     0,   273,     0,
    78,    77,     0,    73,     0,    50,    45,    46,    55,    66,
    57,    70,     0,    74,    75,     0,     0,   305,   273,   273,
   279,   273,   273,     0,   419,   273,   405,     0,   408,     0,
    14,   498,   196,   590,   176,   273,   143,   157,   154,     0,
   158,   159,   163,   299,    52,    49,     0,     0,    71,    47,
    64,   303,   265,   422,   413,   417,   273,   394,   400,   654,
   155,    65,    51,   420,   423,   397,     0,     0,     0
};

static const short yydefgoto[] = {  1237,
    87,    88,    89,    90,   138,   309,   310,    91,   653,   792,
   311,   829,   955,    92,   693,   957,   931,    94,  1040,  1176,
  1122,  1106,  1177,  1216,  1114,  1042,  1043,  1044,  1118,  1045,
  1046,  1180,  1048,  1173,   776,   834,   777,   835,   778,   836,
   915,   837,   781,   838,   916,   913,   914,   815,   783,   784,
  1020,  1021,  1022,  1089,  1023,   785,   786,    95,   263,   436,
   264,   573,    96,  1027,  1157,  1158,  1029,  1103,  1125,  1104,
   178,   330,   179,   510,   180,   967,   181,   182,   405,   548,
   183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
   542,   193,   544,   194,   543,   859,   195,   224,   483,   319,
   424,    98,   665,   798,   131,   598,    99,   305,   197,   261,
   132,   133,   930,   821,   822,   823,   824,   944,   101,   787,
   840,  1032,   789,   790,   841,  1051,   924,  1049,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   299,   425,   442,   115,   269,  1236,   116,   802,  1198,   805,
  1200,   668,  1135,   671,  1137,   117,   933,   934,  1132,  1133,
   118,   676,   584,   585,   845,   135,   473,   127,   128,   120,
   606,   607,   474,   475,   476,   695,   612,   332,   810,   847,
   457,   353,   225,   245,   226,   227,   354,   963,  1144,   229,
   649,   230,   231,   429,   232,   233,   199,   410,   355,   351,
   356,   477,   705,   357,   320,   626,   358,   204,   359,   554,
   800,  1058,   238,   570,   505,   409,   206,   571,   701,   702,
   572,   360,   207,   208,   361,   646,   616,   362,   241,   363,
   367,   708,   743,   910,   744,   212,   746,   747,   748,   749,
   750,   751,   752,   753,   754,   755,   756,   757,   758,   759,
   760,  1009,  1206,   761,  1149,   364,   365,   214,   366,   266,
   853,   301,   217,   123
};

static const short yypact[] = {  2065,
-32768,-32768,   384,    46,  5282,-32768,  6580,-32768,   798,  3278,
  3580,  3580,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   637,-32768,-32768,-32768,-32768,  2295,-32768,-32768,-32768,
   413,-32768,-32768,   103,-32768,    79,-32768,-32768,-32768,   109,
  6172,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  6172,  6172,   128,    70,-32768,   891,-32768,-32768,   798,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   384,-32768,  5564,
-32768,   183,-32768,   128,-32768,-32768,-32768,  5282,-32768,   162,
-32768,  5564,-32768,   201,   231,   240,-32768,   280,   798,   293,
   303,  1612,-32768,  2681,  5564,  5564,  5564,  5564,  5564,  5564,
-32768,  5585,  5585,   333,-32768,   357,   385,   395,   428,   448,
   404,  4793,-32768,   527,   556,-32768,   571,-32768,   848,  1096,
-32768,-32768,-32768,  1019,   244,    59,   471,   279,   526,   557,
   560,   565,   139,-32768,-32768,   126,-32768,  3625,   519,   567,
-32768,-32768,-32768,-32768,   645,  3323,-32768,  4793,-32768,  3625,
-32768,   460,  3625,-32768,-32768,   664,   710,-32768,   719,-32768,
  2874,   571,   715,   368,   674,  3429,-32768,  3580,-32768,-32768,
-32768,  5900,-32768,-32768,-32768,-32768,   783,   769,-32768,-32768,
  3580,  3625,-32768,-32768,   756,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   836,
   917,-32768,-32768,  6444,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   863,   765,-32768,-32768,   798,   798,   523,-32768,   413,
-32768,-32768,-32768,  3368,-32768,-32768,   351,  5764,   393,   843,
-32768,-32768,   912,-32768,-32768,   958,   886,   765,    79,-32768,
   425,   954,-32768,   798,-32768,   302,-32768,-32768,-32768,   978,
  5564,  5564,  5564,  1885,  1000,-32768,-32768,-32768,   462,   985,
   242,   995,  1001,-32768,-32768,-32768,-32768,-32768,-32768,  1009,
  3368,-32768,-32768,  5564,  1020,  1025,  1028,  1030,  1039,   404,
   451,  3519,-32768,  4793,-32768,-32768,-32768,-32768,  1040,-32768,
-32768,  4793,-32768,  4793,-32768,-32768,-32768,  5452,  5564,-32768,
-32768,   134,  5564,  5564,  5564,  5564,  5564,  5564,  5564,  5564,
  5564,  5564,  5564,  5564,  5564,  5564,  5564,  5564,  5564,  5564,
  5564,  5564,  5564,  5564,  5564,  5564,  5564,  5564,  5564,-32768,
-32768,-32768,-32768,  5564,   389,-32768,-32768,  2488,-32768,-32768,
  1054,-32768,-32768,  1057,-32768,  5564,   457,  1047,  1055,-32768,
-32768,-32768,-32768,-32768,   128,  5900,-32768,-32768,  3580,  3172,
  1071,-32768,-32768,  5564,    87,  3731,  4876,   765,-32768,   681,
  6580,   992,  1067,  1072,  1073,  1074,  1073,   798,  1080,   375,
-32768,-32768,  5463,  1066,   653,-32768,   770,-32768,   765,-32768,
   765,-32768,-32768,-32768,  1021,  1086,  1092,-32768,   765,   425,
-32768,   798,  1097,-32768,  1103,   798,  1105,-32768,   495,  1104,
   588,  1104,  1110,-32768,-32768,   985,  1106,-32768,  4698,-32768,
-32768,  1107,  1109,-32768,-32768,-32768,-32768,-32768,-32768,  5564,
-32768,  1113,-32768,  3731,-32768,-32768,  1123,  1111,-32768,   640,
-32768,   263,   798,   798,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1019,  1019,
   244,   244,    59,    59,    59,    59,   471,   471,   279,   526,
   557,  5564,  5564,  5564,-32768,  5596,  5628,-32768,-32768,  3067,
-32768,  3474,  3919,-32768,-32768,  1115,   673,-32768,-32768,   765,
-32768,-32768,  1116,  1114,-32768,  1117,-32768,  4295,-32768,-32768,
  4107,  4340,   985,-32768,  1122,-32768,-32768,  1126,  1128,-32768,
  1132,  1129,-32768,   506,-32768,  1130,-32768,-32768,-32768,-32768,
  1137,   507,   770,  5495,  1145,-32768,   183,-32768,   273,-32768,
-32768,  5564,   234,   765,-32768,-32768,  1150,-32768,-32768,  1167,
  6580,-32768,-32768,-32768,-32768,  1149,-32768,  1885,-32768,  5202,
-32768,-32768,  1170,-32768,-32768,  1168,-32768,-32768,  1172,-32768,
  5564,-32768,-32768,-32768,-32768,   560,   470,   565,  3368,-32768,
  3368,-32768,-32768,-32768,  4446,  4793,  5564,-32768,  5684,-32768,
  5564,-32768,   922,-32768,-32768,-32768,  4491,  4597,-32768,  4642,
-32768,-32768,  1169,-32768,-32768,-32768,-32768,-32768,  1177,-32768,
-32768,  1179,-32768,   798,-32768,   798,-32768,-32768,   214,  1176,
-32768,  1180,   210,  1119,   916,-32768,-32768,  1182,-32768,  1178,
-32768,   315,   922,-32768,   798,   419,  4793,  1186,  5202,-32768,
  1185,-32768,  1190,  1188,  1193,-32768,  5564,  5684,-32768,-32768,
-32768,-32768,  1192,  1195,-32768,-32768,   682,  3368,  5564,  5564,
  5564,  5564,  5564,  5564,  5585,  5585,  1197,   713,   788,   943,
  1121,   790,  1051,   742,   514,   745,   578,  1194,  1189,  1187,
  1174,   170,  1200,-32768,    33,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   791,   793,-32768,  1044,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   922,-32768,  1141,-32768,
-32768,  1142,-32768,  1143,-32768,-32768,-32768,  1146,-32768,  2137,
  1147,   922,-32768,-32768,  4748,-32768,-32768,-32768,-32768,  6308,
-32768,-32768,  6308,-32768,-32768,-32768,-32768,  5564,   800,  1211,
-32768,-32768,-32768,  1214,  1222,-32768,   916,  5564,   798,-32768,
-32768,   916,   777,-32768,  1219,   916,  1151,-32768,   922,-32768,
  1218,-32768,-32768,-32768,   922,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   413,  1221,-32768,   646,-32768,   770,-32768,-32768,
  1185,  1985,  1226,   798,-32768,-32768,   820,  1229,  5564,  1170,
  1170,  1239,   828,  1234,   844,   845,   850,   857,   859,   867,
   873,   874,  5564,  5484,  5564,   880,   887,   157,  5564,  5564,
  5564,  5564,  5564,  5564,  5564,  5564,  5564,  5564,  5564,  5564,
  5564,  5564,  5564,  5564,  5564,  5564,  5564,  5564,  5564,  5564,
  5564,  5564,  5564,  5564,  5564,  5564,-32768,  5564,-32768,  1240,
  1244,-32768,  1075,  1224,   235,   248,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   558,-32768,-32768,-32768,-32768,   916,   623,
-32768,   128,  5036,-32768,  6308,  5036,  6308,-32768,-32768,-32768,
-32768,-32768,-32768,   815,  1241,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   922,-32768,    79,-32768,   593,-32768,
-32768,-32768,  5516,  1246,-32768,-32768,  1016,-32768,  1251,   985,
-32768,-32768,   890,  4698,  1249,   898,   906,   291,   798,   798,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   918,   937,   945,   736,   947,   497,   555,   105,   533,
   631,   714,   668,   725,    86,   638,   328,   560,  5564,   565,
  5684,-32768,   460,  1044,-32768,-32768,-32768,-32768,-32768,   695,
-32768,  6036,   235,    45,    45,-32768,-32768,   575,   705,-32768,
-32768,   111,-32768,   894,   212,-32768,-32768,-32768,-32768,-32768,
  1250,-32768,    -3,-32768,   976,-32768,   489,  1248,    79,-32768,
   111,-32768,-32768,-32768,  1256,   656,-32768,-32768,  5036,-32768,
  5036,-32768,-32768,  3127,-32768,   733,-32768,  1184,   600,-32768,
-32768,-32768,  5564,   798,-32768,  1098,   952,-32768,   989,   991,
-32768,-32768,   911,-32768,-32768,   235,-32768,-32768,-32768,-32768,
-32768,-32768,    78,   575,   160,   798,   798,    45,-32768,   111,
   111,-32768,   602,   809,-32768,  1266,   961,   145,   212,   603,
   154,-32768,-32768,   894,-32768,-32768,-32768,   894,    30,   798,
   798,  1267,   894,-32768,    79,  1270,   885,-32768,   765,-32768,
-32768,  1271,-32768,  1272,  1276,-32768,  1277,-32768,-32768,-32768,
  1208,-32768,   734,  1275,-32768,   295,-32768,-32768,-32768,  1278,
   994,   996,-32768,-32768,-32768,-32768,   575,  1274,   460,-32768,
-32768,   575,   549,   602,   532,   798,   798,   111,-32768,  1108,
-32768,-32768,   894,-32768,   145,  1264,-32768,   603,-32768,   603,
-32768,-32768,  1279,-32768,-32768,  1108,  1280,-32768,-32768,-32768,
-32768,  5564,   656,  1290,-32768,-32768,-32768,  1289,-32768,  1291,
-32768,-32768,-32768,-32768,  1002,  5564,-32768,-32768,-32768,  1283,
-32768,-32768,   602,-32768,-32768,-32768,  1287,   154,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  5564,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  1314,  1315,-32768
};

static const short yypgoto[] = {-32768,
-32768,  1230,-32768,-32768,-32768,-32768,  -361,   -94,-32768,-32768,
  1004,-32768,-32768,-32768,-32768,-32768,    77,-32768,-32768,   392,
-32768,-32768,   102,   135,-32768,   208,-32768,-32768,-32768,  -970,
-32768,  -858,-32768,-32768,  -627,  -698,-32768,-32768,-32768,  -548,
-32768,  -448,-32768,  -325,-32768,   309,-32768,-32768,   641,  -646,
-32768,   238,   305,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  -864,   161,-32768, -1005,-32768,   278,
-32768,-32768,  -609,   458,  1093,-32768,-32768,  -607,-32768,-32768,
   -84,  -343,  -356,  -275,  -357,  -360,  -369,  -395,  -492,  -513,
-32768,  -587,-32768,  -117,-32768,-32768,   903,  1412,  -570,  -402,
    28,-32768,-32768,-32768,  -456,-32768,-32768,-32768,   753,  -251,
   870,-32768,  -886,  -732,-32768,-32768,   510,-32768,-32768,-32768,
  -322,-32768,-32768,-32768,  -311,-32768,-32768,-32768,-32768,-32768,
   544,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,     1,   758,-32768,   953,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   -55,  -736,  -852,-32768,   143,
-32768,-32768,   662,   665,   494,     2,  -379,  1213,-32768,     4,
-32768,-32768,  -549,-32768,-32768,-32768,   647,  -103,  1045,-32768,
  -431,   862,  1331,-32768,  1112,-32768,   117,-32768,-32768,-32768,
-32768,  -135,-32768,-32768,-32768,-32768,-32768,    20,   258,   997,
  1165,-32768,-32768,  1458,-32768,-32768,  -317,-32768,  1139,   199,
  -588,  -599,-32768,   851,-32768,-32768,   946,  -186,   657,   512,
  -428,   140,-32768,   156,    39,-32768,-32768,   165,-32768,   181,
-32768,-32768,   650,-32768,   348,  -608,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  1518,-32768,-32768,  1639,  -273,
   511,     0,   441,-32768
};


#define	YYLAST		6773


static const short yytable[] = {   121,
   114,   119,   596,   541,   121,   134,   129,   137,   121,   216,
   216,   216,   487,   249,   250,   251,   252,   253,   254,   255,
   256,   257,   258,   593,   318,   290,   300,    97,   540,   200,
   638,   564,   531,   532,   502,   465,   539,   537,   538,   730,
   745,   732,   680,   529,   530,   426,   839,   698,   209,   636,
   591,  1028,  1112,  -600,   278,   566,  1182,  -600,   283,   467,
   285,   742,   289,  1107,  1066,  1047,   936,   291,  1024,   130,
   334,   335,   336,   337,   338,   339,    93,   437,  1025,   307,
  1057,   308,   803,  1057,   943,   418,   121,   114,   119,   947,
   422,   471,   423,   951,  1163,  1164,   265,   625,   730,   745,
   732,   268,  1155,  1095,   779,  1096,  -642,   605,   389,   390,
  -642,   565,   268,   268,    97,   533,   534,   535,   536,   121,
   742,   262,  1097,   372,   645,  -634,   198,   228,   228,  -634,
   954,   293,   267,   814,  1100,   741,   958,   121,   313,   395,
   396,   314,   658,   403,  1101,  -273,   404,  1181,   121,   917,
   239,   239,  1187,   216,   389,   390,   740,   284,  1033,  1093,
  1094,   513,  1213,    93,   927,  1127,   240,   240,   502,  1174,
  1119,   216,  1120,   333,   210,  1108,  1110,  1109,   514,   401,
   443,  1113,   839,  1024,   979,   316,  1156,  1035,   839,  1121,
   211,   682,   209,  1025,   741,   402,  1052,   216,  1059,   688,
  1061,   980,  1217,   302,   780,   216,  1057,   216,  1057,   216,
   907,   438,   216,   935,   471,   740,   937,   406,   467,  1183,
   216,   553,   413,   690,   321,   216,   908,   216,   779,   412,
    80,  1026,   414,  1162,   813,  1109,   209,   492,   471,   453,
   216,   216,   691,   779,   209,  1035,   459,     3,   209,   461,
  1175,   209,  1178,   739,   322,   662,  1067,   469,   689,   403,
   472,   431,   404,   323,   848,   265,   488,   201,   234,   234,
   198,  1024,  -413,  -413,  -413,   387,   388,  -413,  -413,   738,
   209,  1025,   121,   404,   440,   121,   121,   121,   737,   633,
   265,   736,   734,   562,   422,   686,    80,  1102,   452,   526,
   527,   528,   455,   324,  1013,   733,   471,   121,   839,   464,
   326,   404,   739,   121,   198,   404,   318,  1080,   210,   832,
   327,  1203,   198,  1015,  1016,   687,   198,   782,   780,   198,
   788,  1140,   395,   396,   211,   318,  1060,   228,   738,    80,
  1038,   791,   228,   780,   228,    80,  1026,   737,  -646,   176,
   736,   734,  -646,   216,  1017,  1018,   344,   228,   198,  1178,
   239,   216,   210,   216,   733,   239,   398,   239,  1019,   560,
   210,   404,   345,   735,   210,   451,   240,   210,   211,   472,
   239,   240,   318,   240,   575,   420,   211,   622,   404,   580,
   211,   583,  1070,   211,  1010,   404,   240,    80,  1038,   488,
   346,   730,   745,   732,   621,   938,   210,   216,   599,   680,
   347,   201,   604,  1008,   848,   945,  -273,     3,   453,  -413,
  -413,  -413,   211,   742,  -413,  -413,     3,   551,   216,   216,
   546,   547,   735,    80,  1026,   216,  -274,   121,   260,   574,
   122,   452,  -273,   348,   453,   122,   209,   121,  -274,   140,
   466,   782,     3,   561,   788,   201,   500,   501,   121,  1136,
   121,  1138,   349,   201,   561,   791,   782,   201,   121,   788,
   201,   121,   314,   443,   420,   121,   318,   404,   234,   485,
   791,   488,   404,   234,   318,   234,  1159,  -413,  -413,  -413,
   404,   712,  -413,  -413,   124,   125,   126,   741,   234,   201,
    80,    81,   139,   216,   350,    84,    85,   391,   392,  1007,
   -46,   471,   121,   121,  1119,   404,  1120,  -631,   740,   615,
   704,  -631,   393,   394,   198,   673,   674,   122,   387,   388,
  -413,   678,  -413,  1121,  1006,   713,   679,   714,   997,   998,
  -413,   448,  1005,  1003,  1004,   228,   228,   472,  -692,   995,
   996,   216,   216,  -635,   397,  1024,  1159,  -635,  1209,   121,
   122,   650,  1033,   895,   896,  1025,   703,   216,   239,   239,
   216,   216,   210,  1208,  1165,  -632,  1166,  -696,   315,  -632,
   561,  1034,   389,   390,   240,   240,   387,   388,   211,   325,
   209,  1035,  -693,  1167,   575,   398,   764,   471,   561,   399,
  1095,   843,  1096,   121,    80,    81,   139,   314,   404,    84,
    85,   696,   617,   407,   864,   739,  -413,   678,  -413,  1097,
   400,   999,  1000,  1001,  1002,   453,  -413,  1165,  1119,  1166,
  1120,   901,   902,     3,   865,   866,   867,   868,   869,   870,
  1053,   738,  1030,  1054,   216,   216,  1167,  1121,   762,   413,
   737,  -636,  1076,   736,   734,  -636,   216,   216,  -644,   216,
   631,  -519,  -644,   408,   632,   201,   397,   733,   198,  -273,
  -698,   453,  1191,   121,   878,   121,  -273,  1131,   453,     3,
   389,   390,   455,  1068,   216,  -695,   234,   234,  -639,     3,
   318,   121,  -639,   404,   121,   121,   216,   648,  -413,   846,
   318,  -413,   404,  -413,   391,   392,   862,   762,    80,    81,
   139,   593,   265,    84,    85,  1086,   210,    80,  1026,   393,
   394,   176,   265,   122,  -698,  1098,   445,   447,   449,   921,
   922,   415,   211,  -597,  -637,   735,  -694,  -597,  -637,  1036,
  1037,   971,   416,    80,  1038,  -640,  1087,  1039,   122,  -640,
   265,   843,   100,  1054,   315,  1099,  -629,   100,  -465,   453,
  -629,   391,   392,   389,   390,   246,   247,   248,   421,   384,
   385,   386,   953,   893,   894,  1124,   393,   394,  -413,  -413,
  -413,   897,   898,  -413,  -413,    80,    81,   139,   428,  1224,
    84,    85,  1141,  -273,   216,   594,   899,   900,     3,   948,
   932,   427,   818,   932,   819,   992,   993,   994,  -596,   201,
  -620,  -595,  -596,   404,  -620,  -595,   216,   911,   121,   939,
   674,   216,  -698,  -698,  1235,   216,   265,  -698,  -698,  1168,
  1169,    80,    81,   139,  1063,  1064,    84,    85,   961,   100,
   404,    80,    81,   139,   969,   121,    84,    85,   404,   846,
   432,  1189,   973,   121,   270,   271,   272,   273,   274,   275,
   276,   277,   433,   279,  -614,  -619,   282,   458,  -614,  -619,
  -618,   368,   100,   369,  -618,  -413,  1056,  -617,   122,  -616,
   439,  -617,   298,  -616,   303,   304,   306,  -615,   586,  1077,
   312,  -615,  -413,  -612,  -613,   370,   371,  -612,  -613,   122,
  -609,   122,  1190,  1069,  -609,  1054,   298,  -610,   463,   315,
  -601,  -610,   608,   340,  -601,  1031,   613,  1034,  -604,    80,
    81,   139,  -604,  1050,    84,    85,   631,  1035,   216,   460,
  1079,   404,  1153,   932,   817,   932,   932,   932,  -624,   294,
   435,   818,  -624,   819,   155,   156,   157,   158,   159,   160,
    80,    81,   139,   634,   635,    84,    85,  -625,   286,   287,
   288,  -625,   161,   162,   163,  -626,   874,  -628,   875,  -626,
  -413,  -628,  -622,   298,  1150,   462,  -622,   468,   121,   121,
   384,   385,   386,    80,    81,   139,   164,  -413,    84,    85,
   876,   877,  1171,  1172,   765,   766,   767,   768,  1129,   478,
   122,   769,   770,   771,   772,   773,   774,   775,   486,  -605,
   762,  -603,   434,  -605,  -607,  -603,  -608,   484,  -607,   489,
  -608,  1091,  -606,  1031,  1031,   490,  -606,  1115,  1116,  1117,
   173,  1105,   491,  1050,  1050,   100,   441,   494,   444,   446,
  1072,  1073,   495,  1074,   315,   496,   298,   497,   290,  1090,
  1105,   454,   384,   385,   386,   121,   498,  1134,   504,   932,
   100,   932,   555,   216,   280,   281,   312,   556,   121,   411,
   574,   558,  1143,   121,   318,  1036,  1037,  1195,   559,    80,
  1038,   563,   576,  1039,   890,   891,   892,   577,  1230,   592,
   578,  -273,   581,   298,  1031,   121,   121,  1031,   587,  1105,
  1105,    80,   174,   175,   298,   176,    84,    85,  1050,   318,
  1050,   600,   601,  1050,   586,   603,   586,  1050,   373,   121,
   121,   609,  1050,   610,   404,   825,   614,   618,   121,   624,
   619,   623,   833,   629,   630,   613,   122,   627,   647,   651,
   652,   654,   121,   879,   664,   667,   669,   672,   205,   237,
   237,   670,   675,   374,   375,   376,   377,   378,   379,   380,
   381,   382,   383,   677,  1031,   121,   121,  1105,   683,  1234,
   692,   694,  1050,   697,   202,   235,   235,   282,   880,   881,
   882,   883,   884,   885,   886,   887,   888,   889,   620,   706,
   100,   765,   121,   797,  1134,   707,   801,   579,   804,   582,
   811,   588,   830,   850,   589,   852,   812,   454,   828,   595,
   854,   100,   855,   100,   856,   503,   860,  1050,   602,   861,
   873,   312,   903,   506,   909,   507,   905,   904,   611,   906,
   912,   918,   919,   920,   317,   940,   923,   926,   941,   942,
   950,   952,   956,   441,   959,   966,   493,   317,   317,   317,
   317,   317,   317,   970,   342,   343,   972,   825,   974,   946,
  1011,  1012,   825,  1014,   176,  1071,   825,  1065,  1075,  1078,
   511,  1123,  1111,  1130,  1142,   515,   516,   517,   518,   519,
   520,   521,   522,   523,   524,   525,   122,  1170,  1186,  1148,
  1168,  1193,   205,  1196,   968,  1197,  1199,   569,  1201,  1202,
  1207,  1215,  1205,  1218,  1221,  1219,   545,  1226,  1228,  1231,
  1229,  1232,   100,  1238,  1239,  1041,   259,   470,   202,  1233,
  1220,  1179,  1085,  1154,   816,  1210,   663,  1092,  1126,   441,
   597,   977,   949,   925,   666,  1225,   205,   809,   807,   962,
   292,   842,   244,   456,   205,   595,   499,  1204,   205,   684,
   685,   205,   430,   552,   628,   851,   312,   858,  1084,   237,
   419,   964,   202,   965,   237,   569,   237,     0,     0,   825,
   202,     0,     0,     0,   202,     0,   441,   202,     0,   237,
   205,     0,     0,     0,     0,   235,   710,   711,     0,     0,
   235,   298,   235,   298,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   235,   202,     0,     0,     0,
     0,     0,     0,     0,   569,     0,     0,   799,     0,  1081,
  1082,   196,     0,     0,     0,   806,     0,   808,     0,     0,
     0,   454,   569,   661,     0,     0,     0,     0,   826,   827,
     0,     0,     0,   831,     0,     0,     0,   611,   844,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   203,   236,   236,
   298,     0,     0,     0,     0,     0,   317,   317,   317,   317,
   317,   317,   317,   317,   317,   317,   317,   317,   317,   317,
   317,   317,     0,     0,     0,     0,   122,     0,     0,     0,
     0,     0,     0,     0,   825,   508,   661,   716,     0,   122,
     0,     0,     0,     0,  1147,     0,     0,     0,     0,   661,
     0,     0,   700,     0,     0,     0,   317,   213,   242,   242,
     0,     0,     0,   709,     0,     0,  1160,  1161,     0,     0,
     0,   297,     0,     0,     0,   317,   205,     0,     0,     0,
   929,     0,     0,     0,     0,     0,     0,     0,   849,     0,
  1184,  1185,     0,   329,     0,   331,     0,   237,   237,   122,
     0,     0,   202,     0,     0,     0,     0,     0,     0,     0,
     0,   317,     0,   122,     0,     0,     0,   820,     0,     0,
     0,     0,   317,   235,   235,     0,     0,   960,   844,     0,
   595,   700,     0,     0,     0,     0,  1211,  1212,     0,   196,
     0,   203,     0,     0,     0,     0,     0,   196,     0,     0,
     0,   196,     0,     0,   196,     0,     0,     0,     0,   328,
     0,     0,   417,   122,   317,   294,   317,     0,   640,   642,
   155,   156,   157,   158,   159,   160,     0,     0,   215,   243,
   243,     0,     0,   196,     0,   203,     0,     0,   161,   162,
   163,     0,     0,   203,     0,     0,     0,   203,     0,     0,
   203,   213,     0,     0,     0,     0,     0,     0,   236,     0,
     0,     0,   164,   236,  1055,   236,   317,     0,     0,     0,
   205,  1062,     0,     0,   317,     0,     0,     0,   236,   203,
     0,     0,     0,     0,     0,   450,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   213,   202,     0,     0,   820,
     0,     0,     0,   213,   820,     0,   173,   213,   820,     0,
   213,     0,   479,   480,   481,   482,     0,     0,   242,     0,
     0,   731,     0,   242,     0,   242,     0,     0,     0,     0,
     0,     0,   450,     0,   700,     0,     0,     0,   242,   213,
     0,     0,     0,   450,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   975,   511,     0,     0,     0,
   512,   981,   982,   983,   984,   985,   986,   987,   988,   989,
   990,   991,   215,     0,     0,     0,     0,    80,   295,   296,
   731,   176,     0,     0,     0,  1128,     0,     0,   100,     0,
     0,   317,   317,   317,   317,   317,   317,   871,   872,   196,
     0,   844,     0,     0,  1145,     0,     0,   557,     0,     0,
   441,   820,     0,  1151,  1152,     0,   215,     0,     0,     0,
     0,     0,     0,     0,   215,     0,     0,     0,   215,     0,
     0,   215,     0,     0,     0,     0,     0,     0,     0,   243,
     0,     0,     0,     0,   243,   203,   243,     0,     0,     0,
     0,     0,     0,     0,     0,     0,  1188,     0,     0,   243,
   215,   100,     0,  1192,  1194,     0,   236,   236,     0,     0,
     0,     0,     0,     0,     0,   844,     0,     0,     0,     0,
   317,     0,  -255,     0,     0,     0,     0,     0,   294,     0,
   317,     0,     0,   155,   156,   157,   158,   159,   160,     0,
     0,  1214,     0,     0,     0,   213,     0,     0,     0,     0,
     0,   161,   162,   163,     0,     0,     0,     0,     0,     0,
     0,  1222,  1223,     0,     0,   100,   242,   242,  1227,     0,
     0,   317,     0,     0,   637,   164,     0,     0,     0,     0,
     0,     0,     0,   196,     0,     0,   820,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   317,   317,   317,   317,   317,   317,   317,   317,
   317,   317,   317,   317,   317,   317,   317,   317,   317,   173,
   317,     0,     0,   699,  -690,     0,     0,     0,   294,   203,
     0,     0,     0,   155,   156,   157,   158,   159,   160,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   482,
     0,   161,   162,   163,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   215,     0,     0,     0,
   450,     0,   450,     0,     0,   164,     0,     0,   717,     0,
     0,     0,   763,     0,    -1,     1,   317,   243,   243,   213,
    80,   295,   296,     0,   176,     0,     0,     0,     0,     0,
     0,     0,     2,     0,     0,     0,     0,     0,  -273,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     3,   173,
     0,     0,     0,   731,     0,     0,     0,     0,     4,     0,
     5,     0,     0,     0,     0,     0,     0,     0,   857,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   863,
     0,     0,  -413,  -413,  -413,     0,     6,     0,     0,     0,
     0,     7,     8,     9,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    10,    11,    12,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    80,   295,   296,     0,   176,    13,    14,    15,    16,     0,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
   215,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,     0,     0,     0,     0,     0,     0,
    80,    81,    82,    83,     0,    84,    85,    86,    23,    24,
    25,    26,     0,    27,     0,     0,     0,     0,    32,    33,
     0,     0,    36,    37,     0,    39,    40,    41,    42,     0,
     0,     0,     0,     0,   317,     0,   978,     0,     0,     0,
    54,    55,     0,     0,    -2,     1,     0,     0,   317,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     2,     0,     0,    79,     0,     0,  -273,   317,
     0,     0,     0,     0,     0,    83,     0,     0,     3,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     4,     0,
     5,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,  -413,  -413,  -413,     0,     6,     0,     0,     0,
     0,     7,     8,     9,   482,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    10,    11,    12,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    13,    14,    15,    16,     0,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
  1083,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,     0,     0,     0,     0,     0,     0,
    80,    81,    82,    83,  1146,    84,    85,    86,   141,     0,
     0,     0,     0,   142,   143,   144,     0,   145,   146,   147,
   148,   149,   150,   151,   152,   153,  -547,   549,     0,     0,
     0,   154,     0,     0,     0,     0,   155,   156,   157,   158,
   159,   160,     0,     0,     0,     0,     0,     0,     0,  -273,
  -273,     4,     0,     5,   161,   162,   163,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,  -413,  -413,  -413,   164,     6,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   166,   167,   168,   169,   170,   171,     0,
     0,     0,     0,     0,     0,     0,     0,   172,    13,    14,
    15,    16,   173,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,     0,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
    73,    74,    75,    76,    77,    78,    79,     0,     0,     0,
     0,     0,     0,    80,   174,   550,    83,   176,   177,    85,
    86,   141,     0,     0,     0,     0,   142,   143,   144,     0,
   145,   146,   147,   148,   149,   150,   151,   152,   153,  -170,
     0,     0,     0,     0,   154,     0,     0,     0,     0,   155,
   156,   157,   158,   159,   160,     0,     0,     0,     0,     0,
     0,     0,  -273,  -273,  -273,     0,     0,   161,   162,   163,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,  -273,  -273,
  -273,   164,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   166,   167,   168,   169,
   170,   171,     0,     0,     0,     0,     0,     0,     0,     0,
   172,  -273,  -273,  -273,  -273,   173,  -273,  -273,  -273,  -273,
  -273,  -273,  -273,  -273,  -273,  -273,     0,  -273,  -273,  -273,
  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,
  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,
  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,
  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,
  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,
     0,     0,     0,     0,     0,     0,    80,   174,   175,  -273,
   176,   177,    85,  -273,   218,     0,     0,     0,     0,   142,
   143,   144,     0,     0,   219,   147,   148,   149,   150,   151,
   152,   220,  -170,  -551,     0,     0,     0,   221,     0,     0,
     0,     0,   155,   156,   157,   158,   159,   160,     0,     0,
     0,     0,     0,     0,     0,  -273,  -273,  -273,     0,     0,
   161,   162,   163,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,  -273,  -273,  -273,   164,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   166,
   167,   168,   169,   170,   171,     0,     0,     0,     0,     0,
     0,     0,     0,   172,  -273,  -273,  -273,  -273,   173,  -273,
  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,     0,
  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,
  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,
  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,
  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,
  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,
  -273,  -273,  -273,     0,     0,     0,     0,     0,     0,    80,
   174,   175,  -273,   176,   222,   223,  -273,  -168,     0,     0,
     0,     0,  -168,  -168,  -168,     0,  -168,  -168,  -168,  -168,
  -168,  -168,  -168,  -168,  -168,  -168,  -168,  -168,  -696,  -168,
  -168,     0,  -168,     0,  -168,  -168,  -168,  -168,  -168,  -168,
  -168,  -168,  -168,  -168,  -168,  -168,  -168,  -168,  -168,  -168,
     0,  -168,     0,  -168,  -168,  -168,  -168,  -168,  -168,  -168,
  -168,  -168,  -168,  -168,  -168,  -168,  -168,  -168,  -168,  -168,
  -168,  -168,  -168,  -168,     0,     0,     0,  -168,     0,     0,
     0,     0,     0,     0,     0,   817,  1139,     0,     0,     0,
   294,     0,   818,     0,   819,   155,   156,   157,   158,   159,
   160,     0,  -168,  -168,  -168,  -168,  -168,  -168,     0,     0,
     0,     0,   218,   161,   162,   163,  -168,   142,   143,   144,
     0,  -168,   219,   147,   148,   149,   150,   151,   152,   220,
  -492,  -492,     0,     0,     0,   221,  -492,   164,     0,     0,
   155,   156,   157,   158,   159,   160,     0,     0,     0,     0,
     0,     0,     0,  -273,  -273,     0,     0,     0,   161,   162,
   163,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   173,   164,     0,     0,     0,     0,     0,     0,     0,
     0,     0,  -168,  -168,  -168,     0,  -168,  -168,  -168,     0,
     0,     0,     0,     0,     0,     0,  -492,   166,   167,   168,
   169,   170,   171,     0,     0,     0,     0,     0,   141,     0,
     0,   172,     0,   142,   143,   144,   173,   145,   146,   147,
   148,   149,   150,   151,   152,   153,  -547,     0,     0,     0,
     0,   154,     0,     0,     0,     0,   155,   156,   157,   158,
   159,   160,    80,   174,   175,     0,   176,    84,    85,  -273,
  -273,     0,     0,   141,   161,   162,   163,     0,   142,   143,
   144,     0,   145,   146,   147,   148,   149,   150,   151,   152,
   153,  -547,     0,     0,     0,     0,   154,     0,   164,     0,
     0,   155,   156,   157,   158,   159,   160,    80,   174,   175,
     0,   176,   222,   223,  -273,  -273,     0,     0,     0,   161,
   162,   163,   165,   166,   167,   168,   169,   170,   171,     0,
     0,     0,     0,     0,     0,     0,  -170,   172,     0,     0,
     0,   294,   173,   164,     0,     0,   155,   156,   157,   158,
   159,   160,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   161,   162,   163,  -520,   166,   167,
   168,   169,   170,   171,     0,     0,     0,     0,     0,   218,
     0,     0,   172,     0,   142,   143,   144,   173,   164,   219,
   147,   148,   149,   150,   151,   152,   220,  -547,  -551,     0,
     0,     0,   221,     0,     0,     0,     0,   155,   156,   157,
   158,   159,   160,    80,   174,   175,     0,   176,   177,    85,
  -273,  -273,     0,     0,   141,   161,   162,   163,     0,   142,
   143,   144,   173,   145,   146,   147,   148,   149,   150,   151,
   152,   153,  -547,   643,     0,     0,     0,   154,     0,   164,
     0,     0,   155,   156,   157,   158,   159,   160,    80,   174,
   175,     0,   176,   177,    85,  -273,  -273,     0,     0,     0,
   161,   162,   163,  -488,   166,   167,   168,   169,   170,   171,
     0,     0,     0,     0,     0,     0,     0,  -170,   172,     0,
     0,     0,   352,   173,   164,     0,     0,   155,   156,   157,
   158,   159,   160,    80,   295,   296,     0,   176,     0,     0,
     0,     0,     0,     0,     0,   161,   162,   163,     0,   166,
   167,   168,   169,   170,   171,     0,     0,     0,     0,     0,
   218,     0,     0,   172,     0,   142,   143,   144,   173,   164,
   219,   147,   148,   149,   150,   151,   152,   220,  -547,  -551,
     0,     0,     0,   221,     0,     0,     0,     0,   155,   156,
   157,   158,   159,   160,    80,   174,   175,     0,   176,   222,
   223,  -273,  -273,     0,     0,   141,   161,   162,   163,     0,
   142,   143,   144,   173,   145,   146,   147,   148,   149,   150,
   151,   152,   153,  -547,     0,     0,     0,     0,   154,     0,
   164,     0,     0,   155,   156,   157,   158,   159,   160,    80,
   174,   175,     0,   176,   177,    85,  -273,  -273,     0,     0,
     0,   161,   162,   163,     0,   166,   167,   168,   169,   170,
   171,     0,     0,     0,     0,     0,     0,     0,     0,   172,
     0,     0,     0,     0,   173,   164,     0,     0,     0,     0,
     0,     0,     0,     0,    80,   295,   296,     0,   176,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   166,   167,   168,   169,   170,   171,     0,     0,     0,     0,
     0,     0,     0,     0,   172,     0,   142,   143,   144,   173,
   145,   146,   147,   148,   149,   150,   151,   152,   220,  -547,
   567,     0,     0,     0,   352,     0,     0,     0,     0,   155,
   156,   157,   158,   159,   160,    80,   174,   175,     0,   176,
   222,   223,  -273,  -273,     4,     0,     5,   161,   162,   163,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   164,     6,     0,     0,     0,     0,     0,     0,     0,
    80,   174,   175,     0,   176,   177,    85,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   166,   167,   168,   169,
   170,   171,     0,     0,     0,     0,     0,     0,     0,     0,
   568,    13,    14,    15,    16,   173,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,     0,    27,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
     0,     0,     0,     0,     0,     0,    80,   174,   550,    83,
   176,   177,    85,    86,   142,   143,   144,     0,   145,   146,
   147,   148,   149,   150,   151,   152,   220,  -547,   644,     0,
     0,     0,   352,     0,     0,     0,     0,   155,   156,   157,
   158,   159,   160,     0,     0,     0,     0,     0,     0,     0,
  -273,  -273,     4,     0,     5,   161,   162,   163,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   164,
     6,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   166,   167,   168,   169,   170,   171,
     0,     0,     0,     0,     0,     0,     0,     0,   172,    13,
    14,    15,    16,   173,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,     0,    27,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
    62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    78,    79,     0,     0,
     0,     0,     0,     0,    80,   174,   550,    83,   176,   177,
    85,    86,   142,   143,   144,     0,   145,   146,   147,   148,
   149,   150,   151,   152,   220,  -547,   656,     0,     0,     0,
   352,     0,     0,     0,     0,   155,   156,   157,   158,   159,
   160,     0,     0,     0,     0,     0,     0,     0,  -273,  -273,
     4,     0,     5,   161,   162,   163,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   164,     6,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   166,   167,   168,   169,   170,   171,     0,     0,
     0,     0,     0,     0,     0,     0,   657,    13,    14,    15,
    16,   173,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,     0,    27,    28,    29,    30,    31,    32,    33,
    34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
    74,    75,    76,    77,    78,    79,     0,     0,     0,     0,
     0,     0,    80,   174,   550,    83,   176,   177,    85,    86,
   142,   143,   144,     0,   145,   146,   147,   148,   149,   150,
   151,   152,   220,  -547,   655,     0,     0,     0,   352,     0,
     0,     0,     0,   155,   156,   157,   158,   159,   160,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   161,   162,   163,     0,   142,   143,   144,     0,   145,
   146,   147,   148,   149,   150,   151,   152,   220,  -547,   659,
     0,     0,     0,   352,     0,   164,     0,     0,   155,   156,
   157,   158,   159,   160,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   161,   162,   163,     0,
   166,   167,   168,   169,   170,   171,     0,     0,     0,     0,
     0,     0,     0,     0,   172,     0,     0,     0,     0,   173,
   164,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   166,   167,   168,   169,   170,
   171,     0,     0,     0,     0,     0,     0,     0,     0,   660,
     0,   142,   143,   144,   173,   145,   146,   147,   148,   149,
   150,   151,   152,   220,  -547,   715,     0,     0,     0,   352,
     0,     0,     0,     0,   155,   156,   157,   158,   159,   160,
    80,   174,   175,     0,   176,   177,    85,     0,     0,     0,
     0,     0,   161,   162,   163,     0,   142,   143,   144,     0,
   145,   146,   147,   148,   149,   150,   151,   152,   220,  -547,
   793,     0,     0,     0,   352,     0,   164,     0,     0,   155,
   156,   157,   158,   159,   160,    80,   174,   175,     0,   176,
   177,    85,     0,     0,     0,     0,     0,   161,   162,   163,
     0,   166,   167,   168,   169,   170,   171,     0,     0,     0,
     0,     0,     0,     0,     0,   172,     0,     0,     0,     0,
   173,   164,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   166,   167,   168,   169,
   170,   171,     0,     0,     0,     0,     0,     0,     0,     0,
   172,     0,   142,   143,   144,   173,   145,   146,   147,   148,
   149,   150,   151,   152,   220,  -547,   794,     0,     0,     0,
   352,     0,     0,     0,     0,   155,   156,   157,   158,   159,
   160,    80,   174,   175,     0,   176,   177,    85,     0,     0,
     0,     0,     0,   161,   162,   163,     0,   142,   143,   144,
     0,   145,   146,   147,   148,   149,   150,   151,   152,   220,
  -547,   796,     0,     0,     0,   352,     0,   164,     0,     0,
   155,   156,   157,   158,   159,   160,    80,   174,   175,     0,
   176,   177,    85,     0,     0,     0,     0,     0,   161,   162,
   163,     0,   166,   167,   168,   169,   170,   171,     0,     0,
     0,     0,     0,     0,     0,     0,   795,     0,     0,     0,
     0,   173,   164,     0,     0,     0,   620,     0,     0,     0,
     0,   294,     0,     0,     0,     0,   155,   156,   157,   158,
   159,   160,     0,     0,     0,     0,     0,   166,   167,   168,
   169,   170,   171,     0,   161,   162,   163,     0,     0,     0,
     0,   172,     0,   142,   143,   144,   173,   145,   146,   147,
   148,   149,   150,   151,   152,   220,  -547,   928,   164,     0,
     0,   352,     0,     0,     0,     0,   155,   156,   157,   158,
   159,   160,    80,   174,   175,     0,   176,   177,    85,     0,
     0,     0,     0,     0,   161,   162,   163,     0,   142,   143,
   144,     0,   145,   146,   147,   148,   149,   150,   151,   152,
   220,  -547,   173,     0,     0,     0,   352,     0,   164,     0,
     0,   155,   156,   157,   158,   159,   160,    80,   174,   175,
     0,   176,   177,    85,     0,     0,     0,     0,     0,   161,
   162,   163,     0,   166,   167,   168,   169,   170,   171,     0,
     0,     0,     0,     0,     0,     0,     0,   172,     0,     0,
     0,     0,   173,   164,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    80,   295,   296,     0,   176,   166,   167,
   168,   169,   170,   171,  -135,     0,     0,     0,     0,  -135,
     0,     0,   172,     0,     0,     0,     0,   173,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     4,
     0,     5,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    80,   174,   175,     0,   176,   177,    85,
     0,     0,     0,     0,     0,     0,     0,     6,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    80,   174,
   175,     0,   176,   177,    85,     0,    13,    14,    15,    16,
     0,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,     0,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
    65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
    75,    76,    77,    78,    79,  -550,     0,     0,     0,     0,
     0,     0,     0,   136,    83,     0,     0,     0,    86,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     4,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    13,    14,    15,    16,
     0,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,     0,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
    65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
    75,    76,    77,    78,    79,     0,     0,     0,     0,     0,
   699,     0,     0,   136,    83,   294,     0,     0,    86,     0,
   155,   156,   157,   158,   159,   160,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   161,   162,
   163,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   164,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,  -273,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     3,   173,     0,     0,     0,
     0,     0,     0,     0,     0,     4,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    80,   295,   296,
     0,   176,    13,    14,    15,    16,     0,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,     0,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
    79,     0,     0,     0,     0,     0,     0,    80,    81,    82,
    83,     0,    84,    85,    86,   294,   509,     0,     0,     0,
   155,   156,   157,   158,   159,   160,   294,     0,     0,   590,
     0,   155,   156,   157,   158,   159,   160,     0,   161,   162,
   163,     0,     0,     0,     0,     0,     0,   294,   976,   161,
   162,   163,   155,   156,   157,   158,   159,   160,   294,     0,
     0,   681,   164,   155,   156,   157,   158,   159,   160,     0,
   161,   162,   163,   164,     0,     0,     0,     0,     0,   294,
  -255,   161,   162,   163,   155,   156,   157,   158,   159,   160,
     0,     0,     0,     0,   164,     0,     0,     0,     0,     0,
     0,     0,   161,   162,   163,   164,   173,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   173,     0,     0,
     0,     0,     0,     0,     0,     0,   164,   294,     0,     0,
     0,     0,   155,   156,   157,   158,   159,   160,   173,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   341,   173,
   161,   162,   163,   155,   156,   157,   158,   159,   160,   639,
     0,     0,     0,     0,   155,   156,   157,   158,   159,   160,
   173,   161,   162,   163,   164,     0,     0,    80,   295,   296,
     0,   176,   161,   162,   163,     0,     0,     0,    80,   295,
   296,   641,   176,     0,     0,   164,   155,   156,   157,   158,
   159,   160,     0,     0,     0,     0,   164,     0,     0,    80,
   295,   296,     0,   176,   161,   162,   163,     0,   173,     0,
    80,   295,   296,     0,   176,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   164,   173,
     0,    80,   295,   296,     0,   176,     0,   718,     0,     0,
   173,     0,   719,   720,   721,   722,   723,   724,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   161,   725,   726,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   173,     0,     0,     0,     0,     0,     0,    80,
   295,   296,     0,   176,   727,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    80,   295,   296,     0,   176,     0,     0,     0,     0,     0,
     0,    80,   295,   296,     0,   176,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   173,     0,
     0,     0,     0,     0,     0,  -199,  -199,     4,     0,     0,
     0,     0,     0,    80,   295,   296,     0,   176,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    80,
   728,   729,     0,   176,    13,    14,    15,    16,     0,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,     0,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,     4,     0,     5,     0,     0,     0,     0,
     0,   136,    83,     0,     0,     0,    86,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,  -413,  -413,  -413,
     0,     6,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    13,    14,    15,    16,     0,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,     0,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
    51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
    61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
    71,    72,    73,    74,    75,    76,    77,    78,    79,     4,
     0,     5,     0,     0,     0,     0,     0,   136,    83,     0,
     0,     0,    86,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     6,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    13,    14,    15,    16,
     0,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,     0,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
    65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
    75,    76,    77,    78,    79,     4,     0,     0,     0,     0,
     0,    80,  1088,   136,    83,     0,     0,     0,    86,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,  -413,
  -413,  -413,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    13,    14,    15,    16,     0,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,     0,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
    79,     4,     0,     0,     0,     0,     0,     0,     0,   136,
    83,     0,     0,     0,    86,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    10,
    11,    12,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    13,    14,
    15,    16,     0,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,     0,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
    73,    74,    75,    76,    77,    78,    79,     4,     0,     5,
     0,     0,     0,     0,     0,   136,    83,     0,     0,     0,
    86,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     6,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    13,    14,    15,    16,     0,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,     0,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,     4,     0,     0,     0,     0,     0,     0,
     0,   136,    83,     0,     0,     0,    86,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    13,    14,    15,    16,     0,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,     0,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
    51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
    61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
    71,    72,    73,    74,    75,    76,    77,    78,    79,     0,
     0,     0,     0,     0,     0,     0,     0,   136,    83,     0,
     0,     0,    86
};

static const short yycheck[] = {     0,
     0,     0,   459,   399,     5,     5,     3,     7,     9,    10,
    11,    12,   330,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,   455,   142,   120,   130,     0,   398,    10,
   544,   434,   389,   390,   352,   309,   397,   395,   396,   649,
   649,   649,   592,   387,   388,   232,   693,   618,    10,   542,
   453,   916,    56,    21,   110,   435,    27,    25,   114,   311,
   116,   649,   118,  1034,   951,   924,   803,   123,    24,    24,
   155,   156,   157,   158,   159,   160,     0,   264,    34,   135,
   933,   137,   671,   936,   817,   221,    87,    87,    87,   822,
   226,     5,   228,   826,  1100,  1101,    18,   500,   708,   708,
   708,   101,    25,    26,   653,    28,    21,   469,    50,    51,
    25,    25,   112,   113,    87,   391,   392,   393,   394,   120,
   708,    19,    45,   179,   553,    21,    10,    11,    12,    25,
   829,   128,    24,   683,    24,   649,   835,   138,   138,    54,
    55,   138,   571,    18,    34,    18,    21,  1118,   149,   777,
    11,    12,  1123,   154,    50,    51,   649,    88,     5,  1024,
  1025,    28,  1168,    87,   792,  1052,    11,    12,   486,    25,
    26,   172,    28,   154,    10,  1034,  1035,    24,    45,    41,
   284,   185,   829,    24,    28,    24,    27,    34,   835,    45,
    10,   594,   154,    34,   708,    57,   929,   198,   935,   602,
   937,    45,  1173,    21,   653,   206,  1059,   208,  1061,   210,
    41,   267,   213,   802,     5,   708,   805,   198,   470,   190,
   221,   408,   190,   603,    24,   226,    57,   228,   777,   210,
   186,   187,   213,  1098,    25,    24,   198,   341,     5,    26,
   241,   242,   604,   792,   206,    34,   302,    34,   210,   305,
  1109,   213,  1111,   649,    24,   573,   955,   313,    25,    18,
   316,   242,    21,    24,   696,    18,    25,    10,    11,    12,
   154,    24,   186,   187,   188,    32,    33,   191,   192,   649,
   242,    34,   283,    21,   283,   286,   287,   288,   649,    27,
    18,   649,   649,   429,   430,    23,   186,   187,   298,   384,
   385,   386,   299,    24,   913,   649,     5,   308,   955,   308,
    18,    21,   708,   314,   198,    21,   434,    27,   154,     5,
    18,    27,   206,    89,    90,   599,   210,   653,   777,   213,
   653,  1064,    54,    55,   154,   453,   936,   221,   708,   186,
   187,   653,   226,   792,   228,   186,   187,   708,    21,   190,
   708,   708,    25,   354,   120,   121,    24,   241,   242,  1218,
   221,   362,   198,   364,   708,   226,    39,   228,   134,   425,
   206,    21,    16,   649,   210,    25,   221,   213,   198,   435,
   241,   226,   500,   228,   440,    18,   206,   491,    21,   445,
   210,   447,   963,   213,   908,    21,   241,   186,   187,    25,
    16,  1011,  1011,  1011,   489,   808,   242,   408,   464,   959,
    16,   154,   468,   906,   846,   818,    24,    34,    26,   186,
   187,   188,   242,  1011,   191,   192,    34,   408,   429,   430,
    42,    43,   708,   186,   187,   436,    24,   438,    26,   438,
     0,   441,    24,    16,    26,     5,   408,   448,    24,     9,
    26,   777,    34,   426,   777,   198,     6,     7,   459,  1059,
   461,  1061,    15,   206,   437,   777,   792,   210,   469,   792,
   213,   472,   469,   577,    18,   476,   594,    21,   221,    18,
   792,    25,    21,   226,   602,   228,  1095,   186,   187,   188,
    21,    22,   191,   192,   111,   112,   113,  1011,   241,   242,
   186,   187,   188,   504,   101,   191,   192,    37,    38,   905,
    22,     5,   513,   514,    26,    21,    28,    21,  1011,    25,
   624,    25,    52,    53,   408,    20,    21,    87,    32,    33,
    24,    25,    26,    45,   904,   639,   592,   641,   895,   896,
    34,    19,   903,   901,   902,   429,   430,   603,    22,   893,
   894,   552,   553,    21,    29,    24,  1165,    25,    27,   560,
   120,   560,     5,    50,    51,    34,   622,   568,   429,   430,
   571,   572,   408,    25,    26,    21,    28,    22,   138,    25,
   553,    24,    50,    51,   429,   430,    32,    33,   408,   149,
   552,    34,    22,    45,   650,    39,   652,     5,   571,    40,
    26,   696,    28,   604,   186,   187,   188,   604,    21,   191,
   192,   611,    25,    95,   718,  1011,    24,    25,    26,    45,
    56,   897,   898,   899,   900,    26,    34,    26,    26,    28,
    28,    54,    55,    34,   719,   720,   721,   722,   723,   724,
    18,  1011,   916,    21,   645,   646,    45,    45,   649,   190,
  1011,    21,   970,  1011,  1011,    25,   657,   658,    21,   660,
    21,    95,    25,    19,    25,   408,    29,  1011,   552,    24,
    34,    26,  1129,   674,   730,   676,    24,    22,    26,    34,
    50,    51,   679,   957,   685,    22,   429,   430,    21,    34,
   808,   692,    25,    21,   695,   696,   697,    25,    18,   696,
   818,    21,    21,    23,    37,    38,    25,   708,   186,   187,
   188,  1143,    18,   191,   192,    21,   552,   186,   187,    52,
    53,   190,    18,   283,    88,    21,   286,   287,   288,   785,
   786,    22,   552,    21,    21,  1011,    22,    25,    25,   182,
   183,   859,    24,   186,   187,    21,  1020,   190,   308,    25,
    18,   846,     0,    21,   314,  1029,    21,     5,    25,    26,
    25,    37,    38,    50,    51,    13,    14,    15,    95,    34,
    35,    36,   828,    32,    33,  1049,    52,    53,   186,   187,
   188,    37,    38,   191,   192,   186,   187,   188,    20,  1192,
   191,   192,  1066,    24,   795,    26,    52,    53,    34,    23,
   800,    19,    26,   803,    28,   890,   891,   892,    21,   552,
    21,    21,    25,    21,    25,    25,   817,    25,   819,    20,
    21,   822,   186,   187,  1227,   826,    18,   191,   192,    21,
  1104,   186,   187,   188,    20,    21,   191,   192,   193,    87,
    21,   186,   187,   188,    25,   846,   191,   192,    21,   846,
    95,  1125,    25,   854,   102,   103,   104,   105,   106,   107,
   108,   109,    27,   111,    21,    21,   114,    25,    25,    25,
    21,    24,   120,    26,    25,    28,   932,    21,   438,    21,
    18,    25,   130,    25,   132,   133,   134,    21,   448,   974,
   138,    25,    45,    21,    21,    48,    49,    25,    25,   459,
    21,   461,    18,   959,    25,    21,   154,    21,    23,   469,
    21,    25,   472,   161,    25,   916,   476,    24,    21,   186,
   187,   188,    25,   924,   191,   192,    21,    34,   929,    18,
    25,    21,    22,   933,    19,   935,   936,   937,    21,    24,
    24,    26,    25,    28,    29,    30,    31,    32,    33,    34,
   186,   187,   188,   513,   514,   191,   192,    21,    68,    69,
    70,    25,    47,    48,    49,    21,    24,    21,    26,    25,
    28,    25,    21,   221,  1078,    18,    25,    24,   979,   980,
    34,    35,    36,   186,   187,   188,    71,    45,   191,   192,
    48,    49,    32,    33,    73,    74,    75,    76,  1054,    22,
   560,    80,    81,    82,    83,    84,    85,    86,    24,    21,
  1011,    21,   260,    25,    21,    25,    21,    18,    25,    25,
    25,  1022,    21,  1024,  1025,    25,    25,    52,    53,    54,
   115,  1032,    24,  1034,  1035,   283,   284,    18,   286,   287,
    25,    26,    18,    28,   604,    18,   294,    18,  1143,  1022,
  1051,   299,    34,    35,    36,  1056,    18,  1056,    19,  1059,
   308,  1061,     9,  1064,   112,   113,   314,    11,  1069,   208,
  1069,    25,  1069,  1074,  1192,   182,   183,  1133,    24,   186,
   187,    11,    91,   190,    34,    35,    36,    21,  1206,    24,
    19,    19,    19,   341,  1095,  1096,  1097,  1098,    19,  1100,
  1101,   186,   187,   188,   352,   190,   191,   192,  1109,  1227,
  1111,    91,    27,  1114,   674,    24,   676,  1118,    23,  1120,
  1121,    25,  1123,    21,    21,   685,    22,    18,  1129,    21,
    25,    25,   692,    11,    24,   695,   696,    25,    24,    24,
    27,    25,  1143,    23,    23,    20,    19,    19,    10,    11,
    12,    20,    23,    58,    59,    60,    61,    62,    63,    64,
    65,    66,    67,    27,  1165,  1166,  1167,  1168,    24,  1225,
    21,     5,  1173,    25,    10,    11,    12,   425,    58,    59,
    60,    61,    62,    63,    64,    65,    66,    67,    19,    22,
   438,    73,  1193,    25,  1193,    24,    20,   445,    20,   447,
    25,   449,    25,    18,   452,    21,    27,   455,    27,   457,
    21,   459,    25,   461,    22,   354,    25,  1218,   466,    25,
    24,   469,    29,   362,    25,   364,    40,    39,   476,    56,
   187,    91,    91,    91,   142,    25,    91,    91,    25,    18,
    22,    91,    25,   491,    24,    20,   344,   155,   156,   157,
   158,   159,   160,    25,   162,   163,    18,   817,    25,   819,
    21,    18,   822,    40,   190,    20,   826,    27,    18,    21,
   368,    24,    23,    18,    91,   373,   374,   375,   376,   377,
   378,   379,   380,   381,   382,   383,   846,    22,    22,   192,
    21,    21,   154,    22,   854,    20,    20,   436,    91,    25,
    27,   194,    25,    40,    25,    27,   404,    18,    20,    27,
    20,    25,   560,     0,     0,   924,    87,   314,   154,  1218,
  1186,  1114,  1014,  1086,   684,  1165,   574,  1023,  1051,   577,
   461,   874,   823,   790,   577,  1193,   198,   676,   674,   846,
   128,   695,    12,   299,   206,   593,   350,  1149,   210,   597,
   598,   213,   241,   408,   504,   699,   604,   708,  1011,   221,
   222,   851,   198,   852,   226,   504,   228,    -1,    -1,   929,
   206,    -1,    -1,    -1,   210,    -1,   624,   213,    -1,   241,
   242,    -1,    -1,    -1,    -1,   221,   634,   635,    -1,    -1,
   226,   639,   228,   641,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   241,   242,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   553,    -1,    -1,   665,    -1,   979,
   980,    10,    -1,    -1,    -1,   673,    -1,   675,    -1,    -1,
    -1,   679,   571,   572,    -1,    -1,    -1,    -1,   686,   687,
    -1,    -1,    -1,   691,    -1,    -1,    -1,   695,   696,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    10,    11,    12,
   718,    -1,    -1,    -1,    -1,    -1,   384,   385,   386,   387,
   388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
   398,   399,    -1,    -1,    -1,    -1,  1056,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,  1064,   367,   645,   646,    -1,  1069,
    -1,    -1,    -1,    -1,  1074,    -1,    -1,    -1,    -1,   658,
    -1,    -1,   620,    -1,    -1,    -1,   434,    10,    11,    12,
    -1,    -1,    -1,   631,    -1,    -1,  1096,  1097,    -1,    -1,
    -1,   130,    -1,    -1,    -1,   453,   408,    -1,    -1,    -1,
   798,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   697,    -1,
  1120,  1121,    -1,   152,    -1,   154,    -1,   429,   430,  1129,
    -1,    -1,   408,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   489,    -1,  1143,    -1,    -1,    -1,   685,    -1,    -1,
    -1,    -1,   500,   429,   430,    -1,    -1,   845,   846,    -1,
   848,   699,    -1,    -1,    -1,    -1,  1166,  1167,    -1,   198,
    -1,   154,    -1,    -1,    -1,    -1,    -1,   206,    -1,    -1,
    -1,   210,    -1,    -1,   213,    -1,    -1,    -1,    -1,    18,
    -1,    -1,   221,  1193,   542,    24,   544,    -1,   546,   547,
    29,    30,    31,    32,    33,    34,    -1,    -1,    10,    11,
    12,    -1,    -1,   242,    -1,   198,    -1,    -1,    47,    48,
    49,    -1,    -1,   206,    -1,    -1,    -1,   210,    -1,    -1,
   213,   154,    -1,    -1,    -1,    -1,    -1,    -1,   221,    -1,
    -1,    -1,    71,   226,   932,   228,   594,    -1,    -1,    -1,
   552,   939,    -1,    -1,   602,    -1,    -1,    -1,   241,   242,
    -1,    -1,    -1,    -1,    -1,   294,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   198,   552,    -1,    -1,   817,
    -1,    -1,    -1,   206,   822,    -1,   115,   210,   826,    -1,
   213,    -1,   321,   322,   323,   324,    -1,    -1,   221,    -1,
    -1,   649,    -1,   226,    -1,   228,    -1,    -1,    -1,    -1,
    -1,    -1,   341,    -1,   852,    -1,    -1,    -1,   241,   242,
    -1,    -1,    -1,   352,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   873,   874,    -1,    -1,    -1,
   369,   879,   880,   881,   882,   883,   884,   885,   886,   887,
   888,   889,   154,    -1,    -1,    -1,    -1,   186,   187,   188,
   708,   190,    -1,    -1,    -1,  1053,    -1,    -1,  1056,    -1,
    -1,   719,   720,   721,   722,   723,   724,   725,   726,   408,
    -1,  1069,    -1,    -1,  1072,    -1,    -1,   416,    -1,    -1,
  1078,   929,    -1,  1081,  1082,    -1,   198,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   206,    -1,    -1,    -1,   210,    -1,
    -1,   213,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   221,
    -1,    -1,    -1,    -1,   226,   408,   228,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,  1124,    -1,    -1,   241,
   242,  1129,    -1,  1131,  1132,    -1,   429,   430,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,  1143,    -1,    -1,    -1,    -1,
   808,    -1,    18,    -1,    -1,    -1,    -1,    -1,    24,    -1,
   818,    -1,    -1,    29,    30,    31,    32,    33,    34,    -1,
    -1,  1169,    -1,    -1,    -1,   408,    -1,    -1,    -1,    -1,
    -1,    47,    48,    49,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,  1189,  1190,    -1,    -1,  1193,   429,   430,  1196,    -1,
    -1,   859,    -1,    -1,   543,    71,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   552,    -1,    -1,  1064,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   890,   891,   892,   893,   894,   895,   896,   897,
   898,   899,   900,   901,   902,   903,   904,   905,   906,   115,
   908,    -1,    -1,    19,    20,    -1,    -1,    -1,    24,   552,
    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   618,
    -1,    47,    48,    49,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   408,    -1,    -1,    -1,
   639,    -1,   641,    -1,    -1,    71,    -1,    -1,   647,    -1,
    -1,    -1,   651,    -1,     0,     1,   974,   429,   430,   552,
   186,   187,   188,    -1,   190,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    18,    -1,    -1,    -1,    -1,    -1,    24,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,   115,
    -1,    -1,    -1,  1011,    -1,    -1,    -1,    -1,    44,    -1,
    46,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   707,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   718,
    -1,    -1,    68,    69,    70,    -1,    72,    -1,    -1,    -1,
    -1,    77,    78,    79,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    92,    93,    94,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   186,   187,   188,    -1,   190,   111,   112,   113,   114,    -1,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   552,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
   156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
   166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
   176,   177,   178,   179,    -1,    -1,    -1,    -1,    -1,    -1,
   186,   187,   188,   189,    -1,   191,   192,   193,   122,   123,
   124,   125,    -1,   127,    -1,    -1,    -1,    -1,   132,   133,
    -1,    -1,   136,   137,    -1,   139,   140,   141,   142,    -1,
    -1,    -1,    -1,    -1,  1192,    -1,   875,    -1,    -1,    -1,
   154,   155,    -1,    -1,     0,     1,    -1,    -1,  1206,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    18,    -1,    -1,   179,    -1,    -1,    24,  1227,
    -1,    -1,    -1,    -1,    -1,   189,    -1,    -1,    34,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,    -1,
    46,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    68,    69,    70,    -1,    72,    -1,    -1,    -1,
    -1,    77,    78,    79,   963,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    92,    93,    94,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,    -1,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
  1009,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
   156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
   166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
   176,   177,   178,   179,    -1,    -1,    -1,    -1,    -1,    -1,
   186,   187,   188,   189,  1073,   191,   192,   193,     1,    -1,
    -1,    -1,    -1,     6,     7,     8,    -1,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    -1,    -1,
    -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,    32,
    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
    43,    44,    -1,    46,    47,    48,    49,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    68,    69,    70,    71,    72,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    96,    97,    98,    99,   100,   101,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,    -1,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
   163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
   173,   174,   175,   176,   177,   178,   179,    -1,    -1,    -1,
    -1,    -1,    -1,   186,   187,   188,   189,   190,   191,   192,
   193,     1,    -1,    -1,    -1,    -1,     6,     7,     8,    -1,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    -1,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,
    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    42,    43,    44,    -1,    -1,    47,    48,    49,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,
    70,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    96,    97,    98,    99,
   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
   150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
   160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
   170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
    -1,    -1,    -1,    -1,    -1,    -1,   186,   187,   188,   189,
   190,   191,   192,   193,     1,    -1,    -1,    -1,    -1,     6,
     7,     8,    -1,    -1,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    -1,    -1,    -1,    24,    -1,    -1,
    -1,    -1,    29,    30,    31,    32,    33,    34,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    -1,
    47,    48,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    68,    69,    70,    71,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    96,
    97,    98,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,    -1,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
   177,   178,   179,    -1,    -1,    -1,    -1,    -1,    -1,   186,
   187,   188,   189,   190,   191,   192,   193,     1,    -1,    -1,
    -1,    -1,     6,     7,     8,    -1,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    -1,    26,    -1,    28,    29,    30,    31,    32,    33,
    34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    -1,    45,    -1,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
    64,    65,    66,    67,    -1,    -1,    -1,    71,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    19,    20,    -1,    -1,    -1,
    24,    -1,    26,    -1,    28,    29,    30,    31,    32,    33,
    34,    -1,    96,    97,    98,    99,   100,   101,    -1,    -1,
    -1,    -1,     1,    47,    48,    49,   110,     6,     7,     8,
    -1,   115,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    -1,    -1,    -1,    24,    25,    71,    -1,    -1,
    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    42,    43,    -1,    -1,    -1,    47,    48,
    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   115,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   186,   187,   188,    -1,   190,   191,   192,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    95,    96,    97,    98,
    99,   100,   101,    -1,    -1,    -1,    -1,    -1,     1,    -1,
    -1,   110,    -1,     6,     7,     8,   115,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    -1,    -1,    -1,
    -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,    32,
    33,    34,   186,   187,   188,    -1,   190,   191,   192,    42,
    43,    -1,    -1,     1,    47,    48,    49,    -1,     6,     7,
     8,    -1,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    -1,    -1,    -1,    -1,    24,    -1,    71,    -1,
    -1,    29,    30,    31,    32,    33,    34,   186,   187,   188,
    -1,   190,   191,   192,    42,    43,    -1,    -1,    -1,    47,
    48,    49,    95,    96,    97,    98,    99,   100,   101,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    19,   110,    -1,    -1,
    -1,    24,   115,    71,    -1,    -1,    29,    30,    31,    32,
    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    47,    48,    49,    95,    96,    97,
    98,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,     1,
    -1,    -1,   110,    -1,     6,     7,     8,   115,    71,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    -1,
    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,
    32,    33,    34,   186,   187,   188,    -1,   190,   191,   192,
    42,    43,    -1,    -1,     1,    47,    48,    49,    -1,     6,
     7,     8,   115,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    -1,    -1,    -1,    24,    -1,    71,
    -1,    -1,    29,    30,    31,    32,    33,    34,   186,   187,
   188,    -1,   190,   191,   192,    42,    43,    -1,    -1,    -1,
    47,    48,    49,    95,    96,    97,    98,    99,   100,   101,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,   110,    -1,
    -1,    -1,    24,   115,    71,    -1,    -1,    29,    30,    31,
    32,    33,    34,   186,   187,   188,    -1,   190,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    47,    48,    49,    -1,    96,
    97,    98,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,
     1,    -1,    -1,   110,    -1,     6,     7,     8,   115,    71,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,
    31,    32,    33,    34,   186,   187,   188,    -1,   190,   191,
   192,    42,    43,    -1,    -1,     1,    47,    48,    49,    -1,
     6,     7,     8,   115,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    -1,    -1,    -1,    -1,    24,    -1,
    71,    -1,    -1,    29,    30,    31,    32,    33,    34,   186,
   187,   188,    -1,   190,   191,   192,    42,    43,    -1,    -1,
    -1,    47,    48,    49,    -1,    96,    97,    98,    99,   100,
   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
    -1,    -1,    -1,    -1,   115,    71,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   186,   187,   188,    -1,   190,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    96,    97,    98,    99,   100,   101,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   110,    -1,     6,     7,     8,   115,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,
    30,    31,    32,    33,    34,   186,   187,   188,    -1,   190,
   191,   192,    42,    43,    44,    -1,    46,    47,    48,    49,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    71,    72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   186,   187,   188,    -1,   190,   191,   192,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    96,    97,    98,    99,
   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
   150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
   160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
   170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
    -1,    -1,    -1,    -1,    -1,    -1,   186,   187,   188,   189,
   190,   191,   192,   193,     6,     7,     8,    -1,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    -1,
    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,
    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    42,    43,    44,    -1,    46,    47,    48,    49,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,
    72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    96,    97,    98,    99,   100,   101,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
   152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
   162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
   172,   173,   174,   175,   176,   177,   178,   179,    -1,    -1,
    -1,    -1,    -1,    -1,   186,   187,   188,   189,   190,   191,
   192,   193,     6,     7,     8,    -1,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
    24,    -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,
    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,
    44,    -1,    46,    47,    48,    49,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,    72,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    96,    97,    98,    99,   100,   101,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,    -1,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
   154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
   164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
   174,   175,   176,   177,   178,   179,    -1,    -1,    -1,    -1,
    -1,    -1,   186,   187,   188,   189,   190,   191,   192,   193,
     6,     7,     8,    -1,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    -1,    -1,    -1,    24,    -1,
    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    47,    48,    49,    -1,     6,     7,     8,    -1,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    -1,    -1,    -1,    24,    -1,    71,    -1,    -1,    29,    30,
    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    47,    48,    49,    -1,
    96,    97,    98,    99,   100,   101,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,
    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    96,    97,    98,    99,   100,
   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
    -1,     6,     7,     8,   115,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    24,
    -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,
   186,   187,   188,    -1,   190,   191,   192,    -1,    -1,    -1,
    -1,    -1,    47,    48,    49,    -1,     6,     7,     8,    -1,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    -1,    -1,    -1,    24,    -1,    71,    -1,    -1,    29,
    30,    31,    32,    33,    34,   186,   187,   188,    -1,   190,
   191,   192,    -1,    -1,    -1,    -1,    -1,    47,    48,    49,
    -1,    96,    97,    98,    99,   100,   101,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   110,    -1,    -1,    -1,    -1,
   115,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    96,    97,    98,    99,
   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   110,    -1,     6,     7,     8,   115,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
    24,    -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,
    34,   186,   187,   188,    -1,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,    47,    48,    49,    -1,     6,     7,     8,
    -1,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    -1,    -1,    -1,    24,    -1,    71,    -1,    -1,
    29,    30,    31,    32,    33,    34,   186,   187,   188,    -1,
   190,   191,   192,    -1,    -1,    -1,    -1,    -1,    47,    48,
    49,    -1,    96,    97,    98,    99,   100,   101,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   110,    -1,    -1,    -1,
    -1,   115,    71,    -1,    -1,    -1,    19,    -1,    -1,    -1,
    -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,    32,
    33,    34,    -1,    -1,    -1,    -1,    -1,    96,    97,    98,
    99,   100,   101,    -1,    47,    48,    49,    -1,    -1,    -1,
    -1,   110,    -1,     6,     7,     8,   115,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    71,    -1,
    -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,    32,
    33,    34,   186,   187,   188,    -1,   190,   191,   192,    -1,
    -1,    -1,    -1,    -1,    47,    48,    49,    -1,     6,     7,
     8,    -1,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,   115,    -1,    -1,    -1,    24,    -1,    71,    -1,
    -1,    29,    30,    31,    32,    33,    34,   186,   187,   188,
    -1,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,    47,
    48,    49,    -1,    96,    97,    98,    99,   100,   101,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,    -1,    -1,
    -1,    -1,   115,    71,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   186,   187,   188,    -1,   190,    96,    97,
    98,    99,   100,   101,    19,    -1,    -1,    -1,    -1,    24,
    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,
    -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   186,   187,   188,    -1,   190,   191,   192,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   186,   187,
   188,    -1,   190,   191,   192,    -1,   111,   112,   113,   114,
    -1,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,    -1,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
   155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
   165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
   175,   176,   177,   178,   179,    20,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   188,   189,    -1,    -1,    -1,   193,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,
    -1,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,    -1,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
   155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
   165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
   175,   176,   177,   178,   179,    -1,    -1,    -1,    -1,    -1,
    19,    -1,    -1,   188,   189,    24,    -1,    -1,   193,    -1,
    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    47,    48,
    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    34,   115,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    44,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   186,   187,   188,
    -1,   190,   111,   112,   113,   114,    -1,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,    -1,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
   159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
   169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
   179,    -1,    -1,    -1,    -1,    -1,    -1,   186,   187,   188,
   189,    -1,   191,   192,   193,    24,    25,    -1,    -1,    -1,
    29,    30,    31,    32,    33,    34,    24,    -1,    -1,    27,
    -1,    29,    30,    31,    32,    33,    34,    -1,    47,    48,
    49,    -1,    -1,    -1,    -1,    -1,    -1,    24,    25,    47,
    48,    49,    29,    30,    31,    32,    33,    34,    24,    -1,
    -1,    27,    71,    29,    30,    31,    32,    33,    34,    -1,
    47,    48,    49,    71,    -1,    -1,    -1,    -1,    -1,    24,
    25,    47,    48,    49,    29,    30,    31,    32,    33,    34,
    -1,    -1,    -1,    -1,    71,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    47,    48,    49,    71,   115,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   115,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    71,    24,    -1,    -1,
    -1,    -1,    29,    30,    31,    32,    33,    34,   115,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    24,   115,
    47,    48,    49,    29,    30,    31,    32,    33,    34,    24,
    -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,
   115,    47,    48,    49,    71,    -1,    -1,   186,   187,   188,
    -1,   190,    47,    48,    49,    -1,    -1,    -1,   186,   187,
   188,    24,   190,    -1,    -1,    71,    29,    30,    31,    32,
    33,    34,    -1,    -1,    -1,    -1,    71,    -1,    -1,   186,
   187,   188,    -1,   190,    47,    48,    49,    -1,   115,    -1,
   186,   187,   188,    -1,   190,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,   115,
    -1,   186,   187,   188,    -1,   190,    -1,    24,    -1,    -1,
   115,    -1,    29,    30,    31,    32,    33,    34,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    47,    48,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   115,    -1,    -1,    -1,    -1,    -1,    -1,   186,
   187,   188,    -1,   190,    71,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   186,   187,   188,    -1,   190,    -1,    -1,    -1,    -1,    -1,
    -1,   186,   187,   188,    -1,   190,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   115,    -1,
    -1,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    -1,
    -1,    -1,    -1,   186,   187,   188,    -1,   190,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   186,
   187,   188,    -1,   190,   111,   112,   113,   114,    -1,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,    -1,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
   177,   178,   179,    44,    -1,    46,    -1,    -1,    -1,    -1,
    -1,   188,   189,    -1,    -1,    -1,   193,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    70,
    -1,    72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   111,   112,   113,   114,    -1,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
   161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
   171,   172,   173,   174,   175,   176,   177,   178,   179,    44,
    -1,    46,    -1,    -1,    -1,    -1,    -1,   188,   189,    -1,
    -1,    -1,   193,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,
    -1,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,    -1,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
   155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
   165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
   175,   176,   177,   178,   179,    44,    -1,    -1,    -1,    -1,
    -1,   186,   187,   188,   189,    -1,    -1,    -1,   193,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
    69,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   111,   112,   113,   114,    -1,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,    -1,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
   159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
   169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
   179,    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   188,
   189,    -1,    -1,    -1,   193,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    92,
    93,    94,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,
   113,   114,    -1,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,    -1,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
   163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
   173,   174,   175,   176,   177,   178,   179,    44,    -1,    46,
    -1,    -1,    -1,    -1,    -1,   188,   189,    -1,    -1,    -1,
   193,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    72,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   111,   112,   113,   114,    -1,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,    -1,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
   177,   178,   179,    44,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   188,   189,    -1,    -1,    -1,   193,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   111,   112,   113,   114,    -1,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
   161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
   171,   172,   173,   174,   175,   176,   177,   178,   179,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   188,   189,    -1,
    -1,    -1,   193
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */

/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif



/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 3:
{ context_checkGlobalScope (); ;
    break;}
case 4:
{ context_checkGlobalScope (); ;
    break;}
case 5:
{ uentry_clearDecl (); ;
    break;}
case 6:
{ uentry_clearDecl (); ;
    break;}
case 7:
{ uentry_clearDecl (); ;
    break;}
case 8:
{ uentry_clearDecl (); ;
    break;}
case 9:
{ uentry_clearDecl (); ;
    break;}
case 10:
{ uentry_checkDecl (); exprNode_free (yyvsp[0].expr); ;
    break;}
case 11:
{ uentry_clearDecl (); /* evans 2002-02-08: okay to have a null statement */ ;
    break;}
case 12:
{ uentry_clearDecl (); ;
    break;}
case 13:
{ checkConstant (yyvsp[-6].qtyp, yyvsp[-4].ntyp); ;
    break;}
case 14:
{ checkValueConstant (yyvsp[-9].qtyp, yyvsp[-7].ntyp, yyvsp[-3].expr) ; ;
    break;}
case 15:
{ context_enterFunctionHeader (); ;
    break;}
case 16:
{ 
     declareStaticFunction (yyvsp[-2].ntyp); context_quietExitFunction (); 
     context_exitFunctionHeader (); 
   ;
    break;}
case 17:
{ 
     qtype qint = qtype_create (ctype_int);
     yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, qint);
     qtype_free (qint);
   ;
    break;}
case 18:
{ yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, yyvsp[-2].qtyp); ;
    break;}
case 20:
{ yyval.ntyp = yyvsp[0].ntyp; qtype_adjustPointers (yyvsp[-1].pointers, idDecl_getTyp (yyval.ntyp)); ;
    break;}
case 21:
{ yyval.ntyp = idDecl_create (yyvsp[0].cname, qtype_unknown ()); ;
    break;}
case 22:
{ yyval.ntyp = idDecl_expectFunction (yyvsp[-2].ntyp); ;
    break;}
case 23:
{ yyval.ntyp = idDecl_replaceCtype (yyvsp[-2].ntyp, ctype_makeInnerArray (idDecl_getCtype (yyvsp[-2].ntyp))); ;
    break;}
case 24:
{
     exprNode_findValue (yyvsp[-2].expr);
     idDecl_notExpectingFunction (yyvsp[-5].ntyp);

     if (exprNode_hasValue (yyvsp[-2].expr)) 
       {
	 yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ctype_makeInnerFixedArray (idDecl_getCtype (yyvsp[-5].ntyp), 
								  exprNode_getLongValue (yyvsp[-2].expr)));
       } 
     else
       {
	 yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ctype_makeInnerArray (idDecl_getCtype (yyvsp[-5].ntyp))); 
       }
   ;
    break;}
case 25:
{ setCurrentParams (uentryList_missingParams); ;
    break;}
case 26:
{ /* need to support globals and modifies here! */
     ctype ct = ctype_makeFunction (idDecl_getCtype (yyvsp[-5].ntyp), 
				    uentryList_makeMissingParams ());
     
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ct);
     idDecl_addClauses (yyval.ntyp, yyvsp[0].funcclauselist);
     context_popLoc ();
     /*drl 7/25/01 added*/
     setImplictfcnConstraints();
   ;
    break;}
case 27:
{ setCurrentParams (yyvsp[-1].entrylist); ;
    break;}
case 28:
{ setImplictfcnConstraints ();
     clearCurrentParams ();
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-6].ntyp, ctype_makeFunction (idDecl_getCtype (yyvsp[-6].ntyp), yyvsp[-3].entrylist));
     idDecl_addClauses (yyval.ntyp, yyvsp[0].funcclauselist);
     context_popLoc (); 
   ;
    break;}
case 29:
{ yyval.ntyp = idDecl_create (yyvsp[0].cname, qtype_unknown ()); ;
    break;}
case 30:
{ yyval.ntyp = idDecl_expectFunction (yyvsp[-2].ntyp); ;
    break;}
case 31:
{ yyval.ntyp = idDecl_replaceCtype (yyvsp[-2].ntyp, ctype_makeInnerArray (idDecl_getCtype (yyvsp[-2].ntyp))); ;
    break;}
case 32:
{ 
     int value;

     if (exprNode_hasValue (yyvsp[-2].expr) 
	 && multiVal_isInt (exprNode_getValue (yyvsp[-2].expr)))
       {
	 value = (int) multiVal_forceInt (exprNode_getValue (yyvsp[-2].expr));
       }
     else
       {
	 value = 0;
       }

     yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ctype_makeInnerFixedArray (idDecl_getCtype (yyvsp[-5].ntyp), value));
   ;
    break;}
case 33:
{ setCurrentParams (uentryList_missingParams); ;
    break;}
case 34:
{
     ctype ct = ctype_makeFunction (idDecl_getCtype (yyvsp[-5].ntyp), 
				    uentryList_makeMissingParams ());
     
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ct);
     idDecl_addClauses (yyval.ntyp, yyvsp[0].funcclauselist);
     context_popLoc (); 
   ;
    break;}
case 35:
{ setCurrentParams (yyvsp[-1].entrylist); ;
    break;}
case 36:
{ 
     clearCurrentParams ();
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-6].ntyp, ctype_makeFunction (idDecl_getCtype (yyvsp[-6].ntyp), yyvsp[-3].entrylist));
     idDecl_addClauses (yyval.ntyp, yyvsp[0].funcclauselist);
     context_popLoc (); 
   ;
    break;}
case 37:
{ setCurrentParams (yyvsp[-1].entrylist); ;
    break;}
case 38:
{ clearCurrentParams (); ;
    break;}
case 39:
{ declareCIter (yyvsp[-8].cname, yyvsp[-6].entrylist); ;
    break;}
case 40:
{ exprNode_checkMacroBody (yyvsp[-1].expr); ;
    break;}
case 41:
{ exprNode_checkIterBody (yyvsp[-1].expr); ;
    break;}
case 42:
{ exprNode_checkIterEnd (yyvsp[-1].expr); ;
    break;}
case 43:
{ exprChecks_checkEmptyMacroBody (); ;
    break;}
case 44:
{ clabstract_declareFunction (yyvsp[0].ntyp); ;
    break;}
case 45:
{ yyval.msconstraint = metaStateConstraint_create (yyvsp[-2].msspec, yyvsp[0].msexpr); ;
    break;}
case 46:
{ cscanner_expectingMetaStateName (); ;
    break;}
case 47:
{ cscanner_clearExpectingMetaStateName ();
      yyval.msspec = metaStateSpecifier_create (yyvsp[-3].sr, yyvsp[0].msinfo); ;
    break;}
case 48:
{ cscanner_expectingMetaStateName (); ;
    break;}
case 49:
{ cscanner_clearExpectingMetaStateName ();
      yyval.msspec = metaStateSpecifier_createElipsis (yyvsp[0].msinfo); ;
    break;}
case 50:
{ yyval.msexpr = metaStateExpression_create (yyvsp[0].msspec); ;
    break;}
case 51:
{ yyval.msexpr = metaStateExpression_createMerge (yyvsp[-2].msspec, yyvsp[0].msexpr); ;
    break;}
case 55:
{ yyval.conL = constraintList_add (yyvsp[0].conL, yyvsp[-2].con); ;
    break;}
case 56:
{ yyval.conL = constraintList_single (yyvsp[0].con); ;
    break;}
case 57:
{
 yyval.con = makeConstraintParse3 (yyvsp[-2].conE, yyvsp[-1].tok, yyvsp[0].conE);
 DPRINTF(("Done BufConstraint1\n")); ;
    break;}
case 64:
{yyval.conE = constraintExpr_parseMakeUnaryOp (yyvsp[-3].tok, yyvsp[-1].conE);  DPRINTF( ("Got BufConstraintExpr UNary Op ") ); ;
    break;}
case 65:
{
   DPRINTF( ("Got BufConstraintExpr BINary Op ") );
   yyval.conE = constraintExpr_parseMakeBinaryOp (yyvsp[-3].conE, yyvsp[-2].tok, yyvsp[-1].conE); ;
    break;}
case 66:
{ yyval.conE =  constraintExpr_makeTermsRef (yyvsp[0].sr);;
    break;}
case 67:
{ yyval.conE = constraintExpr_makeIntLiteral (exprNode_getLongValue (yyvsp[0].expr)); ;
    break;}
case 68:
{ /*@-onlytrans@*/ yyval.sr = checkbufferConstraintClausesId (yyvsp[0].entry); /*@=onlytrans@*/ /*@i523@*/ ;
    break;}
case 69:
{ yyval.sr = fixStateClausesId (yyvsp[0].cname); ;
    break;}
case 70:
{ yyval.sr = sRef_makeAnyArrayFetch (yyvsp[-2].sr); ;
    break;}
case 71:
{
    /*
    char *t; int c; 
    t =  cstring_toCharsSafe (exprNode_unparse($3)); 
    c = atoi( t );
    */
    yyval.sr = sRef_makeArrayFetchKnown (yyvsp[-3].sr, exprNode_getLongValue (yyvsp[-1].expr));
  ;
    break;}
case 72:
{ yyval.sr = sRef_constructPointer (yyvsp[0].sr); ;
    break;}
case 73:
{ yyval.sr = yyvsp[-1].sr; ;
    break;}
case 74:
{ cstring_markOwned (yyvsp[0].cname); yyval.sr = sRef_buildField (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 75:
{ cstring_markOwned (yyvsp[0].cname); yyval.sr = sRef_makeArrow (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 79:
{ yyval.funcclauselist = functionClauseList_new (); ;
    break;}
case 80:
{ yyval.funcclauselist = functionClauseList_prepend (yyvsp[0].funcclauselist, yyvsp[-1].funcclause); ;
    break;}
case 81:
{ yyval.funcclauselist = functionClauseList_new (); ;
    break;}
case 82:
{ yyval.funcclauselist = functionClauseList_prepend (yyvsp[0].funcclauselist, yyvsp[-1].funcclause); ;
    break;}
case 83:
{ yyval.funcclause = functionClause_createGlobals (yyvsp[0].globsclause); ;
    break;}
case 84:
{ yyval.funcclause = functionClause_createModifies (yyvsp[0].modsclause); ;
    break;}
case 85:
{ yyval.funcclause = functionClause_createModifies (yyvsp[0].modsclause); ;
    break;}
case 86:
{ yyval.funcclause = functionClause_createState (yyvsp[0].stateclause); ;
    break;}
case 87:
{ yyval.funcclause = yyvsp[0].funcclause; ;
    break;}
case 88:
{ yyval.funcclause = functionClause_createWarn (yyvsp[0].warnclause); ;
    break;}
case 89:
{ yyval.funcclause = functionClause_createGlobals (yyvsp[0].globsclause); ;
    break;}
case 90:
{ yyval.funcclause = functionClause_createModifies (yyvsp[0].modsclause); ;
    break;}
case 91:
{ yyval.funcclause = functionClause_createModifies (yyvsp[0].modsclause); ;
    break;}
case 92:
{ yyval.funcclause = functionClause_createState (yyvsp[0].stateclause); ;
    break;}
case 93:
{ yyval.funcclause = yyvsp[0].funcclause; ;
    break;}
case 94:
{ yyval.funcclause = functionClause_createWarn (yyvsp[0].warnclause); ;
    break;}
case 95:
{ yyval.globsclause = yyvsp[-1].globsclause; ;
    break;}
case 96:
{ setProcessingGlobalsList (); ;
    break;}
case 97:
{ 
     unsetProcessingGlobals (); 
     yyval.globsclause = globalsClause_create (yyvsp[-3].tok, yyvsp[-1].globset); 
   ;
    break;}
case 98:
{ yyval.modsclause = modifiesClause_createNoMods (yyvsp[0].tok); ;
    break;}
case 99:
{ yyval.modsclause = yyvsp[-1].modsclause; ;
    break;}
case 100:
{
     context_setProtectVars (); enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;
    break;}
case 101:
{ 
     exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
     yyval.modsclause = modifiesClause_create (yyvsp[-2].tok, yyvsp[0].srset);
   ;
    break;}
case 102:
{ yyval.flagspec = flagSpec_createPlain (yyvsp[0].cname); ;
    break;}
case 103:
{ yyval.flagspec = flagSpec_createOr (yyvsp[-2].cname, yyvsp[0].flagspec); ;
    break;}
case 106:
{ yyval.warnclause = warnClause_undefined; ;
    break;}
case 107:
{ yyval.warnclause = yyvsp[-1].warnclause; ;
    break;}
case 108:
{      
     llassert (exprNode_knownStringValue (yyvsp[0].expr));
     yyval.warnclause = warnClause_create (yyvsp[-2].tok, yyvsp[-1].flagspec, cstring_copy (multiVal_forceString (exprNode_getValue (yyvsp[0].expr)))); 
     exprNode_free (yyvsp[0].expr);
   ;
    break;}
case 109:
{ yyval.warnclause = warnClause_create (yyvsp[-1].tok, yyvsp[0].flagspec, cstring_undefined); ;
    break;}
case 110:
{ yyval.globset = globSet_single (yyvsp[0].sr); ;
    break;}
case 111:
{ yyval.globset = globSet_insert (yyvsp[-2].globset, yyvsp[0].sr); ;
    break;}
case 112:
{ yyval.sr = clabstract_createGlobal (yyvsp[0].sr, yyvsp[-1].tquallist); ;
    break;}
case 113:
{ yyval.tquallist = qualList_undefined; ;
    break;}
case 114:
{ yyval.tquallist = qualList_add (yyvsp[0].tquallist, yyvsp[-1].typequal); ;
    break;}
case 115:
{ yyval.sr = uentry_getSref (yyvsp[0].entry); ;
    break;}
case 116:
{ yyval.sr = clabstract_unrecognizedGlobal (yyvsp[0].cname); ;
    break;}
case 117:
{ yyval.sr = clabstract_checkGlobal (yyvsp[0].expr); ;
    break;}
case 118:
{ yyval.typequal = qual_createUndef (); ;
    break;}
case 119:
{ yyval.typequal = qual_createKilled (); ;
    break;}
case 120:
{ yyval.typequal = qual_createOut (); ;
    break;}
case 121:
{ yyval.typequal = qual_createIn (); ;
    break;}
case 122:
{ yyval.typequal = qual_createPartial (); ;
    break;}
case 130:
{ 
     /**!!! deal with fred; fred (int); declarations! **/
     qtype qint = qtype_create (ctype_int); 
     yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, qint);
     qtype_free (qint);
   ;
    break;}
case 131:
{ yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, yyvsp[-2].qtyp); ;
    break;}
case 132:
{ checkDoneParams (); context_enterInnerContext (); ;
    break;}
case 133:
{  
     exprNode_checkFunctionBody (yyvsp[0].expr); yyval.expr = yyvsp[0].expr; 
     context_exitInner (yyvsp[0].expr); 
   ;
    break;}
case 134:
{ context_enterOldStyleScope (); ;
    break;}
case 135:
{ oldStyleDoneParams (); context_enterInnerContext (); ;
    break;}
case 136:
{
     exprNode_checkFunctionBody (yyvsp[0].expr); 
     yyval.expr = yyvsp[0].expr; /* oldstyle */ 
     context_exitInner (yyvsp[0].expr);
   ;
    break;}
case 137:
{ 
     context_setFunctionDefined (exprNode_loc (yyvsp[0].expr)); 
     exprNode_checkFunction (context_getHeader (),  yyvsp[0].expr); 
     /* DRL 8 8 2000 */
     
     context_exitFunction ();
   ;
    break;}
case 138:
{ yyval.srset = yyvsp[-1].srset; ;
    break;}
case 139:
{ yyval.srset = sRefSet_new (); ;
    break;}
case 140:
{ yyval.sr = uentry_getSref (yyvsp[0].entry); checkModifiesId (yyvsp[0].entry); ;
    break;}
case 141:
{ yyval.sr = fixModifiesId (yyvsp[0].cname); ;
    break;}
case 142:
{ yyval.sr = modListArrayFetch (yyvsp[-2].sr, sRef_undefined); ;
    break;}
case 143:
{ yyval.sr = modListArrayFetch (yyvsp[-3].sr, yyvsp[-1].sr); ;
    break;}
case 144:
{ yyval.sr = modListPointer (yyvsp[0].sr); ;
    break;}
case 145:
{ yyval.sr = yyvsp[-1].sr; ;
    break;}
case 146:
{ yyval.sr = modListFieldAccess (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 147:
{ yyval.sr = modListArrowAccess (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 148:
{ yyval.sr = yyvsp[0].sr; ;
    break;}
case 149:
{ yyval.sr = sRef_makeUnknown (); /* sRef_makeConstant ($1); ? */ ;
    break;}
case 150:
{ yyval.srset = sRefSet_single (yyvsp[0].sr); ;
    break;}
case 151:
{ yyval.srset = sRefSet_insert (yyvsp[-2].srset, yyvsp[0].sr); ;
    break;}
case 152:
{ yyval.sr = checkStateClausesId (yyvsp[0].entry); ;
    break;}
case 153:
{ yyval.sr = fixStateClausesId (yyvsp[0].cname); ;
    break;}
case 154:
{ yyval.sr = sRef_makeAnyArrayFetch (yyvsp[-2].sr); ;
    break;}
case 155:
{ yyval.sr = sRef_makeAnyArrayFetch (yyvsp[-3].sr); ;
    break;}
case 156:
{ yyval.sr = sRef_constructPointer (yyvsp[0].sr); ;
    break;}
case 157:
{ yyval.sr = yyvsp[-1].sr; ;
    break;}
case 158:
{ cstring_markOwned (yyvsp[0].cname);
					    yyval.sr = sRef_buildField (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 159:
{ cstring_markOwned (yyvsp[0].cname);
                                            yyval.sr = sRef_makeArrow (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 160:
{ yyval.srset = sRefSet_undefined ;
    break;}
case 162:
{ if (sRef_isValid (yyvsp[0].sr)) { yyval.srset = sRefSet_single (yyvsp[0].sr); } 
      else { yyval.srset = sRefSet_undefined; } 
    ;
    break;}
case 163:
{ if (sRef_isValid (yyvsp[0].sr))
	{
	  yyval.srset = sRefSet_insert (yyvsp[-2].srset, yyvsp[0].sr); 
	}
      else
	{
	  yyval.srset = yyvsp[-2].srset;
	}
    ;
    break;}
case 164:
{ yyval.expr = exprNode_fromIdentifier (yyvsp[0].entry); ;
    break;}
case 165:
{ yyval.expr = exprNode_fromUIO (yyvsp[0].cname); ;
    break;}
case 167:
{ yyval.expr = exprNode_addParens (yyvsp[-2].tok, yyvsp[-1].expr); ;
    break;}
case 168:
{ yyval.expr = exprNode_fromIdentifier (coerceId (yyvsp[0].cname)); ;
    break;}
case 169:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 170:
{ exprChecks_inCompoundStatementExpression (); ;
    break;}
case 171:
{ exprChecks_leaveCompoundStatementExpression (); yyval.expr = exprNode_compoundStatementExpression (yyvsp[-3].tok, yyvsp[-1].expr); ;
    break;}
case 173:
{ yyval.expr = exprNode_arrayFetch (yyvsp[-3].expr, yyvsp[-1].expr); ;
    break;}
case 174:
{ yyval.expr = exprNode_functionCall (yyvsp[-2].expr, exprNodeList_new ()); ;
    break;}
case 175:
{ yyval.expr = exprNode_functionCall (yyvsp[-3].expr, yyvsp[-1].exprlist); ;
    break;}
case 176:
{ yyval.expr = exprNode_vaArg (yyvsp[-5].tok, yyvsp[-3].expr, yyvsp[-1].qtyp); ;
    break;}
case 177:
{ yyval.expr = exprNode_fieldAccess (yyvsp[-4].expr, yyvsp[-2].tok, yyvsp[-1].cname); ;
    break;}
case 178:
{ yyval.expr = exprNode_arrowAccess (yyvsp[-4].expr, yyvsp[-2].tok, yyvsp[-1].cname); ;
    break;}
case 179:
{ yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 180:
{ yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 181:
{ /* added for C99 */ yyval.expr = exprNode_undefined; /*@i87 no checking */ ;
    break;}
case 182:
{ yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 183:
{ yyval.exprlist = exprNodeList_push (yyvsp[-2].exprlist, yyvsp[0].expr); ;
    break;}
case 185:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 186:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 187:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 188:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 189:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 190:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 191:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 192:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 193:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 194:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 195:
{ yyval.cstringlist = cstringList_add (yyvsp[-2].cstringlist, yyvsp[0].cname); ;
    break;}
case 196:
{ yyval.cstringlist = yyvsp[-3].cstringlist; ;
    break;}
case 197:
{ yyval.cstringlist = cstringList_single (yyvsp[0].cname); ;
    break;}
case 198:
{ yyval.expr = exprNode_offsetof (yyvsp[-5].qtyp, yyvsp[-2].cstringlist); ;
    break;}
case 199:
{ context_setProtectVars (); ;
    break;}
case 200:
{ context_sizeofReleaseVars (); yyval.expr = yyvsp[0].expr; ;
    break;}
case 201:
{ yyval.expr = exprNode_sizeofType (yyvsp[-1].qtyp); ;
    break;}
case 202:
{ yyval.expr = exprNode_sizeofExpr (yyvsp[0].expr); ;
    break;}
case 203:
{ yyval.expr = exprNode_alignofType (yyvsp[-1].qtyp); ;
    break;}
case 204:
{ yyval.expr = exprNode_alignofExpr (yyvsp[0].expr); ;
    break;}
case 206:
{ yyval.expr = exprNode_cast (yyvsp[-3].tok, yyvsp[0].expr, yyvsp[-2].qtyp); ;
    break;}
case 208:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 209:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 210:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 212:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 213:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 215:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 216:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 218:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 219:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 220:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 221:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 223:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 224:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 226:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 228:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 230:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 232:
{ exprNode_produceGuards (yyvsp[-1].expr); 
     context_enterAndClause (yyvsp[-1].expr); 
   ;
    break;}
case 233:
{ 
     yyval.expr = exprNode_op (yyvsp[-3].expr, yyvsp[0].expr, yyvsp[-2].tok); 
     context_exitAndClause (yyval.expr, yyvsp[0].expr);
   ;
    break;}
case 235:
{ 
     exprNode_produceGuards (yyvsp[-1].expr);
     context_enterOrClause (yyvsp[-1].expr); 
   ;
    break;}
case 236:
{ 
     yyval.expr = exprNode_op (yyvsp[-3].expr, yyvsp[0].expr, yyvsp[-2].tok); 
     context_exitOrClause (yyval.expr, yyvsp[0].expr);
   ;
    break;}
case 238:
{ exprNode_produceGuards (yyvsp[-1].expr); context_enterTrueClause (yyvsp[-1].expr); ;
    break;}
case 239:
{ context_enterFalseClause (yyvsp[-4].expr); ;
    break;}
case 240:
{ yyval.expr = exprNode_cond (yyvsp[-6].expr, yyvsp[-3].expr, yyvsp[0].expr); context_exitClause (yyvsp[-6].expr, yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 242:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 243:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 244:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 245:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 246:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 247:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 248:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 249:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 250:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 251:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 252:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 254:
{ yyval.expr = exprNode_comma (yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 255:
{ yyval.expr = exprNode_undefined; ;
    break;}
case 258:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 259:
{ doVaDcl (); yyval.expr = exprNode_makeError (); ;
    break;}
case 260:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 261:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 262:
{
     setProcessingVars (yyvsp[-3].qtyp); 
     processNamedDecl (yyvsp[-1].ntyp); 
   ;
    break;}
case 263:
{ 
     unsetProcessingVars (); 
     yyval.expr = exprNode_makeEmptyInitialization (yyvsp[-6].ntyp); 
     DPRINTF (("Empty initialization: %s", exprNode_unparse (yyval.expr)));
   ;
    break;}
case 264:
{ setProcessingVars (yyvsp[-4].qtyp); processNamedDecl (yyvsp[-2].ntyp); ;
    break;}
case 265:
{ yyval.expr = exprNode_concat (yyvsp[-2].expr, exprNode_makeInitialization (yyvsp[-8].ntyp, yyvsp[-3].expr)); 
     unsetProcessingVars ();
   ;
    break;}
case 266:
{ 
     processNamedDecl (yyvsp[-1].ntyp); 
     yyval.expr = exprNode_makeEmptyInitialization (yyvsp[-1].ntyp);
   ;
    break;}
case 267:
{ processNamedDecl (yyvsp[-2].ntyp); ;
    break;}
case 268:
{ yyval.expr = exprNode_makeInitialization (yyvsp[-5].ntyp, yyvsp[0].expr); ;
    break;}
case 269:
{ setProcessingTypedef (yyvsp[0].qtyp); ;
    break;}
case 270:
{ clabstract_declareType (yyvsp[-3].exprlist, yyvsp[-1].warnclause); ;
    break;}
case 271:
{ /* in the ANSI grammar, semantics unclear */ ;
    break;}
case 272:
{ /* in the ANSI grammar, semantics unclear */ ;
    break;}
case 273:
{ g_expectingTypeName = TRUE; ;
    break;}
case 274:
{ g_expectingTypeName = TRUE; context_pushLoc (); ;
    break;}
case 275:
{ yyval.exprlist = yyvsp[-1].exprlist; ;
    break;}
case 276:
{ yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 277:
{ yyval.exprlist = exprNodeList_push (yyvsp[-3].exprlist, yyvsp[0].expr); ;
    break;}
case 278:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 279:
{ yyval.expr = exprNode_concat (yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 281:
{ yyval.expr = exprNode_makeInitBlock (yyvsp[-2].tok, yyvsp[-1].exprlist); ;
    break;}
case 282:
{ yyval.expr = exprNode_makeInitBlock (yyvsp[-3].tok, yyvsp[-2].exprlist); ;
    break;}
case 283:
{ yyval.expr = exprNode_undefined; ;
    break;}
case 284:
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 285:
{ yyval.expr = exprNode_undefined; 
                                     /* gcc extension, obsolete since 2.5 */ ;
    break;}
case 286:
{ yyval.expr = exprNode_undefined; ;
    break;}
case 287:
{ yyval.expr = exprNode_undefined; ;
    break;}
case 288:
{ yyval.expr = exprNode_undefined; ;
    break;}
case 289:
{ yyval.expr = exprNode_undefined; ;
    break;}
case 290:
{ yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 291:
{ yyval.exprlist = exprNodeList_push (yyvsp[-2].exprlist, yyvsp[0].expr); ;
    break;}
case 292:
{ setStorageClass (SCEXTERN); yyval.typequal = qual_createExtern (); ;
    break;}
case 293:
{ yyval.typequal = qual_createInline (); ;
    break;}
case 294:
{ setStorageClass (SCSTATIC); yyval.typequal = qual_createStatic (); ;
    break;}
case 295:
{ yyval.typequal = qual_createAuto (); ;
    break;}
case 296:
{ yyval.typequal = qual_createRegister (); ;
    break;}
case 297:
{ yyval.stateclause = yyvsp[-1].stateclause; ;
    break;}
case 298:
{
     context_setProtectVars (); 
     enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;
    break;}
case 299:
{ 
     exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
     yyval.stateclause = stateClause_createPlain (yyvsp[-5].tok, yyvsp[-2].srset);
   ;
    break;}
case 300:
{ yyval.funcclause = yyvsp[-1].funcclause; ;
    break;}
case 301:
{ yyval.tok = yyvsp[-1].tok; context_enterFunctionHeader (); ;
    break;}
case 302:
{
     context_exitFunctionHeader ();
     context_setProtectVars (); 
     enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;
    break;}
case 303:
{ 
     exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
     yyval.funcclause = functionClause_createState (stateClause_create (yyvsp[-5].tok, yyvsp[-4].typequal, yyvsp[-2].srset));
   ;
    break;}
case 304:
{
     context_setProtectVars (); 
     enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;
    break;}
case 305:
{
     context_exitFunctionHeader ();
     exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
     DPRINTF (("done optGlobBufConstraintsAux\n"));

     if (lltok_isEnsures (yyvsp[-4].tok)) 
       {
	 yyval.funcclause = functionClause_createEnsures (yyvsp[-2].fcnconstraint);
       }
     else if (lltok_isRequires (yyvsp[-4].tok))
       {
	 yyval.funcclause = functionClause_createRequires (yyvsp[-2].fcnconstraint);
       }
     else
       {
	 BADBRANCH;
       }

     DPRINTF (("FunctionclauseS: %s", functionClause_unparse (yyval.funcclause)));
   ;
    break;}
case 306:
{ yyval.fcnconstraint = functionConstraint_createBufferConstraint (yyvsp[0].conL); ;
    break;}
case 307:
{ yyval.fcnconstraint = functionConstraint_createMetaStateConstraint (yyvsp[0].msconstraint); DPRINTF (("Made constraint: %s", functionConstraint_unparse (yyval.fcnconstraint))); ;
    break;}
case 308:
{ yyval.typequal = qual_createExits (); ;
    break;}
case 309:
{ yyval.typequal = qual_createMayExit (); ;
    break;}
case 310:
{ yyval.typequal = qual_createTrueExit (); ;
    break;}
case 311:
{ yyval.typequal = qual_createFalseExit (); ;
    break;}
case 312:
{ yyval.typequal = qual_createNeverExit (); ;
    break;}
case 313:
{ yyval.typequal = qual_createChecked (); ;
    break;}
case 314:
{ yyval.typequal = qual_createCheckMod (); ;
    break;}
case 315:
{ yyval.typequal = qual_createUnchecked (); ;
    break;}
case 316:
{ yyval.typequal = qual_createCheckedStrict (); ;
    break;}
case 317:
{ yyval.typequal = qual_createOwned (); ;
    break;}
case 318:
{ yyval.typequal = qual_createDependent (); ;
    break;}
case 319:
{ yyval.typequal = qual_createYield (); ;
    break;}
case 320:
{ yyval.typequal = qual_createTemp (); ;
    break;}
case 321:
{ yyval.typequal = qual_createOnly (); ;
    break;}
case 322:
{ yyval.typequal = qual_createKeep (); ;
    break;}
case 323:
{ yyval.typequal = qual_createKept (); ;
    break;}
case 324:
{ yyval.typequal = qual_createShared (); ;
    break;}
case 325:
{ yyval.typequal = qual_createUnique (); ;
    break;}
case 326:
{ yyval.typequal = qual_createNull (); ;
    break;}
case 327:
{ yyval.typequal = qual_createIsNull (); ;
    break;}
case 328:
{ yyval.typequal = qual_createRelNull (); ;
    break;}
case 329:
{ yyval.typequal = qual_createNotNull (); ;
    break;}
case 330:
{ yyval.typequal = qual_createExposed (); ;
    break;}
case 331:
{ yyval.typequal = qual_createObserver (); ;
    break;}
case 332:
{ yyval.typequal = qual_createNullTerminated (); ;
    break;}
case 333:
{ yyval.typequal = qual_createMetaState (yyvsp[0].annotation); ;
    break;}
case 334:
{ yyval.typequal = qual_createReturned (); ;
    break;}
case 335:
{ yyval.typequal = qual_createSef (); ;
    break;}
case 336:
{ yyval.typequal = qual_createUnused (); ;
    break;}
case 337:
{ yyval.typequal = qual_createExternal (); ;
    break;}
case 338:
{ yyval.typequal = qual_createTrueNull (); ;
    break;}
case 339:
{ yyval.typequal = qual_createFalseNull (); ;
    break;}
case 340:
{ yyval.typequal = qual_createAbstract (); ;
    break;}
case 341:
{ yyval.typequal = qual_createConcrete (); ;
    break;}
case 342:
{ yyval.typequal = qual_createMutable (); ;
    break;}
case 343:
{ yyval.typequal = qual_createImmutable (); ;
    break;}
case 344:
{ yyval.typequal = qual_createRefCounted (); ;
    break;}
case 345:
{ yyval.typequal = qual_createRefs (); ;
    break;}
case 346:
{ yyval.typequal = qual_createKillRef (); ;
    break;}
case 347:
{ yyval.typequal = qual_createRelDef (); ;
    break;}
case 348:
{ yyval.typequal = qual_createNewRef (); ;
    break;}
case 349:
{ yyval.typequal = qual_createTempRef (); ;
    break;}
case 350:
{ yyval.typequal = qual_createShort (); ;
    break;}
case 351:
{ yyval.typequal = qual_createLong (); ;
    break;}
case 352:
{ yyval.typequal = qual_createSigned (); ;
    break;}
case 353:
{ yyval.typequal = qual_createUnsigned (); ;
    break;}
case 354:
{ yyval.typequal = qual_createOut (); ;
    break;}
case 355:
{ yyval.typequal = qual_createIn (); ;
    break;}
case 356:
{ yyval.typequal = qual_createPartial (); ;
    break;}
case 357:
{ yyval.typequal = qual_createSpecial (); ;
    break;}
case 358:
{ yyval.typequal = qual_createConst (); ;
    break;}
case 359:
{ yyval.typequal = qual_createVolatile (); ;
    break;}
case 360:
{ yyval.typequal = qual_createRestrict (); ;
    break;}
case 361:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 362:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 363:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 364:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 365:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 366:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 367:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 368:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 369:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 376:
{ yyval.ctyp = ctype_makeAnytype (); ;
    break;}
case 377:
{ yyval.ctyp = ctype_anyintegral; ;
    break;}
case 378:
{ yyval.ctyp = ctype_unsignedintegral; ;
    break;}
case 379:
{ yyval.ctyp = ctype_signedintegral; ;
    break;}
case 383:
{ yyval.ctyp = ctype_fromQual (yyvsp[-1].typequal); ;
    break;}
case 384:
{ yyval.qtyp = qtype_resolve (yyvsp[-1].qtyp); ;
    break;}
case 385:
{ yyval.qtyp = yyvsp[0].qtyp; ;
    break;}
case 386:
{ yyval.qtyp = qtype_mergeAlt (yyvsp[-3].qtyp, yyvsp[-1].qtyp); ;
    break;}
case 388:
{ yyval.qtyp = qtype_mergeAlt (yyvsp[-2].qtyp, yyvsp[0].qtyp); ;
    break;}
case 389:
{ yyval.qtyp = qtype_addQual (yyvsp[0].qtyp, yyvsp[-1].typequal); ;
    break;}
case 390:
{ yyval.qtyp = qtype_addQual (yyvsp[0].qtyp, yyvsp[-1].typequal); ;
    break;}
case 391:
{ yyval.qtyp = qtype_combine (yyvsp[0].qtyp, yyvsp[-1].ctyp); ;
    break;}
case 392:
{ yyval.qtyp = qtype_unknown (); ;
    break;}
case 393:
{ yyval.qtyp = yyvsp[0].qtyp; ;
    break;}
case 394:
{ yyval.conL = constraintList_undefined; ;
    break;}
case 395:
{ sRef_setGlobalScopeSafe (); ;
    break;}
case 396:
{ sRef_clearGlobalScopeSafe (); ;
    break;}
case 397:
{ ctype ct; ct = declareStruct (yyvsp[-9].cname, yyvsp[-4].flist); /* setGlobalStructInfo(ct, $12);*/ yyval.ctyp = ct; ;
    break;}
case 398:
{ sRef_setGlobalScopeSafe (); ;
    break;}
case 399:
{ sRef_clearGlobalScopeSafe (); ;
    break;}
case 400:
{ yyval.ctyp = declareUnion (yyvsp[-8].cname, yyvsp[-3].flist); ;
    break;}
case 401:
{ yyval.ctyp = declareStruct (yyvsp[-3].cname, uentryList_new ()); ;
    break;}
case 402:
{ yyval.ctyp = declareUnion (yyvsp[-3].cname, uentryList_new ()); ;
    break;}
case 403:
{ sRef_setGlobalScopeSafe (); ;
    break;}
case 404:
{ sRef_clearGlobalScopeSafe (); ;
    break;}
case 405:
{ yyval.ctyp = declareUnnamedStruct (yyvsp[-3].flist); ;
    break;}
case 406:
{ sRef_setGlobalScopeSafe (); ;
    break;}
case 407:
{ sRef_clearGlobalScopeSafe (); ;
    break;}
case 408:
{ yyval.ctyp = declareUnnamedUnion (yyvsp[-3].flist); ;
    break;}
case 409:
{ yyval.ctyp = ctype_createUnnamedStruct (uentryList_new ()); ;
    break;}
case 410:
{ yyval.ctyp = ctype_createUnnamedUnion (uentryList_new ()); ;
    break;}
case 411:
{ yyval.ctyp = handleStruct (yyvsp[-1].cname); ;
    break;}
case 412:
{ yyval.ctyp = handleUnion (yyvsp[-1].cname); ;
    break;}
case 413:
{ g_expectingTypeName = FALSE; ;
    break;}
case 415:
{ yyval.flist = uentryList_undefined; /* bogus! */ ;
    break;}
case 416:
{ yyval.flist = uentryList_mergeFields (yyvsp[-1].flist, yyvsp[0].flist); ;
    break;}
case 417:
{ yyval.flist = fixUentryList (yyvsp[-2].ntyplist, yyvsp[-4].qtyp); ;
    break;}
case 418:
{ yyval.flist = fixUnnamedDecl (yyvsp[-2].qtyp); ;
    break;}
case 419:
{ yyval.ntyplist = idDeclList_singleton (yyvsp[-1].ntyp); ;
    break;}
case 420:
{ yyval.ntyplist = idDeclList_add (yyvsp[-3].ntyplist, yyvsp[-1].ntyp); ;
    break;}
case 421:
{ yyval.ntyp = yyvsp[0].ntyp; ;
    break;}
case 422:
{ yyval.ntyp = idDecl_undefined; ;
    break;}
case 423:
{ yyval.ntyp = yyvsp[-3].ntyp; ;
    break;}
case 424:
{ yyval.ctyp = declareUnnamedEnum (yyvsp[-2].enumnamelist); ;
    break;}
case 425:
{ context_pushLoc (); ;
    break;}
case 426:
{ context_popLoc (); yyval.ctyp = declareEnum (yyvsp[-5].cname, yyvsp[-2].enumnamelist); ;
    break;}
case 427:
{ yyval.ctyp = handleEnum (yyvsp[-1].cname); ;
    break;}
case 428:
{ yyval.enumnamelist = enumNameList_single (yyvsp[0].cname); ;
    break;}
case 429:
{ yyval.enumnamelist = enumNameList_push (yyvsp[-2].enumnamelist, yyvsp[0].cname); ;
    break;}
case 431:
{ uentry ue = uentry_makeEnumConstant (yyvsp[0].cname, ctype_unknown);
     usymtab_supGlobalEntry (ue);
     yyval.cname = yyvsp[0].cname;
   ;
    break;}
case 432:
{ uentry ue = uentry_makeEnumInitializedConstant (yyvsp[-3].cname, ctype_unknown, yyvsp[0].expr);
     usymtab_supGlobalEntry (ue);
     yyval.cname = yyvsp[-3].cname; 
   ;
    break;}
case 434:
{ yyval.ntyp = idDecl_create (cstring_undefined, qtype_create (yyvsp[0].ctyp)); ;
    break;}
case 435:
{ 
     qtype qt = qtype_unknown ();
     qtype_adjustPointers (yyvsp[-1].pointers, qt);
     yyval.ntyp = idDecl_create (cstring_copy (LastIdentifier ()), qt);
   ;
    break;}
case 436:
{ yyval.ntyp = yyvsp[0].ntyp; qtype_adjustPointers (yyvsp[-1].pointers, idDecl_getTyp (yyval.ntyp)); ;
    break;}
case 438:
{ yyval.ntyp = yyvsp[0].ntyp; qtype_adjustPointers (yyvsp[-1].pointers, idDecl_getTyp (yyval.ntyp)); ;
    break;}
case 439:
{ yyval.entrylist = handleParamTypeList (yyvsp[0].entrylist); ;
    break;}
case 440:
{ yyval.entrylist = handleParamIdList (yyvsp[0].entrylist); ;
    break;}
case 441:
{ yyval.typequal = qual_createConst (); ;
    break;}
case 442:
{ yyval.typequal = qual_createRestrict (); ;
    break;}
case 443:
{ yyval.typequal = qual_createVolatile (); ;
    break;}
case 444:
{ yyval.tquallist = qualList_single (yyvsp[0].typequal); ;
    break;}
case 445:
{ yyval.tquallist = qualList_add (yyvsp[-1].tquallist, yyvsp[0].typequal); ;
    break;}
case 446:
{ yyval.pointers = pointers_create (yyvsp[0].tok); ;
    break;}
case 447:
{ yyval.pointers = pointers_createMods (yyvsp[-1].tok, yyvsp[0].tquallist); ;
    break;}
case 448:
{ yyval.pointers = pointers_extend (pointers_create (yyvsp[-1].tok), yyvsp[0].pointers); ;
    break;}
case 449:
{ yyval.pointers = pointers_extend (pointers_createMods (yyvsp[-2].tok, yyvsp[-1].tquallist), yyvsp[0].pointers); ;
    break;}
case 451:
{ yyval.entrylist = uentryList_add (yyvsp[-2].entrylist, uentry_makeElipsisMarker ()); ;
    break;}
case 452:
{ yyval.entrylist = uentryList_single (uentry_makeVariableLoc (yyvsp[0].cname, ctype_int)); ;
    break;}
case 453:
{ yyval.entrylist = uentryList_add (yyvsp[-2].entrylist, uentry_makeVariableLoc (yyvsp[0].cname, ctype_int)); ;
    break;}
case 454:
{ yyval.entrylist = uentryList_single (uentry_makeElipsisMarker ()); ;
    break;}
case 456:
{ yyval.entrylist = uentryList_add (yyvsp[-2].entrylist, uentry_makeElipsisMarker ()); ;
    break;}
case 457:
{ storeLoc (); ;
    break;}
case 458:
{ yyval.entrylist = uentryList_single (yyvsp[0].oentry); ;
    break;}
case 459:
{ storeLoc (); ;
    break;}
case 460:
{ yyval.entrylist = uentryList_add (yyvsp[-3].entrylist, yyvsp[0].oentry); ;
    break;}
case 461:
{ 
     if (isFlipOldStyle ()) 
       { 
	 llparseerror (cstring_makeLiteral ("Inconsistent function parameter syntax (mixing old and new style declaration)")); 
       }
     else 
       { 
	 setNewStyle (); 
       }
     yyval.oentry = makeCurrentParam (idDecl_fixParamBase (yyvsp[-1].ntyp, yyvsp[-2].qtyp)); 
   ;
    break;}
case 462:
{ 
     idDecl tparam = idDecl_create (yyvsp[0].cname, qtype_unknown ());

     if (isNewStyle ()) 
       {
	 llparseerror (message ("Inconsistent function parameter syntax: %q",
				idDecl_unparse (tparam))); 
       }

     setFlipOldStyle ();
     yyval.oentry = makeCurrentParam (tparam);
     idDecl_free (tparam);
   ;
    break;}
case 464:
{ yyval.qtyp = qtype_newBase (yyvsp[-1].qtyp, yyvsp[0].ctyp); ;
    break;}
case 465:
{ yyval.ctyp = ctype_adjustPointers (yyvsp[0].pointers, ctype_unknown); ;
    break;}
case 467:
{ yyval.ctyp = ctype_adjustPointers (yyvsp[-1].pointers, yyvsp[0].ctyp); ;
    break;}
case 468:
{ yyval.ctyp = ctype_unknown; ;
    break;}
case 470:
{ yyval.ctyp = ctype_expectFunction (yyvsp[-1].ctyp); ;
    break;}
case 471:
{ yyval.ctyp = ctype_makeArray (ctype_unknown); ;
    break;}
case 472:
{ yyval.ctyp = ctype_makeFixedArray (ctype_unknown, exprNode_getLongValue (yyvsp[-1].expr)); ;
    break;}
case 473:
{ yyval.ctyp = ctype_makeInnerArray (yyvsp[-2].ctyp); ;
    break;}
case 474:
{ yyval.ctyp = ctype_makeInnerFixedArray (yyvsp[-3].ctyp, exprNode_getLongValue (yyvsp[-1].expr)); ;
    break;}
case 475:
{ yyval.ctyp = ctype_makeFunction (ctype_unknown, uentryList_makeMissingParams ()); ;
    break;}
case 476:
{ yyval.ctyp = ctype_makeParamsFunction (ctype_unknown, yyvsp[-1].entrylist); ;
    break;}
case 477:
{ yyval.ctyp = ctype_makeFunction (yyvsp[-3].ctyp, uentryList_makeMissingParams ()); ;
    break;}
case 478:
{ yyval.ctyp = ctype_makeParamsFunction (yyvsp[-4].ctyp, yyvsp[-1].entrylist); ;
    break;}
case 488:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 491:
{ yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 492:
{ yyval.expr = exprNode_while (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 493:
{ yyval.expr = exprNode_doWhile (yyvsp[-5].expr, yyvsp[-2].expr); ;
    break;}
case 494:
{ yyval.expr = exprNode_doWhile (yyvsp[-4].expr, yyvsp[-1].expr); ;
    break;}
case 495:
{ yyval.expr = exprNode_for (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 496:
{ context_setProtectVars (); ;
    break;}
case 497:
{ context_sizeofReleaseVars (); ;
    break;}
case 498:
{ yyval.expr = exprNode_forPred (yyvsp[-7].expr, yyvsp[-5].expr, yyvsp[-2].expr); 
     context_enterForClause (yyvsp[-5].expr); ;
    break;}
case 499:
{ setProcessingIterVars (yyvsp[-2].entry); ;
    break;}
case 500:
{ yyval.expr = exprNode_iterStart (yyvsp[-5].entry, yyvsp[-1].exprlist); ;
    break;}
case 501:
{ yyval.expr = exprNode_createId (yyvsp[0].entry); ;
    break;}
case 505:
{ yyval.expr = yyvsp[-1].expr; DPRINTF (("def stmt: %s", exprNode_unparse (yyval.expr))); ;
    break;}
case 513:
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 514:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 515:
{ exprNode_checkIfPred (yyvsp[0].expr); ;
    break;}
case 516:
{ /* don't: context_exitTrueClause ($1, $2); */
     yyval.expr = exprNode_if (yyvsp[-2].expr, yyvsp[0].expr); 
   ;
    break;}
case 517:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 518:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 529:
{ yyval.expr = exprNode_addParens (yyvsp[-2].tok, yyvsp[-1].expr); ;
    break;}
case 531:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 532:
{ yyval.expr = exprNode_labelMarker (yyvsp[-1].cname); ;
    break;}
case 533:
{ yyval.expr = exprNode_notReached (yyvsp[0].expr); ;
    break;}
case 534:
{ ; ;
    break;}
case 535:
{ ; ;
    break;}
case 536:
{ context_enterCaseClause (yyvsp[0].expr); ;
    break;}
case 537:
{ yyval.expr = exprNode_caseMarker (yyvsp[-2].expr, FALSE); ;
    break;}
case 538:
{ context_enterCaseClause (yyvsp[0].expr); ;
    break;}
case 539:
{ yyval.expr = exprNode_caseMarker (yyvsp[-2].expr, TRUE); ;
    break;}
case 540:
{ context_enterCaseClause (exprNode_undefined); ;
    break;}
case 541:
{ yyval.expr = exprNode_defaultMarker (yyvsp[-2].tok, FALSE); ;
    break;}
case 542:
{ context_enterCaseClause (exprNode_undefined); ;
    break;}
case 543:
{ yyval.expr = exprNode_defaultMarker (yyvsp[-2].tok, TRUE); ;
    break;}
case 544:
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 545:
{ yyval.expr = yyvsp[0].expr; context_exitInner (yyvsp[0].expr); ;
    break;}
case 546:
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 547:
{ context_enterInnerContext (); ;
    break;}
case 548:
{ context_exitInnerPlain (); ;
    break;}
case 549:
{ context_enterStructInnerContext (); ;
    break;}
case 550:
{ context_exitStructInnerContext (); ;
    break;}
case 551:
{ context_exitInnerSafe (); ;
    break;}
case 552:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 553:
{ yyval.expr = exprNode_notReached (exprNode_createTok (yyvsp[0].tok)); ;
    break;}
case 554:
{ yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 555:
{ yyval.expr = exprNode_notReached (exprNode_updateLocation (yyvsp[-2].expr, lltok_getLoc (yyvsp[0].tok))); ;
    break;}
case 556:
{ yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 557:
{ yyval.expr = exprNode_notReached (exprNode_updateLocation (yyvsp[-2].expr, lltok_getLoc (yyvsp[0].tok))); ;
    break;}
case 558:
{ yyval.expr = exprNode_updateLocation (exprNode_concat (yyvsp[-2].expr, yyvsp[-1].expr), lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 559:
{ yyval.expr = exprNode_notReached (exprNode_updateLocation (exprNode_concat (yyvsp[-3].expr, yyvsp[-2].expr), 
							lltok_getLoc (yyvsp[-1].tok))); 
   ;
    break;}
case 560:
{ yyval.expr = exprNode_makeBlock (yyvsp[0].expr); ;
    break;}
case 561:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 562:
{ yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 563:
{ yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 564:
{ yyval.expr = exprNode_updateLocation (exprNode_concat (yyvsp[-2].expr, yyvsp[-1].expr), lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 566:
{ yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 567:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 568:
{ yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 569:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 570:
{ yyval.expr = exprNode_concat (yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 571:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 572:
{ yyval.expr = yyvsp[-2].expr; ;
    break;}
case 573:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 574:
{ yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 575:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 576:
{ yyval.expr = exprNode_statement (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 577:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 578:
{ yyval.expr = exprNode_statement (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 579:
{ yyval.expr = exprNode_checkExpr (yyvsp[0].expr); ;
    break;}
case 580:
{ 
     exprNode_produceGuards (yyvsp[-1].expr); context_enterTrueClause (yyvsp[-1].expr); 
     exprNode_checkIfPred (yyvsp[-1].expr);
     yyval.expr = yyvsp[-1].expr;
   ;
    break;}
case 581:
{ 
     context_exitTrueClause (yyvsp[-1].expr, yyvsp[0].expr);
     yyval.expr = exprNode_if (yyvsp[-1].expr, yyvsp[0].expr); 
   ;
    break;}
case 582:
{ context_enterFalseClause (yyvsp[-2].expr); ;
    break;}
case 583:
{
     context_exitClause (yyvsp[-4].expr, yyvsp[-3].expr, yyvsp[0].expr);
     yyval.expr = exprNode_ifelse (yyvsp[-4].expr, yyvsp[-3].expr, yyvsp[0].expr); 
   ;
    break;}
case 584:
{ context_enterSwitch (yyvsp[0].expr); ;
    break;}
case 585:
{ yyval.expr = exprNode_switch (yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 586:
{ yyval.expr = exprNode_whilePred (yyvsp[-1].expr); context_enterWhileClause (yyvsp[-1].expr); ;
    break;}
case 587:
{ yyval.expr = exprNode_whilePred(yyvsp[-1].expr); ;
    break;}
case 588:
{ context_enterIterClause (); ;
    break;}
case 589:
{ setProcessingIterVars (yyvsp[-3].entry); ;
    break;}
case 590:
{ 
     yyval.expr = exprNode_iter (yyvsp[-9].entry, yyvsp[-4].exprlist, yyvsp[-2].expr, yyvsp[-1].entry); 

   ;
    break;}
case 591:
{ yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 592:
{ nextIterParam (); ;
    break;}
case 593:
{ yyval.exprlist = exprNodeList_push (yyvsp[-3].exprlist, yyvsp[0].expr); ;
    break;}
case 594:
{ yyval.expr = exprNode_iterExpr (yyvsp[0].expr); ;
    break;}
case 595:
{ yyval.expr = exprNode_iterId (yyvsp[0].entry); ;
    break;}
case 596:
{ uentry ue = coerceIterId (yyvsp[0].cname);

		      if (uentry_isValid (ue)) 
			{
			  yyval.expr = exprNode_iterId (ue);
			}
		      else
			{
			  yyval.expr = exprNode_iterNewId (cstring_copy (LastIdentifier ()));
			}
		    ;
    break;}
case 597:
{ yyval.expr = exprNode_iterNewId (yyvsp[0].cname); ;
    break;}
case 599:
{ yyval.expr = exprNode_combineLiterals (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 601:
{ yyval.expr = exprNode_addParens (yyvsp[-2].tok, yyvsp[-1].expr); ;
    break;}
case 603:
{ yyval.expr = exprNode_arrayFetch (yyvsp[-3].expr, yyvsp[-1].expr); ;
    break;}
case 604:
{ yyval.expr = exprNode_functionCall (yyvsp[-2].expr, exprNodeList_new ()); ;
    break;}
case 605:
{ yyval.expr = exprNode_functionCall (yyvsp[-3].expr, yyvsp[-1].exprlist); ;
    break;}
case 606:
{ yyval.expr = exprNode_vaArg (yyvsp[-5].tok, yyvsp[-3].expr, yyvsp[-1].qtyp); ;
    break;}
case 607:
{ yyval.expr = exprNode_fieldAccess (yyvsp[-4].expr, yyvsp[-2].tok, yyvsp[-1].cname); ;
    break;}
case 608:
{ yyval.expr = exprNode_arrowAccess (yyvsp[-4].expr, yyvsp[-2].tok, yyvsp[-1].cname); ;
    break;}
case 609:
{ yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 610:
{ yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 612:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 613:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 614:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 615:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 616:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 617:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 618:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 619:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 620:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 622:
{ yyval.expr = exprNode_cast (yyvsp[-3].tok, yyvsp[0].expr, yyvsp[-2].qtyp); ;
    break;}
case 624:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 625:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 626:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 628:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 629:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 631:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 632:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 634:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 635:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 636:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 637:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 639:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 640:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 642:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 644:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 646:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 648:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 650:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 652:
{ context_enterTrueClause (yyvsp[-1].expr); ;
    break;}
case 653:
{ context_enterFalseClause (yyvsp[-4].expr); ;
    break;}
case 654:
{ yyval.expr = exprNode_cond (yyvsp[-6].expr, yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 656:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 657:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 658:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 659:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 660:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 661:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 662:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 663:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 664:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 665:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 666:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 667:
{ yyval.entry = yyvsp[0].entry; ;
    break;}
case 668:
{ yyval.entry = uentry_undefined; ;
    break;}
case 669:
{ context_enterDoWhileClause (); yyval.tok = yyvsp[0].tok; ;
    break;}
case 670:
{ yyval.expr = exprNode_while (yyvsp[-1].expr, yyvsp[0].expr); context_exitWhileClause (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 671:
{ yyval.expr = exprNode_statement (exprNode_doWhile (yyvsp[-5].expr, yyvsp[-2].expr), yyvsp[0].tok); ;
    break;}
case 672:
{ yyval.expr = exprNode_for (yyvsp[-1].expr, yyvsp[0].expr); context_exitForClause (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 673:
{ yyval.expr = exprNode_while (yyvsp[-1].expr, yyvsp[0].expr); context_exitWhileClause (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 674:
{ yyval.expr = exprNode_statement (exprNode_doWhile (yyvsp[-5].expr, yyvsp[-2].expr), yyvsp[0].tok); ;
    break;}
case 675:
{ yyval.expr = exprNode_doWhile (yyvsp[-4].expr, yyvsp[-1].expr); ;
    break;}
case 676:
{ yyval.expr = exprNode_for (yyvsp[-1].expr, yyvsp[0].expr); context_exitForClause (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 677:
{ yyval.expr = exprNode_goto (yyvsp[-1].cname); ;
    break;}
case 678:
{ yyval.expr = exprNode_continue (yyvsp[-1].tok, BADTOK); ;
    break;}
case 679:
{ yyval.expr = exprNode_continue (yyvsp[-2].tok, QINNERCONTINUE); ;
    break;}
case 680:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, BADTOK); ;
    break;}
case 681:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, QSWITCHBREAK); ;
    break;}
case 682:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, QLOOPBREAK); ;
    break;}
case 683:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, QINNERBREAK); ;
    break;}
case 684:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, QSAFEBREAK); ;
    break;}
case 685:
{ yyval.expr = exprNode_nullReturn (yyvsp[-1].tok); ;
    break;}
case 686:
{ yyval.expr = exprNode_return (yyvsp[-1].expr); ;
    break;}
case 688:
{ ; ;
    break;}
case 690:
{ ; ;
    break;}
case 693:
{ yyval.cname = uentry_getName (yyvsp[0].entry); ;
    break;}
case 694:
{ yyval.cname = uentry_getName (yyvsp[0].entry); ;
    break;}
case 695:
{ yyval.cname = uentry_getName (yyvsp[0].entry); ;
    break;}
case 696:
{ yyval.cname = yyvsp[0].cname; ;
    break;}
case 698:
{ yyval.ctyp = ctype_unknown; ;
    break;}
case 699:
{ yyval.ctyp = exprNode_getType (yyvsp[-1].expr); exprNode_free (yyvsp[-1].expr); ;
    break;}
case 700:
{ yyval.ctyp = qtype_getType (yyvsp[-1].qtyp); ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */


  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}


/*@-redecl@*/ /*@-namechecks@*/
extern char *yytext;
/*@=redecl@*/ /*@=namechecks@*/

# include "bison.reset"

void yyerror (/*@unused@*/ char *s) 
{
  static bool givehint = FALSE;

  if (context_inIterDef ())
    {
      llerror (FLG_SYNTAX, message ("Iter syntax not parseable: %s", 
				    context_inFunctionName ()));
    }
  else if (context_inIterEnd ())
    {
      llerror (FLG_SYNTAX, message ("Iter finalizer syntax not parseable: %s", 
				    context_inFunctionName ()));
    }
  else if (context_inMacro ())
    {
      llerror (FLG_SYNTAX, message ("Macro syntax not parseable: %s", 
				    context_inFunctionName ()));
      
      if (context_inUnknownMacro ())
	{
	  if (!givehint)
	    {
	      llhint (cstring_makeLiteral 
		     ("Precede macro definition with /*@notfunction@*/ "
		      "to suppress checking and force expansion"));
	      givehint = TRUE;
	    }
	}

      swallowMacro ();
      context_exitAllClausesQuiet ();
    }
  else
    {
      llparseerror (cstring_undefined);
    }
}












/*
** Resets all flags in bison.head
*/


/*@=allmacros@*/
/*@=boolint@*/
/*@=charint@*/
/*@=macroparams@*/
/*@=macroundef@*/
/*@=unreachable@*/
/*@=macrospec@*/
/*@=varuse@*/
/*@=ignorequals@*/
/*@=macrostmt@*/
/*@=noeffect@*/
/*@=shadow@*/
/*@=exitarg@*/
/*@=macroredef@*/
/*@=uniondef@*/
/*@=compdef@*/
/*@=matchfields@*/
/*@=exportlocal@*/
/*@=evalorderuncon@*/
/*@=exportheader@*/
/*@=typeuse@*/
/*@=redecl@*/
/*@=redef@*/
/*@=noparams@*/
/*@=ansireserved@*/
/*@=fielduse@*/
/*@=ifblock@*/
/*@=elseifcomplete@*/
/*@=whileblock@*/
/*@=forblock@*/
/*@=branchstate@*/
/*@=readonlytrans@*/
/*@=namechecks@*/
/*@=usedef@*/
/*@=systemunrecog@*/
/*@=dependenttrans@*/
/*@=unqualifiedtrans@*/
/*@=declundef@*/


/*drl added 11/27/2001*/
/*@=bounds@*/
