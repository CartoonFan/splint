/*
** Inserted at beginning of c files generated by bison
** REMEMBER:  Change bison.reset too.
*/

/*@-allmacros@*/
/*@+boolint@*/
/*@+charint@*/
/*@-macroparams@*/
/*@-macroundef@*/
/*@-unreachable@*/
/*@-macrospec@*/
/*@-varuse@*/
/*@+ignorequals@*/
/*@-macrostmt@*/
/*@-noeffect@*/
/*@-shadow@*/
/*@-exitarg@*/
/*@-macroredef@*/
/*@-uniondef@*/
/*@-compdef@*/
/*@-matchfields@*/
/*@-exportlocal@*/
/*@-evalorderuncon@*/
/*@-exportheader@*/
/*@-typeuse@*/
/*@-redecl@*/
/*@-redef@*/
/*@-noparams@*/
/*@-ansireserved@*/
/*@-fielduse@*/
/*@-ifblock@*/
/*@-elseifcomplete@*/
/*@-whileblock@*/
/*@-forblock@*/
/*@-branchstate@*/
/*@-readonlytrans@*/
/*@-namechecks@*/
/*@-usedef@*/
/*@-systemunrecog@*/
/*@-dependenttrans@*/
/*@-unqualifiedtrans@*/
/*@-nullassign@*/
/*@-nullpass@*/
/*@-nullptrarith*/
/*@-usereleased@*/
/*@-declundef@*/

/*drl added 11/27/2001*/
/*@-bounds@*/

/*drl added 12/11/2002*/
/*@-type@*/

/* < end of bison.head > */

/* A Bison parser, made from cgrammar.y
   by GNU bison 1.35.  */

#define YYBISON 1  /* Identify Bison output.  */

# define	BADTOK	257
# define	SKIPTOK	258
# define	CTOK_ELIPSIS	259
# define	CASE	260
# define	DEFAULT	261
# define	CIF	262
# define	CELSE	263
# define	SWITCH	264
# define	WHILE	265
# define	DO	266
# define	CFOR	267
# define	GOTO	268
# define	CONTINUE	269
# define	BREAK	270
# define	RETURN	271
# define	TSEMI	272
# define	TLBRACE	273
# define	TRBRACE	274
# define	TCOMMA	275
# define	TCOLON	276
# define	TASSIGN	277
# define	TLPAREN	278
# define	TRPAREN	279
# define	TLSQBR	280
# define	TRSQBR	281
# define	TDOT	282
# define	TAMPERSAND	283
# define	TEXCL	284
# define	TTILDE	285
# define	TMINUS	286
# define	TPLUS	287
# define	TMULT	288
# define	TDIV	289
# define	TPERCENT	290
# define	TLT	291
# define	TGT	292
# define	TCIRC	293
# define	TBAR	294
# define	TQUEST	295
# define	CSIZEOF	296
# define	CALIGNOF	297
# define	CTYPEOF	298
# define	ARROW_OP	299
# define	CTYPEDEF	300
# define	COFFSETOF	301
# define	INC_OP	302
# define	DEC_OP	303
# define	LEFT_OP	304
# define	RIGHT_OP	305
# define	LE_OP	306
# define	GE_OP	307
# define	EQ_OP	308
# define	NE_OP	309
# define	AND_OP	310
# define	OR_OP	311
# define	MUL_ASSIGN	312
# define	DIV_ASSIGN	313
# define	MOD_ASSIGN	314
# define	ADD_ASSIGN	315
# define	SUB_ASSIGN	316
# define	LEFT_ASSIGN	317
# define	RIGHT_ASSIGN	318
# define	AND_ASSIGN	319
# define	XOR_ASSIGN	320
# define	OR_ASSIGN	321
# define	CSTRUCT	322
# define	CUNION	323
# define	CENUM	324
# define	VA_ARG	325
# define	VA_DCL	326
# define	QWARN	327
# define	QGLOBALS	328
# define	QMODIFIES	329
# define	QNOMODS	330
# define	QCONSTANT	331
# define	QFUNCTION	332
# define	QITER	333
# define	QDEFINES	334
# define	QUSES	335
# define	QALLOCATES	336
# define	QSETS	337
# define	QRELEASES	338
# define	QPRECLAUSE	339
# define	QPOSTCLAUSE	340
# define	QINVARIANT	341
# define	QALT	342
# define	QUNDEF	343
# define	QKILLED	344
# define	QENDMACRO	345
# define	LLMACRO	346
# define	LLMACROITER	347
# define	LLMACROEND	348
# define	TENDMACRO	349
# define	QSWITCHBREAK	350
# define	QLOOPBREAK	351
# define	QINNERBREAK	352
# define	QSAFEBREAK	353
# define	QINNERCONTINUE	354
# define	QFALLTHROUGH	355
# define	QLINTNOTREACHED	356
# define	QLINTFALLTHROUGH	357
# define	QLINTFALLTHRU	358
# define	QARGSUSED	359
# define	QPRINTFLIKE	360
# define	QLINTPRINTFLIKE	361
# define	QSCANFLIKE	362
# define	QMESSAGELIKE	363
# define	QNOTREACHED	364
# define	QCONST	365
# define	QRESTRICT	366
# define	QVOLATILE	367
# define	QINLINE	368
# define	QEXTENSION	369
# define	QEXTERN	370
# define	QSTATIC	371
# define	QAUTO	372
# define	QREGISTER	373
# define	QOUT	374
# define	QIN	375
# define	QYIELD	376
# define	QONLY	377
# define	QTEMP	378
# define	QSHARED	379
# define	QREF	380
# define	QUNIQUE	381
# define	QCHECKED	382
# define	QUNCHECKED	383
# define	QCHECKEDSTRICT	384
# define	QCHECKMOD	385
# define	QKEEP	386
# define	QKEPT	387
# define	QPARTIAL	388
# define	QSPECIAL	389
# define	QOWNED	390
# define	QDEPENDENT	391
# define	QRETURNED	392
# define	QEXPOSED	393
# define	QNULL	394
# define	QOBSERVER	395
# define	QISNULL	396
# define	QEXITS	397
# define	QMAYEXIT	398
# define	QNEVEREXIT	399
# define	QTRUEEXIT	400
# define	QFALSEEXIT	401
# define	QLONG	402
# define	QSIGNED	403
# define	QUNSIGNED	404
# define	QSHORT	405
# define	QUNUSED	406
# define	QSEF	407
# define	QNOTNULL	408
# define	QRELNULL	409
# define	QABSTRACT	410
# define	QNUMABSTRACT	411
# define	QCONCRETE	412
# define	QMUTABLE	413
# define	QIMMUTABLE	414
# define	QTRUENULL	415
# define	QFALSENULL	416
# define	QEXTERNAL	417
# define	QREFCOUNTED	418
# define	QREFS	419
# define	QNEWREF	420
# define	QTEMPREF	421
# define	QKILLREF	422
# define	QRELDEF	423
# define	CGCHAR	424
# define	CBOOL	425
# define	CINT	426
# define	CGFLOAT	427
# define	CDOUBLE	428
# define	CVOID	429
# define	QANYTYPE	430
# define	QINTEGRALTYPE	431
# define	QUNSIGNEDINTEGRALTYPE	432
# define	QSIGNEDINTEGRALTYPE	433
# define	QNULLTERMINATED	434
# define	QSETBUFFERSIZE	435
# define	QSETSTRINGLENGTH	436
# define	QMAXSET	437
# define	QMAXREAD	438
# define	QTESTINRANGE	439
# define	TCAND	440
# define	IDENTIFIER	441
# define	NEW_IDENTIFIER	442
# define	TYPE_NAME_OR_ID	443
# define	CANNOTATION	444
# define	CCONSTANT	445
# define	ITER_NAME	446
# define	ITER_ENDNAME	447
# define	TYPE_NAME	448
# define	METASTATE_NAME	449


/*
**
** cgrammar.y
**
** Yacc/Bison grammar for extended ANSI C used by Splint.
**
** original grammar by Nate Osgood ---
**    hacrat@catfish.lcs.mit.edu Mon Jun 14 13:06:32 1993
**
** changes for Splint --- handle typedef names correctly
** fix struct/union parsing bug (empty struct is accepted)
** add productions to handle macros --- require
** error correction --- main source of conflicts in grammar.
** need to process initializations sequentially, L->R
**
** production names are cryptic, so more productions fit on one line
**
** conflicts:  87 shift/reduce, 18 reduce/reduce
** most of these are due to handling macros
** a few are due to handling type expressions
*/

/*@=allmacros@*/

extern int yylex ();
extern void yyerror (char *);

# include "splintMacros.nf"
# include "basic.h"
# include "cscanner.h"
# include "cscannerHelp.h"
# include "cgrammar.h"
# include "exprChecks.h"

/*@-allmacros@*/
/*@-matchfields@*/

# define SHOWCSYM FALSE

/*
** This is necessary, or else when the bison-generated code #include's malloc.h,
** there will be a parse error.
**
** Unfortunately, it means the error checking on malloc, etc. is lost for allocations
** in bison-generated files under Win32.
*/

# ifdef WIN32
# undef malloc
# undef calloc
# undef realloc
# endif


#ifndef cgrammar_YYSTYPE
typedef union
{
  lltok tok;
  int count;
  qual typequal;
  qualList tquallist;
  ctype ctyp;
  /*@dependent@*/ sRef sr;
  /*@only@*/ sRef osr;

  /*@only@*/ functionClauseList funcclauselist;
  /*@only@*/ functionClause funcclause;  
  /*@only@*/ flagSpec flagspec;
  /*@only@*/ globalsClause globsclause;
  /*@only@*/ modifiesClause modsclause;
  /*@only@*/ warnClause warnclause;
  /*@only@*/ stateClause stateclause;
  /*@only@*/ pointers pointers;
  /*@only@*/ functionConstraint fcnconstraint; 

  /*@only@*/ metaStateConstraint msconstraint;
  /*@only@*/ metaStateSpecifier msspec;
  /*@only@*/ metaStateExpression msexpr;
  /*@observer@*/ metaStateInfo msinfo;

  /*@only@*/ sRefList srlist;
  /*@only@*/ globSet globset;
  /*@only@*/ qtype qtyp;
  /*@only@*/ cstring cname;
  /*@observer@*/ annotationInfo annotation;
  /*@only@*/ idDecl ntyp;
  /*@only@*/ idDeclList ntyplist;
  /*@only@*/ uentryList flist;
  /*@owned@*/ uentryList entrylist;
  /*@observer@*/ /*@dependent@*/ uentry entry;
  /*@only@*/ uentry oentry;
  /*@only@*/ exprNode expr;
  /*@only@*/ enumNameList enumnamelist;
  /*@only@*/ exprNodeList exprlist;
  /*@only@*/ sRefSet srset; 
  /*@only@*/ cstringList cstringlist;

  /*drl
    added 1/19/2001
  */
  constraint con;
  constraintList conL;
  constraintExpr conE;
  /* drl */  
} yystype;
# define cgrammar_YYSTYPE yystype
# define cgrammar_YYSTYPE_IS_TRIVIAL 1
#endif
#ifndef YYDEBUG
# define YYDEBUG 1
#endif



#define	YYFINAL		1249
#define	YYFLAG		-32768
#define	YYNTBASE	196

/* YYTRANSLATE(YYLEX) -- Bison token number corresponding to YYLEX. */
#define YYTRANSLATE(x) ((unsigned)(x) <= 449 ? yytranslate[x] : 464)

/* YYTRANSLATE[YYLEX] -- Bison token number corresponding to YYLEX. */
static const short yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195
};

#if YYDEBUG
static const short yyprhs[] =
{
       0,     0,     1,     3,     5,     8,    11,    13,    15,    17,
      19,    21,    23,    25,    34,    46,    47,    53,    55,    59,
      61,    64,    66,    73,    77,    84,    85,    92,    93,   101,
     103,   110,   114,   121,   122,   129,   130,   138,   139,   140,
     151,   155,   159,   163,   166,   168,   172,   173,   178,   179,
     184,   186,   190,   192,   194,   196,   200,   202,   206,   208,
     210,   212,   214,   216,   218,   223,   229,   231,   233,   235,
     237,   241,   246,   249,   253,   257,   261,   263,   265,   267,
     268,   271,   272,   275,   277,   279,   281,   283,   285,   287,
     289,   291,   293,   295,   297,   299,   302,   303,   308,   310,
     313,   314,   318,   320,   324,   326,   328,   329,   332,   336,
     339,   341,   345,   348,   349,   352,   354,   356,   358,   360,
     362,   364,   366,   368,   370,   372,   374,   376,   378,   380,
     382,   384,   388,   389,   393,   394,   395,   400,   403,   406,
     408,   410,   412,   414,   418,   423,   426,   430,   434,   438,
     440,   442,   444,   448,   450,   452,   456,   461,   464,   468,
     472,   476,   477,   479,   481,   485,   487,   489,   491,   495,
     497,   499,   500,   505,   507,   512,   516,   521,   528,   534,
     540,   543,   546,   554,   556,   560,   562,   565,   568,   571,
     574,   577,   580,   583,   586,   588,   590,   594,   599,   601,
     611,   612,   616,   621,   624,   629,   632,   634,   639,   641,
     645,   649,   653,   655,   659,   663,   665,   669,   673,   675,
     679,   683,   687,   691,   693,   697,   701,   703,   707,   709,
     713,   715,   719,   721,   722,   727,   729,   730,   735,   737,
     738,   739,   747,   749,   753,   757,   761,   765,   769,   773,
     777,   781,   785,   789,   793,   795,   799,   800,   802,   804,
     806,   808,   810,   814,   815,   825,   826,   838,   840,   842,
     845,   846,   853,   854,   863,   868,   873,   874,   875,   878,
     880,   885,   888,   890,   895,   896,   901,   903,   907,   912,
     915,   918,   921,   923,   926,   930,   933,   935,   939,   941,
     943,   945,   947,   949,   952,   953,   960,   963,   966,   967,
     974,   975,   981,   983,   985,   987,   989,   991,   993,   995,
     997,   999,  1001,  1003,  1005,  1007,  1009,  1011,  1013,  1015,
    1017,  1019,  1021,  1023,  1025,  1027,  1029,  1031,  1033,  1035,
    1037,  1039,  1041,  1043,  1045,  1047,  1049,  1051,  1053,  1055,
    1057,  1059,  1061,  1063,  1065,  1067,  1069,  1071,  1073,  1075,
    1077,  1079,  1081,  1083,  1085,  1087,  1090,  1093,  1096,  1099,
    1102,  1105,  1108,  1111,  1114,  1117,  1120,  1123,  1126,  1129,
    1132,  1135,  1138,  1141,  1144,  1147,  1150,  1153,  1156,  1159,
    1162,  1165,  1169,  1171,  1176,  1178,  1182,  1185,  1188,  1191,
    1192,  1194,  1195,  1196,  1197,  1210,  1211,  1212,  1224,  1231,
    1238,  1239,  1240,  1251,  1252,  1253,  1264,  1270,  1276,  1281,
    1286,  1287,  1289,  1291,  1294,  1300,  1304,  1307,  1312,  1314,
    1318,  1323,  1330,  1331,  1340,  1345,  1347,  1351,  1354,  1356,
    1361,  1363,  1365,  1368,  1371,  1373,  1376,  1378,  1381,  1383,
    1385,  1387,  1389,  1392,  1394,  1397,  1400,  1404,  1406,  1410,
    1412,  1416,  1418,  1420,  1424,  1425,  1428,  1429,  1434,  1439,
    1441,  1443,  1446,  1448,  1450,  1453,  1454,  1456,  1462,  1465,
    1469,  1473,  1478,  1482,  1487,  1492,  1498,  1500,  1502,  1504,
    1506,  1508,  1510,  1512,  1514,  1516,  1518,  1520,  1522,  1525,
    1528,  1536,  1543,  1546,  1547,  1548,  1559,  1560,  1567,  1569,
    1571,  1573,  1575,  1578,  1580,  1582,  1584,  1586,  1588,  1590,
    1592,  1596,  1598,  1599,  1603,  1606,  1609,  1611,  1613,  1615,
    1617,  1619,  1621,  1623,  1625,  1627,  1629,  1633,  1635,  1637,
    1640,  1643,  1644,  1647,  1648,  1653,  1654,  1661,  1662,  1666,
    1667,  1673,  1677,  1680,  1684,  1685,  1686,  1687,  1688,  1689,
    1691,  1694,  1697,  1701,  1704,  1708,  1712,  1717,  1720,  1723,
    1727,  1731,  1736,  1738,  1741,  1743,  1746,  1748,  1752,  1754,
    1759,  1761,  1764,  1766,  1769,  1771,  1774,  1776,  1781,  1784,
    1785,  1791,  1792,  1799,  1804,  1809,  1810,  1811,  1822,  1824,
    1825,  1830,  1832,  1834,  1836,  1838,  1840,  1843,  1845,  1849,
    1851,  1856,  1860,  1865,  1872,  1878,  1884,  1887,  1890,  1892,
    1895,  1898,  1901,  1904,  1907,  1910,  1913,  1916,  1918,  1920,
    1925,  1927,  1931,  1935,  1939,  1941,  1945,  1949,  1951,  1955,
    1959,  1961,  1965,  1969,  1973,  1977,  1979,  1983,  1987,  1989,
    1993,  1995,  1999,  2001,  2005,  2007,  2011,  2013,  2017,  2019,
    2020,  2021,  2029,  2031,  2035,  2039,  2043,  2047,  2051,  2055,
    2059,  2063,  2067,  2071,  2075,  2077,  2078,  2080,  2083,  2091,
    2094,  2097,  2105,  2112,  2115,  2119,  2122,  2126,  2129,  2133,
    2137,  2141,  2145,  2148,  2152,  2153,  2155,  2156,  2158,  2160,
    2162,  2164,  2166,  2168,  2170,  2172,  2174,  2179
};
static const short yyrhs[] =
{
      -1,   197,     0,   198,     0,   197,   198,     0,   259,   459,
       0,   199,     0,   200,     0,   210,     0,   213,     0,   297,
       0,    18,     0,     1,     0,    77,   341,   355,   365,   355,
     459,   306,    91,     0,    77,   341,   355,   365,   355,    23,
     306,   313,   312,   459,    91,     0,     0,    78,   201,   202,
     459,    91,     0,   203,     0,   341,   355,   203,     0,   207,
       0,   369,   207,     0,   462,     0,   306,    24,   355,   365,
     306,    25,     0,   204,    26,    27,     0,   204,    26,   306,
     296,    27,   355,     0,     0,   204,   307,    24,    25,   205,
     231,     0,     0,   204,   307,    24,   366,    25,   206,   231,
       0,   462,     0,   306,    24,   355,   203,   306,    25,     0,
     207,    26,    27,     0,   207,    26,   306,   296,    27,   355,
       0,     0,   207,   307,    24,    25,   208,   232,     0,     0,
     207,   307,    24,   366,    25,   209,   232,     0,     0,     0,
      79,   462,    24,   366,    25,   211,   232,   212,   459,    91,
       0,    92,   396,    95,     0,    93,   382,    95,     0,    94,
     383,    95,     0,    92,    95,     0,   254,     0,   216,    23,
     219,     0,     0,   228,   217,    22,   220,     0,     0,     5,
     218,    22,   220,     0,   216,     0,   216,    40,   219,     0,
     195,     0,   186,     0,    56,     0,   223,   221,   222,     0,
     223,     0,   226,   225,   226,     0,   183,     0,   184,     0,
      53,     0,    52,     0,    54,     0,   227,     0,   229,    24,
     226,    25,     0,    24,   226,   230,   226,    25,     0,   228,
       0,   191,     0,   461,     0,   188,     0,   228,    26,    27,
       0,   228,    26,   191,    27,     0,    34,   228,     0,    24,
     228,    25,     0,   228,    28,   462,     0,   228,    45,   462,
       0,   224,     0,    33,     0,    32,     0,     0,   233,   231,
       0,     0,   234,   232,     0,   235,     0,   239,     0,   238,
       0,   319,     0,   322,     0,   245,     0,   236,     0,   240,
       0,   238,     0,   320,     0,   324,     0,   246,     0,   236,
      91,     0,     0,    74,   237,   247,   459,     0,    76,     0,
     240,    91,     0,     0,    75,   241,   260,     0,   243,     0,
     243,    40,   242,     0,   188,     0,   245,     0,     0,   246,
      91,     0,    73,   242,   435,     0,    73,   242,     0,   248,
       0,   247,    21,   248,     0,   249,   250,     0,     0,   251,
     249,     0,   461,     0,   188,     0,   297,     0,    89,     0,
      90,     0,   120,     0,   121,     0,   134,     0,    80,     0,
      81,     0,    82,     0,    83,     0,    84,     0,    85,     0,
      86,     0,   365,     0,   341,   355,   365,     0,     0,    19,
     256,   413,     0,     0,     0,   257,   417,   258,   406,     0,
     214,   255,     0,   263,   459,     0,   459,     0,   461,     0,
     188,     0,   189,     0,   261,    26,    27,     0,   261,    26,
     262,    27,     0,    34,   261,     0,    24,   261,    25,     0,
     261,    28,   462,     0,   261,    45,   462,     0,   261,     0,
     435,     0,   261,     0,   263,    21,   261,     0,   461,     0,
     188,     0,   264,    26,    27,     0,   264,    26,   262,    27,
       0,    34,   264,     0,    24,   264,    25,     0,   264,    28,
     462,     0,   264,    45,   462,     0,     0,   266,     0,   264,
       0,   266,    21,   264,     0,   461,     0,   188,     0,   435,
       0,    24,   294,    25,     0,   189,     0,   115,     0,     0,
      24,   268,   406,    25,     0,   267,     0,   269,    26,   294,
      27,     0,   269,    24,    25,     0,   269,    24,   270,    25,
       0,    71,    24,   293,    21,   377,    25,     0,   269,   355,
      28,   462,   306,     0,   269,   355,    45,   462,   306,     0,
     269,    48,     0,   269,    49,     0,    24,   377,    25,    19,
     418,   460,    20,     0,   293,     0,   270,    21,   293,     0,
     269,     0,    48,   271,     0,    49,   271,     0,    29,   277,
       0,    34,   277,     0,    33,   277,     0,    32,   277,     0,
      31,   277,     0,    30,   277,     0,   274,     0,   273,     0,
     272,    28,   462,     0,   272,    26,   294,    27,     0,   462,
       0,    47,   306,    24,   377,   355,    21,   272,    25,   306,
       0,     0,   306,   275,   276,     0,    42,    24,   377,    25,
       0,    42,   271,     0,    43,    24,   377,    25,     0,    43,
     271,     0,   271,     0,    24,   377,    25,   277,     0,   277,
       0,   278,    34,   277,     0,   278,    35,   277,     0,   278,
      36,   277,     0,   278,     0,   279,    33,   278,     0,   279,
      32,   278,     0,   279,     0,   280,    50,   279,     0,   280,
      51,   279,     0,   280,     0,   281,    37,   280,     0,   281,
      38,   280,     0,   281,    52,   280,     0,   281,    53,   280,
       0,   281,     0,   282,    54,   281,     0,   282,    55,   281,
       0,   282,     0,   283,    29,   282,     0,   283,     0,   284,
      39,   283,     0,   284,     0,   285,    40,   284,     0,   285,
       0,     0,   286,    56,   287,   285,     0,   286,     0,     0,
     288,    57,   289,   286,     0,   288,     0,     0,     0,   288,
      41,   291,   294,    22,   292,   290,     0,   290,     0,   271,
      23,   293,     0,   271,    58,   293,     0,   271,    59,   293,
       0,   271,    60,   293,     0,   271,    61,   293,     0,   271,
      62,   293,     0,   271,    63,   293,     0,   271,    64,   293,
       0,   271,    65,   293,     0,   271,    66,   293,     0,   271,
      67,   293,     0,   293,     0,   294,    21,   293,     0,     0,
     294,     0,   290,     0,   298,     0,    72,     0,   304,     0,
     341,   306,    18,     0,     0,   341,   355,   365,   355,   299,
     306,   312,    18,   306,     0,     0,   341,   355,   365,   355,
      23,   300,   306,   313,   312,    18,   306,     0,   302,     0,
     194,     0,   365,   355,     0,     0,   365,   355,    23,   303,
     306,   313,     0,     0,    46,   341,   305,   355,   310,   306,
     244,    18,     0,    46,   341,   306,    18,     0,    46,   308,
     306,    18,     0,     0,     0,   309,   306,     0,   302,     0,
     308,    21,   355,   302,     0,   311,   306,     0,   301,     0,
     310,    21,   355,   301,     0,     0,   312,    21,   355,   302,
       0,   293,     0,    19,   317,    20,     0,    19,   317,    21,
      20,     0,   314,   313,     0,   315,    23,     0,   462,    22,
       0,   316,     0,   315,   316,     0,    26,   296,    27,     0,
      28,   462,     0,   313,     0,   317,    21,   313,     0,   116,
       0,   114,     0,   117,     0,   118,     0,   119,     0,   320,
      91,     0,     0,   252,   355,   321,   266,   459,   306,     0,
     324,    91,     0,   253,   355,     0,     0,   323,   330,   325,
     265,   459,   306,     0,     0,   323,   326,   327,   459,   306,
       0,   222,     0,   215,     0,   143,     0,   144,     0,   146,
       0,   147,     0,   145,     0,   128,     0,   131,     0,   129,
       0,   130,     0,   136,     0,   137,     0,   122,     0,   124,
       0,   123,     0,   132,     0,   133,     0,   125,     0,   127,
       0,   140,     0,   142,     0,   155,     0,   154,     0,   139,
       0,   141,     0,   180,     0,   190,     0,   138,     0,   153,
       0,   152,     0,   163,     0,   161,     0,   162,     0,   156,
       0,   157,     0,   158,     0,   159,     0,   160,     0,   164,
       0,   165,     0,   168,     0,   169,     0,   166,     0,   167,
       0,   151,     0,   148,     0,   149,     0,   150,     0,   120,
       0,   121,     0,   134,     0,   135,     0,   111,   306,     0,
     113,   306,     0,   112,   306,     0,   337,   306,     0,   330,
     306,     0,   328,   306,     0,   331,   306,     0,   329,   306,
       0,   333,   306,     0,   332,   306,     0,   334,   306,     0,
     335,   306,     0,   170,   355,     0,   172,   355,     0,   171,
     355,     0,   173,   355,     0,   174,   355,     0,   175,   355,
       0,   176,   355,     0,   177,   355,     0,   178,   355,     0,
     179,   355,     0,   463,   355,     0,   346,   355,     0,   360,
     355,     0,   336,   355,     0,   306,   341,   306,     0,   343,
       0,   343,    88,   342,    91,     0,   377,     0,   377,    21,
     342,     0,   318,   344,     0,   338,   344,     0,   339,   344,
       0,     0,   341,     0,     0,     0,     0,   355,    68,   462,
     306,    19,   347,   410,   356,   411,   348,    20,   345,     0,
       0,     0,   355,    69,   462,   306,    19,   349,   410,   356,
     411,   350,    20,     0,   355,    68,   462,   306,    19,    20,
       0,   355,    69,   462,   306,    19,    20,     0,     0,     0,
     355,    68,   306,    19,   351,   410,   356,   411,   352,    20,
       0,     0,     0,   355,    69,   306,    19,   353,   410,   356,
     411,   354,    20,     0,   355,    68,   306,    19,    20,     0,
     355,    69,   306,    19,    20,     0,   355,    68,   462,   355,
       0,   355,    69,   462,   355,     0,     0,   357,     0,   213,
       0,   356,   357,     0,   341,   355,   358,   306,    18,     0,
     341,   306,    18,     0,   359,   355,     0,   358,    21,   359,
     355,     0,   365,     0,    22,   306,   296,     0,   365,    22,
     306,   296,     0,   355,    70,    19,   362,    20,   306,     0,
       0,   355,    70,   462,    19,   361,   362,    20,   306,     0,
     355,    70,   462,   306,     0,   363,     0,   362,    21,   363,
       0,   362,    21,     0,   462,     0,   462,    23,   306,   296,
       0,   204,     0,   379,     0,   369,   194,     0,   369,   364,
       0,   204,     0,   369,   204,     0,   372,     0,   355,   370,
       0,   111,     0,   112,     0,   113,     0,   367,     0,   368,
     367,     0,    34,     0,    34,   368,     0,    34,   369,     0,
      34,   368,   369,     0,   371,     0,   371,    21,     5,     0,
     462,     0,   371,    21,   462,     0,     5,     0,   373,     0,
     373,    21,     5,     0,     0,   374,   376,     0,     0,   373,
      21,   375,   376,     0,   306,   341,   364,   306,     0,   462,
       0,   340,     0,   340,   378,     0,   369,     0,   380,     0,
     369,   380,     0,     0,   380,     0,   306,    24,   355,   378,
      25,     0,    26,    27,     0,    26,   296,    27,     0,   380,
      26,    27,     0,   380,    26,   296,    27,     0,   306,    24,
      25,     0,   306,    24,   372,    25,     0,   380,   306,    24,
      25,     0,   380,   306,    24,   372,    25,     0,   398,     0,
     400,     0,   403,     0,   406,     0,   421,     0,   424,     0,
     456,     0,   429,     0,   458,     0,   384,     0,   382,     0,
     391,     0,   384,   391,     0,   428,   384,     0,   455,   397,
      11,    24,   294,    25,    18,     0,   455,   397,    11,    24,
     294,    25,     0,   386,   391,     0,     0,     0,    13,    24,
     295,    18,   295,    18,   387,   295,   388,    25,     0,     0,
     192,   408,    24,   390,   432,    25,     0,   193,     0,   398,
       0,   400,     0,   403,     0,   394,   417,     0,   394,     0,
     395,     0,   421,     0,   392,     0,   385,     0,   389,     0,
     458,     0,    24,   391,    25,     0,     1,     0,     0,   423,
     393,   391,     0,   408,    19,     0,   412,    20,     0,   397,
       0,   416,     0,   398,     0,   400,     0,   403,     0,   407,
       0,   422,     0,   424,     0,   429,     0,   457,     0,    24,
     397,    25,     0,   458,     0,     1,     0,   462,    22,     0,
     110,   381,     0,     0,   101,   399,     0,     0,     6,   296,
     401,    22,     0,     0,   101,   399,     6,   296,   402,    22,
       0,     0,     7,   404,    22,     0,     0,   101,   399,     7,
     405,    22,     0,    24,   406,    25,     0,   408,   414,     0,
     408,   415,   409,     0,     0,     0,     0,     0,     0,    20,
       0,   110,    20,     0,   420,    20,     0,   420,   110,    20,
       0,   417,    20,     0,   417,   110,    20,     0,   417,   420,
      20,     0,   417,   420,   110,    20,     0,    19,   413,     0,
      19,    20,     0,    19,   416,    20,     0,    19,   417,    20,
       0,    19,   417,   420,    20,     0,   397,     0,   416,   397,
       0,   297,     0,   417,   297,     0,   419,     0,   418,    21,
     419,     0,   293,     0,    19,   418,   460,    20,     0,   381,
       0,   420,   381,     0,    18,     0,   294,    18,     0,    18,
       0,   294,    18,     0,   294,     0,     8,    24,   294,    25,
       0,   423,   381,     0,     0,   423,   381,     9,   425,   381,
       0,     0,    10,    24,   294,   426,    25,   381,     0,    11,
      24,   294,    25,     0,    11,    24,   294,    25,     0,     0,
       0,   192,   430,   408,    24,   431,   432,    25,   406,   454,
     409,     0,   434,     0,     0,   432,   433,    21,   434,     0,
     453,     0,   461,     0,   189,     0,   188,     0,   191,     0,
     435,   191,     0,   435,     0,    24,   294,    25,     0,   436,
       0,   269,    26,   294,    27,     0,   269,    24,    25,     0,
     269,    24,   270,    25,     0,    71,    24,   293,    21,   377,
      25,     0,   269,   355,    28,   462,   306,     0,   269,   355,
      45,   462,   306,     0,   269,    48,     0,   269,    49,     0,
     437,     0,    48,   271,     0,    49,   271,     0,    29,   277,
       0,    34,   277,     0,    33,   277,     0,    32,   277,     0,
      31,   277,     0,    30,   277,     0,   274,     0,   438,     0,
      24,   377,    25,   277,     0,   439,     0,   278,    34,   277,
       0,   278,    35,   277,     0,   278,    36,   277,     0,   440,
       0,   279,    33,   278,     0,   279,    32,   278,     0,   441,
       0,   280,    50,   279,     0,   280,    51,   279,     0,   442,
       0,   281,    37,   280,     0,   281,    38,   280,     0,   281,
      52,   280,     0,   281,    53,   280,     0,   443,     0,   282,
      54,   281,     0,   282,    55,   281,     0,   444,     0,   283,
      29,   282,     0,   445,     0,   284,    39,   283,     0,   446,
       0,   285,    40,   284,     0,   447,     0,   286,    56,   285,
       0,   448,     0,   288,    57,   286,     0,   449,     0,     0,
       0,   288,    41,   451,   294,    22,   452,   290,     0,   450,
       0,   271,    23,   293,     0,   271,    58,   293,     0,   271,
      59,   293,     0,   271,    60,   293,     0,   271,    61,   293,
       0,   271,    62,   293,     0,   271,    63,   293,     0,   271,
      64,   293,     0,   271,    65,   293,     0,   271,    66,   293,
       0,   271,    67,   293,     0,   193,     0,     0,    12,     0,
     427,   381,     0,   455,   381,    11,    24,   294,    25,    18,
       0,   386,   381,     0,   427,   397,     0,   455,   397,    11,
      24,   294,    25,    18,     0,   455,   397,    11,    24,   294,
      25,     0,   386,   397,     0,    14,   462,    18,     0,    15,
      18,     0,   100,    15,    18,     0,    16,    18,     0,    96,
      16,    18,     0,    97,    16,    18,     0,    98,    16,    18,
       0,    99,    16,    18,     0,    17,    18,     0,    17,   294,
      18,     0,     0,    18,     0,     0,    21,     0,   187,     0,
     188,     0,   192,     0,   193,     0,   461,     0,   189,     0,
     194,     0,   189,     0,    44,    24,   294,    25,     0,    44,
      24,   377,    25,     0
};

#endif

#if YYDEBUG
/* YYRLINE[YYN] -- source line where rule number YYN was defined. */
static const short yyrline[] =
{
       0,   325,   326,   330,   331,   335,   336,   337,   338,   339,
     340,   341,   342,   346,   348,   353,   353,   362,   368,   373,
     374,   379,   380,   382,   384,   401,   401,   419,   419,   434,
     435,   437,   441,   458,   458,   470,   470,   484,   484,   484,
     493,   494,   495,   496,   500,   504,   509,   509,   514,   514,
     522,   523,   527,   533,   534,   538,   539,   543,   549,   550,
     554,   555,   556,   560,   561,   562,   568,   569,   573,   575,
     577,   579,   588,   590,   592,   594,   611,   615,   616,   623,
     624,   633,   635,   640,   641,   642,   643,   644,   645,   649,
     650,   651,   652,   653,   654,   658,   662,   662,   671,   675,
     679,   679,   694,   696,   701,   705,   706,   710,   714,   720,
     725,   726,   730,   734,   735,   739,   740,   741,   745,   746,
     747,   748,   749,   753,   754,   755,   756,   757,   761,   762,
     766,   773,   778,   778,   784,   784,   784,   795,   806,   807,
     811,   812,   813,   814,   815,   816,   817,   818,   819,   823,
     824,   829,   830,   834,   836,   838,   839,   840,   841,   842,
     844,   849,   850,   854,   858,   871,   872,   873,   874,   875,
     876,   877,   877,   883,   884,   885,   886,   887,   888,   889,
     890,   891,   892,   897,   898,   902,   903,   904,   905,   906,
     907,   908,   909,   910,   911,   912,   916,   917,   919,   923,
     929,   929,   934,   935,   936,   937,   941,   942,   947,   948,
     949,   950,   954,   955,   956,   960,   961,   962,   966,   967,
     968,   969,   970,   974,   975,   976,   980,   981,   985,   986,
     990,   991,   995,   996,   996,  1008,  1009,  1009,  1022,  1023,
    1023,  1023,  1029,  1030,  1031,  1032,  1033,  1034,  1035,  1036,
    1037,  1038,  1039,  1040,  1044,  1045,  1049,  1050,  1054,  1060,
    1061,  1062,  1066,  1080,  1080,  1091,  1091,  1100,  1101,  1105,
    1110,  1110,  1115,  1115,  1118,  1119,  1123,  1127,  1131,  1135,
    1136,  1140,  1144,  1145,  1149,  1150,  1154,  1155,  1156,  1157,
    1165,  1166,  1171,  1172,  1176,  1177,  1181,  1183,  1193,  1194,
    1195,  1196,  1197,  1201,  1205,  1205,  1221,  1225,  1229,  1229,
    1243,  1243,  1275,  1276,  1280,  1281,  1282,  1283,  1284,  1288,
    1289,  1290,  1291,  1295,  1296,  1297,  1298,  1299,  1300,  1301,
    1302,  1303,  1304,  1305,  1306,  1307,  1308,  1309,  1310,  1311,
    1315,  1316,  1320,  1321,  1325,  1326,  1330,  1331,  1332,  1333,
    1334,  1338,  1339,  1340,  1341,  1342,  1343,  1347,  1348,  1349,
    1350,  1354,  1355,  1356,  1357,  1361,  1362,  1363,  1364,  1365,
    1366,  1367,  1368,  1369,  1370,  1371,  1372,  1380,  1381,  1382,
    1383,  1384,  1385,  1386,  1387,  1388,  1389,  1390,  1391,  1392,
    1393,  1397,  1402,  1403,  1408,  1409,  1414,  1415,  1416,  1420,
    1421,  1425,  1432,  1432,  1432,  1438,  1438,  1438,  1443,  1445,
    1447,  1447,  1447,  1452,  1452,  1452,  1457,  1459,  1461,  1462,
    1466,  1470,  1471,  1472,  1476,  1478,  1483,  1485,  1490,  1491,
    1492,  1497,  1499,  1499,  1501,  1505,  1507,  1509,  1513,  1518,
    1526,  1527,  1528,  1534,  1539,  1540,  1545,  1546,  1550,  1551,
    1552,  1556,  1557,  1561,  1562,  1563,  1564,  1568,  1569,  1573,
    1574,  1578,  1579,  1580,  1584,  1584,  1585,  1585,  1590,  1602,
    1619,  1620,  1624,  1625,  1626,  1630,  1631,  1635,  1637,  1638,
    1640,  1641,  1643,  1645,  1647,  1649,  1656,  1657,  1658,  1659,
    1660,  1661,  1662,  1663,  1664,  1669,  1673,  1677,  1678,  1683,
    1685,  1687,  1689,  1694,  1694,  1694,  1702,  1702,  1706,  1710,
    1711,  1712,  1713,  1714,  1715,  1716,  1717,  1718,  1719,  1720,
    1721,  1722,  1726,  1726,  1733,  1737,  1741,  1742,  1746,  1747,
    1748,  1749,  1750,  1751,  1752,  1753,  1754,  1755,  1756,  1760,
    1761,  1769,  1770,  1777,  1777,  1779,  1779,  1784,  1784,  1786,
    1786,  1791,  1792,  1797,  1801,  1805,  1809,  1813,  1817,  1821,
    1822,  1823,  1824,  1826,  1827,  1829,  1831,  1838,  1843,  1845,
    1847,  1849,  1854,  1855,  1859,  1860,  1864,  1865,  1869,  1870,
    1874,  1875,  1879,  1880,  1884,  1885,  1886,  1890,  1904,  1909,
    1909,  1914,  1914,  1919,  1925,  1929,  1929,  1929,  1940,  1941,
    1941,  1946,  1947,  1948,  1959,  1967,  1968,  1972,  1973,  1977,
    1978,  1979,  1980,  1981,  1983,  1984,  1985,  1986,  1990,  1991,
    1992,  1993,  1994,  1995,  1996,  1997,  1998,  1999,  2003,  2004,
    2008,  2009,  2010,  2011,  2015,  2016,  2017,  2021,  2022,  2023,
    2027,  2028,  2029,  2030,  2031,  2035,  2036,  2037,  2041,  2042,
    2046,  2047,  2051,  2052,  2056,  2057,  2061,  2062,  2066,  2067,
    2067,  2067,  2073,  2074,  2075,  2076,  2077,  2078,  2079,  2080,
    2081,  2082,  2083,  2084,  2088,  2089,  2093,  2097,  2099,  2101,
    2106,  2107,  2109,  2111,  2115,  2116,  2117,  2119,  2120,  2121,
    2122,  2123,  2124,  2125,  2129,  2130,  2134,  2135,  2139,  2143,
    2144,  2145,  2146,  2147,  2151,  2152,  2153,  2154
};
#endif


#if (YYDEBUG) || defined YYERROR_VERBOSE

/* YYTNAME[TOKEN_NUM] -- String name of the token TOKEN_NUM. */
static const char *const yytname[] =
{
  "$", "error", "$undefined.", "BADTOK", "SKIPTOK", "CTOK_ELIPSIS", "CASE", 
  "DEFAULT", "CIF", "CELSE", "SWITCH", "WHILE", "DO", "CFOR", "GOTO", 
  "CONTINUE", "BREAK", "RETURN", "TSEMI", "TLBRACE", "TRBRACE", "TCOMMA", 
  "TCOLON", "TASSIGN", "TLPAREN", "TRPAREN", "TLSQBR", "TRSQBR", "TDOT", 
  "TAMPERSAND", "TEXCL", "TTILDE", "TMINUS", "TPLUS", "TMULT", "TDIV", 
  "TPERCENT", "TLT", "TGT", "TCIRC", "TBAR", "TQUEST", "CSIZEOF", 
  "CALIGNOF", "CTYPEOF", "ARROW_OP", "CTYPEDEF", "COFFSETOF", "INC_OP", 
  "DEC_OP", "LEFT_OP", "RIGHT_OP", "LE_OP", "GE_OP", "EQ_OP", "NE_OP", 
  "AND_OP", "OR_OP", "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
  "ADD_ASSIGN", "SUB_ASSIGN", "LEFT_ASSIGN", "RIGHT_ASSIGN", "AND_ASSIGN", 
  "XOR_ASSIGN", "OR_ASSIGN", "CSTRUCT", "CUNION", "CENUM", "VA_ARG", 
  "VA_DCL", "QWARN", "QGLOBALS", "QMODIFIES", "QNOMODS", "QCONSTANT", 
  "QFUNCTION", "QITER", "QDEFINES", "QUSES", "QALLOCATES", "QSETS", 
  "QRELEASES", "QPRECLAUSE", "QPOSTCLAUSE", "QINVARIANT", "QALT", 
  "QUNDEF", "QKILLED", "QENDMACRO", "LLMACRO", "LLMACROITER", 
  "LLMACROEND", "TENDMACRO", "QSWITCHBREAK", "QLOOPBREAK", "QINNERBREAK", 
  "QSAFEBREAK", "QINNERCONTINUE", "QFALLTHROUGH", "QLINTNOTREACHED", 
  "QLINTFALLTHROUGH", "QLINTFALLTHRU", "QARGSUSED", "QPRINTFLIKE", 
  "QLINTPRINTFLIKE", "QSCANFLIKE", "QMESSAGELIKE", "QNOTREACHED", 
  "QCONST", "QRESTRICT", "QVOLATILE", "QINLINE", "QEXTENSION", "QEXTERN", 
  "QSTATIC", "QAUTO", "QREGISTER", "QOUT", "QIN", "QYIELD", "QONLY", 
  "QTEMP", "QSHARED", "QREF", "QUNIQUE", "QCHECKED", "QUNCHECKED", 
  "QCHECKEDSTRICT", "QCHECKMOD", "QKEEP", "QKEPT", "QPARTIAL", "QSPECIAL", 
  "QOWNED", "QDEPENDENT", "QRETURNED", "QEXPOSED", "QNULL", "QOBSERVER", 
  "QISNULL", "QEXITS", "QMAYEXIT", "QNEVEREXIT", "QTRUEEXIT", 
  "QFALSEEXIT", "QLONG", "QSIGNED", "QUNSIGNED", "QSHORT", "QUNUSED", 
  "QSEF", "QNOTNULL", "QRELNULL", "QABSTRACT", "QNUMABSTRACT", 
  "QCONCRETE", "QMUTABLE", "QIMMUTABLE", "QTRUENULL", "QFALSENULL", 
  "QEXTERNAL", "QREFCOUNTED", "QREFS", "QNEWREF", "QTEMPREF", "QKILLREF", 
  "QRELDEF", "CGCHAR", "CBOOL", "CINT", "CGFLOAT", "CDOUBLE", "CVOID", 
  "QANYTYPE", "QINTEGRALTYPE", "QUNSIGNEDINTEGRALTYPE", 
  "QSIGNEDINTEGRALTYPE", "QNULLTERMINATED", "QSETBUFFERSIZE", 
  "QSETSTRINGLENGTH", "QMAXSET", "QMAXREAD", "QTESTINRANGE", "TCAND", 
  "IDENTIFIER", "NEW_IDENTIFIER", "TYPE_NAME_OR_ID", "CANNOTATION", 
  "CCONSTANT", "ITER_NAME", "ITER_ENDNAME", "TYPE_NAME", "METASTATE_NAME", 
  "file", "externalDefs", "externalDef", "constantDecl", "fcnDecl", "@1", 
  "plainFcn", "plainNamedDecl", "namedDeclBase", "@2", "@3", 
  "plainNamedDeclBase", "@4", "@5", "iterDecl", "@6", "@7", "macroDef", 
  "fcnDefHdr", "metaStateConstraint", "metaStateSpecifier", "@8", "@9", 
  "metaStateExpression", "metaStateName", "constraintSeperator", 
  "BufConstraintList", "BufConstraint", "bufferModifier", "relationalOp", 
  "BufConstraintExpr", "BufConstraintTerm", "BufConstraintSrefExpr", 
  "BufUnaryOp", "BufBinaryOp", "functionClauses", "functionClausesPlain", 
  "functionClause", "functionClausePlain", "globalsClause", 
  "globalsClausePlain", "@10", "nomodsClause", "modifiesClause", 
  "modifiesClausePlain", "@11", "flagSpec", "flagId", "optWarnClause", 
  "warnClause", "warnClausePlain", "globIdList", "globIdListExpr", 
  "optGlobQuals", "globId", "globQual", "stateTag", "conditionTag", 
  "fcnDefHdrAux", "fcnBody", "@12", "@13", "@14", "fcnDef", "locModifies", 
  "modListExpr", "mExpr", "modList", "specClauseListExpr", 
  "optSpecClauseList", "specClauseList", "primaryExpr", "@15", 
  "postfixExpr", "argumentExprList", "unaryExpr", "fieldDesignator", 
  "offsetofExpr", "sizeofExpr", "@16", "sizeofExprAux", "castExpr", 
  "timesExpr", "plusExpr", "shiftExpr", "relationalExpr", "equalityExpr", 
  "bitandExpr", "xorExpr", "bitorExpr", "andExpr", "@17", "orExpr", "@18", 
  "conditionalExpr", "@19", "@20", "assignExpr", "expr", "optExpr", 
  "constantExpr", "initializer", "instanceDecl", "@21", "@22", 
  "namedInitializerType", "namedInitializer", "@23", "typeDecl", "@24", 
  "IsType", "PushType", "namedInitializerList", "namedInitializerListAux", 
  "namedInitializerTypeList", "namedInitializerTypeListAux", 
  "optDeclarators", "init", "designation", "designatorList", "designator", 
  "initList", "storageSpecifier", "stateClause", "stateClausePlain", 
  "@25", "conditionClause", "startConditionClause", 
  "conditionClausePlain", "@26", "@27", "functionConstraint", 
  "exitsQualifier", "checkQualifier", "stateQualifier", "paramQualifier", 
  "visibilityQualifier", "returnQualifier", "typedefQualifier", 
  "refcountQualifier", "typeModifier", "definedQualifier", 
  "typeQualifier", "typeSpecifier", "completeType", 
  "completeTypeSpecifier", "altType", "completeTypeSpecifierAux", 
  "optCompleteType", "optStructInvariant", "suSpc", "@28", "@29", "@30", 
  "@31", "@32", "@33", "@34", "@35", "NotType", "structDeclList", 
  "structDecl", "structNamedDeclList", "structNamedDecl", "enumSpc", 
  "@36", "enumeratorList", "enumerator", "optNamedDecl", "namedDecl", 
  "genericParamList", "innerMods", "innerModsList", "pointers", 
  "paramIdList", "idList", "paramTypeList", "paramList", "@37", "@38", 
  "paramDecl", "typeExpression", "abstractDecl", "optAbstractDeclBase", 
  "abstractDeclBase", "stmt", "iterBody", "endBody", "iterDefStmtList", 
  "iterDefIterationStmt", "forPred", "@39", "@40", "partialIterStmt", 
  "@41", "iterDefStmt", "iterSelectionStmt", "@42", "openScope", 
  "closeScope", "macroBody", "stmtErr", "labeledStmt", 
  "optExtraFallThroughs", "caseStmt", "@43", "@44", "defaultStmt", "@45", 
  "@46", "compoundStmt", "compoundStmtErr", "CreateInnerScope", 
  "DeleteInnerScope", "CreateStructInnerScope", "DeleteStructInnerScope", 
  "DeleteInnerScopeSafe", "compoundStmtRest", "compoundStmtAux", 
  "compoundStmtAuxErr", "stmtListErr", "initializerList", 
  "typeInitializerList", "typeInitializer", "stmtList", "expressionStmt", 
  "expressionStmtErr", "ifPred", "selectionStmt", "@47", "@48", 
  "whilePred", "iterWhilePred", "iterStmt", "@49", "@50", "iterArgList", 
  "@51", "iterArgExpr", "cconstantExpr", "primaryIterExpr", 
  "postfixIterExpr", "unaryIterExpr", "castIterExpr", "timesIterExpr", 
  "plusIterExpr", "shiftIterExpr", "relationalIterExpr", 
  "equalityIterExpr", "bitandIterExpr", "xorIterExpr", "bitorIterExpr", 
  "andIterExpr", "orIterExpr", "conditionalIterExpr", "@52", "@53", 
  "assignIterExpr", "endIter", "doHeader", "iterationStmt", 
  "iterationStmtErr", "jumpStmt", "optSemi", "optComma", "id", "newId", 
  "typeName", 0
};
#endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives. */
static const short yyr1[] =
{
       0,   196,   196,   197,   197,   198,   198,   198,   198,   198,
     198,   198,   198,   199,   199,   201,   200,   202,   202,   203,
     203,   204,   204,   204,   204,   205,   204,   206,   204,   207,
     207,   207,   207,   208,   207,   209,   207,   211,   212,   210,
     213,   213,   213,   213,   214,   215,   217,   216,   218,   216,
     219,   219,   220,   221,   221,   222,   222,   223,   224,   224,
     225,   225,   225,   226,   226,   226,   227,   227,   228,   228,
     228,   228,   228,   228,   228,   228,   229,   230,   230,   231,
     231,   232,   232,   233,   233,   233,   233,   233,   233,   234,
     234,   234,   234,   234,   234,   235,   237,   236,   238,   239,
     241,   240,   242,   242,   243,   244,   244,   245,   246,   246,
     247,   247,   248,   249,   249,   250,   250,   250,   251,   251,
     251,   251,   251,   252,   252,   252,   252,   252,   253,   253,
     254,   254,   256,   255,   257,   258,   255,   259,   260,   260,
     261,   261,   261,   261,   261,   261,   261,   261,   261,   262,
     262,   263,   263,   264,   264,   264,   264,   264,   264,   264,
     264,   265,   265,   266,   266,   267,   267,   267,   267,   267,
     267,   268,   267,   269,   269,   269,   269,   269,   269,   269,
     269,   269,   269,   270,   270,   271,   271,   271,   271,   271,
     271,   271,   271,   271,   271,   271,   272,   272,   272,   273,
     275,   274,   276,   276,   276,   276,   277,   277,   278,   278,
     278,   278,   279,   279,   279,   280,   280,   280,   281,   281,
     281,   281,   281,   282,   282,   282,   283,   283,   284,   284,
     285,   285,   286,   287,   286,   288,   289,   288,   290,   291,
     292,   290,   293,   293,   293,   293,   293,   293,   293,   293,
     293,   293,   293,   293,   294,   294,   295,   295,   296,   297,
     297,   297,   298,   299,   298,   300,   298,   301,   301,   302,
     303,   302,   305,   304,   304,   304,   306,   307,   308,   309,
     309,   310,   311,   311,   312,   312,   313,   313,   313,   313,
     314,   314,   315,   315,   316,   316,   317,   317,   318,   318,
     318,   318,   318,   319,   321,   320,   322,   323,   325,   324,
     326,   324,   327,   327,   328,   328,   328,   328,   328,   329,
     329,   329,   329,   330,   330,   330,   330,   330,   330,   330,
     330,   330,   330,   330,   330,   330,   330,   330,   330,   330,
     331,   331,   332,   332,   333,   333,   334,   334,   334,   334,
     334,   335,   335,   335,   335,   335,   335,   336,   336,   336,
     336,   337,   337,   337,   337,   338,   338,   338,   338,   338,
     338,   338,   338,   338,   338,   338,   338,   339,   339,   339,
     339,   339,   339,   339,   339,   339,   339,   339,   339,   339,
     339,   340,   341,   341,   342,   342,   343,   343,   343,   344,
     344,   345,   347,   348,   346,   349,   350,   346,   346,   346,
     351,   352,   346,   353,   354,   346,   346,   346,   346,   346,
     355,   356,   356,   356,   357,   357,   358,   358,   359,   359,
     359,   360,   361,   360,   360,   362,   362,   362,   363,   363,
     364,   364,   364,   364,   365,   365,   366,   366,   367,   367,
     367,   368,   368,   369,   369,   369,   369,   370,   370,   371,
     371,   372,   372,   372,   374,   373,   375,   373,   376,   376,
     377,   377,   378,   378,   378,   379,   379,   380,   380,   380,
     380,   380,   380,   380,   380,   380,   381,   381,   381,   381,
     381,   381,   381,   381,   381,   382,   383,   384,   384,   385,
     385,   385,   385,   387,   388,   386,   390,   389,   389,   391,
     391,   391,   391,   391,   391,   391,   391,   391,   391,   391,
     391,   391,   393,   392,   394,   395,   396,   396,   397,   397,
     397,   397,   397,   397,   397,   397,   397,   397,   397,   398,
     398,   399,   399,   401,   400,   402,   400,   404,   403,   405,
     403,   406,   406,   407,   408,   409,   410,   411,   412,   413,
     413,   413,   413,   413,   413,   413,   413,   414,   415,   415,
     415,   415,   416,   416,   417,   417,   418,   418,   419,   419,
     420,   420,   421,   421,   422,   422,   422,   423,   424,   425,
     424,   426,   424,   427,   428,   430,   431,   429,   432,   433,
     432,   434,   434,   434,   434,   435,   435,   436,   436,   437,
     437,   437,   437,   437,   437,   437,   437,   437,   438,   438,
     438,   438,   438,   438,   438,   438,   438,   438,   439,   439,
     440,   440,   440,   440,   441,   441,   441,   442,   442,   442,
     443,   443,   443,   443,   443,   444,   444,   444,   445,   445,
     446,   446,   447,   447,   448,   448,   449,   449,   450,   451,
     452,   450,   453,   453,   453,   453,   453,   453,   453,   453,
     453,   453,   453,   453,   454,   454,   455,   456,   456,   456,
     457,   457,   457,   457,   458,   458,   458,   458,   458,   458,
     458,   458,   458,   458,   459,   459,   460,   460,   461,   462,
     462,   462,   462,   462,   463,   463,   463,   463
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN. */
static const short yyr2[] =
{
       0,     0,     1,     1,     2,     2,     1,     1,     1,     1,
       1,     1,     1,     8,    11,     0,     5,     1,     3,     1,
       2,     1,     6,     3,     6,     0,     6,     0,     7,     1,
       6,     3,     6,     0,     6,     0,     7,     0,     0,    10,
       3,     3,     3,     2,     1,     3,     0,     4,     0,     4,
       1,     3,     1,     1,     1,     3,     1,     3,     1,     1,
       1,     1,     1,     1,     4,     5,     1,     1,     1,     1,
       3,     4,     2,     3,     3,     3,     1,     1,     1,     0,
       2,     0,     2,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     0,     4,     1,     2,
       0,     3,     1,     3,     1,     1,     0,     2,     3,     2,
       1,     3,     2,     0,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     0,     3,     0,     0,     4,     2,     2,     1,
       1,     1,     1,     3,     4,     2,     3,     3,     3,     1,
       1,     1,     3,     1,     1,     3,     4,     2,     3,     3,
       3,     0,     1,     1,     3,     1,     1,     1,     3,     1,
       1,     0,     4,     1,     4,     3,     4,     6,     5,     5,
       2,     2,     7,     1,     3,     1,     2,     2,     2,     2,
       2,     2,     2,     2,     1,     1,     3,     4,     1,     9,
       0,     3,     4,     2,     4,     2,     1,     4,     1,     3,
       3,     3,     1,     3,     3,     1,     3,     3,     1,     3,
       3,     3,     3,     1,     3,     3,     1,     3,     1,     3,
       1,     3,     1,     0,     4,     1,     0,     4,     1,     0,
       0,     7,     1,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     1,     3,     0,     1,     1,     1,
       1,     1,     3,     0,     9,     0,    11,     1,     1,     2,
       0,     6,     0,     8,     4,     4,     0,     0,     2,     1,
       4,     2,     1,     4,     0,     4,     1,     3,     4,     2,
       2,     2,     1,     2,     3,     2,     1,     3,     1,     1,
       1,     1,     1,     2,     0,     6,     2,     2,     0,     6,
       0,     5,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     3,     1,     4,     1,     3,     2,     2,     2,     0,
       1,     0,     0,     0,    12,     0,     0,    11,     6,     6,
       0,     0,    10,     0,     0,    10,     5,     5,     4,     4,
       0,     1,     1,     2,     5,     3,     2,     4,     1,     3,
       4,     6,     0,     8,     4,     1,     3,     2,     1,     4,
       1,     1,     2,     2,     1,     2,     1,     2,     1,     1,
       1,     1,     2,     1,     2,     2,     3,     1,     3,     1,
       3,     1,     1,     3,     0,     2,     0,     4,     4,     1,
       1,     2,     1,     1,     2,     0,     1,     5,     2,     3,
       3,     4,     3,     4,     4,     5,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     2,
       7,     6,     2,     0,     0,    10,     0,     6,     1,     1,
       1,     1,     2,     1,     1,     1,     1,     1,     1,     1,
       3,     1,     0,     3,     2,     2,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     3,     1,     1,     2,
       2,     0,     2,     0,     4,     0,     6,     0,     3,     0,
       5,     3,     2,     3,     0,     0,     0,     0,     0,     1,
       2,     2,     3,     2,     3,     3,     4,     2,     2,     3,
       3,     4,     1,     2,     1,     2,     1,     3,     1,     4,
       1,     2,     1,     2,     1,     2,     1,     4,     2,     0,
       5,     0,     6,     4,     4,     0,     0,    10,     1,     0,
       4,     1,     1,     1,     1,     1,     2,     1,     3,     1,
       4,     3,     4,     6,     5,     5,     2,     2,     1,     2,
       2,     2,     2,     2,     2,     2,     2,     1,     1,     4,
       1,     3,     3,     3,     1,     3,     3,     1,     3,     3,
       1,     3,     3,     3,     3,     1,     3,     3,     1,     3,
       1,     3,     1,     3,     1,     3,     1,     3,     1,     0,
       0,     7,     1,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     1,     0,     1,     2,     7,     2,
       2,     7,     6,     2,     3,     2,     3,     2,     3,     3,
       3,     3,     2,     3,     0,     1,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     4,     4
};

/* YYDEFACT[S] -- default rule to reduce with in state S when YYTABLE
   doesn't specify something else to do.  Zero means the default is an
   error. */
static const short yydefact[] =
{
       0,    12,    11,   453,     0,   420,   260,   420,    15,     0,
       0,     0,     0,   276,   276,   276,   299,   298,   300,   301,
     302,   361,   362,   325,   327,   326,   330,   331,   319,   321,
     322,   320,   328,   329,   363,   364,   323,   324,   340,   336,
     332,   337,   333,   314,   315,   318,   316,   317,   358,   359,
     360,   357,   342,   341,   335,   334,   346,   347,   348,   349,
     350,   344,   345,   343,   351,   352,   355,   356,   353,   354,
     420,   420,   420,   420,   420,   420,   420,   420,   420,   420,
     338,   698,   699,   703,   339,   700,   701,   704,     0,     3,
       6,     7,   444,     8,     9,   134,    44,   694,    10,   259,
     261,     0,   399,   276,   276,   276,   276,   276,   276,   276,
     276,   420,   276,   399,   399,   420,   392,   420,     0,   420,
     130,   276,   702,    21,   420,   448,   449,   450,   451,   454,
     455,   276,   279,   276,   276,   272,   420,   705,   420,   420,
     703,     0,   538,   276,   547,     0,     0,     0,   676,     0,
       0,     0,     0,   276,   584,     0,   276,   276,   276,   276,
     276,   276,   276,   276,   276,     0,    43,     0,     0,     0,
       0,     0,   541,   276,   170,   166,   169,   605,   595,   173,
     185,   206,   195,   194,   208,   212,   215,   218,   223,   226,
     228,   230,   232,   235,   238,   242,   254,   586,   200,     0,
       0,   572,   528,   529,   530,   531,     0,     0,   532,   276,
     533,     0,   534,   167,     0,   535,   537,   165,     0,   521,
       0,   582,     0,   554,   508,     0,     0,     0,   517,     0,
     518,   497,   516,   513,   514,   509,   510,   511,     0,     0,
     515,   522,     0,     0,   519,   496,     0,   365,   367,   366,
     377,   379,   378,   380,   381,   382,   383,   384,   385,   386,
       4,   276,     0,   132,   137,   420,   695,     5,   420,   400,
     396,   370,   372,   369,   371,   374,   373,   375,   376,   390,
     368,   397,   398,     0,   276,   276,   388,   276,   276,     0,
     389,   445,   387,   452,   456,   276,   166,   169,     0,   420,
     470,     0,   165,   420,     0,   278,   420,     0,   269,   276,
     694,    17,    19,     0,   420,   276,    29,   464,   206,   258,
     543,     0,   276,   276,   276,   276,     0,   685,   687,   692,
       0,   554,     0,     0,     0,   188,   193,   192,   191,   190,
     189,     0,   276,   186,   187,   276,     0,     0,     0,     0,
       0,   541,     0,   276,   540,   276,   486,   487,   488,   489,
       0,   490,   491,   276,   493,   276,   492,   494,   554,   276,
     276,   180,   181,     0,   276,   276,   276,   276,   276,   276,
     276,   276,   276,   276,   276,   276,   276,   276,   276,   276,
     276,   276,   276,   276,   276,   276,   276,   276,   276,   276,
     276,   233,   239,   236,   585,   276,     0,   683,    40,     0,
     555,   573,   588,   680,   606,     0,   539,   276,     0,     0,
       0,   583,    41,   498,   502,   574,   420,   512,   524,   525,
       0,     0,     0,    42,    23,   276,   464,   420,   420,   276,
     262,   131,   420,     0,   394,     0,   420,     0,   420,     0,
     276,     0,   706,   276,   276,     0,   472,   471,   473,   707,
     276,   275,   276,   274,   270,   420,     0,   276,     0,   420,
     276,    20,   461,     0,     0,   446,   462,   276,     0,   548,
       0,   591,     0,   257,     0,   684,   693,   554,     0,   168,
     276,   536,   276,     0,     0,   688,   689,   690,   691,   686,
     542,   276,   549,     0,   679,   420,   552,   677,     0,     0,
     175,     0,   183,     0,     0,     0,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   209,   210,   211,
     214,   213,   216,   217,   219,   220,   221,   222,   224,   225,
     227,   229,   231,   276,   276,   276,   255,   276,   276,   201,
     568,   705,   572,     0,   420,   553,   589,     0,     0,   520,
     506,   276,   575,   523,     0,     0,    25,     0,   559,   276,
     580,   133,   420,   276,   554,   276,   263,   393,   276,   410,
       0,   418,   413,     0,   419,     0,   435,   438,   432,   434,
     391,   478,     0,   464,   474,   276,     0,   280,   268,   282,
     267,   276,   276,   276,   694,    16,    31,   276,   464,   276,
      18,   447,   457,   459,    37,   466,   420,   465,   469,   544,
     587,     0,   593,   276,   172,   276,   207,   420,     0,   276,
     545,     0,   551,   567,     0,   596,   276,   176,   174,   276,
     276,   234,     0,   237,   276,   203,   276,   205,   569,   570,
     276,   276,   276,   594,   276,   420,   276,   420,    79,    27,
     560,   563,   276,   276,   561,   276,   581,   136,     0,   265,
     276,   395,   416,   556,   402,   417,   556,   405,   276,   437,
     276,     0,   479,   482,   276,     0,   480,     0,   464,   420,
     106,   281,   276,   276,   276,     0,    33,     0,   276,     0,
      81,   463,   276,   475,   276,     0,   276,   578,   696,   576,
       0,     0,     0,   550,   276,   276,   184,   178,   179,   240,
       0,     0,   571,   590,     0,   276,   276,   276,   276,   276,
     276,   276,   276,   276,     0,   166,   169,   185,   206,   194,
     212,   215,   218,   223,   226,   228,   230,   232,   235,     0,
     599,   598,   167,   609,   618,   628,   630,   634,   637,   640,
     645,   648,   650,   652,   654,   656,   658,   662,   601,   165,
       0,    24,     0,    96,   100,    98,   123,   124,   125,   126,
     127,   128,   129,    26,    79,    83,     0,    85,    84,     0,
      88,     0,   420,   420,    86,     0,    87,   310,     0,    79,
     564,   565,   276,   562,    22,   276,   284,   420,   408,   556,
     420,   409,   556,   431,   436,   276,     0,     0,   483,   481,
     484,     0,   276,     0,   105,   276,   276,     0,   286,   271,
     276,     0,   292,     0,   276,     0,   420,    81,    35,     0,
     458,   460,    38,    81,    89,    91,    90,    94,    92,    93,
     467,   440,     0,   276,   475,   441,   476,   592,   503,   696,
     276,     0,     0,   177,   546,     0,   599,   276,   202,   204,
     682,     0,     0,   188,   193,   192,   191,   190,   189,   186,
     187,   276,   276,   276,   180,   181,     0,   276,   276,   276,
     276,   276,   276,   276,   276,   276,   276,   276,   276,   276,
     276,   276,   276,   276,   276,   276,   276,   276,   276,   276,
     276,   276,   276,   276,   233,   659,   236,   507,     0,   501,
     104,   109,   102,   113,   694,    80,    95,    99,   107,   304,
     307,   303,     0,   308,   306,    28,   566,   276,     0,   422,
     420,   420,   421,   420,   420,   420,   439,   276,   477,   485,
     283,   273,   296,     0,     0,   295,   289,   290,   293,   291,
     284,    13,    32,    34,    81,    30,   694,    82,   464,   468,
     442,   443,   276,     0,   577,   182,     0,   198,     0,   554,
     241,   681,   168,   276,     0,   175,     0,     0,     0,     0,
     663,   664,   665,   666,   667,   668,   669,   670,   671,   672,
     673,   209,   210,   211,   214,   213,   216,   217,   219,   220,
     221,   222,   224,   225,   227,   229,   231,   655,   276,   657,
     276,   500,   108,     0,   118,   119,   120,   121,   122,   694,
     110,   420,   113,     0,     0,   141,   142,   101,   151,   694,
     139,   140,     0,    48,     0,     0,    58,    59,    69,    67,
     313,     0,   312,    56,    76,     0,    63,    66,     0,   694,
      68,   161,   284,   276,   420,     0,   276,   423,   411,   420,
     414,   420,   433,   287,   276,   294,   694,    36,     0,   276,
     504,   579,   276,   276,     0,   678,   675,   207,   276,   176,
     174,   276,   276,     0,   600,   103,   113,    97,   116,   112,
     117,   115,   114,     0,   145,     0,     0,     0,     0,   138,
       0,     0,   154,   163,   694,   153,     0,     0,    66,     0,
      72,     0,    54,    53,     0,    61,    60,    62,     0,     0,
       0,     0,     0,     0,   276,   694,   162,     0,   264,   276,
     425,   276,   276,   420,   428,     0,   403,     0,   406,   288,
     297,     0,    39,   276,     0,   199,     0,   196,   674,   555,
       0,   178,   179,   660,   111,   146,   143,   149,     0,   150,
     147,   148,   152,     0,   157,     0,     0,     0,     0,   276,
       0,    78,    77,     0,    73,     0,    50,    45,    46,    55,
      66,    57,    70,     0,    74,    75,     0,     0,   311,   276,
     276,   285,   276,   276,     0,   426,   276,   412,     0,   415,
       0,    14,   505,   197,   597,   177,   276,   144,   158,   155,
       0,   159,   160,   164,   305,    52,    49,     0,     0,    71,
      47,    64,   309,   266,   429,   420,   424,   276,   401,   407,
     661,   156,    65,    51,   427,   430,   404,     0,     0,     0
};

static const short yydefgoto[] =
{
    1247,    88,    89,    90,    91,   139,   310,   311,    92,   658,
     799,   312,   837,   964,    93,   700,   966,   939,    95,  1050,
    1186,  1132,  1116,  1187,  1226,  1124,  1052,  1053,  1054,  1128,
    1055,  1056,  1190,  1058,  1183,   783,   842,   784,   843,   785,
     844,   923,   845,   788,   846,   924,   921,   922,   823,   790,
     791,  1029,  1030,  1031,  1099,  1032,   792,   793,    96,   264,
     437,   265,   574,    97,  1037,  1167,  1168,  1039,  1113,  1135,
    1114,   179,   331,   180,   511,   181,   976,   182,   183,   406,
     549,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   543,   194,   545,   195,   544,   867,   196,   225,   484,
     320,   425,    99,   670,   805,   599,   600,   603,   100,   306,
     198,   262,   133,   134,   601,   602,   938,   829,   830,   831,
     832,   953,   102,   794,   848,  1042,   796,   797,   849,  1061,
     932,  1059,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   300,   426,   443,   116,   270,  1246,
     117,   809,  1208,   812,  1210,   673,  1145,   676,  1147,   118,
     941,   942,  1142,  1143,   119,   681,   585,   586,   853,   136,
     474,   128,   129,   121,   611,   612,   475,   476,   477,   702,
     617,   333,   817,   855,   458,   354,   226,   246,   227,   228,
     355,   972,  1154,   230,   654,   231,   232,   430,   233,   234,
     200,   411,   356,   352,   357,   478,   712,   358,   321,   631,
     359,   205,   360,   555,   807,  1068,   239,   571,   506,   410,
     207,   572,   708,   709,   573,   361,   208,   209,   362,   651,
     621,   363,   242,   364,   368,   715,   750,   918,   751,   213,
     753,   754,   755,   756,   757,   758,   759,   760,   761,   762,
     763,   764,   765,   766,   767,  1018,  1216,   768,  1159,   365,
     366,   215,   367,   267,   861,   302,   218,   124
};

static const short yypact[] =
{
    2083,-32768,-32768,    36,    34,  5460,-32768,  6775,-32768,   759,
    3247,  3669,  3669,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,   305,-32768,-32768,-32768,-32768,  2264,-32768,
  -32768,-32768,   300,-32768,-32768,    80,-32768,    90,-32768,-32768,
  -32768,    95,  6364,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,  6364,  6364,   151,   114,-32768,   406,-32768,
  -32768,   759,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    36,
  -32768,  5706,-32768,   159,-32768,   151,-32768,-32768,-32768,  5460,
  -32768,   188,-32768,  5706,-32768,   195,   206,   230,-32768,   251,
     759,   285,   318,   925,-32768,  2648,  5706,  5706,  5706,  5706,
    5706,  5706,-32768,  5738,  5738,   320,-32768,   341,   364,   370,
     392,   403,   321,  4946,-32768,   423,   441,-32768,   462,-32768,
     825,  1387,-32768,-32768,-32768,   682,   108,   190,   615,   296,
     472,   452,   467,   457,   127,-32768,-32768,   111,-32768,  3775,
     430,   446,-32768,-32768,-32768,-32768,   499,  3353,-32768,  4946,
  -32768,  3775,-32768,   355,  3775,-32768,-32768,   541,   570,-32768,
     600,-32768,  2842,   462,   617,   432,   563,  3458,-32768,  3669,
  -32768,-32768,-32768,  6090,-32768,-32768,-32768,-32768,   686,   704,
  -32768,-32768,  3669,  3775,-32768,-32768,   646,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,   716,   724,-32768,-32768,  6638,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,   739,   861,-32768,-32768,   759,   759,   254,
  -32768,   300,-32768,-32768,-32768,  3413,-32768,-32768,   106,  5953,
     221,   740,-32768,-32768,   749,-32768,-32768,   761,   754,   861,
      90,-32768,   338,   775,-32768,   759,-32768,   160,-32768,-32768,
  -32768,   787,  5706,  5706,  5706,  1979,   771,-32768,-32768,-32768,
     589,   797,   265,   786,   798,-32768,-32768,-32768,-32768,-32768,
  -32768,   804,  3413,-32768,-32768,  5706,   828,   832,   840,   850,
     863,   321,   426,  3624,-32768,  4946,-32768,-32768,-32768,-32768,
     833,-32768,-32768,  4946,-32768,  4946,-32768,-32768,-32768,  5631,
    5706,-32768,-32768,    41,  5706,  5706,  5706,  5706,  5706,  5706,
    5706,  5706,  5706,  5706,  5706,  5706,  5706,  5706,  5706,  5706,
    5706,  5706,  5706,  5706,  5706,  5706,  5706,  5706,  5706,  5706,
    5706,-32768,-32768,-32768,-32768,  5706,   360,-32768,-32768,  2454,
  -32768,-32768,   884,-32768,-32768,   923,-32768,  5706,   498,   920,
     929,-32768,-32768,-32768,-32768,-32768,   151,  6090,-32768,-32768,
    3669,  3141,   953,-32768,-32768,  5706,   113,  3881,  5029,   861,
  -32768,   580,  6775,   928,   964,   968,  1038,  1058,  1038,   759,
    1070,   256,-32768,-32768,  5642,  1027,   654,-32768,   671,-32768,
     861,-32768,  1044,-32768,-32768,-32768,  1007,  1082,  1071,-32768,
     861,   338,-32768,   759,  1090,-32768,  1102,   759,  1100,-32768,
     358,  1105,   444,  1105,  1114,-32768,-32768,   797,  1109,-32768,
    5357,-32768,-32768,  1110,  1116,-32768,-32768,-32768,-32768,-32768,
  -32768,  5706,-32768,  1113,-32768,  3881,-32768,-32768,  1129,  1120,
  -32768,   464,-32768,   292,   759,   759,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
     682,   682,   108,   108,   190,   190,   190,   190,   615,   615,
     296,   472,   452,  5706,  5706,  5706,-32768,  5764,  5842,-32768,
  -32768,  3036,-32768,  3564,  4070,-32768,-32768,  1123,   481,-32768,
  -32768,   861,-32768,-32768,  1132,  1125,-32768,  1134,-32768,  4448,
  -32768,-32768,  4259,  4493,   797,-32768,  1139,-32768,-32768,  1137,
    1146,-32768,  1148,  1152,-32768,   536,-32768,  1163,-32768,-32768,
  -32768,-32768,  1161,   936,   671,  5674,  1165,-32768,-32768,-32768,
  -32768,  1169,-32768,-32768,   149,-32768,-32768,  5706,   581,   861,
  -32768,-32768,  1170,-32768,-32768,  1187,  6775,-32768,-32768,-32768,
  -32768,  1168,-32768,  1979,-32768,  5378,-32768,-32768,  1175,-32768,
  -32768,  1174,-32768,-32768,  1173,-32768,  5706,-32768,-32768,-32768,
  -32768,   467,   555,   457,  3413,-32768,  3413,-32768,-32768,-32768,
    4599,  4946,  5706,-32768,  5872,-32768,  5706,-32768,  1607,-32768,
  -32768,-32768,  4644,  4750,-32768,  4795,-32768,-32768,  1177,-32768,
  -32768,-32768,-32768,-32768,  1178,-32768,-32768,  1185,-32768,   759,
  -32768,   759,-32768,-32768,    64,  1182,-32768,  1183,    86,-32768,
    1136,-32768,  1868,-32768,-32768,  1184,-32768,  1194,-32768,   223,
    1607,-32768,   759,   790,  4946,  1196,  5378,-32768,  1191,-32768,
    1197,  1200,  1207,-32768,  5706,  5872,-32768,-32768,-32768,-32768,
    1209,  1217,-32768,-32768,   539,  3413,  5706,  5706,  5706,  5706,
    5706,  5706,  5738,  5738,  1198,   598,   649,  1101,  1527,   702,
    1068,   656,   562,   853,   676,  1214,  1206,  1204,  1190,   136,
    1223,-32768,    29,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   712,
     715,-32768,  1061,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,  1607,-32768,  1159,-32768,-32768,  1160,
  -32768,  1162,-32768,-32768,-32768,  1164,-32768,  1531,  1166,  1607,
  -32768,-32768,  4901,-32768,-32768,-32768,-32768,  6501,-32768,-32768,
    6501,-32768,-32768,-32768,-32768,  5706,   902,  1229,-32768,-32768,
  -32768,  1231,  1044,  1240,-32768,  1868,  5706,   759,-32768,-32768,
    1868,   397,-32768,  1237,  1868,  1171,-32768,  1607,-32768,  1238,
  -32768,-32768,-32768,  1607,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,   300,  1241,-32768,   721,-32768,   671,-32768,-32768,  1191,
    3096,  1246,   759,-32768,-32768,   733,  1243,  5706,  1175,  1175,
    1251,   765,  1247,   820,   834,   842,   844,   855,   875,   891,
     896,  5706,  5663,  5706,   908,   950,   134,  5706,  5706,  5706,
    5706,  5706,  5706,  5706,  5706,  5706,  5706,  5706,  5706,  5706,
    5706,  5706,  5706,  5706,  5706,  5706,  5706,  5706,  5706,  5706,
    5706,  5706,  5706,  5706,  5706,-32768,  5706,-32768,  1250,  1255,
  -32768,  1083,  1236,   -18,   395,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,   701,-32768,-32768,-32768,-32768,  1868,   623,-32768,
     151,  5190,-32768,  6501,  5190,  6501,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,   919,  1252,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,  1607,-32768,    90,-32768,   402,-32768,
  -32768,-32768,  5695,  1257,-32768,-32768,   621,-32768,  1260,   797,
  -32768,-32768,   955,  5357,  1259,   965,   980,   302,   759,   759,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,   990,  1003,  1005,   762,  1205,   886,   970,    92,   431,
     546,   792,   634,   767,   413,   579,   375,   467,  5706,   457,
    5872,-32768,   355,  1061,-32768,-32768,-32768,-32768,-32768,   689,
  -32768,  6227,   -18,   427,   427,-32768,-32768,-32768,   345,   773,
  -32768,-32768,    70,-32768,   695,   120,-32768,-32768,-32768,-32768,
  -32768,  1261,-32768,   -10,-32768,  1128,-32768,   100,  1263,    90,
  -32768,    70,-32768,-32768,-32768,  1265,   710,-32768,-32768,  5190,
  -32768,  5190,-32768,-32768,  1581,-32768,   839,-32768,  1199,   894,
  -32768,-32768,-32768,  5706,   759,-32768,  1096,  1016,-32768,  1018,
    1035,-32768,-32768,   971,-32768,-32768,   -18,-32768,-32768,-32768,
  -32768,-32768,-32768,   286,   345,  1145,   759,   759,   427,-32768,
      70,    70,-32768,   350,   995,-32768,  1269,  1032,   540,   120,
     484,    51,-32768,-32768,   695,-32768,-32768,-32768,   695,    -8,
     759,   759,  1270,   695,-32768,    90,  1272,  1000,-32768,   861,
  -32768,-32768,  1273,-32768,  1291,  1294,-32768,  1295,-32768,-32768,
  -32768,  1228,-32768,   738,  1298,-32768,   307,-32768,-32768,-32768,
    1299,  1037,  1069,-32768,-32768,-32768,-32768,   345,  1293,   355,
  -32768,-32768,   345,   972,   350,  1193,   759,   759,    70,-32768,
    1130,-32768,-32768,   695,-32768,   540,  1289,-32768,   484,-32768,
     484,-32768,-32768,  1304,-32768,-32768,  1130,  1310,-32768,-32768,
  -32768,-32768,  5706,   710,  1319,-32768,-32768,-32768,  1320,-32768,
    1321,-32768,-32768,-32768,-32768,  1076,  5706,-32768,-32768,-32768,
    1312,-32768,-32768,   350,-32768,-32768,-32768,  1318,    51,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,  5706,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,  1346,  1349,-32768
};

static const short yypgoto[] =
{
  -32768,-32768,  1264,-32768,-32768,-32768,-32768,  -427,  -115,-32768,
  -32768,  1039,-32768,-32768,-32768,-32768,-32768,    78,-32768,-32768,
     424,-32768,-32768,   129,   163,-32768,   231,-32768,-32768,-32768,
   -1008,-32768,  -887,-32768,-32768,  -722,  -763,-32768,-32768,-32768,
    -603,-32768,  -574,-32768,  -566,-32768,   339,-32768,-32768,   677,
    -684,-32768,   272,   329,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,  -882,   194,-32768, -1004,-32768,
     309,-32768,-32768,  -622,   489,   912,-32768,-32768,  -615,-32768,
  -32768,   109,  -375,  -356,  -327,  -359,  -380,  -395,  -393,  -520,
    -517,-32768,  -614,-32768,  -117,-32768,-32768,  1099,  1053,  -598,
    -371,    21,-32768,-32768,-32768,   550,    -3,-32768,-32768,-32768,
      82,  -271,-32768,-32768,-32768,-32768,  -929,  -777,-32768,-32768,
     548,-32768,-32768,-32768,  -553,-32768,-32768,-32768,  -535,-32768,
  -32768,-32768,-32768,-32768,   586,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,    22,   807,-32768,  1004,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   558,
    -737,  -583,-32768,   183,-32768,-32768,   706,   711,   537,     1,
    -403,  1268,-32768,    17,-32768,-32768,  -576,-32768,-32768,-32768,
     687,  -107,  1092,-32768,  -453,   396,  1381,-32768,  1156,-32768,
    1131,-32768,-32768,-32768,-32768,  -178,-32768,-32768,-32768,-32768,
  -32768,   344,  1189,  1050,  1306,-32768,-32768,  1316,-32768,-32768,
    -323,-32768,    49,   245,  -513,  -682,-32768,   900,-32768,-32768,
     999,  -186,   703,   554,  -491,   103,-32768,   282,   161,-32768,
  -32768,   535,-32768,   601,-32768,-32768,   700,-32768,   399,  -639,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1353,
  -32768,-32768,  1639,  -258,   561,     0,   333,-32768
};


#define	YYLAST		6969


static const short yytable[] =
{
     122,   120,   132,   594,   541,   122,   291,   542,   488,   122,
     217,   217,   217,   530,   531,   752,   847,   685,   540,  1192,
     130,    98,   115,   641,   301,   705,   319,   135,   643,   138,
     503,  1076,   737,   567,   532,   533,  1117,   538,   539,   739,
     749,   468,  1038,   610,   419,  1057,  1122,   427,   952,   423,
    -607,   424,   466,   956,  -607,   786,  1043,   960,   131,   206,
     238,   238,   925,   650,   565,   534,   535,   536,   537,   514,
       3,  1024,  1025,   944,   963,  1119,   752,   935,    94,   438,
     967,   663,   101,   592,   787,  1045,   515,   101,   122,   120,
     454,   472,   789,   737,  1110,   247,   248,   249,     3,   263,
     739,   749,  1026,  1027,  1111,   795,  1173,  1174,   266,    98,
     115,   820,   821,  -641,   240,   240,  1028,  -641,   472,   268,
    1191,   122,   -46,   798,   269,  1197,  1129,   405,  1130,   404,
     630,   452,   405,  1137,   747,   269,   269,   748,   566,   122,
     388,   389,   390,   391,  1119,  1131,   294,   125,   126,   127,
     122,  1103,  1104,   847,  1045,   217,   315,  1118,  1120,   847,
    1062,   314,   988,   810,   503,   472,    94,   266,   402,  -276,
     101,   210,   693,   217,  1223,  1227,  1123,   915,   444,   989,
     303,   786,   698,  1193,   403,   271,   272,   273,   274,   275,
     276,   277,   278,   916,   280,   747,   786,   283,   748,   217,
     468,  1077,   285,   101,   206,   697,  1069,   217,  1071,   217,
     787,   217,   317,   299,   217,   304,   305,   307,   789,   322,
     414,   313,   217,   554,   687,   787,  1172,   217,   840,   217,
     323,   795,  1185,   789,  1188,   493,   695,   299,    81,  1048,
     390,   391,   217,   217,   341,  -276,   795,   454,   206,   798,
     856,   667,   563,   423,   324,     3,   206,    81,  1112,   745,
     206,   746,  1070,   206,   798,   335,   336,   337,   338,   339,
     340,   238,   420,   449,   744,   325,   238,   405,   238,   740,
     847,   489,  1022,   404,   122,   441,   405,   122,   122,   122,
     489,   238,   206,   241,   241,   743,   943,  1150,   741,   945,
    -420,  -420,  -420,   327,   299,  -420,  -420,    81,  1048,   122,
     465,  1165,  1105,   405,  1106,   122,   210,   456,   319,   638,
     745,   453,   746,   405,  -277,   240,   261,   742,   405,  1090,
     240,  1107,   240,   123,  1213,   744,   328,   319,   123,  -705,
     740,  1188,   141,   435,   345,   240,   694,  -420,  -420,  -420,
     396,   397,  -420,  -420,   201,   217,   743,   346,  1067,   741,
     210,  1067,  -277,   217,   467,   217,   101,   442,   210,   445,
     447,  1105,   210,  1106,  1080,   210,  1175,   299,  1176,   405,
     347,   752,   455,   620,   319,   627,   348,  1146,   742,  1148,
    1107,   101,   685,  -705,  1017,  1177,  -653,   313,   737,  1019,
    -653,   856,   547,   548,   210,   739,   749,   472,   349,   217,
      81,    82,   140,   266,   399,    85,    86,   509,   350,  1033,
     957,   123,   351,   826,   299,   827,  -420,   683,  -420,  1034,
     217,   217,   501,   502,  -649,   299,  -420,   217,  -649,   122,
     575,    81,    82,   140,   946,  -699,    85,    86,   562,   122,
     421,  1033,  -642,   405,   123,   954,  -642,   597,   206,   562,
     122,  1034,   122,  -703,   453,   405,  1169,   396,   397,   622,
     122,   444,   316,   122,   287,   288,   289,   122,   319,   238,
     238,   390,   391,   326,  -700,   636,  1067,   315,  1067,   637,
     319,   399,  -705,  -705,   527,   528,   529,  -705,  -705,   334,
     747,   398,   405,   748,   241,   217,   653,   400,   283,   241,
    1129,   241,  1130,   401,   122,   122,   421,  1015,   409,   405,
    1016,   101,   711,   489,   241,   408,  1004,  1005,   580,  1131,
     583,  1014,   589,   240,   240,   590,  1169,   720,   455,   721,
     596,  -526,   101,   407,   101,   211,   414,  1006,  1007,   607,
    1012,  1013,   313,   217,   217,   413,   678,   679,   415,   616,
     405,   122,   655,  -702,   870,  1184,  1129,  -643,  1130,   217,
     210,  -643,   217,   217,   442,   562,   405,   719,  1008,  1009,
    1010,  1011,    81,  1035,  1036,  1131,   472,   432,   851,  -420,
    -420,  -420,   416,   562,  -420,  -420,   390,   391,  -420,   626,
    -651,  -420,   206,  -420,  -651,   412,   696,   486,   398,   122,
     405,   212,   903,   904,    81,  1035,  1036,   123,   872,  -604,
     446,   448,   450,  -604,   417,   745,   315,   746,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   703,  -701,
     744,  1063,   123,   101,  1064,   740,  1082,  1083,   316,  1084,
     217,   217,   392,   393,   769,  -646,  1086,   668,   422,  -646,
     442,   743,   217,   217,   741,   217,  1040,   394,   395,   279,
    -603,   392,   393,   284,  -603,   286,   596,   290,  -276,   122,
     454,   122,   292,   690,   691,   692,   394,   395,   901,   902,
     211,   313,   217,   742,   308,  -276,   309,   595,   319,   122,
     594,   456,   122,   122,   217,   428,  1043,   266,  1078,   319,
    1096,   442,   241,   241,   210,   769,   385,   386,   387,  1044,
     854,   717,   718,  -627,   429,  1044,   299,  -627,   299,  1045,
     909,   910,  1141,  -602,   211,  1045,   405,  -602,   373,   851,
     919,   433,   211,   434,     3,  -276,   211,   454,   436,   211,
     980,   504,   806,   552,   405,     3,   212,   440,   978,   507,
     813,   508,   815,  -472,   454,   459,   455,   461,  -420,  -420,
    -420,  1097,   123,  -420,  -420,   834,   835,   464,   211,   463,
     839,  1109,   587,  -636,   616,   852,   405,  -636,  -647,   485,
     982,   266,  -647,   123,  1108,   123,   385,   386,   387,   469,
     212,  1134,   217,   316,   392,   393,   613,   299,   212,   479,
     618,   490,   212,  -644,  -276,   212,   454,  -644,  1151,   394,
     395,   487,   122,   491,     3,   217,   439,   122,   492,   940,
     217,  1234,   940,   570,   217,   873,   874,   875,   876,   877,
     878,  -621,   390,   391,   212,  -621,   495,   639,   640,   369,
     496,   370,   505,  -420,   122,  -626,  1179,   266,   497,  -626,
    1064,   460,   122,  -625,   462,  -624,  1245,  -625,   498,  -624,
    -420,   854,   470,   371,   372,   473,  -623,  1199,  1046,  1047,
    -623,   499,    81,  1048,  1046,  1047,  1049,   937,    81,  1048,
     905,   906,  1049,   556,   123,     3,  -622,    81,    82,   140,
    -622,   570,    85,    86,   101,   907,   908,  -638,    81,    82,
     140,  -638,  -619,    85,    86,   970,  -619,  -620,   388,   389,
     454,  -620,   947,   679,  1041,    81,    82,   140,     3,  -616,
      85,    86,  1060,  -616,   557,   969,   852,   217,   596,  1073,
    1074,   472,   316,   329,   211,   559,    81,    82,   140,   295,
     570,    85,    86,   560,   156,   157,   158,   159,   160,   161,
    -420,   683,  -420,   940,   564,   940,   940,   940,   570,   666,
    -420,  -617,   162,   163,   164,  -617,  -608,    81,    82,   140,
    -608,  1160,    85,    86,   561,   578,  -611,   579,   122,   122,
    -611,  -639,   405,  1163,   473,  -639,   165,  1218,  1175,   576,
    1176,   636,   388,   389,   581,  1089,   584,  1001,  1002,  1003,
     212,  -631,   587,   266,   587,  -631,  1178,  1177,  1200,   577,
     769,  1064,  1065,   604,  -632,   833,  -633,   609,  -632,  1072,
    -633,  1101,   841,  1041,  1041,   618,   123,  -629,   291,  -612,
     174,  -629,  1115,  -612,  1060,  1060,   666,   723,    81,    82,
     140,   593,  1100,    85,    86,   318,  -610,  -276,  -614,   666,
    -610,  1115,  -614,   197,  1181,  1182,   122,  1144,   318,   318,
     318,   318,   318,   318,   217,   343,   344,   582,     3,   122,
     575,    81,    82,   140,   122,   319,    85,    86,   211,   588,
    -615,   940,  1087,   940,  -615,   608,  1153,  -613,   605,  1240,
     857,  -613,   898,   899,   900,  1041,   122,   122,  1041,   606,
    1115,  1115,    81,   296,   297,   614,   177,   281,   282,  1060,
     319,  1060,   619,   615,  1060,   882,   405,   883,  1060,  -420,
     122,   122,   623,  1060,   624,   628,  1201,   629,   632,   122,
     634,   199,   229,   229,   635,  1138,  -420,   652,   101,   884,
     885,   684,   657,   122,   212,   123,   656,   672,   833,   659,
     955,   852,   669,   833,  1155,   674,   473,   833,   675,  1033,
     442,   677,  1166,  1161,  1162,  1041,   122,   122,  1115,  1034,
    1125,  1126,  1127,  1060,   298,   710,   680,   123,   682,   688,
     689,   699,   701,   704,   625,   977,   713,   714,   808,   202,
     235,   235,   804,   122,  1144,   811,   330,   818,   332,   772,
     819,   836,   860,   576,   858,   771,  1198,  1033,   862,   838,
    1219,   101,   881,  1202,  1204,   863,  -635,  1034,  1060,   864,
    -635,    81,    82,   140,   868,   852,    85,    86,   598,   385,
     386,   387,   869,   911,   913,   912,   914,   822,   917,   920,
     926,   927,   197,   928,   948,   931,   949,   934,   951,   959,
     197,  1224,   961,   965,   197,   968,   975,   197,   979,   981,
     833,  1020,   983,  1021,   177,   418,  1023,  1081,  1085,  1075,
    1088,  1232,  1233,  1140,  1121,   101,   199,  1133,  1237,  1158,
    1152,  1180,  1196,  1178,  1203,   886,   197,   318,   318,   318,
     318,   318,   318,   318,   318,   318,   318,   318,   318,   318,
     318,   318,   318,  1206,  1207,  1209,   203,   236,   236,  1211,
    1217,  1091,  1092,  1212,  1215,  1225,   204,   237,   237,  1228,
     199,  1229,    81,  1035,  1036,  1231,   177,  1236,   199,  1241,
    1238,  1239,   199,  1242,   202,   199,  1248,   318,   451,  1249,
     929,   930,   260,   229,   471,  1189,  1051,  1243,   229,  1230,
     229,  1102,  1095,   214,   243,   243,   318,   824,  1164,  1220,
    1136,   986,   950,   229,   199,   480,   481,   482,   483,   958,
      81,  1035,  1036,   933,   177,   671,  1235,   816,   202,   850,
     814,   971,   457,   245,   962,   451,   202,   293,   431,   123,
     202,   500,   318,   202,  1214,   633,   451,   833,   553,   859,
     374,   235,   123,   318,   974,   866,   235,  1157,   235,  1094,
     973,     0,     0,   513,     0,     0,     0,     0,     0,     0,
       0,   235,   202,     0,     0,     0,     0,     0,     0,  1170,
    1171,     0,     0,     0,   494,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   318,     0,   318,     0,   645,
     647,   203,   197,  1194,  1195,     0,     0,     0,   512,     0,
     558,   204,   123,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,     0,     0,   123,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1066,     0,
       0,     0,     0,     0,   546,   203,     0,   318,   214,  1221,
    1222,     0,     0,   203,     0,   204,     0,   203,     0,   318,
     203,     0,     0,   204,     0,     0,  1079,   204,   236,     0,
     204,     0,     0,   236,     0,   236,   123,     0,   237,     0,
     199,     0,     0,   237,     0,   237,     0,     0,   236,   203,
     887,     0,   214,     0,     0,     0,     0,     0,   237,   204,
     214,   229,   229,     0,   214,     0,   738,   214,     0,     0,
       0,     0,     0,     0,     0,   243,     0,     0,     0,     0,
     243,     0,   243,     0,     0,   888,   889,   890,   891,   892,
     893,   894,   895,   896,   897,   243,   214,   642,   202,     0,
     825,  1149,     0,     0,     0,   295,   197,   826,     0,   827,
     156,   157,   158,   159,   160,   161,     0,     0,     0,   235,
     235,     0,  1139,     0,     0,     0,     0,   738,   162,   163,
     164,     0,     0,     0,     0,     0,     0,     0,   318,   318,
     318,   318,   318,   318,   879,   880,     0,     0,     0,   216,
     244,   244,   165,    23,    24,    25,    26,     0,    27,     0,
       0,     0,     0,    32,    33,     0,     0,    36,    37,     0,
      39,    40,    41,    42,     0,     0,   483,     0,     0,     0,
     772,   773,   774,   775,   199,    54,    55,   776,   777,   778,
     779,   780,   781,   782,     0,     0,   174,   451,     0,   451,
       0,  1205,     0,     0,     0,   724,     0,     0,     0,   770,
       0,    80,     0,     0,     0,   203,     0,     0,     0,     0,
       0,    84,     0,     0,   707,   204,     0,   318,     0,     0,
       0,     0,     0,     0,     0,   716,   236,   236,   318,     0,
       0,     0,   202,     0,     0,     0,   237,   237,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   214,     0,     0,     0,     0,   865,    81,   175,
     176,     0,   177,    85,    86,     0,     0,     0,   871,   318,
       0,     0,     0,   243,   243,     0,     0,     0,     0,     0,
       0,   828,     0,  1244,   216,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   707,     0,     0,     0,     0,
     318,   318,   318,   318,   318,   318,   318,   318,   318,   318,
     318,   318,   318,   318,   318,   318,   318,     0,   318,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   216,     0,
       0,     0,     0,     0,     0,     0,   216,     0,     0,     0,
     216,     0,     0,   216,     0,     0,     0,     0,     0,   203,
       0,   244,     0,     0,     0,     0,   244,     0,   244,   204,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   244,   216,     0,     0,     0,     0,   825,     0,     0,
       0,     0,   295,     0,   826,   318,   827,   156,   157,   158,
     159,   160,   161,     0,     0,     0,   214,     0,     0,     0,
       0,     0,     0,     0,     0,   162,   163,   164,     0,     0,
       0,     0,     0,     0,   828,     0,     0,     0,     0,   828,
       0,     0,   738,   828,     0,     0,   987,     0,     0,   165,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   707,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     984,   512,     0,   174,     0,     0,   990,   991,   992,   993,
     994,   995,   996,   997,   998,   999,  1000,  -256,     0,     0,
       0,     0,     0,   295,     0,     0,     0,     0,   156,   157,
     158,   159,   160,   161,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   483,   162,   163,   164,     0,
       0,     0,     0,     0,     0,     0,   828,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   216,     0,
     165,     0,     0,     0,     0,    81,   175,   176,     0,   177,
      85,    86,     0,     0,     0,     0,     0,     0,     0,   244,
     244,  1093,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    -1,     1,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   174,     0,     0,     0,     0,     0,
       0,     2,     0,     0,     0,     0,     0,  -276,     0,     0,
       0,     0,     0,     0,   318,     0,     0,     3,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     4,   318,     5,
       0,     0,     0,     0,     0,     0,  1156,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   318,
       0,  -420,  -420,  -420,     0,     6,     0,     0,     0,     0,
       7,     8,     9,     0,     0,     0,    81,   296,   297,     0,
     177,     0,     0,   828,     0,    10,    11,    12,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   216,     0,    13,    14,    15,    16,     0,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,     0,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    -2,     1,     0,     0,     0,     0,
      81,    82,    83,    84,     0,    85,    86,    87,     0,     0,
       0,     0,     2,     0,     0,     0,     0,     0,  -276,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     3,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     4,     0,
       5,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -420,  -420,  -420,     0,     6,     0,     0,     0,
       0,     7,     8,     9,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    10,    11,    12,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    13,    14,    15,    16,     0,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
       0,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,     0,     0,     0,     0,     0,
       0,    81,    82,    83,    84,   142,    85,    86,    87,     0,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
     152,   153,   154,  -554,   550,     0,     0,     0,   155,     0,
       0,     0,     0,   156,   157,   158,   159,   160,   161,     0,
       0,     0,     0,     0,     0,     0,  -276,  -276,     4,     0,
       5,   162,   163,   164,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -420,  -420,  -420,   165,     6,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     167,   168,   169,   170,   171,   172,     0,     0,     0,     0,
       0,     0,     0,     0,   173,    13,    14,    15,    16,   174,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
       0,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,     0,     0,     0,     0,     0,
       0,    81,   175,   551,    84,   177,   178,    86,    87,   142,
       0,     0,     0,     0,   143,   144,   145,     0,   146,   147,
     148,   149,   150,   151,   152,   153,   154,  -171,     0,     0,
       0,     0,   155,     0,     0,     0,     0,   156,   157,   158,
     159,   160,   161,     0,     0,     0,     0,     0,     0,     0,
    -276,  -276,  -276,     0,     0,   162,   163,   164,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -276,  -276,  -276,   165,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   167,   168,   169,   170,   171,   172,
       0,     0,     0,     0,     0,     0,     0,     0,   173,  -276,
    -276,  -276,  -276,   174,  -276,  -276,  -276,  -276,  -276,  -276,
    -276,  -276,  -276,  -276,     0,  -276,  -276,  -276,  -276,  -276,
    -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,
    -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,
    -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,
    -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,
    -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,     0,
       0,     0,     0,     0,     0,    81,   175,   176,  -276,   177,
     178,    86,  -276,   219,     0,     0,     0,     0,   143,   144,
     145,     0,     0,   220,   148,   149,   150,   151,   152,   153,
     221,  -171,  -558,     0,     0,     0,   222,     0,     0,     0,
       0,   156,   157,   158,   159,   160,   161,     0,     0,     0,
       0,     0,     0,     0,  -276,  -276,  -276,     0,     0,   162,
     163,   164,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -276,  -276,  -276,   165,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   167,   168,
     169,   170,   171,   172,     0,     0,     0,     0,     0,     0,
       0,     0,   173,  -276,  -276,  -276,  -276,   174,  -276,  -276,
    -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,     0,  -276,
    -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,
    -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,
    -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,
    -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,
    -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,
    -276,  -276,  -276,     0,     0,     0,     0,     0,     0,    81,
     175,   176,  -276,   177,   223,   224,  -276,  -169,     0,     0,
       0,     0,  -169,  -169,  -169,     0,  -169,  -169,  -169,  -169,
    -169,  -169,  -169,  -169,  -169,  -169,  -169,  -169,  -703,  -169,
    -169,     0,  -169,     0,  -169,  -169,  -169,  -169,  -169,  -169,
    -169,  -169,  -169,  -169,  -169,  -169,  -169,  -169,  -169,  -169,
       0,  -169,     0,  -169,  -169,  -169,  -169,  -169,  -169,  -169,
    -169,  -169,  -169,  -169,  -169,  -169,  -169,  -169,  -169,  -169,
    -169,  -169,  -169,  -169,     0,     0,     0,  -169,     0,     0,
       0,     0,     0,     0,     0,   706,  -697,     0,     0,     0,
     295,     0,     0,     0,     0,   156,   157,   158,   159,   160,
     161,     0,  -169,  -169,  -169,  -169,  -169,  -169,     0,     0,
       0,     0,   219,   162,   163,   164,  -169,   143,   144,   145,
       0,  -169,   220,   148,   149,   150,   151,   152,   153,   221,
    -499,  -499,     0,     0,     0,   222,  -499,   165,     0,     0,
     156,   157,   158,   159,   160,   161,     0,     0,     0,     0,
       0,     0,     0,  -276,  -276,     0,     0,     0,   162,   163,
     164,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   174,   165,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -169,  -169,  -169,     0,  -169,  -169,  -169,
       0,     0,     0,     0,     0,     0,  -499,   167,   168,   169,
     170,   171,   172,     0,     0,     0,     0,     0,   142,     0,
       0,   173,     0,   143,   144,   145,   174,   146,   147,   148,
     149,   150,   151,   152,   153,   154,  -554,     0,     0,     0,
       0,   155,     0,     0,     0,     0,   156,   157,   158,   159,
     160,   161,     0,    81,   296,   297,     0,   177,     0,  -276,
    -276,     0,     0,     0,   162,   163,   164,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   165,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    81,   175,
     176,     0,   177,   223,   224,     0,     0,     0,     0,     0,
       0,     0,   166,   167,   168,   169,   170,   171,   172,     0,
       0,     0,     0,     0,   142,     0,     0,   173,     0,   143,
     144,   145,   174,   146,   147,   148,   149,   150,   151,   152,
     153,   154,  -554,     0,     0,     0,     0,   155,     0,     0,
       0,     0,   156,   157,   158,   159,   160,   161,     0,     0,
       0,     0,     0,     0,     0,  -276,  -276,     0,     0,     0,
     162,   163,   164,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   165,     0,     0,     0,     0,     0,
       0,     0,  -171,     0,    81,   175,   176,   295,   177,   178,
      86,     0,   156,   157,   158,   159,   160,   161,  -527,   167,
     168,   169,   170,   171,   172,     0,     0,     0,     0,   219,
     162,   163,   164,   173,   143,   144,   145,     0,   174,   220,
     148,   149,   150,   151,   152,   153,   221,  -554,  -558,     0,
       0,     0,   222,     0,   165,     0,     0,   156,   157,   158,
     159,   160,   161,     0,     0,     0,     0,     0,     0,     0,
    -276,  -276,     0,     0,     0,   162,   163,   164,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   174,   165,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      81,   175,   176,     0,   177,   178,    86,     0,     0,     0,
       0,     0,     0,  -495,   167,   168,   169,   170,   171,   172,
       0,     0,     0,     0,     0,   142,     0,     0,   173,     0,
     143,   144,   145,   174,   146,   147,   148,   149,   150,   151,
     152,   153,   154,  -554,   648,     0,     0,     0,   155,     0,
       0,     0,     0,   156,   157,   158,   159,   160,   161,     0,
      81,   296,   297,     0,   177,     0,  -276,  -276,     0,     0,
       0,   162,   163,   164,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   165,     0,     0,     0,     0,
       0,     0,     0,  -171,     0,    81,   175,   176,   353,   177,
     223,   224,     0,   156,   157,   158,   159,   160,   161,     0,
     167,   168,   169,   170,   171,   172,     0,     0,     0,     0,
     219,   162,   163,   164,   173,   143,   144,   145,     0,   174,
     220,   148,   149,   150,   151,   152,   153,   221,  -554,  -558,
       0,     0,     0,   222,     0,   165,     0,     0,   156,   157,
     158,   159,   160,   161,     0,     0,     0,     0,     0,     0,
       0,  -276,  -276,     0,     0,     0,   162,   163,   164,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   174,
     165,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    81,   175,   176,     0,   177,   178,    86,     0,     0,
       0,     0,     0,     0,     0,   167,   168,   169,   170,   171,
     172,     0,     0,     0,     0,     0,   142,     0,     0,   173,
       0,   143,   144,   145,   174,   146,   147,   148,   149,   150,
     151,   152,   153,   154,  -554,     0,     0,     0,     0,   155,
       0,     0,     0,     0,   156,   157,   158,   159,   160,   161,
       0,    81,   296,   297,     0,   177,     0,  -276,  -276,     0,
       0,     0,   162,   163,   164,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   165,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    81,   175,   176,     0,
     177,   223,   224,     0,     0,     0,     0,     0,     0,     0,
       0,   167,   168,   169,   170,   171,   172,     0,     0,     0,
       0,     0,     0,     0,     0,   173,     0,   143,   144,   145,
     174,   146,   147,   148,   149,   150,   151,   152,   153,   221,
    -554,   568,     0,     0,     0,   353,     0,     0,     0,     0,
     156,   157,   158,   159,   160,   161,     0,     0,     0,     0,
       0,     0,     0,  -276,  -276,     4,     0,     5,   162,   163,
     164,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   165,     6,     0,     0,     0,     0,     0,     0,
       0,     0,    81,   175,   176,     0,   177,   178,    86,     0,
       0,     0,     0,     0,     0,     0,     0,   167,   168,   169,
     170,   171,   172,     0,     0,     0,     0,     0,     0,     0,
       0,   569,    13,    14,    15,    16,   174,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,     0,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,     0,     0,     0,     0,     0,     0,    81,   175,
     551,    84,   177,   178,    86,    87,   143,   144,   145,     0,
     146,   147,   148,   149,   150,   151,   152,   153,   221,  -554,
     649,     0,     0,     0,   353,     0,     0,     0,     0,   156,
     157,   158,   159,   160,   161,     0,     0,     0,     0,     0,
       0,     0,  -276,  -276,     4,     0,     5,   162,   163,   164,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   165,     6,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   167,   168,   169,   170,
     171,   172,     0,     0,     0,     0,     0,     0,     0,     0,
     173,    13,    14,    15,    16,   174,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,     0,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,     0,     0,     0,     0,     0,     0,    81,   175,   551,
      84,   177,   178,    86,    87,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,   152,   153,   221,  -554,   661,
       0,     0,     0,   353,     0,     0,     0,     0,   156,   157,
     158,   159,   160,   161,     0,     0,     0,     0,     0,     0,
       0,  -276,  -276,     4,     0,     5,   162,   163,   164,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     165,     6,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   167,   168,   169,   170,   171,
     172,     0,     0,     0,     0,     0,     0,     0,     0,   662,
      13,    14,    15,    16,   174,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
       0,     0,     0,     0,     0,     0,    81,   175,   551,    84,
     177,   178,    86,    87,   143,   144,   145,     0,   146,   147,
     148,   149,   150,   151,   152,   153,   221,  -554,   660,     0,
       0,     0,   353,     0,     0,     0,     0,   156,   157,   158,
     159,   160,   161,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   162,   163,   164,     0,   143,
     144,   145,     0,   146,   147,   148,   149,   150,   151,   152,
     153,   221,  -554,   664,     0,     0,     0,   353,     0,   165,
       0,     0,   156,   157,   158,   159,   160,   161,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     162,   163,   164,     0,   167,   168,   169,   170,   171,   172,
       0,     0,     0,     0,     0,     0,     0,     0,   173,     0,
       0,     0,     0,   174,   165,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   167,
     168,   169,   170,   171,   172,     0,     0,     0,     0,     0,
       0,     0,     0,   665,     0,   143,   144,   145,   174,   146,
     147,   148,   149,   150,   151,   152,   153,   221,  -554,   722,
       0,     0,     0,   353,     0,     0,     0,     0,   156,   157,
     158,   159,   160,   161,     0,    81,   175,   176,     0,   177,
     178,    86,     0,     0,     0,     0,   162,   163,   164,     0,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
     152,   153,   221,  -554,   800,     0,     0,     0,   353,     0,
     165,     0,     0,   156,   157,   158,   159,   160,   161,     0,
      81,   175,   176,     0,   177,   178,    86,     0,     0,     0,
       0,   162,   163,   164,     0,   167,   168,   169,   170,   171,
     172,     0,     0,     0,     0,     0,     0,     0,     0,   173,
       0,     0,     0,     0,   174,   165,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     167,   168,   169,   170,   171,   172,     0,     0,     0,     0,
       0,     0,     0,     0,   173,     0,   143,   144,   145,   174,
     146,   147,   148,   149,   150,   151,   152,   153,   221,  -554,
     801,     0,     0,     0,   353,     0,     0,     0,     0,   156,
     157,   158,   159,   160,   161,     0,    81,   175,   176,     0,
     177,   178,    86,     0,     0,     0,     0,   162,   163,   164,
       0,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,   152,   153,   221,  -554,   803,     0,     0,     0,   353,
       0,   165,     0,     0,   156,   157,   158,   159,   160,   161,
       0,    81,   175,   176,     0,   177,   178,    86,     0,     0,
       0,     0,   162,   163,   164,     0,   167,   168,   169,   170,
     171,   172,     0,     0,     0,     0,     0,     0,     0,     0,
     802,     0,     0,     0,     0,   174,   165,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   167,   168,   169,   170,   171,   172,     0,     0,     0,
       0,     0,     0,     0,     0,   173,     0,   143,   144,   145,
     174,   146,   147,   148,   149,   150,   151,   152,   153,   221,
    -554,   936,     0,     0,     0,   353,     0,     0,     0,     0,
     156,   157,   158,   159,   160,   161,     0,    81,   175,   176,
       0,   177,   178,    86,     0,     0,     0,     0,   162,   163,
     164,     0,   143,   144,   145,     0,   146,   147,   148,   149,
     150,   151,   152,   153,   221,  -554,     0,     0,     0,     0,
     353,     0,   165,     0,     0,   156,   157,   158,   159,   160,
     161,     0,    81,   175,   176,     0,   177,   178,    86,     0,
       0,     0,     0,   162,   163,   164,     0,   167,   168,   169,
     170,   171,   172,     0,     0,     0,     0,     0,     0,     0,
       0,   173,     0,     0,     0,     0,   174,   165,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   167,   168,   169,   170,   171,   172,  -135,     0,
       0,     0,     0,  -135,     0,     0,   173,     0,     0,     0,
       0,   174,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     4,     0,     5,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    81,   175,
     176,     0,   177,   178,    86,     0,     0,     0,     0,     0,
       0,     6,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    81,   175,   176,     0,   177,   178,    86,
      13,    14,    15,    16,     0,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
    -557,     0,     0,     0,     0,     0,     0,     0,   137,    84,
       0,     0,     0,    87,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     4,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    13,    14,    15,    16,     0,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,     0,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,     0,     0,     0,     0,     0,   625,     0,     0,   137,
      84,   295,     0,     0,    87,     0,   156,   157,   158,   159,
     160,   161,     0,     0,     0,     0,     0,   706,     0,     0,
       0,     0,   295,     0,   162,   163,   164,   156,   157,   158,
     159,   160,   161,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   162,   163,   164,   165,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   165,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   174,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -276,     0,     0,     0,     0,     0,
       0,     0,     0,   174,     3,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     4,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    81,   296,   297,     0,   177,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    81,   296,   297,     0,   177,
       0,    13,    14,    15,    16,     0,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,     0,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,     0,     0,     0,     0,     0,     0,    81,    82,    83,
      84,     0,    85,    86,    87,   295,   510,     0,     0,     0,
     156,   157,   158,   159,   160,   161,   295,     0,     0,   591,
       0,   156,   157,   158,   159,   160,   161,     0,   162,   163,
     164,     0,     0,     0,     0,     0,     0,   295,   985,   162,
     163,   164,   156,   157,   158,   159,   160,   161,   295,     0,
       0,   686,   165,   156,   157,   158,   159,   160,   161,     0,
     162,   163,   164,   165,     0,     0,     0,     0,     0,   295,
    -256,   162,   163,   164,   156,   157,   158,   159,   160,   161,
     295,     0,     0,     0,   165,   156,   157,   158,   159,   160,
     161,     0,   162,   163,   164,   165,   174,     0,     0,     0,
       0,     0,     0,   162,   163,   164,     0,   174,     0,     0,
       0,     0,   342,     0,     0,     0,   165,   156,   157,   158,
     159,   160,   161,     0,     0,     0,     0,   165,   174,     0,
       0,     0,     0,     0,     0,   162,   163,   164,   644,   174,
       0,     0,     0,   156,   157,   158,   159,   160,   161,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   165,
     174,   162,   163,   164,     0,     0,     0,     0,    81,   296,
     297,   174,   177,     0,     0,     0,     0,     0,     0,    81,
     296,   297,     0,   177,     0,   165,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      81,   296,   297,   174,   177,     0,     0,     0,     0,     0,
       0,    81,   296,   297,     0,   177,   646,     0,     0,     0,
       0,   156,   157,   158,   159,   160,   161,     0,     0,   174,
       0,     0,    81,   296,   297,     0,   177,     0,     0,   162,
     163,   164,     0,    81,   296,   297,   725,   177,     0,     0,
       0,   726,   727,   728,   729,   730,   731,     0,     0,     0,
       0,     0,     0,   165,     0,     0,     0,     0,     0,   162,
     732,   733,     0,     0,     0,    81,   296,   297,     0,   177,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   734,     0,     0,     0,     0,     0,     0,
       0,    81,   296,   297,     0,   177,     0,   174,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   174,     0,     0,
       0,     0,     0,     0,     0,  -200,  -200,     4,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    81,
     296,   297,     0,   177,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    81,
     735,   736,     0,   177,    13,    14,    15,    16,     0,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,     0,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,     4,     0,     5,     0,     0,     0,
       0,     0,   137,    84,     0,     0,     0,    87,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -420,  -420,
    -420,     0,     6,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    13,    14,    15,    16,     0,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,     0,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,     4,     0,     5,     0,     0,     0,     0,     0,   137,
      84,     0,     0,     0,    87,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     6,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    13,    14,
      15,    16,     0,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,     0,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,     4,     0,
       0,     0,     0,     0,    81,  1098,   137,    84,     0,     0,
       0,    87,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -420,  -420,  -420,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    13,    14,    15,    16,     0,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
       0,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,     4,     0,     0,     0,     0,
       0,     0,     0,   137,    84,     0,     0,     0,    87,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    10,    11,    12,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    13,    14,    15,    16,     0,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,     0,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,     4,     0,     5,     0,     0,     0,     0,     0,
     137,    84,     0,     0,     0,    87,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       6,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    13,
      14,    15,    16,     0,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,     0,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,     4,
       0,     0,     0,     0,     0,     0,     0,   137,    84,     0,
       0,     0,    87,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    13,    14,    15,    16,
       0,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,     0,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,     0,     0,     0,     0,
       0,     0,     0,     0,   137,    84,     0,     0,     0,    87
};

static const short yycheck[] =
{
       0,     0,     5,   456,   399,     5,   121,   400,   331,     9,
      10,    11,    12,   388,   389,   654,   700,   593,   398,    27,
       3,     0,     0,   543,   131,   623,   143,     5,   545,     7,
     353,   960,   654,   436,   390,   391,  1044,   396,   397,   654,
     654,   312,   924,   470,   222,   932,    56,   233,   825,   227,
      21,   229,   310,   830,    25,   658,     5,   834,    24,    10,
      11,    12,   784,   554,   435,   392,   393,   394,   395,    28,
      34,    89,    90,   810,   837,    24,   715,   799,     0,   265,
     843,   572,     0,   454,   658,    34,    45,     5,    88,    88,
      26,     5,   658,   715,    24,    13,    14,    15,    34,    19,
     715,   715,   120,   121,    34,   658,  1110,  1111,    18,    88,
      88,    25,   688,    21,    11,    12,   134,    25,     5,    24,
    1128,   121,    22,   658,   102,  1133,    26,    21,    28,    18,
     501,    25,    21,  1062,   654,   113,   114,   654,    25,   139,
      32,    33,    50,    51,    24,    45,   129,   111,   112,   113,
     150,  1033,  1034,   837,    34,   155,   139,  1044,  1045,   843,
     937,   139,    28,   676,   487,     5,    88,    18,    41,    18,
      88,    10,    23,   173,  1178,  1183,   186,    41,   285,    45,
      21,   784,   609,   191,    57,   103,   104,   105,   106,   107,
     108,   109,   110,    57,   112,   715,   799,   115,   715,   199,
     471,   964,    88,   121,   155,   608,   943,   207,   945,   209,
     784,   211,    24,   131,   214,   133,   134,   135,   784,    24,
     191,   139,   222,   409,   595,   799,  1108,   227,     5,   229,
      24,   784,  1119,   799,  1121,   342,   607,   155,   187,   188,
      50,    51,   242,   243,   162,    24,   799,    26,   199,   784,
     703,   574,   430,   431,    24,    34,   207,   187,   188,   654,
     211,   654,   944,   214,   799,   156,   157,   158,   159,   160,
     161,   222,   223,    19,   654,    24,   227,    21,   229,   654,
     964,    25,   921,    18,   284,   284,    21,   287,   288,   289,
      25,   242,   243,    11,    12,   654,   809,  1074,   654,   812,
     187,   188,   189,    18,   222,   192,   193,   187,   188,   309,
     309,    25,    26,    21,    28,   315,   155,   300,   435,    27,
     715,   299,   715,    21,    24,   222,    26,   654,    21,    27,
     227,    45,   229,     0,    27,   715,    18,   454,     5,    34,
     715,  1228,     9,   261,    24,   242,   604,   187,   188,   189,
      54,    55,   192,   193,    10,   355,   715,    16,   941,   715,
     199,   944,    24,   363,    26,   365,   284,   285,   207,   287,
     288,    26,   211,    28,   972,   214,    26,   295,    28,    21,
      16,  1020,   300,    25,   501,   492,    16,  1069,   715,  1071,
      45,   309,   968,    88,   914,    45,    21,   315,  1020,   916,
      25,   854,    42,    43,   243,  1020,  1020,     5,    16,   409,
     187,   188,   189,    18,    39,   192,   193,   368,    15,    24,
      23,    88,   101,    26,   342,    28,    24,    25,    26,    34,
     430,   431,     6,     7,    21,   353,    34,   437,    25,   439,
     439,   187,   188,   189,   815,    22,   192,   193,   427,   449,
      18,    24,    21,    21,   121,   826,    25,   460,   409,   438,
     460,    34,   462,    22,   442,    21,  1105,    54,    55,    25,
     470,   578,   139,   473,    68,    69,    70,   477,   595,   430,
     431,    50,    51,   150,    22,    21,  1069,   470,  1071,    25,
     607,    39,   187,   188,   385,   386,   387,   192,   193,   155,
    1020,    29,    21,  1020,   222,   505,    25,    40,   426,   227,
      26,   229,    28,    56,   514,   515,    18,   912,    19,    21,
     913,   439,   629,    25,   242,    95,   901,   902,   446,    45,
     448,   911,   450,   430,   431,   453,  1175,   644,   456,   646,
     458,    95,   460,   199,   462,    10,   191,   903,   904,   467,
     909,   910,   470,   553,   554,   211,    20,    21,   214,   477,
      21,   561,   561,    22,    25,    25,    26,    21,    28,   569,
     409,    25,   572,   573,   492,   554,    21,    22,   905,   906,
     907,   908,   187,   188,   189,    45,     5,   243,   703,   187,
     188,   189,    22,   572,   192,   193,    50,    51,    18,   490,
      21,    21,   553,    23,    25,   209,    25,    18,    29,   609,
      21,    10,    50,    51,   187,   188,   189,   284,   725,    21,
     287,   288,   289,    25,    24,  1020,   609,  1020,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,   616,    22,
    1020,    18,   309,   561,    21,  1020,    25,    26,   315,    28,
     650,   651,    37,    38,   654,    21,   979,   575,    95,    25,
     578,  1020,   662,   663,  1020,   665,   924,    52,    53,   111,
      21,    37,    38,   115,    25,   117,   594,   119,    24,   679,
      26,   681,   124,   601,   602,   603,    52,    53,    32,    33,
     155,   609,   692,  1020,   136,    24,   138,    26,   815,   699,
    1153,   684,   702,   703,   704,    19,     5,    18,   966,   826,
      21,   629,   430,   431,   553,   715,    34,    35,    36,    24,
     703,   639,   640,    21,    20,    24,   644,    25,   646,    34,
      54,    55,    22,    21,   199,    34,    21,    25,   180,   854,
      25,    95,   207,    27,    34,    24,   211,    26,    24,   214,
     867,   355,   670,   409,    21,    34,   155,    18,    25,   363,
     678,   365,   680,    25,    26,    25,   684,    18,   187,   188,
     189,  1029,   439,   192,   193,   693,   694,    23,   243,    18,
     698,  1039,   449,    21,   702,   703,    21,    25,    21,    18,
      25,    18,    25,   460,    21,   462,    34,    35,    36,    24,
     199,  1059,   802,   470,    37,    38,   473,   725,   207,    22,
     477,    25,   211,    21,    24,   214,    26,    25,  1076,    52,
      53,    24,   822,    25,    34,   825,   268,   827,    24,   807,
     830,  1202,   810,   437,   834,   726,   727,   728,   729,   730,
     731,    21,    50,    51,   243,    25,    18,   514,   515,    24,
      18,    26,    19,    28,   854,    21,  1114,    18,    18,    25,
      21,   303,   862,    21,   306,    21,  1237,    25,    18,    25,
      45,   854,   314,    48,    49,   317,    21,  1135,   183,   184,
      25,    18,   187,   188,   183,   184,   191,   805,   187,   188,
      37,    38,   191,     9,   561,    34,    21,   187,   188,   189,
      25,   505,   192,   193,   822,    52,    53,    21,   187,   188,
     189,    25,    21,   192,   193,   194,    25,    21,    32,    33,
      26,    25,    20,    21,   924,   187,   188,   189,    34,    21,
     192,   193,   932,    25,    11,   853,   854,   937,   856,    20,
      21,     5,   609,    18,   409,    25,   187,   188,   189,    24,
     554,   192,   193,    24,    29,    30,    31,    32,    33,    34,
      24,    25,    26,   941,    11,   943,   944,   945,   572,   573,
      34,    21,    47,    48,    49,    25,    21,   187,   188,   189,
      25,  1088,   192,   193,   426,    21,    21,    19,   988,   989,
      25,    21,    21,    22,   436,    25,    71,    25,    26,   441,
      28,    21,    32,    33,   446,    25,   448,   898,   899,   900,
     409,    21,   679,    18,   681,    25,    21,    45,    18,    91,
    1020,    21,   940,   465,    21,   692,    21,   469,    25,   947,
      25,  1031,   699,  1033,  1034,   702,   703,    21,  1153,    21,
     115,    25,  1042,    25,  1044,  1045,   650,   651,   187,   188,
     189,    24,  1031,   192,   193,   143,    21,    19,    21,   663,
      25,  1061,    25,    10,    32,    33,  1066,  1066,   156,   157,
     158,   159,   160,   161,  1074,   163,   164,    19,    34,  1079,
    1079,   187,   188,   189,  1084,  1202,   192,   193,   553,    19,
      21,  1069,   983,  1071,    25,    24,  1079,    21,    91,  1216,
     704,    25,    34,    35,    36,  1105,  1106,  1107,  1108,    27,
    1110,  1111,   187,   188,   189,    25,   191,   113,   114,  1119,
    1237,  1121,    22,    21,  1124,    24,    21,    26,  1128,    28,
    1130,  1131,    18,  1133,    25,    25,  1139,    21,    25,  1139,
      11,    10,    11,    12,    24,  1063,    45,    24,  1066,    48,
      49,   593,    27,  1153,   553,   822,    24,    20,   825,    25,
     827,  1079,    23,   830,  1082,    19,   608,   834,    20,    24,
    1088,    19,    27,  1091,  1092,  1175,  1176,  1177,  1178,    34,
      52,    53,    54,  1183,   131,   627,    23,   854,    27,    24,
      21,    21,     5,    25,    19,   862,    22,    24,    20,    10,
      11,    12,    25,  1203,  1203,    20,   153,    25,   155,    73,
      27,    27,    21,   655,    18,   657,  1134,    24,    21,    25,
      27,  1139,    24,  1141,  1142,    25,    21,    34,  1228,    22,
      25,   187,   188,   189,    25,  1153,   192,   193,   194,    34,
      35,    36,    25,    29,    40,    39,    56,   689,    25,   188,
      91,    91,   199,    91,    25,    91,    25,    91,    18,    22,
     207,  1179,    91,    25,   211,    24,    20,   214,    25,    18,
     937,    21,    25,    18,   191,   222,    40,    20,    18,    27,
      21,  1199,  1200,    18,    23,  1203,   155,    24,  1206,   193,
      91,    22,    22,    21,    21,   737,   243,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,    22,    20,    20,    10,    11,    12,    91,
      27,   988,   989,    25,    25,   195,    10,    11,    12,    40,
     199,    27,   187,   188,   189,    25,   191,    18,   207,    27,
      20,    20,   211,    25,   155,   214,     0,   435,   295,     0,
     792,   793,    88,   222,   315,  1124,   932,  1228,   227,  1196,
     229,  1032,  1023,    10,    11,    12,   454,   690,  1096,  1175,
    1061,   882,   822,   242,   243,   322,   323,   324,   325,   831,
     187,   188,   189,   797,   191,   578,  1203,   681,   199,   702,
     679,   854,   300,    12,   836,   342,   207,   129,   242,  1066,
     211,   351,   490,   214,  1159,   505,   353,  1074,   409,   706,
      23,   222,  1079,   501,   860,   715,   227,  1084,   229,  1020,
     859,    -1,    -1,   370,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   242,   243,    -1,    -1,    -1,    -1,    -1,    -1,  1106,
    1107,    -1,    -1,    -1,   345,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,   543,    -1,   545,    -1,   547,
     548,   155,   409,  1130,  1131,    -1,    -1,    -1,   369,    -1,
     417,   155,  1139,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,    -1,  1153,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   940,    -1,
      -1,    -1,    -1,    -1,   405,   199,    -1,   595,   155,  1176,
    1177,    -1,    -1,   207,    -1,   199,    -1,   211,    -1,   607,
     214,    -1,    -1,   207,    -1,    -1,   968,   211,   222,    -1,
     214,    -1,    -1,   227,    -1,   229,  1203,    -1,   222,    -1,
     409,    -1,    -1,   227,    -1,   229,    -1,    -1,   242,   243,
      23,    -1,   199,    -1,    -1,    -1,    -1,    -1,   242,   243,
     207,   430,   431,    -1,   211,    -1,   654,   214,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   222,    -1,    -1,    -1,    -1,
     227,    -1,   229,    -1,    -1,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,   242,   243,   544,   409,    -1,
      19,    20,    -1,    -1,    -1,    24,   553,    26,    -1,    28,
      29,    30,    31,    32,    33,    34,    -1,    -1,    -1,   430,
     431,    -1,  1064,    -1,    -1,    -1,    -1,   715,    47,    48,
      49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   726,   727,
     728,   729,   730,   731,   732,   733,    -1,    -1,    -1,    10,
      11,    12,    71,   122,   123,   124,   125,    -1,   127,    -1,
      -1,    -1,    -1,   132,   133,    -1,    -1,   136,   137,    -1,
     139,   140,   141,   142,    -1,    -1,   623,    -1,    -1,    -1,
      73,    74,    75,    76,   553,   154,   155,    80,    81,    82,
      83,    84,    85,    86,    -1,    -1,   115,   644,    -1,   646,
      -1,  1143,    -1,    -1,    -1,   652,    -1,    -1,    -1,   656,
      -1,   180,    -1,    -1,    -1,   409,    -1,    -1,    -1,    -1,
      -1,   190,    -1,    -1,   625,   409,    -1,   815,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   636,   430,   431,   826,    -1,
      -1,    -1,   553,    -1,    -1,    -1,   430,   431,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   409,    -1,    -1,    -1,    -1,   714,   187,   188,
     189,    -1,   191,   192,   193,    -1,    -1,    -1,   725,   867,
      -1,    -1,    -1,   430,   431,    -1,    -1,    -1,    -1,    -1,
      -1,   692,    -1,  1235,   155,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   706,    -1,    -1,    -1,    -1,
     898,   899,   900,   901,   902,   903,   904,   905,   906,   907,
     908,   909,   910,   911,   912,   913,   914,    -1,   916,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   199,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   207,    -1,    -1,    -1,
     211,    -1,    -1,   214,    -1,    -1,    -1,    -1,    -1,   553,
      -1,   222,    -1,    -1,    -1,    -1,   227,    -1,   229,   553,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   242,   243,    -1,    -1,    -1,    -1,    19,    -1,    -1,
      -1,    -1,    24,    -1,    26,   983,    28,    29,    30,    31,
      32,    33,    34,    -1,    -1,    -1,   553,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    47,    48,    49,    -1,    -1,
      -1,    -1,    -1,    -1,   825,    -1,    -1,    -1,    -1,   830,
      -1,    -1,  1020,   834,    -1,    -1,   883,    -1,    -1,    71,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   860,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     881,   882,    -1,   115,    -1,    -1,   887,   888,   889,   890,
     891,   892,   893,   894,   895,   896,   897,    18,    -1,    -1,
      -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,
      31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   972,    47,    48,    49,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   937,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   409,    -1,
      71,    -1,    -1,    -1,    -1,   187,   188,   189,    -1,   191,
     192,   193,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   430,
     431,  1018,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     0,     1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   115,    -1,    -1,    -1,    -1,    -1,
      -1,    18,    -1,    -1,    -1,    -1,    -1,    24,    -1,    -1,
      -1,    -1,    -1,    -1,  1202,    -1,    -1,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,  1216,    46,
      -1,    -1,    -1,    -1,    -1,    -1,  1083,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1237,
      -1,    68,    69,    70,    -1,    72,    -1,    -1,    -1,    -1,
      77,    78,    79,    -1,    -1,    -1,   187,   188,   189,    -1,
     191,    -1,    -1,  1074,    -1,    92,    93,    94,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   553,    -1,   111,   112,   113,   114,    -1,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,     0,     1,    -1,    -1,    -1,    -1,
     187,   188,   189,   190,    -1,   192,   193,   194,    -1,    -1,
      -1,    -1,    18,    -1,    -1,    -1,    -1,    -1,    24,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,    -1,
      46,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    69,    70,    -1,    72,    -1,    -1,    -1,
      -1,    77,    78,    79,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    92,    93,    94,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,    -1,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
      -1,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,    -1,    -1,    -1,    -1,    -1,
      -1,   187,   188,   189,   190,     1,   192,   193,   194,    -1,
       6,     7,     8,    -1,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    -1,    -1,    -1,    24,    -1,
      -1,    -1,    -1,    29,    30,    31,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      96,    97,    98,    99,   100,   101,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
      -1,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,    -1,    -1,    -1,    -1,    -1,
      -1,   187,   188,   189,   190,   191,   192,   193,   194,     1,
      -1,    -1,    -1,    -1,     6,     7,     8,    -1,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    -1,    -1,
      -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      42,    43,    44,    -1,    -1,    47,    48,    49,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    70,    71,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    96,    97,    98,    99,   100,   101,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,    -1,
      -1,    -1,    -1,    -1,    -1,   187,   188,   189,   190,   191,
     192,   193,   194,     1,    -1,    -1,    -1,    -1,     6,     7,
       8,    -1,    -1,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    -1,    -1,    -1,    24,    -1,    -1,    -1,
      -1,    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    43,    44,    -1,    -1,    47,
      48,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    69,    70,    71,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    96,    97,
      98,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,    -1,    -1,    -1,    -1,    -1,    -1,   187,
     188,   189,   190,   191,   192,   193,   194,     1,    -1,    -1,
      -1,    -1,     6,     7,     8,    -1,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    -1,    26,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      -1,    45,    -1,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    -1,    -1,    -1,    71,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    19,    20,    -1,    -1,    -1,
      24,    -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,
      34,    -1,    96,    97,    98,    99,   100,   101,    -1,    -1,
      -1,    -1,     1,    47,    48,    49,   110,     6,     7,     8,
      -1,   115,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    -1,    -1,    -1,    24,    25,    71,    -1,    -1,
      29,    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    42,    43,    -1,    -1,    -1,    47,    48,
      49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   115,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   187,   188,   189,    -1,   191,   192,   193,
      -1,    -1,    -1,    -1,    -1,    -1,    95,    96,    97,    98,
      99,   100,   101,    -1,    -1,    -1,    -1,    -1,     1,    -1,
      -1,   110,    -1,     6,     7,     8,   115,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    -1,    -1,    -1,
      -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,    32,
      33,    34,    -1,   187,   188,   189,    -1,   191,    -1,    42,
      43,    -1,    -1,    -1,    47,    48,    49,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   187,   188,
     189,    -1,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    95,    96,    97,    98,    99,   100,   101,    -1,
      -1,    -1,    -1,    -1,     1,    -1,    -1,   110,    -1,     6,
       7,     8,   115,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    -1,    -1,    -1,    -1,    24,    -1,    -1,
      -1,    -1,    29,    30,    31,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    42,    43,    -1,    -1,    -1,
      47,    48,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    71,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    19,    -1,   187,   188,   189,    24,   191,   192,
     193,    -1,    29,    30,    31,    32,    33,    34,    95,    96,
      97,    98,    99,   100,   101,    -1,    -1,    -1,    -1,     1,
      47,    48,    49,   110,     6,     7,     8,    -1,   115,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    -1,
      -1,    -1,    24,    -1,    71,    -1,    -1,    29,    30,    31,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      42,    43,    -1,    -1,    -1,    47,    48,    49,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   115,    71,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     187,   188,   189,    -1,   191,   192,   193,    -1,    -1,    -1,
      -1,    -1,    -1,    95,    96,    97,    98,    99,   100,   101,
      -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,   110,    -1,
       6,     7,     8,   115,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    -1,    -1,    -1,    24,    -1,
      -1,    -1,    -1,    29,    30,    31,    32,    33,    34,    -1,
     187,   188,   189,    -1,   191,    -1,    42,    43,    -1,    -1,
      -1,    47,    48,    49,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    71,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    19,    -1,   187,   188,   189,    24,   191,
     192,   193,    -1,    29,    30,    31,    32,    33,    34,    -1,
      96,    97,    98,    99,   100,   101,    -1,    -1,    -1,    -1,
       1,    47,    48,    49,   110,     6,     7,     8,    -1,   115,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      -1,    -1,    -1,    24,    -1,    71,    -1,    -1,    29,    30,
      31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    42,    43,    -1,    -1,    -1,    47,    48,    49,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   115,
      71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   187,   188,   189,    -1,   191,   192,   193,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    96,    97,    98,    99,   100,
     101,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,   110,
      -1,     6,     7,     8,   115,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    -1,    -1,    -1,    -1,    24,
      -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,
      -1,   187,   188,   189,    -1,   191,    -1,    42,    43,    -1,
      -1,    -1,    47,    48,    49,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    71,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   187,   188,   189,    -1,
     191,   192,   193,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    96,    97,    98,    99,   100,   101,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,    -1,     6,     7,     8,
     115,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,
      29,    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    71,    72,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   187,   188,   189,    -1,   191,   192,   193,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    96,    97,    98,
      99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,    -1,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,    -1,    -1,    -1,    -1,    -1,    -1,   187,   188,
     189,   190,   191,   192,   193,   194,     6,     7,     8,    -1,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,
      30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    71,    72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    96,    97,    98,    99,
     100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,    -1,    -1,    -1,    -1,    -1,    -1,   187,   188,   189,
     190,   191,   192,   193,   194,     6,     7,     8,    -1,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,
      31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      71,    72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    96,    97,    98,    99,   100,
     101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
      -1,    -1,    -1,    -1,    -1,    -1,   187,   188,   189,   190,
     191,   192,   193,   194,     6,     7,     8,    -1,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    -1,
      -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    47,    48,    49,    -1,     6,
       7,     8,    -1,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    -1,    -1,    -1,    24,    -1,    71,
      -1,    -1,    29,    30,    31,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      47,    48,    49,    -1,    96,    97,    98,    99,   100,   101,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,    -1,
      -1,    -1,    -1,   115,    71,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    96,
      97,    98,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,    -1,     6,     7,     8,   115,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,
      31,    32,    33,    34,    -1,   187,   188,   189,    -1,   191,
     192,   193,    -1,    -1,    -1,    -1,    47,    48,    49,    -1,
       6,     7,     8,    -1,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    -1,    -1,    -1,    24,    -1,
      71,    -1,    -1,    29,    30,    31,    32,    33,    34,    -1,
     187,   188,   189,    -1,   191,   192,   193,    -1,    -1,    -1,
      -1,    47,    48,    49,    -1,    96,    97,    98,    99,   100,
     101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
      -1,    -1,    -1,    -1,   115,    71,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      96,    97,    98,    99,   100,   101,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,    -1,     6,     7,     8,   115,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,
      30,    31,    32,    33,    34,    -1,   187,   188,   189,    -1,
     191,   192,   193,    -1,    -1,    -1,    -1,    47,    48,    49,
      -1,     6,     7,     8,    -1,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    24,
      -1,    71,    -1,    -1,    29,    30,    31,    32,    33,    34,
      -1,   187,   188,   189,    -1,   191,   192,   193,    -1,    -1,
      -1,    -1,    47,    48,    49,    -1,    96,    97,    98,    99,
     100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,    -1,    -1,    -1,    -1,   115,    71,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    96,    97,    98,    99,   100,   101,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,    -1,     6,     7,     8,
     115,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,
      29,    30,    31,    32,    33,    34,    -1,   187,   188,   189,
      -1,   191,   192,   193,    -1,    -1,    -1,    -1,    47,    48,
      49,    -1,     6,     7,     8,    -1,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    -1,    -1,    -1,    -1,
      24,    -1,    71,    -1,    -1,    29,    30,    31,    32,    33,
      34,    -1,   187,   188,   189,    -1,   191,   192,   193,    -1,
      -1,    -1,    -1,    47,    48,    49,    -1,    96,    97,    98,
      99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,    -1,    -1,    -1,    -1,   115,    71,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    96,    97,    98,    99,   100,   101,    19,    -1,
      -1,    -1,    -1,    24,    -1,    -1,   110,    -1,    -1,    -1,
      -1,   115,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    44,    -1,    46,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   187,   188,
     189,    -1,   191,   192,   193,    -1,    -1,    -1,    -1,    -1,
      -1,    72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   187,   188,   189,    -1,   191,   192,   193,
     111,   112,   113,   114,    -1,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
      20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   189,   190,
      -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   111,   112,   113,   114,    -1,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,    -1,    -1,    -1,    -1,    -1,    19,    -1,    -1,   189,
     190,    24,    -1,    -1,   194,    -1,    29,    30,    31,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    19,    -1,    -1,
      -1,    -1,    24,    -1,    47,    48,    49,    29,    30,    31,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    47,    48,    49,    71,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   115,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   115,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   187,   188,   189,    -1,   191,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   187,   188,   189,    -1,   191,
      -1,   111,   112,   113,   114,    -1,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,    -1,    -1,    -1,    -1,    -1,    -1,   187,   188,   189,
     190,    -1,   192,   193,   194,    24,    25,    -1,    -1,    -1,
      29,    30,    31,    32,    33,    34,    24,    -1,    -1,    27,
      -1,    29,    30,    31,    32,    33,    34,    -1,    47,    48,
      49,    -1,    -1,    -1,    -1,    -1,    -1,    24,    25,    47,
      48,    49,    29,    30,    31,    32,    33,    34,    24,    -1,
      -1,    27,    71,    29,    30,    31,    32,    33,    34,    -1,
      47,    48,    49,    71,    -1,    -1,    -1,    -1,    -1,    24,
      25,    47,    48,    49,    29,    30,    31,    32,    33,    34,
      24,    -1,    -1,    -1,    71,    29,    30,    31,    32,    33,
      34,    -1,    47,    48,    49,    71,   115,    -1,    -1,    -1,
      -1,    -1,    -1,    47,    48,    49,    -1,   115,    -1,    -1,
      -1,    -1,    24,    -1,    -1,    -1,    71,    29,    30,    31,
      32,    33,    34,    -1,    -1,    -1,    -1,    71,   115,    -1,
      -1,    -1,    -1,    -1,    -1,    47,    48,    49,    24,   115,
      -1,    -1,    -1,    29,    30,    31,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,
     115,    47,    48,    49,    -1,    -1,    -1,    -1,   187,   188,
     189,   115,   191,    -1,    -1,    -1,    -1,    -1,    -1,   187,
     188,   189,    -1,   191,    -1,    71,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     187,   188,   189,   115,   191,    -1,    -1,    -1,    -1,    -1,
      -1,   187,   188,   189,    -1,   191,    24,    -1,    -1,    -1,
      -1,    29,    30,    31,    32,    33,    34,    -1,    -1,   115,
      -1,    -1,   187,   188,   189,    -1,   191,    -1,    -1,    47,
      48,    49,    -1,   187,   188,   189,    24,   191,    -1,    -1,
      -1,    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    71,    -1,    -1,    -1,    -1,    -1,    47,
      48,    49,    -1,    -1,    -1,   187,   188,   189,    -1,   191,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    71,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   187,   188,   189,    -1,   191,    -1,   115,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   115,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   187,
     188,   189,    -1,   191,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   187,
     188,   189,    -1,   191,   111,   112,   113,   114,    -1,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,    44,    -1,    46,    -1,    -1,    -1,
      -1,    -1,   189,   190,    -1,    -1,    -1,   194,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,
      70,    -1,    72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   111,   112,   113,   114,    -1,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,    44,    -1,    46,    -1,    -1,    -1,    -1,    -1,   189,
     190,    -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,
     113,   114,    -1,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,    -1,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,    44,    -1,
      -1,    -1,    -1,    -1,   187,   188,   189,   190,    -1,    -1,
      -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    69,    70,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,    -1,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
      -1,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,    44,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   189,   190,    -1,    -1,    -1,   194,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    92,    93,    94,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   111,   112,   113,   114,    -1,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,    -1,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,    44,    -1,    46,    -1,    -1,    -1,    -1,    -1,
     189,   190,    -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,
     112,   113,   114,    -1,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,    44,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   189,   190,    -1,
      -1,    -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,
      -1,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   189,   190,    -1,    -1,    -1,   194
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */

/* Skeleton output parser for bison,

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002 Free Software
   Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser when
   the %semantic_parser declaration is not specified in the grammar.
   It was written by Richard Stallman by simplifying the hairy parser
   used when %semantic_parser is specified.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

#if ! defined (yyoverflow) || defined (YYERROR_VERBOSE)

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# if YYSTACK_USE_ALLOCA
#  define YYSTACK_ALLOC alloca
# else
#  ifndef YYSTACK_USE_ALLOCA
#   if defined (alloca) || defined (_ALLOCA_H)
#    define YYSTACK_ALLOC alloca
#   else
#    ifdef __GNUC__
#     define YYSTACK_ALLOC __builtin_alloca
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
# else
#  if defined (__STDC__) || defined (__cplusplus)
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   define YYSIZE_T size_t
#  endif
#  define YYSTACK_ALLOC malloc
#  define YYSTACK_FREE free
# endif
#endif /* ! defined (yyoverflow) || defined (YYERROR_VERBOSE) */


#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || (YYLTYPE_IS_TRIVIAL && cgrammar_YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short yyss;
  cgrammar_YYSTYPE yyvs;
# if YYLSP_NEEDED
  YYLTYPE yyls;
# endif
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAX (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# if YYLSP_NEEDED
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (cgrammar_YYSTYPE) + sizeof (YYLTYPE))	\
      + 2 * YYSTACK_GAP_MAX)
# else
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (cgrammar_YYSTYPE))				\
      + YYSTACK_GAP_MAX)
# endif

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  register YYSIZE_T yyi;		\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (0)
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAX;	\
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (0)

#endif


#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# if defined (__STDC__) || defined (__cplusplus)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# endif
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { 								\
      yyerror ("syntax error: cannot back up");			\
      YYERROR;							\
    }								\
while (0)

#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Compute the default location (before the actions
   are run).

   When YYLLOC_DEFAULT is run, CURRENT is set the location of the
   first token.  By default, to implement support for ranges, extend
   its range to the last symbol.  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)       	\
   Current.last_line   = Rhs[N].last_line;	\
   Current.last_column = Rhs[N].last_column;
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#if YYPURE
# if YYLSP_NEEDED
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, &yylloc, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval, &yylloc)
#  endif
# else /* !YYLSP_NEEDED */
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval)
#  endif
# endif /* !YYLSP_NEEDED */
#else /* !YYPURE */
# define YYLEX			yylex ()
#endif /* !YYPURE */


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)
/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
#endif /* !YYDEBUG */

/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#if YYMAXDEPTH == 0
# undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif

#ifdef YYERROR_VERBOSE

# ifndef yystrlen
#  if defined (__GLIBC__) && defined (_STRING_H)
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
#   if defined (__STDC__) || defined (__cplusplus)
yystrlen (const char *yystr)
#   else
yystrlen (yystr)
     const char *yystr;
#   endif
{
  register const char *yys = yystr;

  while (*yys++ != '\0')
    continue;

  return yys - yystr - 1;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#   if defined (__STDC__) || defined (__cplusplus)
yystpcpy (char *yydest, const char *yysrc)
#   else
yystpcpy (yydest, yysrc)
     char *yydest;
     const char *yysrc;
#   endif
{
  register char *yyd = yydest;
  register const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif
#endif



/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
#  define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL
# else
#  define YYPARSE_PARAM_ARG YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
# endif
#else /* !YYPARSE_PARAM */
# define YYPARSE_PARAM_ARG
# define YYPARSE_PARAM_DECL
#endif /* !YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
# ifdef YYPARSE_PARAM
int yyparse (void *);
# else
int yyparse (void);
# endif
#endif

/* YY_DECL_VARIABLES -- depending whether we use a pure parser,
   variables are global, or local to YYPARSE.  */

#define YY_DECL_NON_LSP_VARIABLES			\
/* The lookahead symbol.  */				\
int yychar;						\
							\
/* The semantic value of the lookahead symbol. */	\
cgrammar_YYSTYPE yylval;						\
							\
/* Number of parse errors so far.  */			\
int yynerrs;

#if YYLSP_NEEDED
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES			\
						\
/* Location data for the lookahead symbol.  */	\
YYLTYPE yylloc;
#else
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES
#endif


/* If nonreentrant, generate the variables here. */

#if !YYPURE
YY_DECL_VARIABLES
#endif  /* !YYPURE */

int
yyparse (YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  /* If reentrant, generate the variables here. */
#if YYPURE
  YY_DECL_VARIABLES
#endif  /* !YYPURE */

  register int yystate;
  register int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Lookahead token as an internal (translated) token number.  */
  int yychar1 = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack. */
  short	yyssa[YYINITDEPTH];
  short *yyss = yyssa;
  register short *yyssp;

  /* The semantic value stack.  */
  cgrammar_YYSTYPE yyvsa[YYINITDEPTH];
  cgrammar_YYSTYPE *yyvs = yyvsa;
  register cgrammar_YYSTYPE *yyvsp;

#if YYLSP_NEEDED
  /* The location stack.  */
  YYLTYPE yylsa[YYINITDEPTH];
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;
#endif

#if YYLSP_NEEDED
# define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
# define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  YYSIZE_T yystacksize = YYINITDEPTH;


  /* The variables used to return semantic value and location from the
     action routines.  */
  cgrammar_YYSTYPE yyval;
#if YYLSP_NEEDED
  YYLTYPE yyloc;
#endif

  /* When reducing, the number of symbols on the RHS of the reduced
     rule. */
  int yylen;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;
#if YYLSP_NEEDED
  yylsp = yyls;
#endif
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack. Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	cgrammar_YYSTYPE *yyvs1 = yyvs;
	short *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  */
# if YYLSP_NEEDED
	YYLTYPE *yyls1 = yyls;
	/* This used to be a conditional around just the two extra args,
	   but that might be undefined if yyoverflow is a macro.  */
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);
	yyls = yyls1;
# else
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);
# endif
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyoverflowlab;
# else
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	goto yyoverflowlab;
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;

      {
	short *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyoverflowlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);
# if YYLSP_NEEDED
	YYSTACK_RELOCATE (yyls);
# endif
# undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
#if YYLSP_NEEDED
      yylsp = yyls + yysize - 1;
#endif

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yychar1 = YYTRANSLATE (yychar);

#if YYDEBUG
     /* We have to keep this `#if YYDEBUG', since we use variables
	which are defined only if `YYDEBUG' is set.  */
      if (yydebug)
	{
	  YYFPRINTF (stderr, "Next token is %d (%s",
		     yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise
	     meaning of a token, for further debugging info.  */
# ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
# endif
	  YYFPRINTF (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */
  YYDPRINTF ((stderr, "Shifting token %d (%s), ",
	      yychar, yytname[yychar1]));

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  yystate = yyn;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to the semantic value of
     the lookahead token.  This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

#if YYLSP_NEEDED
  /* Similarly for the default location.  Let the user run additional
     commands if for instance locations are ranges.  */
  yyloc = yylsp[1-yylen];
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
#endif

#if YYDEBUG
  /* We have to keep this `#if YYDEBUG', since we use variables which
     are defined only if `YYDEBUG' is set.  */
  if (yydebug)
    {
      int yyi;

      YYFPRINTF (stderr, "Reducing via rule %d (line %d), ",
		 yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (yyi = yyprhs[yyn]; yyrhs[yyi] > 0; yyi++)
	YYFPRINTF (stderr, "%s ", yytname[yyrhs[yyi]]);
      YYFPRINTF (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif

  switch (yyn) {

case 3:
{ context_checkGlobalScope (); ;
    break;}
case 4:
{ context_checkGlobalScope (); ;
    break;}
case 5:
{ uentry_clearDecl (); ;
    break;}
case 6:
{ uentry_clearDecl (); ;
    break;}
case 7:
{ uentry_clearDecl (); ;
    break;}
case 8:
{ uentry_clearDecl (); ;
    break;}
case 9:
{ uentry_clearDecl (); ;
    break;}
case 10:
{ uentry_checkDecl (); exprNode_free (yyvsp[0].expr); ;
    break;}
case 11:
{ uentry_clearDecl (); lltok_free (yyvsp[0].tok); /* evans 2002-02-08: okay to have a null statement */ ;
    break;}
case 12:
{ uentry_clearDecl (); ;
    break;}
case 13:
{ checkConstant (yyvsp[-6].qtyp, yyvsp[-4].ntyp); lltok_free2 (yyvsp[-7].tok, yyvsp[0].tok); ;
    break;}
case 14:
{ checkValueConstant (yyvsp[-9].qtyp, yyvsp[-7].ntyp, yyvsp[-3].expr); lltok_free3 (yyvsp[-10].tok, yyvsp[-5].tok, yyvsp[0].tok); ;
    break;}
case 15:
{ context_enterFunctionHeader (); ;
    break;}
case 16:
{ 
     declareStaticFunction (yyvsp[-2].ntyp); context_quietExitFunction (); 
     context_exitFunctionHeader (); 
     lltok_free2 (yyvsp[-4].tok, yyvsp[0].tok); /*!*/
   ;
    break;}
case 17:
{ 
     qtype qint = qtype_create (ctype_int);
     yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, qint);
     qtype_free (qint);
   ;
    break;}
case 18:
{ yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, yyvsp[-2].qtyp); ;
    break;}
case 20:
{ yyval.ntyp = yyvsp[0].ntyp; qtype_adjustPointers (yyvsp[-1].pointers, idDecl_getTyp (yyval.ntyp)); ;
    break;}
case 21:
{ yyval.ntyp = idDecl_create (yyvsp[0].cname, qtype_unknown ()); ;
    break;}
case 22:
{ yyval.ntyp = idDecl_expectFunction (yyvsp[-2].ntyp); lltok_free2 (yyvsp[-4].tok, yyvsp[0].tok); ;
    break;}
case 23:
{ yyval.ntyp = idDecl_replaceCtype (yyvsp[-2].ntyp, ctype_makeInnerArray (idDecl_getCtype (yyvsp[-2].ntyp))); lltok_free2 (yyvsp[-1].tok, yyvsp[0].tok); ;
    break;}
case 24:
{
     exprNode_findValue (yyvsp[-2].expr);
     idDecl_notExpectingFunction (yyvsp[-5].ntyp);

     if (exprNode_hasValue (yyvsp[-2].expr)) 
       {
	 yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ctype_makeInnerFixedArray (idDecl_getCtype (yyvsp[-5].ntyp), 
								  exprNode_getLongValue (yyvsp[-2].expr)));
       } 
     else
       {
	 yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ctype_makeInnerArray (idDecl_getCtype (yyvsp[-5].ntyp))); 
       }

     lltok_free2 (yyvsp[-4].tok, yyvsp[-1].tok);
   ;
    break;}
case 25:
{ setCurrentParams (uentryList_missingParams); ;
    break;}
case 26:
{ /* need to support globals and modifies here! */
     ctype ct = ctype_makeFunction (idDecl_getCtype (yyvsp[-5].ntyp), 
				    uentryList_makeMissingParams ());
     
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ct);

     /*drl 7/25/01 added*/
     setImplictfcnConstraints();

     /*     functionClauseList_ImplictConstraints($6); */

     idDecl_addClauses (yyval.ntyp, yyvsp[0].funcclauselist);
     context_popLoc ();
     lltok_free2 (yyvsp[-3].tok, yyvsp[-2].tok);
   ;
    break;}
case 27:
{ setCurrentParams (yyvsp[-1].entrylist); ;
    break;}
case 28:
{
     setImplictfcnConstraints ();
     /*        functionClauseList_ImplictConstraints($7);*/
     clearCurrentParams ();
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-6].ntyp, ctype_makeFunction (idDecl_getCtype (yyvsp[-6].ntyp), yyvsp[-3].entrylist));
     idDecl_addClauses (yyval.ntyp, yyvsp[0].funcclauselist);
     context_popLoc (); 
     lltok_free2 (yyvsp[-4].tok, yyvsp[-2].tok);
   ;
    break;}
case 29:
{ yyval.ntyp = idDecl_create (yyvsp[0].cname, qtype_unknown ()); ;
    break;}
case 30:
{ yyval.ntyp = idDecl_expectFunction (yyvsp[-2].ntyp); lltok_free2 (yyvsp[-4].tok, yyvsp[0].tok); ;
    break;}
case 31:
{ yyval.ntyp = idDecl_replaceCtype (yyvsp[-2].ntyp, ctype_makeInnerArray (idDecl_getCtype (yyvsp[-2].ntyp))); 
     lltok_free2 (yyvsp[-1].tok, yyvsp[0].tok); 
   ;
    break;}
case 32:
{ 
     int value;

     if (exprNode_hasValue (yyvsp[-2].expr) 
	 && multiVal_isInt (exprNode_getValue (yyvsp[-2].expr)))
       {
	 value = (int) multiVal_forceInt (exprNode_getValue (yyvsp[-2].expr));
       }
     else
       {
	 value = 0;
       }

     yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ctype_makeInnerFixedArray (idDecl_getCtype (yyvsp[-5].ntyp), value));
     lltok_free2 (yyvsp[-4].tok, yyvsp[-1].tok);
   ;
    break;}
case 33:
{ setCurrentParams (uentryList_missingParams); ;
    break;}
case 34:
{
     ctype ct = ctype_makeFunction (idDecl_getCtype (yyvsp[-5].ntyp), 
				    uentryList_makeMissingParams ());
     
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ct);
     idDecl_addClauses (yyval.ntyp, yyvsp[0].funcclauselist);
     context_popLoc (); 
     lltok_free2 (yyvsp[-3].tok, yyvsp[-2].tok);
   ;
    break;}
case 35:
{ setCurrentParams (yyvsp[-1].entrylist); ;
    break;}
case 36:
{ 
     clearCurrentParams ();
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-6].ntyp, ctype_makeFunction (idDecl_getCtype (yyvsp[-6].ntyp), yyvsp[-3].entrylist));
     idDecl_addClauses (yyval.ntyp, yyvsp[0].funcclauselist);
     context_popLoc (); 
     lltok_free (yyvsp[-4].tok);
     /*!! lltok_free2 ($3, $5); */
   ;
    break;}
case 37:
{ setCurrentParams (yyvsp[-1].entrylist); ;
    break;}
case 38:
{ clearCurrentParams (); ;
    break;}
case 39:
{ declareCIter (yyvsp[-8].cname, yyvsp[-6].entrylist); 
     lltok_free3 (yyvsp[-9].tok, yyvsp[-7].tok, yyvsp[-5].tok); 
   ;
    break;}
case 40:
{ exprNode_checkMacroBody (yyvsp[-1].expr); lltok_free2 (yyvsp[-2].tok, yyvsp[0].tok); ;
    break;}
case 41:
{ exprNode_checkIterBody (yyvsp[-1].expr); lltok_free2 (yyvsp[-2].tok, yyvsp[0].tok); ;
    break;}
case 42:
{ exprNode_checkIterEnd (yyvsp[-1].expr); lltok_free2 (yyvsp[-2].tok, yyvsp[0].tok);;
    break;}
case 43:
{ exprChecks_checkEmptyMacroBody (); lltok_free2 (yyvsp[-1].tok, yyvsp[0].tok); ;
    break;}
case 44:
{ clabstract_declareFunction (yyvsp[0].ntyp); ;
    break;}
case 45:
{ yyval.msconstraint = metaStateConstraint_create (yyvsp[-2].msspec, yyvsp[0].msexpr); lltok_free (yyvsp[-1].tok); ;
    break;}
case 46:
{ cscannerHelp_expectingMetaStateName (); ;
    break;}
case 47:
{ cscannerHelp_clearExpectingMetaStateName ();
      yyval.msspec = metaStateSpecifier_create (yyvsp[-3].sr, yyvsp[0].msinfo); 
      lltok_free (yyvsp[-1].tok); 
    ;
    break;}
case 48:
{ cscannerHelp_expectingMetaStateName (); ;
    break;}
case 49:
{ cscannerHelp_clearExpectingMetaStateName ();
      yyval.msspec = metaStateSpecifier_createElipsis (yyvsp[0].msinfo); 
      lltok_free2 (yyvsp[-3].tok, yyvsp[-1].tok);
    ;
    break;}
case 50:
{ yyval.msexpr = metaStateExpression_create (yyvsp[0].msspec); ;
    break;}
case 51:
{ yyval.msexpr = metaStateExpression_createMerge (yyvsp[-2].msspec, yyvsp[0].msexpr); lltok_free (yyvsp[-1].tok); ;
    break;}
case 55:
{ yyval.conL = constraintList_add (yyvsp[0].conL, yyvsp[-2].con); ;
    break;}
case 56:
{ yyval.conL = constraintList_single (yyvsp[0].con); ;
    break;}
case 57:
{
 yyval.con = makeConstraintParse3 (yyvsp[-2].conE, yyvsp[-1].tok, yyvsp[0].conE);
 DPRINTF(("Done BufConstraint1\n")); ;
    break;}
case 64:
{yyval.conE = constraintExpr_parseMakeUnaryOp (yyvsp[-3].tok, yyvsp[-1].conE);  DPRINTF( ("Got BufConstraintExpr UNary Op ") ); ;
    break;}
case 65:
{
   DPRINTF( ("Got BufConstraintExpr BINary Op ") );
   yyval.conE = constraintExpr_parseMakeBinaryOp (yyvsp[-3].conE, yyvsp[-2].tok, yyvsp[-1].conE); ;
    break;}
case 66:
{ yyval.conE =  constraintExpr_makeTermsRef (yyvsp[0].sr);;
    break;}
case 67:
{ yyval.conE = constraintExpr_makeIntLiteral (exprNode_getLongValue (yyvsp[0].expr)); ;
    break;}
case 68:
{ /*@-onlytrans@*/ yyval.sr = checkbufferConstraintClausesId (yyvsp[0].entry); /*@=onlytrans@*/ /*@i523@*/ ;
    break;}
case 69:
{ yyval.sr = fixStateClausesId (yyvsp[0].cname); ;
    break;}
case 70:
{ yyval.sr = sRef_makeAnyArrayFetch (yyvsp[-2].sr); ;
    break;}
case 71:
{
    /*
    char *t; int c; 
    t =  cstring_toCharsSafe (exprNode_unparse($3)); 
    c = atoi( t );
    */
    yyval.sr = sRef_makeArrayFetchKnown (yyvsp[-3].sr, exprNode_getLongValue (yyvsp[-1].expr));
  ;
    break;}
case 72:
{ yyval.sr = sRef_constructPointer (yyvsp[0].sr); ;
    break;}
case 73:
{ yyval.sr = yyvsp[-1].sr; ;
    break;}
case 74:
{ cstring_markOwned (yyvsp[0].cname); yyval.sr = sRef_buildField (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 75:
{ cstring_markOwned (yyvsp[0].cname); yyval.sr = sRef_makeArrow (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 79:
{ yyval.funcclauselist = functionClauseList_new (); ;
    break;}
case 80:
{ yyval.funcclauselist = functionClauseList_prepend (yyvsp[0].funcclauselist, yyvsp[-1].funcclause); ;
    break;}
case 81:
{ yyval.funcclauselist = functionClauseList_new (); ;
    break;}
case 82:
{ yyval.funcclauselist = functionClauseList_prepend (yyvsp[0].funcclauselist, yyvsp[-1].funcclause); ;
    break;}
case 83:
{ yyval.funcclause = functionClause_createGlobals (yyvsp[0].globsclause); ;
    break;}
case 84:
{ yyval.funcclause = functionClause_createModifies (yyvsp[0].modsclause); ;
    break;}
case 85:
{ yyval.funcclause = functionClause_createModifies (yyvsp[0].modsclause); ;
    break;}
case 86:
{ yyval.funcclause = functionClause_createState (yyvsp[0].stateclause); ;
    break;}
case 87:
{ yyval.funcclause = yyvsp[0].funcclause; ;
    break;}
case 88:
{ yyval.funcclause = functionClause_createWarn (yyvsp[0].warnclause); ;
    break;}
case 89:
{ yyval.funcclause = functionClause_createGlobals (yyvsp[0].globsclause); ;
    break;}
case 90:
{ yyval.funcclause = functionClause_createModifies (yyvsp[0].modsclause); ;
    break;}
case 91:
{ yyval.funcclause = functionClause_createModifies (yyvsp[0].modsclause); ;
    break;}
case 92:
{ yyval.funcclause = functionClause_createState (yyvsp[0].stateclause); ;
    break;}
case 93:
{ yyval.funcclause = yyvsp[0].funcclause; ;
    break;}
case 94:
{ yyval.funcclause = functionClause_createWarn (yyvsp[0].warnclause); ;
    break;}
case 95:
{ yyval.globsclause = yyvsp[-1].globsclause; ;
    break;}
case 96:
{ setProcessingGlobalsList (); ;
    break;}
case 97:
{ 
     unsetProcessingGlobals (); 
     yyval.globsclause = globalsClause_create (yyvsp[-3].tok, yyvsp[-1].globset); 
   ;
    break;}
case 98:
{ yyval.modsclause = modifiesClause_createNoMods (yyvsp[0].tok); ;
    break;}
case 99:
{ yyval.modsclause = yyvsp[-1].modsclause; ;
    break;}
case 100:
{
     context_setProtectVars (); enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;
    break;}
case 101:
{ 
     exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
     yyval.modsclause = modifiesClause_create (yyvsp[-2].tok, yyvsp[0].srset);
   ;
    break;}
case 102:
{ yyval.flagspec = flagSpec_createPlain (yyvsp[0].cname); ;
    break;}
case 103:
{ yyval.flagspec = flagSpec_createOr (yyvsp[-2].cname, yyvsp[0].flagspec); ;
    break;}
case 106:
{ yyval.warnclause = warnClause_undefined; ;
    break;}
case 107:
{ yyval.warnclause = yyvsp[-1].warnclause; ;
    break;}
case 108:
{      
     llassert (exprNode_knownStringValue (yyvsp[0].expr));
     yyval.warnclause = warnClause_create (yyvsp[-2].tok, yyvsp[-1].flagspec, cstring_copy (multiVal_forceString (exprNode_getValue (yyvsp[0].expr)))); 
     exprNode_free (yyvsp[0].expr);
   ;
    break;}
case 109:
{ yyval.warnclause = warnClause_create (yyvsp[-1].tok, yyvsp[0].flagspec, cstring_undefined); ;
    break;}
case 110:
{ yyval.globset = globSet_single (yyvsp[0].sr); ;
    break;}
case 111:
{ yyval.globset = globSet_insert (yyvsp[-2].globset, yyvsp[0].sr); ;
    break;}
case 112:
{ yyval.sr = clabstract_createGlobal (yyvsp[0].sr, yyvsp[-1].tquallist); ;
    break;}
case 113:
{ yyval.tquallist = qualList_undefined; ;
    break;}
case 114:
{ yyval.tquallist = qualList_add (yyvsp[0].tquallist, yyvsp[-1].typequal); ;
    break;}
case 115:
{ yyval.sr = uentry_getSref (yyvsp[0].entry); ;
    break;}
case 116:
{ yyval.sr = clabstract_unrecognizedGlobal (yyvsp[0].cname); ;
    break;}
case 117:
{ yyval.sr = clabstract_checkGlobal (yyvsp[0].expr); ;
    break;}
case 118:
{ yyval.typequal = qual_createUndef (); ;
    break;}
case 119:
{ yyval.typequal = qual_createKilled (); ;
    break;}
case 120:
{ yyval.typequal = qual_createOut (); ;
    break;}
case 121:
{ yyval.typequal = qual_createIn (); ;
    break;}
case 122:
{ yyval.typequal = qual_createPartial (); ;
    break;}
case 130:
{ 
     /**!!! deal with fred; fred (int); declarations! **/
     qtype qint = qtype_create (ctype_int); 
     yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, qint);
     qtype_free (qint);
   ;
    break;}
case 131:
{ yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, yyvsp[-2].qtyp); ;
    break;}
case 132:
{ checkDoneParams (); context_enterInnerContext (); ;
    break;}
case 133:
{  
     exprNode_checkFunctionBody (yyvsp[0].expr); yyval.expr = yyvsp[0].expr; 
     context_exitInner (yyvsp[0].expr); 
   ;
    break;}
case 134:
{ context_enterOldStyleScope (); ;
    break;}
case 135:
{ oldStyleDoneParams (); context_enterInnerContext (); ;
    break;}
case 136:
{
     exprNode_checkFunctionBody (yyvsp[0].expr); 
     yyval.expr = yyvsp[0].expr; /* oldstyle */ 
     context_exitInner (yyvsp[0].expr);
   ;
    break;}
case 137:
{ 
     context_setFunctionDefined (exprNode_loc (yyvsp[0].expr)); 
     exprNode_checkFunction (context_getHeader (),  yyvsp[0].expr); 
     /* DRL 8 8 2000 */
     
     context_exitFunction ();
   ;
    break;}
case 138:
{ yyval.srset = yyvsp[-1].srset; ;
    break;}
case 139:
{ yyval.srset = sRefSet_new (); ;
    break;}
case 140:
{ yyval.sr = uentry_getSref (yyvsp[0].entry); checkModifiesId (yyvsp[0].entry); ;
    break;}
case 141:
{ yyval.sr = fixModifiesId (yyvsp[0].cname); ;
    break;}
case 142:
{ yyval.sr = fixModifiesId (yyvsp[0].cname); ;
    break;}
case 143:
{ yyval.sr = modListArrayFetch (yyvsp[-2].sr, sRef_undefined); ;
    break;}
case 144:
{ yyval.sr = modListArrayFetch (yyvsp[-3].sr, yyvsp[-1].sr); ;
    break;}
case 145:
{ yyval.sr = modListPointer (yyvsp[0].sr); ;
    break;}
case 146:
{ yyval.sr = yyvsp[-1].sr; ;
    break;}
case 147:
{ yyval.sr = modListFieldAccess (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 148:
{ yyval.sr = modListArrowAccess (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 149:
{ yyval.sr = yyvsp[0].sr; ;
    break;}
case 150:
{ yyval.sr = sRef_makeUnknown (); /* sRef_makeConstant ($1); ? */ ;
    break;}
case 151:
{ yyval.srset = sRefSet_single (yyvsp[0].sr); ;
    break;}
case 152:
{ yyval.srset = sRefSet_insert (yyvsp[-2].srset, yyvsp[0].sr); ;
    break;}
case 153:
{ yyval.sr = checkStateClausesId (yyvsp[0].entry); ;
    break;}
case 154:
{ yyval.sr = fixStateClausesId (yyvsp[0].cname); ;
    break;}
case 155:
{ yyval.sr = sRef_makeAnyArrayFetch (yyvsp[-2].sr); ;
    break;}
case 156:
{ yyval.sr = sRef_makeAnyArrayFetch (yyvsp[-3].sr); ;
    break;}
case 157:
{ yyval.sr = sRef_constructPointer (yyvsp[0].sr); ;
    break;}
case 158:
{ yyval.sr = yyvsp[-1].sr; ;
    break;}
case 159:
{ cstring_markOwned (yyvsp[0].cname);
					    yyval.sr = sRef_buildField (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 160:
{ cstring_markOwned (yyvsp[0].cname);
                                            yyval.sr = sRef_makeArrow (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 161:
{ yyval.srset = sRefSet_undefined ;
    break;}
case 163:
{ if (sRef_isValid (yyvsp[0].sr)) { yyval.srset = sRefSet_single (yyvsp[0].sr); } 
      else { yyval.srset = sRefSet_undefined; } 
    ;
    break;}
case 164:
{ if (sRef_isValid (yyvsp[0].sr))
	{
	  yyval.srset = sRefSet_insert (yyvsp[-2].srset, yyvsp[0].sr); 
	}
      else
	{
	  yyval.srset = yyvsp[-2].srset;
	}
    ;
    break;}
case 165:
{ yyval.expr = exprNode_fromIdentifier (yyvsp[0].entry); ;
    break;}
case 166:
{ yyval.expr = exprNode_fromUIO (yyvsp[0].cname); ;
    break;}
case 168:
{ yyval.expr = exprNode_addParens (yyvsp[-2].tok, yyvsp[-1].expr); ;
    break;}
case 169:
{ yyval.expr = exprNode_fromIdentifier (cscannerHelp_coerceId (yyvsp[0].cname)); ;
    break;}
case 170:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 171:
{ exprChecks_inCompoundStatementExpression (); ;
    break;}
case 172:
{ exprChecks_leaveCompoundStatementExpression (); yyval.expr = exprNode_compoundStatementExpression (yyvsp[-3].tok, yyvsp[-1].expr); ;
    break;}
case 174:
{ yyval.expr = exprNode_arrayFetch (yyvsp[-3].expr, yyvsp[-1].expr); ;
    break;}
case 175:
{ yyval.expr = exprNode_functionCall (yyvsp[-2].expr, exprNodeList_new ()); ;
    break;}
case 176:
{ yyval.expr = exprNode_functionCall (yyvsp[-3].expr, yyvsp[-1].exprlist); ;
    break;}
case 177:
{ yyval.expr = exprNode_vaArg (yyvsp[-5].tok, yyvsp[-3].expr, yyvsp[-1].qtyp); ;
    break;}
case 178:
{ yyval.expr = exprNode_fieldAccess (yyvsp[-4].expr, yyvsp[-2].tok, yyvsp[-1].cname); ;
    break;}
case 179:
{ yyval.expr = exprNode_arrowAccess (yyvsp[-4].expr, yyvsp[-2].tok, yyvsp[-1].cname); ;
    break;}
case 180:
{ yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 181:
{ yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 182:
{ /* added for C99 */ yyval.expr = exprNode_undefined; /*@i87 no checking */ ;
    break;}
case 183:
{ yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 184:
{ yyval.exprlist = exprNodeList_push (yyvsp[-2].exprlist, yyvsp[0].expr); ;
    break;}
case 186:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 187:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 188:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 189:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 190:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 191:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 192:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 193:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 194:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 195:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 196:
{ yyval.cstringlist = cstringList_add (yyvsp[-2].cstringlist, yyvsp[0].cname); lltok_free (yyvsp[-1].tok); ;
    break;}
case 197:
{ yyval.cstringlist = yyvsp[-3].cstringlist; lltok_free2 (yyvsp[-2].tok, yyvsp[0].tok); ;
    break;}
case 198:
{ yyval.cstringlist = cstringList_single (yyvsp[0].cname); ;
    break;}
case 199:
{ yyval.expr = exprNode_offsetof (yyvsp[-5].qtyp, yyvsp[-2].cstringlist); 
     lltok_free3 (yyvsp[-8].tok, yyvsp[-6].tok, yyvsp[-3].tok); lltok_free (yyvsp[-1].tok); ;
    break;}
case 200:
{ context_setProtectVars (); ;
    break;}
case 201:
{ context_sizeofReleaseVars (); yyval.expr = yyvsp[0].expr; ;
    break;}
case 202:
{ yyval.expr = exprNode_sizeofType (yyvsp[-1].qtyp); lltok_free3 (yyvsp[-3].tok, yyvsp[-2].tok, yyvsp[0].tok); ;
    break;}
case 203:
{ yyval.expr = exprNode_sizeofExpr (yyvsp[0].expr); lltok_free (yyvsp[-1].tok); ;
    break;}
case 204:
{ yyval.expr = exprNode_alignofType (yyvsp[-1].qtyp); lltok_free3 (yyvsp[-3].tok, yyvsp[-2].tok, yyvsp[0].tok); ;
    break;}
case 205:
{ yyval.expr = exprNode_alignofExpr (yyvsp[0].expr); lltok_free (yyvsp[-1].tok); ;
    break;}
case 207:
{ yyval.expr = exprNode_cast (yyvsp[-3].tok, yyvsp[0].expr, yyvsp[-2].qtyp); lltok_free (yyvsp[-1].tok); ;
    break;}
case 209:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 210:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 211:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 213:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 214:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 216:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 217:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 219:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 220:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 221:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 222:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 224:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 225:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 227:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 229:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 231:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 233:
{ exprNode_produceGuards (yyvsp[-1].expr); 
     context_enterAndClause (yyvsp[-1].expr); 
   ;
    break;}
case 234:
{ 
     yyval.expr = exprNode_op (yyvsp[-3].expr, yyvsp[0].expr, yyvsp[-2].tok); 
     context_exitAndClause (yyval.expr, yyvsp[0].expr);
   ;
    break;}
case 236:
{ 
     exprNode_produceGuards (yyvsp[-1].expr);
     context_enterOrClause (yyvsp[-1].expr); 
   ;
    break;}
case 237:
{ 
     yyval.expr = exprNode_op (yyvsp[-3].expr, yyvsp[0].expr, yyvsp[-2].tok); 
     context_exitOrClause (yyval.expr, yyvsp[0].expr);
   ;
    break;}
case 239:
{ exprNode_produceGuards (yyvsp[-1].expr); context_enterTrueClause (yyvsp[-1].expr); ;
    break;}
case 240:
{ context_enterFalseClause (yyvsp[-4].expr); ;
    break;}
case 241:
{ yyval.expr = exprNode_cond (yyvsp[-6].expr, yyvsp[-3].expr, yyvsp[0].expr); context_exitClause (yyvsp[-6].expr, yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 243:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 244:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 245:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 246:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 247:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 248:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 249:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 250:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 251:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 252:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 253:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 255:
{ yyval.expr = exprNode_comma (yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 256:
{ yyval.expr = exprNode_undefined; ;
    break;}
case 259:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 260:
{ doVaDcl (); yyval.expr = exprNode_makeError (); ;
    break;}
case 261:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 262:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 263:
{
     setProcessingVars (yyvsp[-3].qtyp); 
     processNamedDecl (yyvsp[-1].ntyp); 
   ;
    break;}
case 264:
{ 
     unsetProcessingVars (); 
     yyval.expr = exprNode_makeEmptyInitialization (yyvsp[-6].ntyp); 
     DPRINTF (("Empty initialization: %s", exprNode_unparse (yyval.expr)));
   ;
    break;}
case 265:
{ setProcessingVars (yyvsp[-4].qtyp); processNamedDecl (yyvsp[-2].ntyp); ;
    break;}
case 266:
{ yyval.expr = exprNode_concat (yyvsp[-2].expr, exprNode_makeInitialization (yyvsp[-8].ntyp, yyvsp[-3].expr)); 
     unsetProcessingVars ();
   ;
    break;}
case 267:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 268:
{ yyval.expr = exprNode_fromIdentifier (usymtab_getTypeEntry (ctype_typeId (yyvsp[0].ctyp))); ;
    break;}
case 269:
{ 
     processNamedDecl (yyvsp[-1].ntyp); 
     yyval.expr = exprNode_makeEmptyInitialization (yyvsp[-1].ntyp);
   ;
    break;}
case 270:
{ processNamedDecl (yyvsp[-2].ntyp); ;
    break;}
case 271:
{ yyval.expr = exprNode_makeInitialization (yyvsp[-5].ntyp, yyvsp[0].expr); ;
    break;}
case 272:
{ setProcessingTypedef (yyvsp[0].qtyp); ;
    break;}
case 273:
{ clabstract_declareType (yyvsp[-3].exprlist, yyvsp[-1].warnclause); ;
    break;}
case 274:
{ /* in the ANSI grammar, semantics unclear */ ;
    break;}
case 275:
{ /* in the ANSI grammar, semantics unclear */ ;
    break;}
case 276:
{ cscannerHelp_setExpectingTypeName (); ;
    break;}
case 277:
{ cscannerHelp_setExpectingTypeName (); context_pushLoc (); ;
    break;}
case 278:
{ yyval.exprlist = yyvsp[-1].exprlist; ;
    break;}
case 279:
{ yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 280:
{ yyval.exprlist = exprNodeList_push (yyvsp[-3].exprlist, yyvsp[0].expr); ;
    break;}
case 281:
{ yyval.exprlist = yyvsp[-1].exprlist; ;
    break;}
case 282:
{ yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 283:
{ yyval.exprlist = exprNodeList_push (yyvsp[-3].exprlist, yyvsp[0].expr); ;
    break;}
case 284:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 285:
{ yyval.expr = exprNode_concat (yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 287:
{ yyval.expr = exprNode_makeInitBlock (yyvsp[-2].tok, yyvsp[-1].exprlist); lltok_free (yyvsp[0].tok); ;
    break;}
case 288:
{ yyval.expr = exprNode_makeInitBlock (yyvsp[-3].tok, yyvsp[-2].exprlist); lltok_free2 (yyvsp[-1].tok, yyvsp[0].tok); ;
    break;}
case 289:
{ yyval.expr = exprNode_undefined; ;
    break;}
case 290:
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 291:
{ yyval.expr = exprNode_undefined; 
                                     /* gcc extension, obsolete since 2.5 */ ;
    break;}
case 292:
{ yyval.expr = exprNode_undefined; ;
    break;}
case 293:
{ yyval.expr = exprNode_undefined; ;
    break;}
case 294:
{ yyval.expr = exprNode_undefined; ;
    break;}
case 295:
{ yyval.expr = exprNode_undefined; ;
    break;}
case 296:
{ yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 297:
{ yyval.exprlist = exprNodeList_push (yyvsp[-2].exprlist, yyvsp[0].expr); ;
    break;}
case 298:
{ setStorageClass (SCEXTERN); yyval.typequal = qual_createExtern (); ;
    break;}
case 299:
{ yyval.typequal = qual_createInline (); ;
    break;}
case 300:
{ setStorageClass (SCSTATIC); yyval.typequal = qual_createStatic (); ;
    break;}
case 301:
{ yyval.typequal = qual_createAuto (); ;
    break;}
case 302:
{ yyval.typequal = qual_createRegister (); ;
    break;}
case 303:
{ yyval.stateclause = yyvsp[-1].stateclause; ;
    break;}
case 304:
{
     context_setProtectVars (); 
     enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;
    break;}
case 305:
{ 
     exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
     yyval.stateclause = stateClause_createPlain (yyvsp[-5].tok, yyvsp[-2].srset);
   ;
    break;}
case 306:
{ yyval.funcclause = yyvsp[-1].funcclause; ;
    break;}
case 307:
{ yyval.tok = yyvsp[-1].tok; context_enterFunctionHeader (); ;
    break;}
case 308:
{
     context_exitFunctionHeader ();
     context_setProtectVars (); 
     enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;
    break;}
case 309:
{ 
     exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
     yyval.funcclause = functionClause_createState (stateClause_create (yyvsp[-5].tok, yyvsp[-4].typequal, yyvsp[-2].srset));
   ;
    break;}
case 310:
{
     context_setProtectVars (); 
     enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;
    break;}
case 311:
{
     context_exitFunctionHeader ();
     exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
     DPRINTF (("done optGlobBufConstraintsAux\n"));

     if (lltok_isEnsures (yyvsp[-4].tok)) 
       {
	 yyval.funcclause = functionClause_createEnsures (yyvsp[-2].fcnconstraint);
       }
     else if (lltok_isRequires (yyvsp[-4].tok))
       {
	 yyval.funcclause = functionClause_createRequires (yyvsp[-2].fcnconstraint);
       }
     else
       {
	 BADBRANCH;
       }

     DPRINTF (("FunctionclauseS: %s", functionClause_unparse (yyval.funcclause)));
   ;
    break;}
case 312:
{ yyval.fcnconstraint = functionConstraint_createBufferConstraint (yyvsp[0].conL); ;
    break;}
case 313:
{ yyval.fcnconstraint = functionConstraint_createMetaStateConstraint (yyvsp[0].msconstraint); DPRINTF (("Made constraint: %s", functionConstraint_unparse (yyval.fcnconstraint))); ;
    break;}
case 314:
{ yyval.typequal = qual_createExits (); ;
    break;}
case 315:
{ yyval.typequal = qual_createMayExit (); ;
    break;}
case 316:
{ yyval.typequal = qual_createTrueExit (); ;
    break;}
case 317:
{ yyval.typequal = qual_createFalseExit (); ;
    break;}
case 318:
{ yyval.typequal = qual_createNeverExit (); ;
    break;}
case 319:
{ yyval.typequal = qual_createChecked (); ;
    break;}
case 320:
{ yyval.typequal = qual_createCheckMod (); ;
    break;}
case 321:
{ yyval.typequal = qual_createUnchecked (); ;
    break;}
case 322:
{ yyval.typequal = qual_createCheckedStrict (); ;
    break;}
case 323:
{ yyval.typequal = qual_createOwned (); ;
    break;}
case 324:
{ yyval.typequal = qual_createDependent (); ;
    break;}
case 325:
{ yyval.typequal = qual_createYield (); ;
    break;}
case 326:
{ yyval.typequal = qual_createTemp (); ;
    break;}
case 327:
{ yyval.typequal = qual_createOnly (); ;
    break;}
case 328:
{ yyval.typequal = qual_createKeep (); ;
    break;}
case 329:
{ yyval.typequal = qual_createKept (); ;
    break;}
case 330:
{ yyval.typequal = qual_createShared (); ;
    break;}
case 331:
{ yyval.typequal = qual_createUnique (); ;
    break;}
case 332:
{ yyval.typequal = qual_createNull (); ;
    break;}
case 333:
{ yyval.typequal = qual_createIsNull (); ;
    break;}
case 334:
{ yyval.typequal = qual_createRelNull (); ;
    break;}
case 335:
{ yyval.typequal = qual_createNotNull (); ;
    break;}
case 336:
{ yyval.typequal = qual_createExposed (); ;
    break;}
case 337:
{ yyval.typequal = qual_createObserver (); ;
    break;}
case 338:
{ yyval.typequal = qual_createNullTerminated (); ;
    break;}
case 339:
{ yyval.typequal = qual_createMetaState (yyvsp[0].annotation); ;
    break;}
case 340:
{ yyval.typequal = qual_createReturned (); ;
    break;}
case 341:
{ yyval.typequal = qual_createSef (); ;
    break;}
case 342:
{ yyval.typequal = qual_createUnused (); ;
    break;}
case 343:
{ yyval.typequal = qual_createExternal (); ;
    break;}
case 344:
{ yyval.typequal = qual_createTrueNull (); ;
    break;}
case 345:
{ yyval.typequal = qual_createFalseNull (); ;
    break;}
case 346:
{ yyval.typequal = qual_createAbstract (); ;
    break;}
case 347:
{ yyval.typequal = qual_createNumAbstract (); ;
    break;}
case 348:
{ yyval.typequal = qual_createConcrete (); ;
    break;}
case 349:
{ yyval.typequal = qual_createMutable (); ;
    break;}
case 350:
{ yyval.typequal = qual_createImmutable (); ;
    break;}
case 351:
{ yyval.typequal = qual_createRefCounted (); ;
    break;}
case 352:
{ yyval.typequal = qual_createRefs (); ;
    break;}
case 353:
{ yyval.typequal = qual_createKillRef (); ;
    break;}
case 354:
{ yyval.typequal = qual_createRelDef (); ;
    break;}
case 355:
{ yyval.typequal = qual_createNewRef (); ;
    break;}
case 356:
{ yyval.typequal = qual_createTempRef (); ;
    break;}
case 357:
{ yyval.typequal = qual_createShort (); ;
    break;}
case 358:
{ yyval.typequal = qual_createLong (); ;
    break;}
case 359:
{ yyval.typequal = qual_createSigned (); ;
    break;}
case 360:
{ yyval.typequal = qual_createUnsigned (); ;
    break;}
case 361:
{ yyval.typequal = qual_createOut (); ;
    break;}
case 362:
{ yyval.typequal = qual_createIn (); ;
    break;}
case 363:
{ yyval.typequal = qual_createPartial (); ;
    break;}
case 364:
{ yyval.typequal = qual_createSpecial (); ;
    break;}
case 365:
{ yyval.typequal = qual_createConst (); ;
    break;}
case 366:
{ yyval.typequal = qual_createVolatile (); ;
    break;}
case 367:
{ yyval.typequal = qual_createRestrict (); ;
    break;}
case 368:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 369:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 370:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 371:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 372:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 373:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 374:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 375:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 376:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 383:
{ yyval.ctyp = ctype_makeAnytype (); ;
    break;}
case 384:
{ yyval.ctyp = ctype_anyintegral; ;
    break;}
case 385:
{ yyval.ctyp = ctype_unsignedintegral; ;
    break;}
case 386:
{ yyval.ctyp = ctype_signedintegral; ;
    break;}
case 390:
{ yyval.ctyp = ctype_fromQual (yyvsp[-1].typequal); ;
    break;}
case 391:
{ yyval.qtyp = qtype_resolve (yyvsp[-1].qtyp); ;
    break;}
case 392:
{ yyval.qtyp = yyvsp[0].qtyp; ;
    break;}
case 393:
{ yyval.qtyp = qtype_mergeAlt (yyvsp[-3].qtyp, yyvsp[-1].qtyp); ;
    break;}
case 395:
{ yyval.qtyp = qtype_mergeAlt (yyvsp[-2].qtyp, yyvsp[0].qtyp); ;
    break;}
case 396:
{ yyval.qtyp = qtype_addQual (yyvsp[0].qtyp, yyvsp[-1].typequal); ;
    break;}
case 397:
{ yyval.qtyp = qtype_addQual (yyvsp[0].qtyp, yyvsp[-1].typequal); ;
    break;}
case 398:
{ yyval.qtyp = qtype_combine (yyvsp[0].qtyp, yyvsp[-1].ctyp); ;
    break;}
case 399:
{ yyval.qtyp = qtype_unknown (); ;
    break;}
case 400:
{ yyval.qtyp = yyvsp[0].qtyp; ;
    break;}
case 401:
{ yyval.conL = constraintList_undefined; ;
    break;}
case 402:
{ sRef_setGlobalScopeSafe (); ;
    break;}
case 403:
{ sRef_clearGlobalScopeSafe (); ;
    break;}
case 404:
{ ctype ct; ct = declareStruct (yyvsp[-9].cname, yyvsp[-4].flist); context_setGlobalStructInfo(ct, yyvsp[0].conL); yyval.ctyp = ct; ;
    break;}
case 405:
{ sRef_setGlobalScopeSafe (); ;
    break;}
case 406:
{ sRef_clearGlobalScopeSafe (); ;
    break;}
case 407:
{ yyval.ctyp = declareUnion (yyvsp[-8].cname, yyvsp[-3].flist); ;
    break;}
case 408:
{ yyval.ctyp = declareStruct (yyvsp[-3].cname, uentryList_new ()); ;
    break;}
case 409:
{ yyval.ctyp = declareUnion (yyvsp[-3].cname, uentryList_new ()); ;
    break;}
case 410:
{ sRef_setGlobalScopeSafe (); ;
    break;}
case 411:
{ sRef_clearGlobalScopeSafe (); ;
    break;}
case 412:
{ yyval.ctyp = declareUnnamedStruct (yyvsp[-3].flist); ;
    break;}
case 413:
{ sRef_setGlobalScopeSafe (); ;
    break;}
case 414:
{ sRef_clearGlobalScopeSafe (); ;
    break;}
case 415:
{ yyval.ctyp = declareUnnamedUnion (yyvsp[-3].flist); ;
    break;}
case 416:
{ yyval.ctyp = ctype_createUnnamedStruct (uentryList_new ()); ;
    break;}
case 417:
{ yyval.ctyp = ctype_createUnnamedUnion (uentryList_new ()); ;
    break;}
case 418:
{ yyval.ctyp = handleStruct (yyvsp[-1].cname); ;
    break;}
case 419:
{ yyval.ctyp = handleUnion (yyvsp[-1].cname); ;
    break;}
case 420:
{ cscannerHelp_clearExpectingTypeName (); ;
    break;}
case 422:
{ yyval.flist = uentryList_undefined; /* bogus! */ ;
    break;}
case 423:
{ yyval.flist = uentryList_mergeFields (yyvsp[-1].flist, yyvsp[0].flist); ;
    break;}
case 424:
{ yyval.flist = fixUentryList (yyvsp[-2].ntyplist, yyvsp[-4].qtyp); ;
    break;}
case 425:
{ yyval.flist = fixUnnamedDecl (yyvsp[-2].qtyp); ;
    break;}
case 426:
{ yyval.ntyplist = idDeclList_singleton (yyvsp[-1].ntyp); ;
    break;}
case 427:
{ yyval.ntyplist = idDeclList_add (yyvsp[-3].ntyplist, yyvsp[-1].ntyp); ;
    break;}
case 428:
{ yyval.ntyp = yyvsp[0].ntyp; ;
    break;}
case 429:
{ yyval.ntyp = idDecl_undefined; ;
    break;}
case 430:
{ yyval.ntyp = yyvsp[-3].ntyp; ;
    break;}
case 431:
{ yyval.ctyp = declareUnnamedEnum (yyvsp[-2].enumnamelist); ;
    break;}
case 432:
{ context_pushLoc (); ;
    break;}
case 433:
{ context_popLoc (); yyval.ctyp = declareEnum (yyvsp[-5].cname, yyvsp[-2].enumnamelist); ;
    break;}
case 434:
{ yyval.ctyp = handleEnum (yyvsp[-1].cname); ;
    break;}
case 435:
{ yyval.enumnamelist = enumNameList_single (yyvsp[0].cname); ;
    break;}
case 436:
{ yyval.enumnamelist = enumNameList_push (yyvsp[-2].enumnamelist, yyvsp[0].cname); ;
    break;}
case 438:
{ uentry ue = uentry_makeEnumConstant (yyvsp[0].cname, ctype_unknown);
     usymtab_supGlobalEntry (ue);
     yyval.cname = yyvsp[0].cname;
   ;
    break;}
case 439:
{ uentry ue = uentry_makeEnumInitializedConstant (yyvsp[-3].cname, ctype_unknown, yyvsp[0].expr);
     usymtab_supGlobalEntry (ue);
     yyval.cname = yyvsp[-3].cname; 
   ;
    break;}
case 441:
{ yyval.ntyp = idDecl_create (cstring_undefined, qtype_create (yyvsp[0].ctyp)); ;
    break;}
case 442:
{ 
     qtype qt = qtype_unknown ();
     qtype_adjustPointers (yyvsp[-1].pointers, qt);
     yyval.ntyp = idDecl_create (cstring_copy (cscannerHelp_observeLastIdentifier ()), qt);
   ;
    break;}
case 443:
{ yyval.ntyp = yyvsp[0].ntyp; qtype_adjustPointers (yyvsp[-1].pointers, idDecl_getTyp (yyval.ntyp)); ;
    break;}
case 445:
{ yyval.ntyp = yyvsp[0].ntyp; qtype_adjustPointers (yyvsp[-1].pointers, idDecl_getTyp (yyval.ntyp)); ;
    break;}
case 446:
{ yyval.entrylist = handleParamTypeList (yyvsp[0].entrylist); ;
    break;}
case 447:
{ yyval.entrylist = handleParamIdList (yyvsp[0].entrylist); ;
    break;}
case 448:
{ yyval.typequal = qual_createConst (); ;
    break;}
case 449:
{ yyval.typequal = qual_createRestrict (); ;
    break;}
case 450:
{ yyval.typequal = qual_createVolatile (); ;
    break;}
case 451:
{ yyval.tquallist = qualList_single (yyvsp[0].typequal); ;
    break;}
case 452:
{ yyval.tquallist = qualList_add (yyvsp[-1].tquallist, yyvsp[0].typequal); ;
    break;}
case 453:
{ yyval.pointers = pointers_create (yyvsp[0].tok); ;
    break;}
case 454:
{ yyval.pointers = pointers_createMods (yyvsp[-1].tok, yyvsp[0].tquallist); ;
    break;}
case 455:
{ yyval.pointers = pointers_extend (pointers_create (yyvsp[-1].tok), yyvsp[0].pointers); ;
    break;}
case 456:
{ yyval.pointers = pointers_extend (pointers_createMods (yyvsp[-2].tok, yyvsp[-1].tquallist), yyvsp[0].pointers); ;
    break;}
case 458:
{ yyval.entrylist = uentryList_add (yyvsp[-2].entrylist, uentry_makeElipsisMarker ()); ;
    break;}
case 459:
{ yyval.entrylist = uentryList_single (uentry_makeVariableLoc (yyvsp[0].cname, ctype_int)); ;
    break;}
case 460:
{ yyval.entrylist = uentryList_add (yyvsp[-2].entrylist, uentry_makeVariableLoc (yyvsp[0].cname, ctype_int)); ;
    break;}
case 461:
{ yyval.entrylist = uentryList_single (uentry_makeElipsisMarker ()); ;
    break;}
case 463:
{ yyval.entrylist = uentryList_add (yyvsp[-2].entrylist, uentry_makeElipsisMarker ()); ;
    break;}
case 464:
{ storeLoc (); ;
    break;}
case 465:
{ yyval.entrylist = uentryList_single (yyvsp[0].oentry); ;
    break;}
case 466:
{ storeLoc (); ;
    break;}
case 467:
{ yyval.entrylist = uentryList_add (yyvsp[-3].entrylist, yyvsp[0].oentry); ;
    break;}
case 468:
{ 
     if (isFlipOldStyle ()) 
       { 
	 llparseerror (cstring_makeLiteral ("Inconsistent function parameter syntax (mixing old and new style declaration)")); 
       }
     else 
       { 
	 setNewStyle (); 
       }
     yyval.oentry = makeCurrentParam (idDecl_fixParamBase (yyvsp[-1].ntyp, yyvsp[-2].qtyp)); 
   ;
    break;}
case 469:
{ 
     idDecl tparam = idDecl_create (yyvsp[0].cname, qtype_unknown ());

     if (isNewStyle ()) 
       {
	 llparseerror (message ("Inconsistent function parameter syntax: %q",
				idDecl_unparse (tparam))); 
       }

     setFlipOldStyle ();
     yyval.oentry = makeCurrentParam (tparam);
     idDecl_free (tparam);
   ;
    break;}
case 471:
{ yyval.qtyp = qtype_newBase (yyvsp[-1].qtyp, yyvsp[0].ctyp); ;
    break;}
case 472:
{ yyval.ctyp = ctype_adjustPointers (yyvsp[0].pointers, ctype_unknown); ;
    break;}
case 474:
{ yyval.ctyp = ctype_adjustPointers (yyvsp[-1].pointers, yyvsp[0].ctyp); ;
    break;}
case 475:
{ yyval.ctyp = ctype_unknown; ;
    break;}
case 477:
{ yyval.ctyp = ctype_expectFunction (yyvsp[-1].ctyp); ;
    break;}
case 478:
{ yyval.ctyp = ctype_makeArray (ctype_unknown); ;
    break;}
case 479:
{ yyval.ctyp = ctype_makeFixedArray (ctype_unknown, exprNode_getLongValue (yyvsp[-1].expr)); ;
    break;}
case 480:
{ yyval.ctyp = ctype_makeInnerArray (yyvsp[-2].ctyp); ;
    break;}
case 481:
{ yyval.ctyp = ctype_makeInnerFixedArray (yyvsp[-3].ctyp, exprNode_getLongValue (yyvsp[-1].expr)); ;
    break;}
case 482:
{ yyval.ctyp = ctype_makeFunction (ctype_unknown, uentryList_makeMissingParams ()); ;
    break;}
case 483:
{ yyval.ctyp = ctype_makeParamsFunction (ctype_unknown, yyvsp[-1].entrylist); ;
    break;}
case 484:
{ yyval.ctyp = ctype_makeFunction (yyvsp[-3].ctyp, uentryList_makeMissingParams ()); ;
    break;}
case 485:
{ yyval.ctyp = ctype_makeParamsFunction (yyvsp[-4].ctyp, yyvsp[-1].entrylist); ;
    break;}
case 495:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 498:
{ yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 499:
{ yyval.expr = exprNode_while (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 500:
{ yyval.expr = exprNode_doWhile (yyvsp[-5].expr, yyvsp[-2].expr); ;
    break;}
case 501:
{ yyval.expr = exprNode_doWhile (yyvsp[-4].expr, yyvsp[-1].expr); ;
    break;}
case 502:
{ yyval.expr = exprNode_for (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 503:
{ context_setProtectVars (); ;
    break;}
case 504:
{ context_sizeofReleaseVars (); ;
    break;}
case 505:
{ yyval.expr = exprNode_forPred (yyvsp[-7].expr, yyvsp[-5].expr, yyvsp[-2].expr); 
     context_enterForClause (yyvsp[-5].expr); ;
    break;}
case 506:
{ setProcessingIterVars (yyvsp[-2].entry); ;
    break;}
case 507:
{ yyval.expr = exprNode_iterStart (yyvsp[-5].entry, yyvsp[-1].exprlist); ;
    break;}
case 508:
{ yyval.expr = exprNode_createId (yyvsp[0].entry); ;
    break;}
case 512:
{ yyval.expr = yyvsp[-1].expr; DPRINTF (("def stmt: %s", exprNode_unparse (yyval.expr))); ;
    break;}
case 520:
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 521:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 522:
{ exprNode_checkIfPred (yyvsp[0].expr); ;
    break;}
case 523:
{ /* don't: context_exitTrueClause ($1, $2); */
     yyval.expr = exprNode_if (yyvsp[-2].expr, yyvsp[0].expr); 
   ;
    break;}
case 524:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 525:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 536:
{ yyval.expr = exprNode_addParens (yyvsp[-2].tok, yyvsp[-1].expr); ;
    break;}
case 538:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 539:
{ yyval.expr = exprNode_labelMarker (yyvsp[-1].cname); ;
    break;}
case 540:
{ yyval.expr = exprNode_notReached (yyvsp[0].expr); ;
    break;}
case 541:
{ ; ;
    break;}
case 542:
{ ; ;
    break;}
case 543:
{ context_enterCaseClause (yyvsp[0].expr); ;
    break;}
case 544:
{ yyval.expr = exprNode_caseMarker (yyvsp[-2].expr, FALSE); ;
    break;}
case 545:
{ context_enterCaseClause (yyvsp[0].expr); ;
    break;}
case 546:
{ yyval.expr = exprNode_caseMarker (yyvsp[-2].expr, TRUE); ;
    break;}
case 547:
{ context_enterCaseClause (exprNode_undefined); ;
    break;}
case 548:
{ yyval.expr = exprNode_defaultMarker (yyvsp[-2].tok, FALSE); ;
    break;}
case 549:
{ context_enterCaseClause (exprNode_undefined); ;
    break;}
case 550:
{ yyval.expr = exprNode_defaultMarker (yyvsp[-2].tok, TRUE); ;
    break;}
case 551:
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 552:
{ yyval.expr = yyvsp[0].expr; context_exitInner (yyvsp[0].expr); ;
    break;}
case 553:
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 554:
{ context_enterInnerContext (); ;
    break;}
case 555:
{ context_exitInnerPlain (); ;
    break;}
case 556:
{ context_enterStructInnerContext (); ;
    break;}
case 557:
{ context_exitStructInnerContext (); ;
    break;}
case 558:
{ context_exitInnerSafe (); ;
    break;}
case 559:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 560:
{ yyval.expr = exprNode_notReached (exprNode_createTok (yyvsp[0].tok)); ;
    break;}
case 561:
{ yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 562:
{ yyval.expr = exprNode_notReached (exprNode_updateLocation (yyvsp[-2].expr, lltok_getLoc (yyvsp[0].tok))); ;
    break;}
case 563:
{ yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 564:
{ yyval.expr = exprNode_notReached (exprNode_updateLocation (yyvsp[-2].expr, lltok_getLoc (yyvsp[0].tok))); ;
    break;}
case 565:
{ yyval.expr = exprNode_updateLocation (exprNode_concat (yyvsp[-2].expr, yyvsp[-1].expr), lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 566:
{ yyval.expr = exprNode_notReached (exprNode_updateLocation (exprNode_concat (yyvsp[-3].expr, yyvsp[-2].expr), 
							lltok_getLoc (yyvsp[-1].tok))); 
   ;
    break;}
case 567:
{ yyval.expr = exprNode_makeBlock (yyvsp[0].expr); ;
    break;}
case 568:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 569:
{ yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 570:
{ yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 571:
{ yyval.expr = exprNode_updateLocation (exprNode_concat (yyvsp[-2].expr, yyvsp[-1].expr), lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 573:
{ yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 574:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 575:
{ yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 576:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 577:
{ yyval.expr = exprNode_concat (yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 578:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 579:
{ yyval.expr = yyvsp[-2].expr; ;
    break;}
case 580:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 581:
{ yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 582:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 583:
{ yyval.expr = exprNode_statement (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 584:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 585:
{ yyval.expr = exprNode_statement (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 586:
{ yyval.expr = exprNode_checkExpr (yyvsp[0].expr); ;
    break;}
case 587:
{ 
     exprNode_produceGuards (yyvsp[-1].expr); context_enterTrueClause (yyvsp[-1].expr); 
     exprNode_checkIfPred (yyvsp[-1].expr);
     yyval.expr = yyvsp[-1].expr;
   ;
    break;}
case 588:
{ 
     context_exitTrueClause (yyvsp[-1].expr, yyvsp[0].expr);
     yyval.expr = exprNode_if (yyvsp[-1].expr, yyvsp[0].expr); 
   ;
    break;}
case 589:
{ context_enterFalseClause (yyvsp[-2].expr); ;
    break;}
case 590:
{
     context_exitClause (yyvsp[-4].expr, yyvsp[-3].expr, yyvsp[0].expr);
     yyval.expr = exprNode_ifelse (yyvsp[-4].expr, yyvsp[-3].expr, yyvsp[0].expr); 
   ;
    break;}
case 591:
{ context_enterSwitch (yyvsp[0].expr); ;
    break;}
case 592:
{ yyval.expr = exprNode_switch (yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 593:
{ yyval.expr = exprNode_whilePred (yyvsp[-1].expr); context_enterWhileClause (yyvsp[-1].expr); ;
    break;}
case 594:
{ yyval.expr = exprNode_whilePred(yyvsp[-1].expr); ;
    break;}
case 595:
{ context_enterIterClause (); ;
    break;}
case 596:
{ setProcessingIterVars (yyvsp[-3].entry); ;
    break;}
case 597:
{ 
     yyval.expr = exprNode_iter (yyvsp[-9].entry, yyvsp[-4].exprlist, yyvsp[-2].expr, yyvsp[-1].entry); 

   ;
    break;}
case 598:
{ yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 599:
{ nextIterParam (); ;
    break;}
case 600:
{ yyval.exprlist = exprNodeList_push (yyvsp[-3].exprlist, yyvsp[0].expr); ;
    break;}
case 601:
{ yyval.expr = exprNode_iterExpr (yyvsp[0].expr); ;
    break;}
case 602:
{ yyval.expr = exprNode_iterId (yyvsp[0].entry); ;
    break;}
case 603:
{ uentry ue = cscannerHelp_coerceIterId (yyvsp[0].cname);

		      if (uentry_isValid (ue)) 
			{
			  yyval.expr = exprNode_iterId (ue);
			}
		      else
			{
			  yyval.expr = exprNode_iterNewId (cstring_copy (cscannerHelp_observeLastIdentifier ()));
			}
		    ;
    break;}
case 604:
{ yyval.expr = exprNode_iterNewId (yyvsp[0].cname); ;
    break;}
case 606:
{ yyval.expr = exprNode_combineLiterals (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 608:
{ yyval.expr = exprNode_addParens (yyvsp[-2].tok, yyvsp[-1].expr); ;
    break;}
case 610:
{ yyval.expr = exprNode_arrayFetch (yyvsp[-3].expr, yyvsp[-1].expr); ;
    break;}
case 611:
{ yyval.expr = exprNode_functionCall (yyvsp[-2].expr, exprNodeList_new ()); ;
    break;}
case 612:
{ yyval.expr = exprNode_functionCall (yyvsp[-3].expr, yyvsp[-1].exprlist); ;
    break;}
case 613:
{ yyval.expr = exprNode_vaArg (yyvsp[-5].tok, yyvsp[-3].expr, yyvsp[-1].qtyp); ;
    break;}
case 614:
{ yyval.expr = exprNode_fieldAccess (yyvsp[-4].expr, yyvsp[-2].tok, yyvsp[-1].cname); ;
    break;}
case 615:
{ yyval.expr = exprNode_arrowAccess (yyvsp[-4].expr, yyvsp[-2].tok, yyvsp[-1].cname); ;
    break;}
case 616:
{ yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 617:
{ yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 619:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 620:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 621:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 622:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 623:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 624:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 625:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 626:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 627:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 629:
{ yyval.expr = exprNode_cast (yyvsp[-3].tok, yyvsp[0].expr, yyvsp[-2].qtyp); ;
    break;}
case 631:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 632:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 633:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 635:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 636:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 638:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 639:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 641:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 642:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 643:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 644:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 646:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 647:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 649:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 651:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 653:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 655:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 657:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 659:
{ context_enterTrueClause (yyvsp[-1].expr); ;
    break;}
case 660:
{ context_enterFalseClause (yyvsp[-4].expr); ;
    break;}
case 661:
{ yyval.expr = exprNode_cond (yyvsp[-6].expr, yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 663:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 664:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 665:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 666:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 667:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 668:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 669:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 670:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 671:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 672:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 673:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 674:
{ yyval.entry = yyvsp[0].entry; ;
    break;}
case 675:
{ yyval.entry = uentry_undefined; ;
    break;}
case 676:
{ context_enterDoWhileClause (); yyval.tok = yyvsp[0].tok; ;
    break;}
case 677:
{ yyval.expr = exprNode_while (yyvsp[-1].expr, yyvsp[0].expr); context_exitWhileClause (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 678:
{ yyval.expr = exprNode_statement (exprNode_doWhile (yyvsp[-5].expr, yyvsp[-2].expr), yyvsp[0].tok); ;
    break;}
case 679:
{ yyval.expr = exprNode_for (yyvsp[-1].expr, yyvsp[0].expr); context_exitForClause (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 680:
{ yyval.expr = exprNode_while (yyvsp[-1].expr, yyvsp[0].expr); context_exitWhileClause (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 681:
{ yyval.expr = exprNode_statement (exprNode_doWhile (yyvsp[-5].expr, yyvsp[-2].expr), yyvsp[0].tok); ;
    break;}
case 682:
{ yyval.expr = exprNode_doWhile (yyvsp[-4].expr, yyvsp[-1].expr); ;
    break;}
case 683:
{ yyval.expr = exprNode_for (yyvsp[-1].expr, yyvsp[0].expr); context_exitForClause (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 684:
{ yyval.expr = exprNode_goto (yyvsp[-1].cname); ;
    break;}
case 685:
{ yyval.expr = exprNode_continue (yyvsp[-1].tok, BADTOK); ;
    break;}
case 686:
{ yyval.expr = exprNode_continue (yyvsp[-2].tok, QINNERCONTINUE); ;
    break;}
case 687:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, BADTOK); ;
    break;}
case 688:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, QSWITCHBREAK); ;
    break;}
case 689:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, QLOOPBREAK); ;
    break;}
case 690:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, QINNERBREAK); ;
    break;}
case 691:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, QSAFEBREAK); ;
    break;}
case 692:
{ yyval.expr = exprNode_nullReturn (yyvsp[-1].tok); ;
    break;}
case 693:
{ yyval.expr = exprNode_return (yyvsp[-1].expr); ;
    break;}
case 695:
{ ; ;
    break;}
case 697:
{ ; ;
    break;}
case 700:
{ yyval.cname = uentry_getName (yyvsp[0].entry); ;
    break;}
case 701:
{ yyval.cname = uentry_getName (yyvsp[0].entry); ;
    break;}
case 702:
{ yyval.cname = uentry_getName (yyvsp[0].entry); ;
    break;}
case 703:
{ yyval.cname = yyvsp[0].cname; ;
    break;}
case 705:
{ yyval.ctyp = ctype_unknown; ;
    break;}
case 706:
{ yyval.ctyp = exprNode_getType (yyvsp[-1].expr); exprNode_free (yyvsp[-1].expr); ;
    break;}
case 707:
{ yyval.ctyp = qtype_getType (yyvsp[-1].qtyp); ;
    break;}
}



  yyvsp -= yylen;
  yyssp -= yylen;
#if YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;
#if YYLSP_NEEDED
  *++yylsp = yyloc;
#endif

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  YYSIZE_T yysize = 0;
	  char *yymsg;
	  int yyx, yycount;

	  yycount = 0;
	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  for (yyx = yyn < 0 ? -yyn : 0;
	       yyx < (int) (sizeof (yytname) / sizeof (char *)); yyx++)
	    if (yycheck[yyx + yyn] == yyx)
	      yysize += yystrlen (yytname[yyx]) + 15, yycount++;
	  yysize += yystrlen ("parse error, unexpected ") + 1;
	  yysize += yystrlen (yytname[YYTRANSLATE (yychar)]);
	  yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg != 0)
	    {
	      char *yyp = yystpcpy (yymsg, "parse error, unexpected ");
	      yyp = yystpcpy (yyp, yytname[YYTRANSLATE (yychar)]);

	      if (yycount < 5)
		{
		  yycount = 0;
		  for (yyx = yyn < 0 ? -yyn : 0;
		       yyx < (int) (sizeof (yytname) / sizeof (char *));
		       yyx++)
		    if (yycheck[yyx + yyn] == yyx)
		      {
			const char *yyq = ! yycount ? ", expecting " : " or ";
			yyp = yystpcpy (yyp, yyq);
			yyp = yystpcpy (yyp, yytname[yyx]);
			yycount++;
		      }
		}
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exhausted");
	}
      else
#endif /* defined (YYERROR_VERBOSE) */
	yyerror ("parse error");
    }
  goto yyerrlab1;


/*--------------------------------------------------.
| yyerrlab1 -- error raised explicitly by an action |
`--------------------------------------------------*/
yyerrlab1:
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;
      YYDPRINTF ((stderr, "Discarding token %d (%s).\n",
		  yychar, yytname[yychar1]));
      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;


/*-------------------------------------------------------------------.
| yyerrdefault -- current state does not do anything special for the |
| error token.                                                       |
`-------------------------------------------------------------------*/
yyerrdefault:
#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */

  /* If its default is to accept any token, ok.  Otherwise pop it.  */
  yyn = yydefact[yystate];
  if (yyn)
    goto yydefault;
#endif


/*---------------------------------------------------------------.
| yyerrpop -- pop the current state because it cannot handle the |
| error token                                                    |
`---------------------------------------------------------------*/
yyerrpop:
  if (yyssp == yyss)
    YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#if YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "Error: state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

/*--------------.
| yyerrhandle.  |
`--------------*/
yyerrhandle:
  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

  YYDPRINTF ((stderr, "Shifting error token, "));

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

/*---------------------------------------------.
| yyoverflowab -- parser overflow comes here.  |
`---------------------------------------------*/
yyoverflowlab:
  yyerror ("parser stack overflow");
  yyresult = 2;
  /* Fall through.  */

yyreturn:
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  return yyresult;
}


/*@-redecl@*/ /*@-namechecks@*/
extern char *yytext;
/*@=redecl@*/ /*@=namechecks@*/

# include "bison.reset"

void yyerror (/*@unused@*/ char *s) 
{
  static bool givehint = FALSE;

  if (context_inIterDef ())
    {
      llerror (FLG_SYNTAX, message ("Iter syntax not parseable: %s", 
				    context_inFunctionName ()));
    }
  else if (context_inIterEnd ())
    {
      llerror (FLG_SYNTAX, message ("Iter finalizer syntax not parseable: %s", 
				    context_inFunctionName ()));
    }
  else if (context_inMacro ())
    {
      llerror (FLG_SYNTAX, message ("Macro syntax not parseable: %s", 
				    context_inFunctionName ()));
      
      if (context_inUnknownMacro ())
	{
	  if (!givehint)
	    {
	      llhint (cstring_makeLiteral 
		     ("Precede macro definition with /*@notfunction@*/ "
		      "to suppress checking and force expansion"));
	      givehint = TRUE;
	    }
	}

      cscannerHelp_swallowMacro ();
      context_exitAllClausesQuiet ();
    }
  else
    {
      llparseerror (cstring_undefined);
    }
}












/*
** Resets all flags in bison.head
*/


/*@=allmacros@*/
/*@=boolint@*/
/*@=charint@*/
/*@=macroparams@*/
/*@=macroundef@*/
/*@=unreachable@*/
/*@=macrospec@*/
/*@=varuse@*/
/*@=ignorequals@*/
/*@=macrostmt@*/
/*@=noeffect@*/
/*@=shadow@*/
/*@=exitarg@*/
/*@=macroredef@*/
/*@=uniondef@*/
/*@=compdef@*/
/*@=matchfields@*/
/*@=exportlocal@*/
/*@=evalorderuncon@*/
/*@=exportheader@*/
/*@=typeuse@*/
/*@=redecl@*/
/*@=redef@*/
/*@=noparams@*/
/*@=ansireserved@*/
/*@=fielduse@*/
/*@=ifblock@*/
/*@=elseifcomplete@*/
/*@=whileblock@*/
/*@=forblock@*/
/*@=branchstate@*/
/*@=readonlytrans@*/
/*@=namechecks@*/
/*@=usedef@*/
/*@=systemunrecog@*/
/*@=dependenttrans@*/
/*@=unqualifiedtrans@*/
/*@=declundef@*/


/*drl added 11/27/2001*/
/*@=bounds@*/

/*drl added 12/11/2002*/
/*@=type@*/
