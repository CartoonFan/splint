/*
** Inserted at beginning of c files generated by bison
** REMEMBER:  Change bison.reset too.
*/

/*@-allmacros@*/
/*@+boolint@*/
/*@+charint@*/
/*@-macroparams@*/
/*@-macroundef@*/
/*@-unreachable@*/
/*@-macrospec@*/
/*@-varuse@*/
/*@+ignorequals@*/
/*@-macrostmt@*/
/*@-noeffect@*/
/*@-shadow@*/
/*@-exitarg@*/
/*@-macroredef@*/
/*@-uniondef@*/
/*@-compdef@*/
/*@-matchfields@*/
/*@-exportlocal@*/
/*@-evalorderuncon@*/
/*@-exportheader@*/
/*@-typeuse@*/
/*@-redecl@*/
/*@-redef@*/
/*@-noparams@*/
/*@-ansireserved@*/
/*@-fielduse@*/
/*@-ifblock@*/
/*@-elseifcomplete@*/
/*@-whileblock@*/
/*@-forblock@*/
/*@-branchstate@*/
/*@-readonlytrans@*/
/*@-namechecks@*/
/*@-usedef@*/
/*@-systemunrecog@*/
/*@-dependenttrans@*/
/*@-unqualifiedtrans@*/
/*@-nullassign@*/
/*@-nullpass@*/
/*@-nullptrarith*/
/*@-usereleased@*/
/*@-declundef@*/

/*drl added 11/27/2001*/
/*@-bounds@*/

/*drl added 12/11/2002*/
/*@-type@*/

/* < end of bison.head > */

/* A Bison parser, made from cgrammar.y
   by GNU bison 1.35.  */

#define YYBISON 1  /* Identify Bison output.  */

# define	BADTOK	257
# define	SKIPTOK	258
# define	CTOK_ELIPSIS	259
# define	CASE	260
# define	DEFAULT	261
# define	CIF	262
# define	CELSE	263
# define	SWITCH	264
# define	WHILE	265
# define	DO	266
# define	CFOR	267
# define	GOTO	268
# define	CONTINUE	269
# define	BREAK	270
# define	RETURN	271
# define	TSEMI	272
# define	TLBRACE	273
# define	TRBRACE	274
# define	TCOMMA	275
# define	TCOLON	276
# define	TASSIGN	277
# define	TLPAREN	278
# define	TRPAREN	279
# define	TLSQBR	280
# define	TRSQBR	281
# define	TDOT	282
# define	TAMPERSAND	283
# define	TEXCL	284
# define	TTILDE	285
# define	TMINUS	286
# define	TPLUS	287
# define	TMULT	288
# define	TDIV	289
# define	TPERCENT	290
# define	TLT	291
# define	TGT	292
# define	TCIRC	293
# define	TBAR	294
# define	TQUEST	295
# define	CSIZEOF	296
# define	CALIGNOF	297
# define	CTYPEOF	298
# define	ARROW_OP	299
# define	CTYPEDEF	300
# define	COFFSETOF	301
# define	INC_OP	302
# define	DEC_OP	303
# define	LEFT_OP	304
# define	RIGHT_OP	305
# define	LE_OP	306
# define	GE_OP	307
# define	EQ_OP	308
# define	NE_OP	309
# define	AND_OP	310
# define	OR_OP	311
# define	MUL_ASSIGN	312
# define	DIV_ASSIGN	313
# define	MOD_ASSIGN	314
# define	ADD_ASSIGN	315
# define	SUB_ASSIGN	316
# define	LEFT_ASSIGN	317
# define	RIGHT_ASSIGN	318
# define	AND_ASSIGN	319
# define	XOR_ASSIGN	320
# define	OR_ASSIGN	321
# define	CSTRUCT	322
# define	CUNION	323
# define	CENUM	324
# define	VA_ARG	325
# define	VA_DCL	326
# define	QWARN	327
# define	QGLOBALS	328
# define	QMODIFIES	329
# define	QNOMODS	330
# define	QCONSTANT	331
# define	QFUNCTION	332
# define	QITER	333
# define	QDEFINES	334
# define	QUSES	335
# define	QALLOCATES	336
# define	QSETS	337
# define	QRELEASES	338
# define	QPRECLAUSE	339
# define	QPOSTCLAUSE	340
# define	QINVARIANT	341
# define	QALT	342
# define	QUNDEF	343
# define	QKILLED	344
# define	QENDMACRO	345
# define	LLMACRO	346
# define	LLMACROITER	347
# define	LLMACROEND	348
# define	TENDMACRO	349
# define	QDREVEALSTATE	350
# define	QSWITCHBREAK	351
# define	QLOOPBREAK	352
# define	QINNERBREAK	353
# define	QSAFEBREAK	354
# define	QINNERCONTINUE	355
# define	QFALLTHROUGH	356
# define	QLINTNOTREACHED	357
# define	QLINTFALLTHROUGH	358
# define	QLINTFALLTHRU	359
# define	QARGSUSED	360
# define	QPRINTFLIKE	361
# define	QLINTPRINTFLIKE	362
# define	QSCANFLIKE	363
# define	QMESSAGELIKE	364
# define	QNOTREACHED	365
# define	QCONST	366
# define	QRESTRICT	367
# define	QVOLATILE	368
# define	QINLINE	369
# define	QEXTENSION	370
# define	QEXTERN	371
# define	QSTATIC	372
# define	QAUTO	373
# define	QREGISTER	374
# define	QOUT	375
# define	QIN	376
# define	QYIELD	377
# define	QONLY	378
# define	QTEMP	379
# define	QSHARED	380
# define	QREF	381
# define	QUNIQUE	382
# define	QCHECKED	383
# define	QUNCHECKED	384
# define	QCHECKEDSTRICT	385
# define	QCHECKMOD	386
# define	QKEEP	387
# define	QKEPT	388
# define	QPARTIAL	389
# define	QSPECIAL	390
# define	QOWNED	391
# define	QDEPENDENT	392
# define	QRETURNED	393
# define	QEXPOSED	394
# define	QNULL	395
# define	QOBSERVER	396
# define	QISNULL	397
# define	QEXITS	398
# define	QMAYEXIT	399
# define	QNEVEREXIT	400
# define	QTRUEEXIT	401
# define	QFALSEEXIT	402
# define	QLONG	403
# define	QSIGNED	404
# define	QUNSIGNED	405
# define	QSHORT	406
# define	QUNUSED	407
# define	QSEF	408
# define	QNOTNULL	409
# define	QRELNULL	410
# define	QABSTRACT	411
# define	QNUMABSTRACT	412
# define	QCONCRETE	413
# define	QMUTABLE	414
# define	QIMMUTABLE	415
# define	QTRUENULL	416
# define	QFALSENULL	417
# define	QEXTERNAL	418
# define	QREFCOUNTED	419
# define	QREFS	420
# define	QNEWREF	421
# define	QTEMPREF	422
# define	QKILLREF	423
# define	QRELDEF	424
# define	CGCHAR	425
# define	CBOOL	426
# define	CINT	427
# define	CGFLOAT	428
# define	CDOUBLE	429
# define	CVOID	430
# define	QANYTYPE	431
# define	QINTEGRALTYPE	432
# define	QUNSIGNEDINTEGRALTYPE	433
# define	QSIGNEDINTEGRALTYPE	434
# define	QNULLTERMINATED	435
# define	QSETBUFFERSIZE	436
# define	QSETSTRINGLENGTH	437
# define	QMAXSET	438
# define	QMAXREAD	439
# define	QTESTINRANGE	440
# define	TCAND	441
# define	IDENTIFIER	442
# define	NEW_IDENTIFIER	443
# define	TYPE_NAME_OR_ID	444
# define	CANNOTATION	445
# define	CCONSTANT	446
# define	ITER_NAME	447
# define	ITER_ENDNAME	448
# define	TYPE_NAME	449
# define	METASTATE_NAME	450


/*
**
** cgrammar.y
**
** Yacc/Bison grammar for extended ANSI C used by Splint.
**
** original grammar by Nate Osgood ---
**    hacrat@catfish.lcs.mit.edu Mon Jun 14 13:06:32 1993
**
** changes for Splint --- handle typedef names correctly
** fix struct/union parsing bug (empty struct is accepted)
** add productions to handle macros --- require
** error correction --- main source of conflicts in grammar.
** need to process initializations sequentially, L->R
**
** production names are cryptic, so more productions fit on one line
**
** conflicts:  87 shift/reduce, 18 reduce/reduce
** most of these are due to handling macros
** a few are due to handling type expressions
*/

/*@=allmacros@*/

extern int yylex ();
extern void yyerror (char *);

# include "splintMacros.nf"
# include "basic.h"
# include "cscanner.h"
# include "cscannerHelp.h"
# include "cgrammar.h"
# include "exprChecks.h"

/*@-allmacros@*/
/*@-matchfields@*/

# define SHOWCSYM FALSE

/*
** This is necessary, or else when the bison-generated code #include's malloc.h,
** there will be a parse error.
**
** Unfortunately, it means the error checking on malloc, etc. is lost for allocations
** in bison-generated files under Win32.
*/

# ifdef WIN32
# undef malloc
# undef calloc
# undef realloc
# endif


#ifndef cgrammar_YYSTYPE
typedef union
{
  lltok tok;
  int count;
  qual typequal;
  qualList tquallist;
  ctype ctyp;
  /*@dependent@*/ sRef sr;
  /*@only@*/ sRef osr;

  /*@only@*/ functionClauseList funcclauselist;
  /*@only@*/ functionClause funcclause;  
  /*@only@*/ flagSpec flagspec;
  /*@only@*/ globalsClause globsclause;
  /*@only@*/ modifiesClause modsclause;
  /*@only@*/ warnClause warnclause;
  /*@only@*/ stateClause stateclause;
  /*@only@*/ pointers pointers;
  /*@only@*/ functionConstraint fcnconstraint; 

  /*@only@*/ metaStateConstraint msconstraint;
  /*@only@*/ metaStateSpecifier msspec;
  /*@only@*/ metaStateExpression msexpr;
  /*@observer@*/ metaStateInfo msinfo;

  /*@only@*/ sRefList srlist;
  /*@only@*/ globSet globset;
  /*@only@*/ qtype qtyp;
  /*@only@*/ cstring cname;
  /*@observer@*/ annotationInfo annotation;
  /*@only@*/ idDecl ntyp;
  /*@only@*/ idDeclList ntyplist;
  /*@only@*/ uentryList flist;
  /*@owned@*/ uentryList entrylist;
  /*@observer@*/ /*@dependent@*/ uentry entry;
  /*@only@*/ uentry oentry;
  /*@only@*/ exprNode expr;
  /*@only@*/ enumNameList enumnamelist;
  /*@only@*/ exprNodeList exprlist;
  /*@only@*/ sRefSet srset; 
  /*@only@*/ cstringList cstringlist;

  /*drl
    added 1/19/2001
  */
  constraint con;
  constraintList conL;
  constraintExpr conE;
  /* drl */  
} yystype;
# define cgrammar_YYSTYPE yystype
# define cgrammar_YYSTYPE_IS_TRIVIAL 1
#endif
#ifndef YYDEBUG
# define YYDEBUG 1
#endif



#define	YYFINAL		1256
#define	YYFLAG		-32768
#define	YYNTBASE	197

/* YYTRANSLATE(YYLEX) -- Bison token number corresponding to YYLEX. */
#define YYTRANSLATE(x) ((unsigned)(x) <= 450 ? yytranslate[x] : 468)

/* YYTRANSLATE[YYLEX] -- Bison token number corresponding to YYLEX. */
static const short yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196
};

#if YYDEBUG
static const short yyprhs[] =
{
       0,     0,     1,     3,     5,     8,    11,    13,    15,    17,
      19,    21,    23,    25,    34,    46,    47,    53,    55,    59,
      61,    64,    66,    73,    77,    84,    85,    92,    93,   101,
     103,   110,   114,   121,   122,   129,   130,   138,   139,   140,
     151,   155,   159,   163,   166,   168,   172,   173,   178,   179,
     184,   186,   190,   192,   194,   196,   200,   202,   206,   208,
     210,   212,   214,   216,   218,   223,   229,   231,   233,   235,
     237,   241,   246,   249,   253,   257,   261,   263,   265,   267,
     268,   271,   272,   275,   277,   279,   281,   283,   285,   287,
     289,   291,   293,   295,   297,   299,   302,   303,   308,   310,
     313,   314,   318,   320,   324,   326,   328,   329,   332,   336,
     339,   341,   345,   348,   349,   352,   354,   356,   358,   360,
     362,   364,   366,   368,   370,   372,   374,   376,   378,   380,
     382,   384,   388,   389,   393,   394,   395,   400,   403,   406,
     408,   410,   412,   414,   418,   423,   426,   430,   434,   438,
     440,   442,   444,   448,   450,   452,   456,   461,   464,   468,
     472,   476,   477,   479,   481,   485,   487,   489,   491,   495,
     497,   499,   500,   505,   507,   512,   516,   521,   528,   534,
     540,   543,   546,   554,   556,   560,   562,   565,   568,   571,
     574,   577,   580,   583,   586,   590,   592,   596,   601,   603,
     613,   614,   618,   619,   620,   625,   628,   633,   636,   638,
     643,   645,   649,   653,   657,   659,   663,   667,   669,   673,
     677,   679,   683,   687,   691,   695,   697,   701,   705,   707,
     711,   713,   717,   719,   723,   725,   726,   731,   733,   734,
     739,   741,   742,   743,   751,   753,   757,   761,   765,   769,
     773,   777,   781,   785,   789,   793,   797,   799,   803,   804,
     806,   808,   810,   812,   814,   818,   819,   829,   830,   842,
     844,   846,   849,   850,   857,   858,   867,   872,   877,   878,
     879,   882,   884,   889,   892,   894,   899,   900,   905,   907,
     911,   916,   919,   922,   925,   927,   930,   934,   937,   939,
     943,   945,   947,   949,   951,   953,   956,   957,   964,   967,
     970,   971,   978,   979,   985,   987,   989,   991,   993,   995,
     997,   999,  1001,  1003,  1005,  1007,  1009,  1011,  1013,  1015,
    1017,  1019,  1021,  1023,  1025,  1027,  1029,  1031,  1033,  1035,
    1037,  1039,  1041,  1043,  1045,  1047,  1049,  1051,  1053,  1055,
    1057,  1059,  1061,  1063,  1065,  1067,  1069,  1071,  1073,  1075,
    1077,  1079,  1081,  1083,  1085,  1087,  1089,  1091,  1094,  1097,
    1100,  1103,  1106,  1109,  1112,  1115,  1118,  1121,  1124,  1127,
    1130,  1133,  1136,  1139,  1142,  1145,  1148,  1151,  1154,  1157,
    1160,  1163,  1166,  1169,  1173,  1175,  1180,  1182,  1186,  1189,
    1192,  1195,  1196,  1198,  1199,  1200,  1201,  1214,  1215,  1216,
    1228,  1235,  1242,  1243,  1244,  1255,  1256,  1257,  1268,  1274,
    1280,  1285,  1290,  1291,  1293,  1295,  1298,  1304,  1308,  1311,
    1316,  1318,  1322,  1327,  1334,  1335,  1344,  1349,  1351,  1355,
    1358,  1360,  1365,  1367,  1369,  1372,  1375,  1377,  1380,  1382,
    1385,  1387,  1389,  1391,  1393,  1396,  1398,  1401,  1404,  1408,
    1410,  1414,  1416,  1420,  1422,  1424,  1428,  1429,  1432,  1433,
    1438,  1443,  1445,  1447,  1450,  1452,  1454,  1457,  1458,  1460,
    1466,  1469,  1473,  1477,  1482,  1486,  1491,  1496,  1502,  1504,
    1506,  1508,  1510,  1512,  1514,  1516,  1518,  1520,  1522,  1527,
    1529,  1531,  1533,  1536,  1539,  1547,  1554,  1557,  1558,  1559,
    1570,  1571,  1578,  1580,  1582,  1584,  1586,  1589,  1591,  1593,
    1595,  1597,  1599,  1601,  1603,  1607,  1609,  1610,  1614,  1617,
    1620,  1622,  1624,  1626,  1628,  1630,  1632,  1634,  1636,  1638,
    1640,  1644,  1646,  1648,  1650,  1653,  1656,  1657,  1660,  1661,
    1666,  1667,  1674,  1675,  1679,  1680,  1686,  1690,  1693,  1697,
    1698,  1699,  1700,  1701,  1702,  1704,  1707,  1710,  1714,  1717,
    1721,  1725,  1730,  1733,  1736,  1740,  1744,  1749,  1751,  1754,
    1756,  1759,  1761,  1765,  1767,  1772,  1774,  1777,  1779,  1782,
    1784,  1787,  1789,  1794,  1797,  1798,  1804,  1805,  1812,  1817,
    1822,  1823,  1824,  1835,  1837,  1838,  1843,  1845,  1847,  1849,
    1851,  1853,  1856,  1858,  1862,  1864,  1869,  1873,  1878,  1885,
    1891,  1897,  1900,  1903,  1905,  1908,  1911,  1914,  1917,  1920,
    1923,  1926,  1929,  1931,  1933,  1938,  1940,  1944,  1948,  1952,
    1954,  1958,  1962,  1964,  1968,  1972,  1974,  1978,  1982,  1986,
    1990,  1992,  1996,  2000,  2002,  2006,  2008,  2012,  2014,  2018,
    2020,  2024,  2026,  2030,  2032,  2033,  2034,  2042,  2044,  2048,
    2052,  2056,  2060,  2064,  2068,  2072,  2076,  2080,  2084,  2088,
    2090,  2091,  2093,  2096,  2104,  2107,  2110,  2118,  2125,  2128,
    2132,  2135,  2139,  2142,  2146,  2150,  2154,  2158,  2161,  2165,
    2166,  2168,  2169,  2171,  2173,  2175,  2177,  2179,  2181,  2183,
    2185,  2187,  2192
};
static const short yyrhs[] =
{
      -1,   198,     0,   199,     0,   198,   199,     0,   260,   463,
       0,   200,     0,   201,     0,   211,     0,   214,     0,   300,
       0,    18,     0,     1,     0,    77,   344,   358,   368,   358,
     463,   309,    91,     0,    77,   344,   358,   368,   358,    23,
     309,   316,   315,   463,    91,     0,     0,    78,   202,   203,
     463,    91,     0,   204,     0,   344,   358,   204,     0,   208,
       0,   372,   208,     0,   466,     0,   309,    24,   358,   368,
     309,    25,     0,   205,    26,    27,     0,   205,    26,   309,
     299,    27,   358,     0,     0,   205,   310,    24,    25,   206,
     232,     0,     0,   205,   310,    24,   369,    25,   207,   232,
       0,   466,     0,   309,    24,   358,   204,   309,    25,     0,
     208,    26,    27,     0,   208,    26,   309,   299,    27,   358,
       0,     0,   208,   310,    24,    25,   209,   233,     0,     0,
     208,   310,    24,   369,    25,   210,   233,     0,     0,     0,
      79,   466,    24,   369,    25,   212,   233,   213,   463,    91,
       0,    92,   400,    95,     0,    93,   386,    95,     0,    94,
     387,    95,     0,    92,    95,     0,   255,     0,   217,    23,
     220,     0,     0,   229,   218,    22,   221,     0,     0,     5,
     219,    22,   221,     0,   217,     0,   217,    40,   220,     0,
     196,     0,   187,     0,    56,     0,   224,   222,   223,     0,
     224,     0,   227,   226,   227,     0,   184,     0,   185,     0,
      53,     0,    52,     0,    54,     0,   228,     0,   230,    24,
     227,    25,     0,    24,   227,   231,   227,    25,     0,   229,
       0,   192,     0,   465,     0,   189,     0,   229,    26,    27,
       0,   229,    26,   192,    27,     0,    34,   229,     0,    24,
     229,    25,     0,   229,    28,   466,     0,   229,    45,   466,
       0,   225,     0,    33,     0,    32,     0,     0,   234,   232,
       0,     0,   235,   233,     0,   236,     0,   240,     0,   239,
       0,   322,     0,   325,     0,   246,     0,   237,     0,   241,
       0,   239,     0,   323,     0,   327,     0,   247,     0,   237,
      91,     0,     0,    74,   238,   248,   463,     0,    76,     0,
     241,    91,     0,     0,    75,   242,   261,     0,   244,     0,
     244,    40,   243,     0,   189,     0,   246,     0,     0,   247,
      91,     0,    73,   243,   439,     0,    73,   243,     0,   249,
       0,   248,    21,   249,     0,   250,   251,     0,     0,   252,
     250,     0,   465,     0,   189,     0,   300,     0,    89,     0,
      90,     0,   121,     0,   122,     0,   135,     0,    80,     0,
      81,     0,    82,     0,    83,     0,    84,     0,    85,     0,
      86,     0,   368,     0,   344,   358,   368,     0,     0,    19,
     257,   417,     0,     0,     0,   258,   421,   259,   410,     0,
     215,   256,     0,   264,   463,     0,   463,     0,   465,     0,
     189,     0,   190,     0,   262,    26,    27,     0,   262,    26,
     263,    27,     0,    34,   262,     0,    24,   262,    25,     0,
     262,    28,   466,     0,   262,    45,   466,     0,   262,     0,
     439,     0,   262,     0,   264,    21,   262,     0,   465,     0,
     189,     0,   265,    26,    27,     0,   265,    26,   263,    27,
       0,    34,   265,     0,    24,   265,    25,     0,   265,    28,
     466,     0,   265,    45,   466,     0,     0,   267,     0,   265,
       0,   267,    21,   265,     0,   465,     0,   189,     0,   439,
       0,    24,   297,    25,     0,   190,     0,   116,     0,     0,
      24,   269,   410,    25,     0,   268,     0,   270,    26,   297,
      27,     0,   270,    24,    25,     0,   270,    24,   271,    25,
       0,    71,    24,   296,    21,   380,    25,     0,   270,   358,
      28,   466,   309,     0,   270,   358,    45,   466,   309,     0,
     270,    48,     0,   270,    49,     0,    24,   380,    25,    19,
     422,   464,    20,     0,   296,     0,   271,    21,   296,     0,
     270,     0,    48,   272,     0,    49,   272,     0,    29,   280,
       0,    34,   280,     0,    33,   280,     0,    32,   280,     0,
      31,   280,     0,    30,   280,     0,   277,   275,   278,     0,
     274,     0,   273,    28,   466,     0,   273,    26,   297,    27,
       0,   466,     0,    47,   309,    24,   380,   358,    21,   273,
      25,   309,     0,     0,   309,   276,   279,     0,     0,     0,
      42,    24,   380,    25,     0,    42,   272,     0,    43,    24,
     380,    25,     0,    43,   272,     0,   272,     0,    24,   380,
      25,   280,     0,   280,     0,   281,    34,   280,     0,   281,
      35,   280,     0,   281,    36,   280,     0,   281,     0,   282,
      33,   281,     0,   282,    32,   281,     0,   282,     0,   283,
      50,   282,     0,   283,    51,   282,     0,   283,     0,   284,
      37,   283,     0,   284,    38,   283,     0,   284,    52,   283,
       0,   284,    53,   283,     0,   284,     0,   285,    54,   284,
       0,   285,    55,   284,     0,   285,     0,   286,    29,   285,
       0,   286,     0,   287,    39,   286,     0,   287,     0,   288,
      40,   287,     0,   288,     0,     0,   289,    56,   290,   288,
       0,   289,     0,     0,   291,    57,   292,   289,     0,   291,
       0,     0,     0,   291,    41,   294,   297,    22,   295,   293,
       0,   293,     0,   272,    23,   296,     0,   272,    58,   296,
       0,   272,    59,   296,     0,   272,    60,   296,     0,   272,
      61,   296,     0,   272,    62,   296,     0,   272,    63,   296,
       0,   272,    64,   296,     0,   272,    65,   296,     0,   272,
      66,   296,     0,   272,    67,   296,     0,   296,     0,   297,
      21,   296,     0,     0,   297,     0,   293,     0,   301,     0,
      72,     0,   307,     0,   344,   309,    18,     0,     0,   344,
     358,   368,   358,   302,   309,   315,    18,   309,     0,     0,
     344,   358,   368,   358,    23,   303,   309,   316,   315,    18,
     309,     0,   305,     0,   195,     0,   368,   358,     0,     0,
     368,   358,    23,   306,   309,   316,     0,     0,    46,   344,
     308,   358,   313,   309,   245,    18,     0,    46,   344,   309,
      18,     0,    46,   311,   309,    18,     0,     0,     0,   312,
     309,     0,   305,     0,   311,    21,   358,   305,     0,   314,
     309,     0,   304,     0,   313,    21,   358,   304,     0,     0,
     315,    21,   358,   305,     0,   296,     0,    19,   320,    20,
       0,    19,   320,    21,    20,     0,   317,   316,     0,   318,
      23,     0,   466,    22,     0,   319,     0,   318,   319,     0,
      26,   299,    27,     0,    28,   466,     0,   316,     0,   320,
      21,   316,     0,   117,     0,   115,     0,   118,     0,   119,
       0,   120,     0,   323,    91,     0,     0,   253,   358,   324,
     267,   463,   309,     0,   327,    91,     0,   254,   358,     0,
       0,   326,   333,   328,   266,   463,   309,     0,     0,   326,
     329,   330,   463,   309,     0,   223,     0,   216,     0,   144,
       0,   145,     0,   147,     0,   148,     0,   146,     0,   129,
       0,   132,     0,   130,     0,   131,     0,   137,     0,   138,
       0,   123,     0,   125,     0,   124,     0,   133,     0,   134,
       0,   126,     0,   128,     0,   141,     0,   143,     0,   156,
       0,   155,     0,   140,     0,   142,     0,   181,     0,   191,
       0,   139,     0,   154,     0,   153,     0,   164,     0,   162,
       0,   163,     0,   157,     0,   158,     0,   159,     0,   160,
       0,   161,     0,   165,     0,   166,     0,   169,     0,   170,
       0,   167,     0,   168,     0,   152,     0,   149,     0,   150,
       0,   151,     0,   121,     0,   122,     0,   135,     0,   136,
       0,   112,   309,     0,   114,   309,     0,   113,   309,     0,
     340,   309,     0,   333,   309,     0,   331,   309,     0,   334,
     309,     0,   332,   309,     0,   336,   309,     0,   335,   309,
       0,   337,   309,     0,   338,   309,     0,   171,   358,     0,
     173,   358,     0,   172,   358,     0,   174,   358,     0,   175,
     358,     0,   176,   358,     0,   177,   358,     0,   178,   358,
       0,   179,   358,     0,   180,   358,     0,   467,   358,     0,
     349,   358,     0,   363,   358,     0,   339,   358,     0,   309,
     344,   309,     0,   346,     0,   346,    88,   345,    91,     0,
     380,     0,   380,    21,   345,     0,   321,   347,     0,   341,
     347,     0,   342,   347,     0,     0,   344,     0,     0,     0,
       0,   358,    68,   466,   309,    19,   350,   414,   359,   415,
     351,    20,   348,     0,     0,     0,   358,    69,   466,   309,
      19,   352,   414,   359,   415,   353,    20,     0,   358,    68,
     466,   309,    19,    20,     0,   358,    69,   466,   309,    19,
      20,     0,     0,     0,   358,    68,   309,    19,   354,   414,
     359,   415,   355,    20,     0,     0,     0,   358,    69,   309,
      19,   356,   414,   359,   415,   357,    20,     0,   358,    68,
     309,    19,    20,     0,   358,    69,   309,    19,    20,     0,
     358,    68,   466,   358,     0,   358,    69,   466,   358,     0,
       0,   360,     0,   214,     0,   359,   360,     0,   344,   358,
     361,   309,    18,     0,   344,   309,    18,     0,   362,   358,
       0,   361,    21,   362,   358,     0,   368,     0,    22,   309,
     299,     0,   368,    22,   309,   299,     0,   358,    70,    19,
     365,    20,   309,     0,     0,   358,    70,   466,    19,   364,
     365,    20,   309,     0,   358,    70,   466,   309,     0,   366,
       0,   365,    21,   366,     0,   365,    21,     0,   466,     0,
     466,    23,   309,   299,     0,   205,     0,   382,     0,   372,
     195,     0,   372,   367,     0,   205,     0,   372,   205,     0,
     375,     0,   358,   373,     0,   112,     0,   113,     0,   114,
       0,   370,     0,   371,   370,     0,    34,     0,    34,   371,
       0,    34,   372,     0,    34,   371,   372,     0,   374,     0,
     374,    21,     5,     0,   466,     0,   374,    21,   466,     0,
       5,     0,   376,     0,   376,    21,     5,     0,     0,   377,
     379,     0,     0,   376,    21,   378,   379,     0,   309,   344,
     367,   309,     0,   466,     0,   343,     0,   343,   381,     0,
     372,     0,   383,     0,   372,   383,     0,     0,   383,     0,
     309,    24,   358,   381,    25,     0,    26,    27,     0,    26,
     299,    27,     0,   383,    26,    27,     0,   383,    26,   299,
      27,     0,   309,    24,    25,     0,   309,    24,   375,    25,
       0,   383,   309,    24,    25,     0,   383,   309,    24,   375,
      25,     0,   402,     0,   404,     0,   407,     0,   410,     0,
     425,     0,   428,     0,   460,     0,   433,     0,   462,     0,
     385,     0,    96,    24,   297,    25,     0,   388,     0,   386,
       0,   395,     0,   388,   395,     0,   432,   388,     0,   459,
     401,    11,    24,   297,    25,    18,     0,   459,   401,    11,
      24,   297,    25,     0,   390,   395,     0,     0,     0,    13,
      24,   298,    18,   298,    18,   391,   298,   392,    25,     0,
       0,   193,   412,    24,   394,   436,    25,     0,   194,     0,
     402,     0,   404,     0,   407,     0,   398,   421,     0,   398,
       0,   399,     0,   425,     0,   396,     0,   389,     0,   393,
       0,   462,     0,    24,   395,    25,     0,     1,     0,     0,
     427,   397,   395,     0,   412,    19,     0,   416,    20,     0,
     401,     0,   420,     0,   402,     0,   404,     0,   407,     0,
     411,     0,   426,     0,   428,     0,   433,     0,   461,     0,
      24,   401,    25,     0,   462,     0,   385,     0,     1,     0,
     466,    22,     0,   111,   384,     0,     0,   102,   403,     0,
       0,     6,   299,   405,    22,     0,     0,   102,   403,     6,
     299,   406,    22,     0,     0,     7,   408,    22,     0,     0,
     102,   403,     7,   409,    22,     0,    24,   410,    25,     0,
     412,   418,     0,   412,   419,   413,     0,     0,     0,     0,
       0,     0,    20,     0,   111,    20,     0,   424,    20,     0,
     424,   111,    20,     0,   421,    20,     0,   421,   111,    20,
       0,   421,   424,    20,     0,   421,   424,   111,    20,     0,
      19,   417,     0,    19,    20,     0,    19,   420,    20,     0,
      19,   421,    20,     0,    19,   421,   424,    20,     0,   401,
       0,   420,   401,     0,   300,     0,   421,   300,     0,   423,
       0,   422,    21,   423,     0,   296,     0,    19,   422,   464,
      20,     0,   384,     0,   424,   384,     0,    18,     0,   297,
      18,     0,    18,     0,   297,    18,     0,   297,     0,     8,
      24,   297,    25,     0,   427,   384,     0,     0,   427,   384,
       9,   429,   384,     0,     0,    10,    24,   297,   430,    25,
     384,     0,    11,    24,   297,    25,     0,    11,    24,   297,
      25,     0,     0,     0,   193,   434,   412,    24,   435,   436,
      25,   410,   458,   413,     0,   438,     0,     0,   436,   437,
      21,   438,     0,   457,     0,   465,     0,   190,     0,   189,
       0,   192,     0,   439,   192,     0,   439,     0,    24,   297,
      25,     0,   440,     0,   270,    26,   297,    27,     0,   270,
      24,    25,     0,   270,    24,   271,    25,     0,    71,    24,
     296,    21,   380,    25,     0,   270,   358,    28,   466,   309,
       0,   270,   358,    45,   466,   309,     0,   270,    48,     0,
     270,    49,     0,   441,     0,    48,   272,     0,    49,   272,
       0,    29,   280,     0,    34,   280,     0,    33,   280,     0,
      32,   280,     0,    31,   280,     0,    30,   280,     0,   275,
       0,   442,     0,    24,   380,    25,   280,     0,   443,     0,
     281,    34,   280,     0,   281,    35,   280,     0,   281,    36,
     280,     0,   444,     0,   282,    33,   281,     0,   282,    32,
     281,     0,   445,     0,   283,    50,   282,     0,   283,    51,
     282,     0,   446,     0,   284,    37,   283,     0,   284,    38,
     283,     0,   284,    52,   283,     0,   284,    53,   283,     0,
     447,     0,   285,    54,   284,     0,   285,    55,   284,     0,
     448,     0,   286,    29,   285,     0,   449,     0,   287,    39,
     286,     0,   450,     0,   288,    40,   287,     0,   451,     0,
     289,    56,   288,     0,   452,     0,   291,    57,   289,     0,
     453,     0,     0,     0,   291,    41,   455,   297,    22,   456,
     293,     0,   454,     0,   272,    23,   296,     0,   272,    58,
     296,     0,   272,    59,   296,     0,   272,    60,   296,     0,
     272,    61,   296,     0,   272,    62,   296,     0,   272,    63,
     296,     0,   272,    64,   296,     0,   272,    65,   296,     0,
     272,    66,   296,     0,   272,    67,   296,     0,   194,     0,
       0,    12,     0,   431,   384,     0,   459,   384,    11,    24,
     297,    25,    18,     0,   390,   384,     0,   431,   401,     0,
     459,   401,    11,    24,   297,    25,    18,     0,   459,   401,
      11,    24,   297,    25,     0,   390,   401,     0,    14,   466,
      18,     0,    15,    18,     0,   101,    15,    18,     0,    16,
      18,     0,    97,    16,    18,     0,    98,    16,    18,     0,
      99,    16,    18,     0,   100,    16,    18,     0,    17,    18,
       0,    17,   297,    18,     0,     0,    18,     0,     0,    21,
       0,   188,     0,   189,     0,   193,     0,   194,     0,   465,
       0,   190,     0,   195,     0,   190,     0,    44,    24,   297,
      25,     0,    44,    24,   380,    25,     0
};

#endif

#if YYDEBUG
/* YYRLINE[YYN] -- source line where rule number YYN was defined. */
static const short yyrline[] =
{
       0,   328,   329,   333,   334,   338,   339,   340,   341,   342,
     343,   344,   345,   349,   351,   356,   356,   365,   371,   376,
     377,   382,   383,   385,   387,   404,   404,   435,   435,   465,
     466,   468,   472,   489,   489,   501,   501,   515,   515,   515,
     524,   525,   526,   527,   531,   535,   540,   540,   545,   545,
     553,   554,   558,   564,   565,   569,   570,   574,   580,   581,
     585,   586,   587,   591,   592,   593,   599,   600,   604,   606,
     608,   610,   619,   621,   623,   625,   642,   646,   647,   654,
     655,   664,   666,   671,   672,   673,   674,   675,   676,   680,
     681,   682,   683,   684,   685,   689,   693,   693,   702,   706,
     710,   710,   725,   727,   732,   736,   737,   741,   745,   751,
     756,   757,   761,   765,   766,   770,   771,   772,   776,   777,
     778,   779,   780,   784,   785,   786,   787,   788,   792,   793,
     797,   804,   809,   809,   815,   815,   815,   826,   837,   838,
     842,   843,   844,   845,   846,   847,   848,   849,   850,   854,
     855,   860,   861,   865,   867,   869,   870,   871,   872,   873,
     875,   880,   881,   885,   891,   904,   905,   906,   907,   908,
     909,   910,   910,   916,   917,   918,   919,   920,   921,   922,
     923,   924,   925,   930,   931,   935,   936,   937,   938,   939,
     940,   941,   942,   943,   944,   945,   949,   950,   952,   956,
     962,   962,   966,   969,   973,   974,   975,   976,   982,   983,
     988,   989,   990,   991,   995,   996,   997,  1001,  1002,  1003,
    1007,  1008,  1009,  1010,  1011,  1015,  1016,  1017,  1021,  1022,
    1026,  1027,  1031,  1032,  1036,  1037,  1037,  1049,  1050,  1050,
    1063,  1064,  1064,  1064,  1070,  1071,  1072,  1073,  1074,  1075,
    1076,  1077,  1078,  1079,  1080,  1081,  1085,  1086,  1090,  1091,
    1095,  1101,  1102,  1103,  1107,  1121,  1121,  1132,  1132,  1141,
    1142,  1146,  1151,  1151,  1156,  1156,  1159,  1160,  1164,  1168,
    1172,  1176,  1177,  1181,  1185,  1186,  1190,  1191,  1195,  1196,
    1197,  1198,  1206,  1207,  1212,  1213,  1217,  1218,  1222,  1224,
    1234,  1235,  1236,  1237,  1238,  1242,  1246,  1246,  1262,  1266,
    1270,  1270,  1284,  1284,  1316,  1317,  1321,  1322,  1323,  1324,
    1325,  1329,  1330,  1331,  1332,  1336,  1337,  1338,  1339,  1340,
    1341,  1342,  1343,  1344,  1345,  1346,  1347,  1348,  1349,  1350,
    1351,  1352,  1356,  1357,  1361,  1362,  1366,  1367,  1371,  1372,
    1373,  1374,  1375,  1379,  1380,  1381,  1382,  1383,  1384,  1388,
    1389,  1390,  1391,  1395,  1396,  1397,  1398,  1402,  1403,  1404,
    1405,  1406,  1407,  1408,  1409,  1410,  1411,  1412,  1413,  1421,
    1422,  1423,  1424,  1425,  1426,  1427,  1428,  1429,  1430,  1431,
    1432,  1433,  1434,  1438,  1443,  1444,  1449,  1450,  1455,  1456,
    1457,  1461,  1462,  1466,  1473,  1473,  1473,  1479,  1479,  1479,
    1484,  1486,  1488,  1488,  1488,  1493,  1493,  1493,  1498,  1500,
    1502,  1503,  1507,  1511,  1512,  1513,  1517,  1519,  1524,  1526,
    1531,  1532,  1533,  1538,  1540,  1540,  1542,  1546,  1548,  1550,
    1554,  1559,  1567,  1568,  1569,  1575,  1580,  1581,  1586,  1587,
    1591,  1592,  1593,  1597,  1598,  1602,  1603,  1604,  1605,  1609,
    1610,  1614,  1615,  1619,  1620,  1621,  1625,  1625,  1626,  1626,
    1631,  1643,  1660,  1661,  1665,  1666,  1667,  1671,  1672,  1676,
    1678,  1679,  1681,  1682,  1684,  1686,  1688,  1690,  1697,  1698,
    1699,  1700,  1701,  1702,  1703,  1704,  1705,  1706,  1710,  1714,
    1718,  1722,  1723,  1728,  1730,  1732,  1734,  1739,  1739,  1739,
    1747,  1747,  1751,  1755,  1756,  1757,  1758,  1759,  1760,  1761,
    1762,  1763,  1764,  1765,  1766,  1767,  1771,  1771,  1778,  1782,
    1786,  1787,  1791,  1792,  1793,  1794,  1795,  1796,  1797,  1798,
    1799,  1800,  1801,  1802,  1806,  1807,  1815,  1816,  1823,  1823,
    1825,  1825,  1830,  1830,  1832,  1832,  1837,  1838,  1843,  1847,
    1851,  1855,  1859,  1863,  1867,  1868,  1869,  1870,  1872,  1873,
    1875,  1877,  1884,  1889,  1891,  1893,  1895,  1900,  1901,  1905,
    1906,  1910,  1911,  1915,  1916,  1920,  1921,  1925,  1926,  1930,
    1931,  1932,  1936,  1950,  1955,  1955,  1960,  1960,  1965,  1971,
    1975,  1975,  1975,  1986,  1987,  1987,  1992,  1993,  1994,  2005,
    2013,  2014,  2018,  2019,  2023,  2024,  2025,  2026,  2027,  2029,
    2030,  2031,  2032,  2036,  2037,  2038,  2039,  2040,  2041,  2042,
    2043,  2044,  2045,  2049,  2050,  2054,  2055,  2056,  2057,  2061,
    2062,  2063,  2067,  2068,  2069,  2073,  2074,  2075,  2076,  2077,
    2081,  2082,  2083,  2087,  2088,  2092,  2093,  2097,  2098,  2102,
    2103,  2107,  2108,  2112,  2113,  2113,  2113,  2119,  2120,  2121,
    2122,  2123,  2124,  2125,  2126,  2127,  2128,  2129,  2130,  2134,
    2135,  2139,  2143,  2145,  2147,  2152,  2153,  2155,  2157,  2161,
    2162,  2163,  2165,  2166,  2167,  2168,  2169,  2170,  2171,  2175,
    2176,  2180,  2181,  2185,  2189,  2190,  2191,  2192,  2193,  2197,
    2198,  2199,  2200
};
#endif


#if (YYDEBUG) || defined YYERROR_VERBOSE

/* YYTNAME[TOKEN_NUM] -- String name of the token TOKEN_NUM. */
static const char *const yytname[] =
{
  "$", "error", "$undefined.", "BADTOK", "SKIPTOK", "CTOK_ELIPSIS", "CASE", 
  "DEFAULT", "CIF", "CELSE", "SWITCH", "WHILE", "DO", "CFOR", "GOTO", 
  "CONTINUE", "BREAK", "RETURN", "TSEMI", "TLBRACE", "TRBRACE", "TCOMMA", 
  "TCOLON", "TASSIGN", "TLPAREN", "TRPAREN", "TLSQBR", "TRSQBR", "TDOT", 
  "TAMPERSAND", "TEXCL", "TTILDE", "TMINUS", "TPLUS", "TMULT", "TDIV", 
  "TPERCENT", "TLT", "TGT", "TCIRC", "TBAR", "TQUEST", "CSIZEOF", 
  "CALIGNOF", "CTYPEOF", "ARROW_OP", "CTYPEDEF", "COFFSETOF", "INC_OP", 
  "DEC_OP", "LEFT_OP", "RIGHT_OP", "LE_OP", "GE_OP", "EQ_OP", "NE_OP", 
  "AND_OP", "OR_OP", "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
  "ADD_ASSIGN", "SUB_ASSIGN", "LEFT_ASSIGN", "RIGHT_ASSIGN", "AND_ASSIGN", 
  "XOR_ASSIGN", "OR_ASSIGN", "CSTRUCT", "CUNION", "CENUM", "VA_ARG", 
  "VA_DCL", "QWARN", "QGLOBALS", "QMODIFIES", "QNOMODS", "QCONSTANT", 
  "QFUNCTION", "QITER", "QDEFINES", "QUSES", "QALLOCATES", "QSETS", 
  "QRELEASES", "QPRECLAUSE", "QPOSTCLAUSE", "QINVARIANT", "QALT", 
  "QUNDEF", "QKILLED", "QENDMACRO", "LLMACRO", "LLMACROITER", 
  "LLMACROEND", "TENDMACRO", "QDREVEALSTATE", "QSWITCHBREAK", 
  "QLOOPBREAK", "QINNERBREAK", "QSAFEBREAK", "QINNERCONTINUE", 
  "QFALLTHROUGH", "QLINTNOTREACHED", "QLINTFALLTHROUGH", "QLINTFALLTHRU", 
  "QARGSUSED", "QPRINTFLIKE", "QLINTPRINTFLIKE", "QSCANFLIKE", 
  "QMESSAGELIKE", "QNOTREACHED", "QCONST", "QRESTRICT", "QVOLATILE", 
  "QINLINE", "QEXTENSION", "QEXTERN", "QSTATIC", "QAUTO", "QREGISTER", 
  "QOUT", "QIN", "QYIELD", "QONLY", "QTEMP", "QSHARED", "QREF", "QUNIQUE", 
  "QCHECKED", "QUNCHECKED", "QCHECKEDSTRICT", "QCHECKMOD", "QKEEP", 
  "QKEPT", "QPARTIAL", "QSPECIAL", "QOWNED", "QDEPENDENT", "QRETURNED", 
  "QEXPOSED", "QNULL", "QOBSERVER", "QISNULL", "QEXITS", "QMAYEXIT", 
  "QNEVEREXIT", "QTRUEEXIT", "QFALSEEXIT", "QLONG", "QSIGNED", 
  "QUNSIGNED", "QSHORT", "QUNUSED", "QSEF", "QNOTNULL", "QRELNULL", 
  "QABSTRACT", "QNUMABSTRACT", "QCONCRETE", "QMUTABLE", "QIMMUTABLE", 
  "QTRUENULL", "QFALSENULL", "QEXTERNAL", "QREFCOUNTED", "QREFS", 
  "QNEWREF", "QTEMPREF", "QKILLREF", "QRELDEF", "CGCHAR", "CBOOL", "CINT", 
  "CGFLOAT", "CDOUBLE", "CVOID", "QANYTYPE", "QINTEGRALTYPE", 
  "QUNSIGNEDINTEGRALTYPE", "QSIGNEDINTEGRALTYPE", "QNULLTERMINATED", 
  "QSETBUFFERSIZE", "QSETSTRINGLENGTH", "QMAXSET", "QMAXREAD", 
  "QTESTINRANGE", "TCAND", "IDENTIFIER", "NEW_IDENTIFIER", 
  "TYPE_NAME_OR_ID", "CANNOTATION", "CCONSTANT", "ITER_NAME", 
  "ITER_ENDNAME", "TYPE_NAME", "METASTATE_NAME", "file", "externalDefs", 
  "externalDef", "constantDecl", "fcnDecl", "@1", "plainFcn", 
  "plainNamedDecl", "namedDeclBase", "@2", "@3", "plainNamedDeclBase", 
  "@4", "@5", "iterDecl", "@6", "@7", "macroDef", "fcnDefHdr", 
  "metaStateConstraint", "metaStateSpecifier", "@8", "@9", 
  "metaStateExpression", "metaStateName", "constraintSeperator", 
  "BufConstraintList", "BufConstraint", "bufferModifier", "relationalOp", 
  "BufConstraintExpr", "BufConstraintTerm", "BufConstraintSrefExpr", 
  "BufUnaryOp", "BufBinaryOp", "functionClauses", "functionClausesPlain", 
  "functionClause", "functionClausePlain", "globalsClause", 
  "globalsClausePlain", "@10", "nomodsClause", "modifiesClause", 
  "modifiesClausePlain", "@11", "flagSpec", "flagId", "optWarnClause", 
  "warnClause", "warnClausePlain", "globIdList", "globIdListExpr", 
  "optGlobQuals", "globId", "globQual", "stateTag", "conditionTag", 
  "fcnDefHdrAux", "fcnBody", "@12", "@13", "@14", "fcnDef", "locModifies", 
  "modListExpr", "mExpr", "modList", "specClauseListExpr", 
  "optSpecClauseList", "specClauseList", "primaryExpr", "@15", 
  "postfixExpr", "argumentExprList", "unaryExpr", "fieldDesignator", 
  "offsetofExpr", "sizeofExpr", "@16", "processSizeof", 
  "endprocessSizeof", "sizeofExprAux", "castExpr", "timesExpr", 
  "plusExpr", "shiftExpr", "relationalExpr", "equalityExpr", "bitandExpr", 
  "xorExpr", "bitorExpr", "andExpr", "@17", "orExpr", "@18", 
  "conditionalExpr", "@19", "@20", "assignExpr", "expr", "optExpr", 
  "constantExpr", "initializer", "instanceDecl", "@21", "@22", 
  "namedInitializerType", "namedInitializer", "@23", "typeDecl", "@24", 
  "IsType", "PushType", "namedInitializerList", "namedInitializerListAux", 
  "namedInitializerTypeList", "namedInitializerTypeListAux", 
  "optDeclarators", "init", "designation", "designatorList", "designator", 
  "initList", "storageSpecifier", "stateClause", "stateClausePlain", 
  "@25", "conditionClause", "startConditionClause", 
  "conditionClausePlain", "@26", "@27", "functionConstraint", 
  "exitsQualifier", "checkQualifier", "stateQualifier", "paramQualifier", 
  "visibilityQualifier", "returnQualifier", "typedefQualifier", 
  "refcountQualifier", "typeModifier", "definedQualifier", 
  "typeQualifier", "typeSpecifier", "completeType", 
  "completeTypeSpecifier", "altType", "completeTypeSpecifierAux", 
  "optCompleteType", "optStructInvariant", "suSpc", "@28", "@29", "@30", 
  "@31", "@32", "@33", "@34", "@35", "NotType", "structDeclList", 
  "structDecl", "structNamedDeclList", "structNamedDecl", "enumSpc", 
  "@36", "enumeratorList", "enumerator", "optNamedDecl", "namedDecl", 
  "genericParamList", "innerMods", "innerModsList", "pointers", 
  "paramIdList", "idList", "paramTypeList", "paramList", "@37", "@38", 
  "paramDecl", "typeExpression", "abstractDecl", "optAbstractDeclBase", 
  "abstractDeclBase", "stmt", "debugStmt", "iterBody", "endBody", 
  "iterDefStmtList", "iterDefIterationStmt", "forPred", "@39", "@40", 
  "partialIterStmt", "@41", "iterDefStmt", "iterSelectionStmt", "@42", 
  "openScope", "closeScope", "macroBody", "stmtErr", "labeledStmt", 
  "optExtraFallThroughs", "caseStmt", "@43", "@44", "defaultStmt", "@45", 
  "@46", "compoundStmt", "compoundStmtErr", "CreateInnerScope", 
  "DeleteInnerScope", "CreateStructInnerScope", "DeleteStructInnerScope", 
  "DeleteInnerScopeSafe", "compoundStmtRest", "compoundStmtAux", 
  "compoundStmtAuxErr", "stmtListErr", "initializerList", 
  "typeInitializerList", "typeInitializer", "stmtList", "expressionStmt", 
  "expressionStmtErr", "ifPred", "selectionStmt", "@47", "@48", 
  "whilePred", "iterWhilePred", "iterStmt", "@49", "@50", "iterArgList", 
  "@51", "iterArgExpr", "cconstantExpr", "primaryIterExpr", 
  "postfixIterExpr", "unaryIterExpr", "castIterExpr", "timesIterExpr", 
  "plusIterExpr", "shiftIterExpr", "relationalIterExpr", 
  "equalityIterExpr", "bitandIterExpr", "xorIterExpr", "bitorIterExpr", 
  "andIterExpr", "orIterExpr", "conditionalIterExpr", "@52", "@53", 
  "assignIterExpr", "endIter", "doHeader", "iterationStmt", 
  "iterationStmtErr", "jumpStmt", "optSemi", "optComma", "id", "newId", 
  "typeName", 0
};
#endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives. */
static const short yyr1[] =
{
       0,   197,   197,   198,   198,   199,   199,   199,   199,   199,
     199,   199,   199,   200,   200,   202,   201,   203,   203,   204,
     204,   205,   205,   205,   205,   206,   205,   207,   205,   208,
     208,   208,   208,   209,   208,   210,   208,   212,   213,   211,
     214,   214,   214,   214,   215,   216,   218,   217,   219,   217,
     220,   220,   221,   222,   222,   223,   223,   224,   225,   225,
     226,   226,   226,   227,   227,   227,   228,   228,   229,   229,
     229,   229,   229,   229,   229,   229,   230,   231,   231,   232,
     232,   233,   233,   234,   234,   234,   234,   234,   234,   235,
     235,   235,   235,   235,   235,   236,   238,   237,   239,   240,
     242,   241,   243,   243,   244,   245,   245,   246,   247,   247,
     248,   248,   249,   250,   250,   251,   251,   251,   252,   252,
     252,   252,   252,   253,   253,   253,   253,   253,   254,   254,
     255,   255,   257,   256,   258,   259,   256,   260,   261,   261,
     262,   262,   262,   262,   262,   262,   262,   262,   262,   263,
     263,   264,   264,   265,   265,   265,   265,   265,   265,   265,
     265,   266,   266,   267,   267,   268,   268,   268,   268,   268,
     268,   269,   268,   270,   270,   270,   270,   270,   270,   270,
     270,   270,   270,   271,   271,   272,   272,   272,   272,   272,
     272,   272,   272,   272,   272,   272,   273,   273,   273,   274,
     276,   275,   277,   278,   279,   279,   279,   279,   280,   280,
     281,   281,   281,   281,   282,   282,   282,   283,   283,   283,
     284,   284,   284,   284,   284,   285,   285,   285,   286,   286,
     287,   287,   288,   288,   289,   290,   289,   291,   292,   291,
     293,   294,   295,   293,   296,   296,   296,   296,   296,   296,
     296,   296,   296,   296,   296,   296,   297,   297,   298,   298,
     299,   300,   300,   300,   301,   302,   301,   303,   301,   304,
     304,   305,   306,   305,   308,   307,   307,   307,   309,   310,
     311,   312,   312,   313,   314,   314,   315,   315,   316,   316,
     316,   316,   317,   317,   318,   318,   319,   319,   320,   320,
     321,   321,   321,   321,   321,   322,   324,   323,   325,   326,
     328,   327,   329,   327,   330,   330,   331,   331,   331,   331,
     331,   332,   332,   332,   332,   333,   333,   333,   333,   333,
     333,   333,   333,   333,   333,   333,   333,   333,   333,   333,
     333,   333,   334,   334,   335,   335,   336,   336,   337,   337,
     337,   337,   337,   338,   338,   338,   338,   338,   338,   339,
     339,   339,   339,   340,   340,   340,   340,   341,   341,   341,
     341,   341,   341,   341,   341,   341,   341,   341,   341,   342,
     342,   342,   342,   342,   342,   342,   342,   342,   342,   342,
     342,   342,   342,   343,   344,   344,   345,   345,   346,   346,
     346,   347,   347,   348,   350,   351,   349,   352,   353,   349,
     349,   349,   354,   355,   349,   356,   357,   349,   349,   349,
     349,   349,   358,   359,   359,   359,   360,   360,   361,   361,
     362,   362,   362,   363,   364,   363,   363,   365,   365,   365,
     366,   366,   367,   367,   367,   367,   368,   368,   369,   369,
     370,   370,   370,   371,   371,   372,   372,   372,   372,   373,
     373,   374,   374,   375,   375,   375,   377,   376,   378,   376,
     379,   379,   380,   380,   381,   381,   381,   382,   382,   383,
     383,   383,   383,   383,   383,   383,   383,   383,   384,   384,
     384,   384,   384,   384,   384,   384,   384,   384,   385,   386,
     387,   388,   388,   389,   389,   389,   389,   391,   392,   390,
     394,   393,   393,   395,   395,   395,   395,   395,   395,   395,
     395,   395,   395,   395,   395,   395,   397,   396,   398,   399,
     400,   400,   401,   401,   401,   401,   401,   401,   401,   401,
     401,   401,   401,   401,   402,   402,   403,   403,   405,   404,
     406,   404,   408,   407,   409,   407,   410,   410,   411,   412,
     413,   414,   415,   416,   417,   417,   417,   417,   417,   417,
     417,   417,   418,   419,   419,   419,   419,   420,   420,   421,
     421,   422,   422,   423,   423,   424,   424,   425,   425,   426,
     426,   426,   427,   428,   429,   428,   430,   428,   431,   432,
     434,   435,   433,   436,   437,   436,   438,   438,   438,   438,
     439,   439,   440,   440,   441,   441,   441,   441,   441,   441,
     441,   441,   441,   442,   442,   442,   442,   442,   442,   442,
     442,   442,   442,   443,   443,   444,   444,   444,   444,   445,
     445,   445,   446,   446,   446,   447,   447,   447,   447,   447,
     448,   448,   448,   449,   449,   450,   450,   451,   451,   452,
     452,   453,   453,   454,   455,   456,   454,   457,   457,   457,
     457,   457,   457,   457,   457,   457,   457,   457,   457,   458,
     458,   459,   460,   460,   460,   461,   461,   461,   461,   462,
     462,   462,   462,   462,   462,   462,   462,   462,   462,   463,
     463,   464,   464,   465,   466,   466,   466,   466,   466,   467,
     467,   467,   467
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN. */
static const short yyr2[] =
{
       0,     0,     1,     1,     2,     2,     1,     1,     1,     1,
       1,     1,     1,     8,    11,     0,     5,     1,     3,     1,
       2,     1,     6,     3,     6,     0,     6,     0,     7,     1,
       6,     3,     6,     0,     6,     0,     7,     0,     0,    10,
       3,     3,     3,     2,     1,     3,     0,     4,     0,     4,
       1,     3,     1,     1,     1,     3,     1,     3,     1,     1,
       1,     1,     1,     1,     4,     5,     1,     1,     1,     1,
       3,     4,     2,     3,     3,     3,     1,     1,     1,     0,
       2,     0,     2,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     0,     4,     1,     2,
       0,     3,     1,     3,     1,     1,     0,     2,     3,     2,
       1,     3,     2,     0,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     0,     3,     0,     0,     4,     2,     2,     1,
       1,     1,     1,     3,     4,     2,     3,     3,     3,     1,
       1,     1,     3,     1,     1,     3,     4,     2,     3,     3,
       3,     0,     1,     1,     3,     1,     1,     1,     3,     1,
       1,     0,     4,     1,     4,     3,     4,     6,     5,     5,
       2,     2,     7,     1,     3,     1,     2,     2,     2,     2,
       2,     2,     2,     2,     3,     1,     3,     4,     1,     9,
       0,     3,     0,     0,     4,     2,     4,     2,     1,     4,
       1,     3,     3,     3,     1,     3,     3,     1,     3,     3,
       1,     3,     3,     3,     3,     1,     3,     3,     1,     3,
       1,     3,     1,     3,     1,     0,     4,     1,     0,     4,
       1,     0,     0,     7,     1,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     1,     3,     0,     1,
       1,     1,     1,     1,     3,     0,     9,     0,    11,     1,
       1,     2,     0,     6,     0,     8,     4,     4,     0,     0,
       2,     1,     4,     2,     1,     4,     0,     4,     1,     3,
       4,     2,     2,     2,     1,     2,     3,     2,     1,     3,
       1,     1,     1,     1,     1,     2,     0,     6,     2,     2,
       0,     6,     0,     5,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     3,     1,     4,     1,     3,     2,     2,
       2,     0,     1,     0,     0,     0,    12,     0,     0,    11,
       6,     6,     0,     0,    10,     0,     0,    10,     5,     5,
       4,     4,     0,     1,     1,     2,     5,     3,     2,     4,
       1,     3,     4,     6,     0,     8,     4,     1,     3,     2,
       1,     4,     1,     1,     2,     2,     1,     2,     1,     2,
       1,     1,     1,     1,     2,     1,     2,     2,     3,     1,
       3,     1,     3,     1,     1,     3,     0,     2,     0,     4,
       4,     1,     1,     2,     1,     1,     2,     0,     1,     5,
       2,     3,     3,     4,     3,     4,     4,     5,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     4,     1,
       1,     1,     2,     2,     7,     6,     2,     0,     0,    10,
       0,     6,     1,     1,     1,     1,     2,     1,     1,     1,
       1,     1,     1,     1,     3,     1,     0,     3,     2,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     1,     1,     1,     2,     2,     0,     2,     0,     4,
       0,     6,     0,     3,     0,     5,     3,     2,     3,     0,
       0,     0,     0,     0,     1,     2,     2,     3,     2,     3,
       3,     4,     2,     2,     3,     3,     4,     1,     2,     1,
       2,     1,     3,     1,     4,     1,     2,     1,     2,     1,
       2,     1,     4,     2,     0,     5,     0,     6,     4,     4,
       0,     0,    10,     1,     0,     4,     1,     1,     1,     1,
       1,     2,     1,     3,     1,     4,     3,     4,     6,     5,
       5,     2,     2,     1,     2,     2,     2,     2,     2,     2,
       2,     2,     1,     1,     4,     1,     3,     3,     3,     1,
       3,     3,     1,     3,     3,     1,     3,     3,     3,     3,
       1,     3,     3,     1,     3,     1,     3,     1,     3,     1,
       3,     1,     3,     1,     0,     0,     7,     1,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     1,
       0,     1,     2,     7,     2,     2,     7,     6,     2,     3,
       2,     3,     2,     3,     3,     3,     3,     2,     3,     0,
       1,     0,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     4,     4
};

/* YYDEFACT[S] -- default rule to reduce with in state S when YYTABLE
   doesn't specify something else to do.  Zero means the default is an
   error. */
static const short yydefact[] =
{
       0,    12,    11,   455,     0,   422,   262,   422,    15,     0,
       0,     0,     0,   278,   278,   278,   301,   300,   302,   303,
     304,   363,   364,   327,   329,   328,   332,   333,   321,   323,
     324,   322,   330,   331,   365,   366,   325,   326,   342,   338,
     334,   339,   335,   316,   317,   320,   318,   319,   360,   361,
     362,   359,   344,   343,   337,   336,   348,   349,   350,   351,
     352,   346,   347,   345,   353,   354,   357,   358,   355,   356,
     422,   422,   422,   422,   422,   422,   422,   422,   422,   422,
     340,   703,   704,   708,   341,   705,   706,   709,     0,     3,
       6,     7,   446,     8,     9,   134,    44,   699,    10,   261,
     263,     0,   401,   278,   278,   278,   278,   278,   278,   278,
     278,   422,   278,   401,   401,   422,   394,   422,     0,   422,
     130,   278,   707,    21,   422,   450,   451,   452,   453,   456,
     457,   278,   281,   278,   278,   274,   422,   710,   422,   422,
     708,     0,   543,   202,   552,     0,     0,     0,   681,     0,
       0,     0,     0,   202,   589,     0,   202,   202,   202,   202,
     202,   202,   278,   202,   202,     0,    43,     0,     0,     0,
       0,     0,     0,   546,   202,   170,   166,   169,   610,   600,
     173,   185,   208,   195,   278,   210,   214,   217,   220,   225,
     228,   230,   232,   234,   237,   240,   244,   256,   591,   542,
       0,     0,   577,   532,   533,   534,   535,     0,     0,   536,
     202,   537,     0,   538,   167,     0,   539,   541,   165,     0,
     525,     0,   587,     0,   559,   512,     0,     0,     0,   521,
       0,   522,   501,   520,   517,   518,   513,   514,   515,     0,
       0,   519,   526,     0,     0,   523,   500,     0,   367,   369,
     368,   379,   381,   380,   382,   383,   384,   385,   386,   387,
     388,     4,   278,     0,   132,   137,   422,   700,     5,   422,
     402,   398,   372,   374,   371,   373,   376,   375,   377,   378,
     392,   370,   399,   400,     0,   278,   278,   390,   278,   278,
       0,   391,   447,   389,   454,   458,   278,   166,   169,     0,
     422,   472,     0,   165,   422,     0,   280,   422,     0,   271,
     278,   699,    17,    19,     0,   422,   278,    29,   466,   208,
     260,   548,     0,   202,   202,   202,   202,     0,   690,   692,
     697,     0,   559,     0,     0,     0,   188,   193,   192,   191,
     190,   189,     0,   278,   186,   187,   202,   202,     0,     0,
       0,     0,     0,   546,     0,   278,   545,   497,   202,   488,
     489,   490,   491,     0,   492,   493,   202,   495,   202,   494,
     496,   559,   202,   202,   180,   181,     0,   202,   202,   202,
     202,   202,   202,   202,   202,   202,   202,   202,   203,   200,
     202,   202,   202,   202,   202,   202,   202,   202,   202,   202,
     202,   202,   202,   202,   202,   202,   235,   241,   238,   590,
     202,   688,    40,     0,   560,   578,   593,   685,   611,     0,
     544,   202,     0,     0,     0,   588,    41,   502,   506,   579,
     422,   516,   528,   529,     0,     0,     0,    42,    23,   202,
     466,   422,   422,   278,   264,   131,     0,   396,     0,   422,
       0,   422,     0,   278,     0,   711,   278,   202,     0,   474,
     473,   475,   712,   278,   277,   278,   276,   272,   422,     0,
     278,     0,   422,   278,    20,   463,     0,     0,   448,   464,
     278,     0,   553,     0,   596,     0,   259,     0,   689,   698,
     559,     0,   168,   202,   540,   278,     0,     0,     0,   693,
     694,   695,   696,   691,   547,   202,   554,     0,   684,   422,
     557,   682,     0,     0,   175,     0,   183,     0,     0,     0,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   194,     0,   211,   212,   213,   216,   215,   218,   219,
     221,   222,   223,   224,   226,   227,   229,   231,   233,   202,
     202,   202,   257,   573,   710,   577,     0,   422,   558,   594,
       0,     0,   524,   510,   278,   580,   527,     0,     0,    25,
       0,   564,   202,   585,   133,   422,   202,   559,   278,   265,
     395,   278,   412,     0,   420,   415,     0,   421,     0,   437,
     440,   434,   436,   393,   480,     0,   466,   476,   202,     0,
     282,   270,   284,   269,   278,   278,   278,   699,    16,    31,
     202,   466,   278,    18,   449,   459,   461,    37,   468,   422,
     467,   471,   549,   592,     0,   598,   202,   172,   202,   209,
     422,     0,   278,   498,   550,     0,   556,   572,     0,   601,
     202,   176,   174,   278,   278,   202,   202,   201,   236,     0,
     239,   574,   575,   202,   202,   202,   599,   202,   422,   202,
     422,    79,    27,   565,   568,   202,   202,   566,   202,   586,
     136,     0,   267,   278,   397,   418,   561,   404,   419,   561,
     407,   278,   439,   278,     0,   481,   484,   278,     0,   482,
       0,   466,   422,   106,   283,   202,   278,   278,     0,    33,
       0,   278,     0,    81,   465,   278,   477,   202,     0,   202,
     583,   701,   581,     0,     0,     0,   555,   202,   202,   184,
     178,   179,   278,   205,   278,   207,   242,   576,   595,     0,
     278,   202,   202,   202,   202,   202,   202,   202,   202,     0,
     166,   169,   185,   208,   632,   214,   217,   220,   225,   228,
     230,   232,   234,   237,     0,   604,   603,   167,   614,   623,
     633,   635,   639,   642,   645,   650,   653,   655,   657,   659,
     661,   663,   667,   606,   165,     0,    24,     0,    96,   100,
      98,   123,   124,   125,   126,   127,   128,   129,    26,    79,
      83,     0,    85,    84,     0,    88,     0,   422,   422,    86,
       0,    87,   312,     0,    79,   569,   570,   202,   567,    22,
     278,   286,   422,   410,   561,   422,   411,   561,   433,   438,
     202,     0,     0,   485,   483,   486,     0,   278,     0,   105,
     202,   202,     0,   288,   273,   202,     0,   294,     0,   202,
       0,   422,    81,    35,     0,   460,   462,    38,    81,    89,
      91,    90,    94,    92,    93,   469,   442,     0,   278,   477,
     443,   478,   597,   507,   701,   202,     0,     0,   177,   551,
       0,   604,     0,     0,   202,   687,     0,     0,   188,   193,
     192,   191,   190,   189,   186,   187,   202,   202,   202,   180,
     181,     0,   202,   202,   202,   202,   202,   202,   202,   202,
     202,   202,   202,   202,   202,   202,   202,   202,   202,   202,
     202,   202,   202,   202,   202,   202,   202,   202,   202,   202,
     664,   202,   511,     0,   505,   104,   109,   102,   113,   699,
      80,    95,    99,   107,   306,   309,   305,     0,   310,   308,
      28,   571,   202,     0,   424,   422,   422,   423,   422,   422,
     422,   441,   278,   479,   487,   285,   275,   298,     0,     0,
     297,   291,   292,   295,   293,   286,    13,    32,    34,    81,
      30,   699,    82,   466,   470,   444,   445,   202,     0,   582,
     182,     0,   198,     0,   559,   204,   206,   243,   686,   168,
     202,     0,   175,     0,     0,     0,     0,   668,   669,   670,
     671,   672,   673,   674,   675,   676,   677,   678,   211,   212,
     213,   216,   215,   218,   219,   221,   222,   223,   224,   226,
     227,   229,   231,   233,   660,   202,   662,   202,   504,   108,
       0,   118,   119,   120,   121,   122,   699,   110,   422,   113,
       0,     0,   141,   142,   101,   151,   699,   139,   140,     0,
      48,     0,     0,    58,    59,    69,    67,   315,     0,   314,
      56,    76,     0,    63,    66,     0,   699,    68,   161,   286,
     278,   422,     0,   278,   425,   413,   422,   416,   422,   435,
     289,   202,   296,   699,    36,     0,   278,   508,   584,   278,
     202,     0,   683,   680,   209,   278,   176,   174,   278,   278,
       0,   605,   103,   113,    97,   116,   112,   117,   115,   114,
       0,   145,     0,     0,     0,     0,   138,     0,     0,   154,
     163,   699,   153,     0,     0,    66,     0,    72,     0,    54,
      53,     0,    61,    60,    62,     0,     0,     0,     0,     0,
       0,   278,   699,   162,     0,   266,   278,   427,   278,   278,
     422,   430,     0,   405,     0,   408,   290,   299,     0,    39,
     278,     0,   199,     0,   196,   679,   560,     0,   178,   179,
     665,   111,   146,   143,   149,     0,   150,   147,   148,   152,
       0,   157,     0,     0,     0,     0,   278,     0,    78,    77,
       0,    73,     0,    50,    45,    46,    55,    66,    57,    70,
       0,    74,    75,     0,     0,   313,   278,   278,   287,   202,
     278,     0,   428,   278,   414,     0,   417,     0,    14,   509,
     197,   602,   177,   202,   144,   158,   155,     0,   159,   160,
     164,   307,    52,    49,     0,     0,    71,    47,    64,   311,
     268,   431,   422,   426,   202,   403,   409,   666,   156,    65,
      51,   429,   432,   406,     0,     0,     0
};

static const short yydefgoto[] =
{
    1254,    88,    89,    90,    91,   139,   311,   312,    92,   661,
     804,   313,   842,   969,    93,   703,   971,   944,    95,  1057,
    1193,  1139,  1123,  1194,  1233,  1131,  1059,  1060,  1061,  1135,
    1062,  1063,  1197,  1065,  1190,   788,   847,   789,   848,   790,
     849,   928,   850,   793,   851,   929,   926,   927,   828,   795,
     796,  1036,  1037,  1038,  1106,  1039,   797,   798,    96,   265,
     441,   266,   577,    97,  1044,  1174,  1175,  1046,  1120,  1142,
    1121,   180,   332,   181,   515,   182,   981,   183,   744,   532,
     184,   531,   647,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   549,   195,   551,   196,   550,   874,   197,
     226,   487,   321,   429,    99,   673,   810,   602,   603,   606,
     100,   307,   101,   263,   133,   134,   604,   605,   943,   834,
     835,   836,   837,   958,   102,   799,   853,  1049,   801,   802,
     854,  1068,   937,  1066,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   301,   430,   446,   116,
     271,  1253,   117,   814,  1215,   817,  1217,   676,  1152,   679,
    1154,   118,   946,   947,  1149,  1150,   119,   684,   588,   589,
     858,   136,   477,   128,   129,   121,   614,   615,   478,   479,
     480,   705,   620,   334,   822,   860,   461,   356,   357,   227,
     247,   228,   229,   358,   977,  1161,   231,   657,   232,   233,
     434,   234,   235,   201,   415,   359,   354,   360,   481,   715,
     361,   322,   635,   362,   206,   363,   558,   812,  1075,   240,
     574,   510,   414,   208,   575,   711,   712,   576,   364,   209,
     210,   365,   654,   624,   366,   243,   367,   371,   718,   755,
     923,   756,   214,   758,   759,   760,   761,   762,   763,   764,
     765,   766,   767,   768,   769,   770,   771,   772,  1025,  1223,
     773,  1166,   368,   369,   216,   370,   268,   866,   303,   219,
     124
};

static const short yypact[] =
{
    2215,-32768,-32768,   314,    31,  5636,-32768,  6865,-32768,   720,
    3280,  3919,  3919,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,   587,-32768,-32768,-32768,-32768,  2397,-32768,
  -32768,-32768,   374,-32768,-32768,    55,-32768,   102,-32768,-32768,
  -32768,   114,  6451,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,  6451,  6451,   198,   133,-32768,   956,-32768,
  -32768,   720,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   314,
  -32768,  5804,-32768,   238,-32768,   198,-32768,-32768,-32768,  5636,
  -32768,   243,-32768,  5927,-32768,   281,   310,   330,-32768,   357,
     720,   400,   427,  1522,-32768,  2783,  5927,  5927,  5927,  5927,
    5927,  5927,-32768,  5956,  5956,   440,-32768,   454,   474,   480,
     537,   570,   498,   458,  5093,-32768,   548,   575,-32768,   618,
  -32768,  1022,   943,-32768,-32768,-32768,   994,   502,   566,   394,
     554,   601,   617,   622,   638,   105,-32768,-32768,   146,-32768,
    3707,   579,   627,-32768,-32768,-32768,-32768,   754,  3387,-32768,
    5093,-32768,  3707,-32768,   572,  3707,-32768,-32768,   762,   765,
  -32768,   777,-32768,  2978,   618,   809,   266,   755,  3813,-32768,
    3919,-32768,-32768,-32768,  6175,-32768,-32768,-32768,-32768,   836,
     843,-32768,-32768,  3919,  3707,-32768,-32768,   773,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,   855,   871,-32768,-32768,  6727,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,   869,   728,-32768,-32768,   720,   720,
      46,-32768,   374,-32768,-32768,-32768,  2002,-32768,-32768,   164,
    6865,   576,   887,-32768,-32768,   913,-32768,-32768,   923,   897,
     728,   102,-32768,   785,   926,-32768,   720,-32768,   261,-32768,
  -32768,-32768,   921,  5927,  5927,  5927,  1772,   952,-32768,-32768,
  -32768,   470,   967,   385,   972,   975,-32768,-32768,-32768,-32768,
  -32768,-32768,   987,  2002,-32768,-32768,  5927,  5927,  1001,  1003,
    1014,  1021,  1027,   458,   737,  2110,-32768,-32768,  5093,-32768,
  -32768,-32768,-32768,  1028,-32768,-32768,  5093,-32768,  5093,-32768,
  -32768,-32768,  5825,  5927,-32768,-32768,    90,  5927,  5927,  5927,
    5927,  5927,  5927,  5927,  5927,  5927,  5927,  5927,-32768,-32768,
    5927,  5927,  5927,  5927,  5927,  5927,  5927,  5927,  5927,  5927,
    5927,  5927,  5927,  5927,  5927,  5927,-32768,-32768,-32768,-32768,
    5927,-32768,-32768,  2588,-32768,-32768,  1068,-32768,-32768,  1002,
  -32768,  5927,   487,   998,  1037,-32768,-32768,-32768,-32768,-32768,
     198,  6175,-32768,-32768,  3919,  3493,  1061,-32768,-32768,  5927,
      59,  4026,  5177,   728,-32768,   438,   991,  1069,  1082,  1083,
    1084,  1083,   720,  1087,   338,-32768,-32768,  5836,  1085,   799,
  -32768,   810,-32768,   728,-32768,   681,-32768,-32768,-32768,  1016,
    1089,  1095,-32768,   728,   785,-32768,   720,  1086,-32768,  1100,
     720,  1098,-32768,   395,  1101,   408,  1101,  1106,-32768,-32768,
     967,  1104,-32768,  5528,-32768,-32768,  1105,  1113,   432,-32768,
  -32768,-32768,-32768,-32768,-32768,  5927,-32768,  1111,-32768,  4026,
  -32768,-32768,  1128,  1118,-32768,   462,-32768,    87,   720,   720,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,   802,-32768,-32768,-32768,   994,   994,   502,   502,
     566,   566,   566,   566,   394,   394,   554,   601,   617,  5927,
    5927,  5927,-32768,-32768,  3173,-32768,  3600,  4216,-32768,-32768,
    1121,   489,-32768,-32768,   728,-32768,-32768,  1126,  1124,-32768,
    1127,-32768,  4596,-32768,-32768,  4406,  4640,   967,-32768,  1130,
  -32768,-32768,  1134,  1136,-32768,  1138,  1140,-32768,   872,-32768,
    1139,-32768,-32768,-32768,-32768,  1137,   653,   810,  5868,  1142,
  -32768,-32768,-32768,-32768,  1146,-32768,-32768,   142,-32768,-32768,
    5927,   156,   728,-32768,-32768,  1155,-32768,-32768,  1176,  6865,
  -32768,-32768,-32768,-32768,  1161,-32768,  1772,-32768,  5555,-32768,
  -32768,  1169,-32768,-32768,-32768,  1165,-32768,-32768,  1167,-32768,
    5927,-32768,-32768,-32768,-32768,  6005,  6035,-32768,   622,   941,
     638,-32768,-32768,  4747,  5093,  5927,-32768,  6094,-32768,  5927,
  -32768,  1862,-32768,-32768,-32768,  4791,  4898,-32768,  4942,-32768,
  -32768,  1164,-32768,-32768,-32768,-32768,-32768,  1172,-32768,-32768,
    1173,-32768,   720,-32768,   720,-32768,-32768,   212,  1170,-32768,
    1174,    86,-32768,  1132,-32768,  1835,-32768,-32768,  1179,-32768,
    1183,-32768,   327,  1862,-32768,   720,   625,  5093,  1191,  5555,
  -32768,  1194,-32768,  1195,  1192,  1175,-32768,  5927,  6094,-32768,
  -32768,-32768,  2002,-32768,  2002,-32768,-32768,-32768,-32768,   546,
    2002,  5927,  5927,  5927,  5927,  5927,  5927,  5956,  5956,  1197,
     642,   651,  1099,  1242,-32768,  1019,   951,   986,   608,  1005,
    1189,  1180,  1154,  1166,   152,  1199,-32768,    45,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,   660,   667,-32768,  1036,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1862,
  -32768,  1135,-32768,-32768,  1141,-32768,  1143,-32768,-32768,-32768,
    1151,-32768,   831,  1156,  1862,-32768,-32768,  5049,-32768,-32768,
  -32768,-32768,  6589,-32768,-32768,  6589,-32768,-32768,-32768,-32768,
    5927,  1045,  1203,-32768,-32768,-32768,  1205,   681,  1213,-32768,
    1835,  5927,   720,-32768,-32768,  1835,   551,-32768,  1211,  1835,
    1157,-32768,  1862,-32768,  1221,-32768,-32768,-32768,  1862,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,   374,  1226,-32768,   564,
  -32768,   810,-32768,-32768,  1194,  5507,  1231,   720,-32768,-32768,
     702,  1228,  1229,  1230,  5927,  1238,   716,  1232,   753,   778,
     795,   801,   812,   822,   832,   835,  5927,  5857,  5927,   841,
     860,   126,  5927,  5927,  5927,  5927,  5927,  5927,  5927,  5927,
    5927,  5927,  5927,  5927,  5927,  5927,  5927,  5927,  5927,  5927,
    5927,  5927,  5927,  5927,  5927,  5927,  5927,  5927,  5927,  5927,
  -32768,  5927,-32768,  1237,  1241,-32768,  1070,  1223,   262,    75,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,   528,-32768,-32768,
  -32768,-32768,  1835,   523,-32768,   198,  5339,-32768,  6589,  5339,
    6589,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1055,  1234,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1862,
  -32768,   102,-32768,   313,-32768,-32768,-32768,  5900,  1246,-32768,
  -32768,   671,-32768,  1250,   967,  1169,  1169,-32768,-32768,   863,
    5528,  1248,   873,   894,   294,   720,   720,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   902,   919,
     927,   911,   954,   507,   796,    79,    98,   176,   339,   827,
     852,    47,   366,   138,   622,  5927,   638,  6094,-32768,   572,
    1036,-32768,-32768,-32768,-32768,-32768,   585,-32768,  6313,   262,
     278,   278,-32768,-32768,-32768,   125,   606,-32768,-32768,    62,
  -32768,   544,   109,-32768,-32768,-32768,-32768,-32768,  1247,-32768,
      -4,-32768,  1004,-32768,   100,  1253,   102,-32768,    62,-32768,
  -32768,-32768,  1254,   134,-32768,-32768,  5339,-32768,  5339,-32768,
  -32768,  1311,-32768,   629,-32768,  1187,   745,-32768,-32768,-32768,
    5927,   720,-32768,  1077,   928,-32768,   955,   957,-32768,-32768,
    1063,-32768,-32768,   262,-32768,-32768,-32768,-32768,-32768,-32768,
     449,   125,   558,   720,   720,   278,-32768,    62,    62,-32768,
     341,   665,-32768,  1252,  1056,   497,   109,   397,    82,-32768,
  -32768,   544,-32768,-32768,-32768,   544,    11,   720,   720,  1257,
     544,-32768,   102,  1260,   690,-32768,   728,-32768,-32768,  1262,
  -32768,  1263,  1264,-32768,  1266,-32768,-32768,-32768,  1196,-32768,
     713,  1265,-32768,   304,-32768,-32768,-32768,  1267,   960,   973,
  -32768,-32768,-32768,-32768,   125,  1270,   572,-32768,-32768,   125,
     741,   341,   736,   720,   720,    62,-32768,  1093,-32768,-32768,
     544,-32768,   497,  1251,-32768,   397,-32768,   397,-32768,-32768,
    1271,-32768,-32768,  1093,  1268,-32768,-32768,-32768,-32768,  5927,
     134,  1276,-32768,-32768,-32768,  1290,-32768,  1291,-32768,-32768,
  -32768,-32768,   995,  5927,-32768,-32768,-32768,  1285,-32768,-32768,
     341,-32768,-32768,-32768,  1288,    82,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,  5927,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,  1314,  1315,-32768
};

static const short yypgoto[] =
{
  -32768,-32768,  1236,-32768,-32768,-32768,-32768,  -424,  -117,-32768,
  -32768,  1000,-32768,-32768,-32768,-32768,-32768,    56,-32768,-32768,
     380,-32768,-32768,    83,   116,-32768,   189,-32768,-32768,-32768,
    -497,-32768,  -915,-32768,-32768,  -726,  -773,-32768,-32768,-32768,
    -585,-32768,  -584,-32768,  -582,-32768,   292,-32768,-32768,   632,
    -656,-32768,   223,   289,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,  -909,   147,-32768, -1005,-32768,
     264,-32768,-32768,  -615,   446,  1080,-32768,-32768,  1150,-32768,
  -32768,-32768,-32768,   -99,  -357,  -363,  -317,  -388,  -385,  -356,
    -338,  -523,  -516,-32768,  -613,-32768,  -140,-32768,-32768,  -104,
    1168,  -595,  -432,     6,-32768,-32768,-32768,   509,    -3,-32768,
  -32768,-32768,  1065,  -292,-32768,-32768,-32768,-32768,  -922,  -785,
  -32768,-32768,   510,-32768,-32768,-32768,  -544,-32768,-32768,-32768,
    -447,-32768,-32768,-32768,-32768,-32768,   536,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,    85,   766,-32768,
     980,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,   300,  -717,  -477,-32768,   139,-32768,-32768,   664,   668,
     493,     1,  -417,  1227,-32768,    13,-32768,-32768,  -581,-32768,
  -32768,-32768,   650,  -102,  1062,-32768,  -451,   442,    17,  1350,
  -32768,  1122,-32768,  1202,-32768,-32768,-32768,-32768,  -177,-32768,
  -32768,-32768,-32768,-32768,   429,  1375,  1011,  1444,-32768,-32768,
    1521,-32768,-32768,  -315,-32768,  1052,   201,  -638,  -822,-32768,
     861,-32768,-32768,   959,  -195,   666,   504,  -460,   113,-32768,
     179,   285,-32768,-32768,   343,-32768,   411,-32768,-32768,   655,
  -32768,   347,  -623,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,  1630,-32768,-32768,  1689,  -281,   513,     0,    19,
  -32768
};


#define	YYLAST		7060


static const short yytable[] =
{
     122,   120,   132,   320,   292,   122,    98,   568,   597,   122,
     218,   218,   218,   544,   545,   688,   130,   491,   546,   123,
    1045,   471,  1064,   570,   123,   595,   648,   199,   141,   302,
     469,   708,   538,   539,   757,   650,   536,   537,  1199,   431,
     507,   815,   742,  1083,   754,   957,   423,   852,   547,   613,
     961,   427,  1129,   428,   965,   131,    94,   336,   337,   338,
     339,   340,   341,   930,   475,   452,  -612,   548,  -654,   968,
    -612,   442,  -654,   634,   264,   972,   791,   792,   940,   794,
     540,   541,   542,   543,   569,   115,  1117,  1050,   122,   120,
     135,   475,   138,   267,    98,   757,  1118,   653,   949,  1040,
    -646,   401,   402,   742,  -646,   754,  1126,   123,   410,  1041,
     826,   825,  1180,  1181,   642,   666,  1052,   800,   518,  -647,
     267,   122,   -46,  -647,   241,   241,  1136,  1077,  1137,   395,
     396,  1110,  1111,  1126,   752,   519,  1125,  1127,   269,   122,
     123,   753,   295,  1052,    94,  1138,   407,  1144,   395,   396,
     122,  1112,   316,  1113,   995,   218,  1148,  1069,   317,  -658,
     267,   475,   408,  -658,   409,   696,   690,   410,     3,   327,
    1114,   996,   199,   115,   218,   507,   948,   404,   698,   950,
    1230,   699,   471,  1130,   447,   410,   852,   270,   701,   455,
     242,   242,   852,   920,   700,   752,  1084,  -648,   270,   270,
     218,  -648,   753,  1200,   791,   792,  1179,   794,   218,   921,
     218,  1192,   218,  1195,   803,   218,  -278,   199,   557,   791,
     792,   286,   794,   218,   315,   199,   395,   396,   218,   199,
     218,  1076,   199,  1078,    81,    82,   140,   418,   457,    85,
      86,   496,   497,   218,   218,   800,     3,  -422,  -422,  -422,
      81,  1119,  -422,  -422,  1153,   861,  1155,   566,   427,   304,
     800,   199,   670,    81,  1042,  1043,   475,   318,   516,   748,
      81,  1055,   749,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   425,   122,   445,   410,   122,   122,
     122,   533,   534,   535,   746,   211,  1157,    81,  1055,   320,
     745,   750,  1040,  1029,   123,   323,   552,   449,   451,   453,
     122,   468,  1041,   852,   459,   410,   122,   320,   475,   751,
    1195,  1097,    81,    82,   140,   410,   697,    85,    86,   123,
     748,  1220,   845,   749,   324,   317,   241,  -422,   686,  -422,
     747,   241,   803,   241,  -422,  -422,  -422,  -422,     3,  -422,
    -422,  1031,  1032,   212,   325,   746,   241,   803,   218,   410,
    -649,   745,   750,   492,  -649,   320,   218,  1182,   218,  1183,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     751,   326,  1087,  1033,  1034,   456,  1184,  -656,   951,   395,
     396,  -656,   688,   630,   629,   403,  1024,  1035,  -279,   959,
     262,   747,   242,   409,   757,  1026,   410,   242,   861,   242,
     492,   280,   742,   218,   754,   285,   410,   287,   328,   291,
     623,   213,   242,  1136,   293,  1137,   125,   126,   127,   410,
     199,   397,   398,   625,   218,   218,   309,   565,   310,   202,
     211,   218,  1138,   122,   578,   329,   399,   400,   565,  -422,
    -422,  -422,   122,   410,  -422,  -422,  -422,   633,   320,  -422,
     600,  -422,   123,   122,   346,   122,    81,  1042,  1043,  1074,
     320,   590,  1074,   122,  1172,  1112,   122,  1113,   347,   447,
     122,   376,   123,   640,   123,   211,   316,   641,   489,  1176,
     348,   410,   317,   211,  1114,   616,   349,   211,   212,   621,
     211,  -422,  -422,  -422,   752,   425,  -422,  -422,   410,   218,
     410,   753,   492,   352,   656,    81,    82,   140,   122,   122,
      85,    86,  1191,  1136,   710,  1137,  1019,  1020,  -643,   211,
     714,  1021,  -643,  1050,   393,   394,   719,   643,   644,   393,
     394,  1070,  1138,   212,  1071,  1013,  1014,   241,   241,  1011,
    1012,   212,  1051,   350,  1124,   212,   218,   218,   212,  1176,
     353,  1022,  1052,   565,   122,   658,   213,   410,  1051,   443,
    -704,   875,   218,   199,   962,   218,   218,   831,  1052,   832,
    1023,   565,  1040,   123,   335,  1173,   351,   212,  -278,   856,
     457,   833,  1041,  1015,  1016,  1017,  1018,  -708,     3,  1074,
    -278,  1074,   457,   267,   463,   710,  1103,   465,   401,   402,
       3,   213,   122,   242,   242,   473,   395,   396,   476,   213,
     872,  -710,   873,   213,   267,   316,   213,  1115,   877,   411,
     403,   317,   878,   879,   880,   881,   882,   883,  1198,   748,
    -705,   417,   749,  1204,   419,   910,   911,   267,  1047,  -278,
    1071,   457,   416,   218,   218,   213,   404,   774,   475,     3,
     912,   913,   405,  -609,   746,   218,   218,  -609,   218,  1093,
     745,   750,  -608,   436,   412,  -710,  -608,  -422,   686,  -422,
     320,  -607,   122,   267,   122,  -607,  1185,  -422,   410,   751,
    1085,   320,   924,  1234,   406,   218,  1089,  1090,   211,  1091,
     459,   590,   122,   590,   706,   122,   122,   218,  1207,   597,
     747,  1071,  1053,  1054,   838,     3,    81,  1055,   774,   859,
    1056,   846,  -530,   410,   621,   123,   833,   983,  1053,  1054,
     564,   833,    81,  1055,   987,   833,  1056,   410,  -474,   457,
     476,   989,   856,   505,   506,   579,    81,  1042,  1043,   584,
     178,   587,    81,    82,   140,  1104,   212,    85,    86,   975,
    1040,   710,     3,  1226,   418,  1116,  1225,  1182,   607,  1183,
    1041,   457,   612,   413,  -626,  -710,  -710,  1241,  -626,     3,
    -710,  -710,   991,   516,  -707,  1141,  1184,   420,   997,   998,
     999,  1000,  1001,  1002,  1003,  1004,  1005,  1006,  1007,  -631,
     508,   421,  1158,  -631,  1008,  1009,  1010,   218,   511,  -279,
     512,   470,  1252,    81,    82,   140,  -630,  -644,    85,    86,
    -630,  -644,  -629,  -278,   213,   457,  -629,   122,   393,   394,
     218,  -706,   122,  -628,  -278,   218,   598,  -628,   833,   218,
    1186,   211,   555,  -627,   645,   646,   123,  -627,  -651,   838,
     426,   960,  -651,  -624,   838,   432,  -625,  -624,   838,   122,
    -625,  1206,  -621,   433,   397,   398,  -621,   122,   437,    81,
      82,   140,   859,  -652,    85,    86,   601,  -652,   123,   399,
     400,  -622,   438,   573,  -613,  -622,   982,   444,  -613,   397,
     398,  1094,   681,   682,  -616,   440,   687,   945,  -616,   212,
     945,    81,    82,   140,   399,   400,    85,    86,    81,    82,
     140,   476,   462,    85,    86,   640,    81,    82,   140,  1096,
     467,    85,    86,  -636,    81,  1042,  1043,  -636,   178,  1048,
     713,   464,  -641,    81,    82,   140,  -641,  1067,    85,    86,
    -637,   466,   218,   482,  -637,   390,   391,   392,  -638,  -634,
     472,   573,  -638,  -634,    23,    24,    25,    26,   579,    27,
     776,   838,   410,   726,    32,    33,   377,   213,    36,    37,
     488,    39,    40,    41,    42,  -640,  -617,   833,  -615,  -640,
    -617,  -619,  -615,   906,   907,  -619,    54,    55,   390,   391,
     392,   490,   827,  1167,  -620,   122,   122,   493,  -620,   573,
     494,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   495,    80,   560,  1098,  1099,  -618,   573,   669,   499,
    -618,   500,    84,   562,   288,   289,   290,   774,   390,   391,
     392,   945,   501,   945,   945,   945,   908,   909,  1108,   502,
    1048,  1048,   891,   292,  1107,   503,   372,   509,   373,  1122,
    -422,  1067,  1067,   903,   904,   905,  1132,  1133,  1134,   914,
     915,   563,   207,   239,   239,   952,   682,  -422,  1122,   320,
     374,   375,   567,   122,  1151,  1080,  1081,   559,   248,   249,
     250,   218,   580,  1247,   410,  1170,   122,   578,  1188,  1189,
     581,   122,   123,   282,   283,   669,   728,   934,   935,  1160,
     838,   582,  -278,   585,   320,   123,   591,   608,   669,   596,
    1164,   617,  1048,   122,   122,  1048,   609,  1122,  1122,   611,
     622,   618,   410,   887,   626,   888,  1067,  -422,  1067,   627,
     631,  1067,  1177,  1178,   632,  1067,   636,   122,   122,   638,
    1067,   967,   639,  1208,  -422,   655,   122,   889,   890,   862,
     659,   660,   662,   672,   675,   677,  1201,  1202,   678,   680,
     122,   945,   683,   945,   685,   123,   691,   692,   272,   273,
     274,   275,   276,   277,   278,   279,   702,   281,   198,   123,
     284,   704,  1048,   122,   122,  1122,   707,   716,   628,   809,
    1067,   717,   813,   816,   918,   823,   300,   869,   305,   306,
     308,   824,  1228,  1229,   314,   777,   841,   207,   843,   863,
     122,  1151,   200,   230,   230,   865,   867,   868,   916,   917,
     300,   886,   919,   319,   922,   925,   931,   342,   953,   123,
     954,   956,   932,   964,   933,  1067,   319,   319,   319,   319,
     319,   319,   936,   344,   345,  1073,   970,   939,   966,   389,
     973,   980,   207,   984,   985,   986,   988,   990,  1027,  1028,
     207,  1082,   178,  1030,   207,   892,  1088,   207,  1092,  1095,
    1128,  1165,  1147,  1086,  1187,   239,   424,  1140,  1159,  1203,
     239,  1185,   239,  1210,  1214,  1213,  1216,  1218,   300,  1232,
    1219,  1235,  1222,  1238,  1243,   239,   207,  1224,  1236,   299,
     893,   894,   895,   896,   897,   898,   899,   900,   901,   902,
    1245,  1246,  1248,  1249,  1255,  1256,   474,  1058,  1250,  1237,
    1196,   331,  1102,   333,   261,   829,  1171,   439,  1109,  1227,
     830,  1156,  1143,   993,   388,   296,   955,   831,   938,   832,
     156,   157,   158,   159,   160,   161,   963,   674,   821,  1242,
     819,   300,   976,   448,   450,   855,   294,   200,   162,   163,
     164,   300,   246,   460,   504,   435,   458,  1221,   198,   979,
     637,  1146,   556,   871,  1101,   864,   198,   978,     0,     0,
     198,   314,   165,   198,     0,   203,   236,   236,     0,     0,
       0,   422,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   200,     0,     0,     0,     0,     0,   300,     0,
     200,     0,   198,     0,   200,     0,     0,   200,     0,     0,
     300,     0,     0,   513,     0,   230,     0,   175,     0,     0,
     230,     0,   230,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   230,   200,     0,     0,     0,
    1212,     0,     0,     0,   204,   237,   237,     0,     0,     0,
       0,     0,     0,     0,   454,   207,     0,     0,     0,     0,
     319,   319,   319,   319,   319,   319,   319,   319,   319,   319,
     319,   319,   319,   319,   319,   319,   239,   239,     0,     0,
       0,   483,   484,   485,   486,   284,     0,     0,     0,    81,
     176,   177,     0,   178,    85,    86,     0,     0,     0,     0,
       0,   454,     0,     0,   583,   498,   586,     0,   592,   319,
       0,   593,     0,   454,   458,     0,   599,     0,     0,     0,
     203,   205,   238,   238,     0,   610,     0,   319,   314,     0,
     330,   517,  1251,     0,     0,   619,   296,     0,     0,     0,
       0,   156,   157,   158,   159,   160,   161,     0,     0,     0,
     300,     0,     0,     0,     0,     0,     0,     0,     0,   162,
     163,   164,     0,   319,     0,   203,     0,     0,     0,     0,
       0,   198,     0,   203,     0,   319,     0,   203,     0,   561,
     203,     0,     0,   165,     0,     0,     0,     0,   236,   204,
       0,     0,     0,   236,     0,   236,     0,     0,   207,     0,
       0,     0,     0,     0,     0,   200,     0,     0,   236,   203,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   319,
       0,   319,     0,     0,     0,     0,   230,   230,   175,     0,
     215,   244,   244,   671,   204,     0,   300,     0,     0,     0,
       0,     0,   204,     0,     0,     0,   204,     0,     0,   204,
       0,     0,   599,     0,     0,     0,     0,   237,     0,   693,
     694,   695,   237,     0,   237,     0,   205,   314,   319,     0,
       0,     0,     0,     0,     0,     0,     0,   237,   204,     0,
     319,     0,     0,     0,     0,     0,     0,   300,     0,   217,
     245,   245,     0,     0,     0,     0,     0,     0,   720,   721,
      81,   297,   298,     0,   178,     0,     0,     0,   649,     0,
       0,   205,   389,     0,   198,   723,   725,     0,     0,   205,
       0,     0,     0,   205,     0,     0,   205,   743,   811,     0,
       0,     0,     0,     0,   238,     0,   818,     0,   820,   238,
       0,   238,   458,     0,     0,     0,     0,     0,   200,     0,
       0,   839,   840,     0,   238,   205,   844,     0,     0,     0,
     619,   857,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   389,     0,   215,     0,   300,   203,   300,
    -258,     0,     0,     0,   486,   300,   296,     0,   743,     0,
       0,   156,   157,   158,   159,   160,   161,     0,     0,   236,
     236,   319,   319,   319,   319,   319,   319,   884,   885,   162,
     163,   164,     0,   729,     0,     0,     0,   775,     0,     0,
     215,     0,     0,     0,     0,     0,     0,     0,   215,     0,
       0,     0,   215,   165,   217,   215,     0,     0,     0,     0,
       0,     0,     0,   244,   830,     0,     0,   204,   244,   296,
     244,   831,     0,   832,   156,   157,   158,   159,   160,   161,
       0,     0,     0,   244,   215,   942,     0,     0,   237,   237,
       0,     0,   162,   163,   164,   870,     0,     0,   175,   217,
     454,     0,   454,     0,     0,     0,     0,   217,   876,     0,
     319,   217,     0,     0,   217,     0,   165,     0,     0,     0,
       0,   319,   245,     0,     0,     0,     0,   245,     0,   245,
       0,     0,     0,   974,   857,     0,   599,     0,     0,     0,
       0,   203,   245,   217,   205,   777,   778,   779,   780,     0,
       0,     0,   781,   782,   783,   784,   785,   786,   787,     0,
       0,   175,     0,     0,   319,   238,   238,     0,     0,     0,
      81,   297,   298,     0,   178,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   319,   319,   319,   319,   319,   319,   319,
     319,   319,   319,   319,   319,   319,   319,   319,   319,   319,
     204,   319,     0,     0,     0,     0,     0,     0,     0,     0,
    1072,     0,     0,     0,     0,     0,     0,  1079,     0,     0,
       0,  -171,     0,    81,   176,   177,   296,   178,    85,    86,
       0,   156,   157,   158,   159,   160,   161,     0,     0,     0,
       0,     0,     0,   215,  -202,  -202,     0,     0,     0,   162,
     163,   164,     0,     0,     0,     0,   994,     0,     0,     0,
       0,     0,     0,     0,   244,   244,     0,     0,     0,     0,
     319,     0,     0,   165,     0,     0,     0,   205,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   389,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   217,     0,     0,     0,     0,   743,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   175,     0,
       0,     0,     0,   245,   245,     0,     0,     0,     0,  -171,
       0,     0,     0,     0,   355,  1145,     0,     0,     0,   156,
     157,   158,   159,   160,   161,   486,     0,     0,     0,     0,
       0,   857,  -202,  -202,  1162,     0,     0,   162,   163,   164,
     300,     0,     0,  1168,  1169,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   165,     0,     0,     0,     0,   215,     0,     0,     0,
      81,   297,   298,  1100,   178,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1205,     0,     0,     0,
       0,     0,     0,  1209,  1211,    -1,     1,     0,     0,     0,
       0,     0,     0,     0,     0,   857,   175,     0,     0,     0,
       0,     0,     0,     2,     0,     0,     0,     0,     0,  -278,
       0,     0,     0,     0,     0,   217,     0,     0,     0,     3,
       0,  1231,     0,     0,     0,     0,     0,     0,  1163,     4,
       0,     5,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1239,  1240,     0,     0,     0,     0,     0,  1244,     0,
       0,     0,     0,  -422,  -422,  -422,     0,     6,     0,   319,
       0,     0,     7,     8,     9,     0,     0,     0,    81,   297,
     298,     0,   178,   319,     0,     0,     0,    10,    11,    12,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   319,     0,     0,    13,    14,    15,
      16,     0,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,     0,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    -2,     1,     0,
       0,     0,     0,    81,    82,    83,    84,     0,    85,    86,
      87,     0,     0,     0,     0,     2,     0,     0,     0,     0,
       0,  -278,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     3,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     4,     0,     5,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -422,  -422,  -422,     0,     6,
       0,     0,     0,     0,     7,     8,     9,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    10,
      11,    12,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    13,
      14,    15,    16,     0,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,     0,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,     0,
       0,     0,     0,     0,     0,    81,    82,    83,    84,   142,
      85,    86,    87,     0,   143,   144,   145,     0,   146,   147,
     148,   149,   150,   151,   152,   153,   154,  -559,   553,     0,
       0,     0,   155,     0,     0,     0,     0,   156,   157,   158,
     159,   160,   161,     0,     0,     0,     0,     0,     0,     0,
    -202,  -202,     4,     0,     5,   162,   163,   164,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -422,  -422,  -422,   165,
       6,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   167,   168,   169,   170,   171,   172,
     173,     0,     0,     0,     0,     0,     0,     0,     0,   174,
      13,    14,    15,    16,   175,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
       0,     0,     0,     0,     0,     0,    81,   176,   554,    84,
     178,   179,    86,    87,   142,     0,     0,     0,     0,   143,
     144,   145,     0,   146,   147,   148,   149,   150,   151,   152,
     153,   154,  -171,     0,     0,     0,     0,   155,     0,     0,
       0,     0,   156,   157,   158,   159,   160,   161,     0,     0,
       0,     0,     0,     0,     0,  -202,  -202,  -278,     0,     0,
     162,   163,   164,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -278,  -278,  -278,   165,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   167,
     168,   169,   170,   171,   172,   173,     0,     0,     0,     0,
       0,     0,     0,     0,   174,  -278,  -278,  -278,  -278,   175,
    -278,  -278,  -278,  -278,  -278,  -278,  -278,  -278,  -278,  -278,
       0,  -278,  -278,  -278,  -278,  -278,  -278,  -278,  -278,  -278,
    -278,  -278,  -278,  -278,  -278,  -278,  -278,  -278,  -278,  -278,
    -278,  -278,  -278,  -278,  -278,  -278,  -278,  -278,  -278,  -278,
    -278,  -278,  -278,  -278,  -278,  -278,  -278,  -278,  -278,  -278,
    -278,  -278,  -278,  -278,  -278,  -278,  -278,  -278,  -278,  -278,
    -278,  -278,  -278,  -278,  -278,     0,     0,     0,     0,     0,
       0,    81,   176,   177,  -278,   178,   179,    86,  -278,   220,
       0,     0,     0,     0,   143,   144,   145,     0,     0,   221,
     148,   149,   150,   151,   152,   153,   222,  -171,  -563,     0,
       0,     0,   223,     0,     0,     0,     0,   156,   157,   158,
     159,   160,   161,     0,     0,     0,     0,     0,     0,     0,
    -202,  -202,  -278,     0,     0,   162,   163,   164,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -278,  -278,  -278,   165,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   168,   169,   170,   171,   172,
     173,     0,     0,     0,     0,     0,     0,     0,     0,   174,
    -278,  -278,  -278,  -278,   175,  -278,  -278,  -278,  -278,  -278,
    -278,  -278,  -278,  -278,  -278,     0,  -278,  -278,  -278,  -278,
    -278,  -278,  -278,  -278,  -278,  -278,  -278,  -278,  -278,  -278,
    -278,  -278,  -278,  -278,  -278,  -278,  -278,  -278,  -278,  -278,
    -278,  -278,  -278,  -278,  -278,  -278,  -278,  -278,  -278,  -278,
    -278,  -278,  -278,  -278,  -278,  -278,  -278,  -278,  -278,  -278,
    -278,  -278,  -278,  -278,  -278,  -278,  -278,  -278,  -278,  -278,
       0,     0,     0,     0,     0,     0,    81,   176,   177,  -278,
     178,   224,   225,  -278,  -169,     0,     0,     0,     0,  -169,
    -169,  -169,     0,  -169,  -169,  -169,  -169,  -169,  -169,  -169,
    -169,  -169,  -169,  -169,  -169,  -708,  -169,  -169,     0,  -169,
       0,  -169,  -169,  -169,  -169,  -169,  -169,  -169,  -169,  -169,
    -169,  -169,  -169,  -169,  -169,  -169,  -169,     0,  -169,     0,
    -169,  -169,  -169,  -169,  -169,  -169,  -169,  -169,  -169,  -169,
    -169,  -169,  -169,  -169,  -169,  -169,  -169,  -169,  -169,  -169,
    -169,     0,     0,     0,  -169,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  -169,
    -169,  -169,  -169,  -169,  -169,  -169,     0,     0,     0,     0,
       0,   142,     0,     0,  -169,     0,   143,   144,   145,  -169,
     146,   147,   148,   149,   150,   151,   152,   153,   154,  -559,
       0,     0,     0,     0,   155,     0,     0,     0,     0,   156,
     157,   158,   159,   160,   161,     0,     0,     0,     0,     0,
       0,     0,  -202,  -202,     0,     0,     0,   162,   163,   164,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   165,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -169,  -169,  -169,     0,  -169,  -169,  -169,     0,     0,
       0,     0,     0,     0,     0,   166,   167,   168,   169,   170,
     171,   172,   173,     0,     0,     0,     0,     0,   142,     0,
       0,   174,     0,   143,   144,   145,   175,   146,   147,   148,
     149,   150,   151,   152,   153,   154,  -559,     0,     0,     0,
       0,   155,     0,     0,     0,     0,   156,   157,   158,   159,
     160,   161,     0,     0,     0,     0,     0,     0,     0,  -202,
    -202,     0,     0,     0,   162,   163,   164,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   165,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    81,   176,
     177,     0,   178,   179,    86,     0,     0,     0,     0,     0,
       0,     0,  -531,   167,   168,   169,   170,   171,   172,   173,
       0,     0,     0,     0,   220,     0,     0,     0,   174,   143,
     144,   145,     0,   175,   221,   148,   149,   150,   151,   152,
     153,   222,  -503,  -503,     0,     0,     0,   223,  -503,     0,
       0,     0,   156,   157,   158,   159,   160,   161,     0,     0,
       0,     0,     0,     0,     0,  -202,  -202,     0,     0,     0,
     162,   163,   164,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   165,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    81,   176,   177,     0,   178,
     179,    86,     0,     0,     0,     0,     0,     0,  -503,     0,
     168,   169,   170,   171,   172,   173,     0,     0,     0,     0,
       0,   142,     0,     0,   174,     0,   143,   144,   145,   175,
     146,   147,   148,   149,   150,   151,   152,   153,   154,  -559,
     651,     0,     0,     0,   155,     0,     0,     0,     0,   156,
     157,   158,   159,   160,   161,     0,     0,     0,     0,     0,
       0,     0,  -202,  -202,     0,     0,     0,   162,   163,   164,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   165,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    81,   176,   177,     0,   178,   224,   225,     0,     0,
       0,     0,     0,     0,     0,     0,   167,   168,   169,   170,
     171,   172,   173,     0,     0,     0,     0,     0,   142,     0,
       0,   174,     0,   143,   144,   145,   175,   146,   147,   148,
     149,   150,   151,   152,   153,   154,  -559,     0,     0,     0,
       0,   155,     0,     0,     0,     0,   156,   157,   158,   159,
     160,   161,     0,     0,     0,     0,     0,     0,     0,  -202,
    -202,     0,     0,     0,   162,   163,   164,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   165,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    81,   176,
     177,     0,   178,   179,    86,     0,     0,     0,     0,     0,
       0,     0,     0,   167,   168,   169,   170,   171,   172,   173,
       0,     0,     0,     0,   220,     0,     0,     0,   174,   143,
     144,   145,     0,   175,   221,   148,   149,   150,   151,   152,
     153,   222,  -559,  -563,     0,     0,     0,   223,     0,     0,
       0,     0,   156,   157,   158,   159,   160,   161,     0,     0,
       0,     0,     0,     0,     0,  -202,  -202,     0,     0,     0,
     162,   163,   164,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   165,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    81,   176,   177,     0,   178,
     179,    86,     0,     0,     0,     0,     0,     0,  -499,     0,
     168,   169,   170,   171,   172,   173,     0,     0,     0,     0,
     220,     0,     0,     0,   174,   143,   144,   145,     0,   175,
     221,   148,   149,   150,   151,   152,   153,   222,  -559,  -563,
       0,     0,     0,   223,     0,     0,     0,     0,   156,   157,
     158,   159,   160,   161,     0,     0,     0,     0,     0,     0,
       0,  -202,  -202,     0,     0,     0,   162,   163,   164,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     165,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    81,   176,   177,     0,   178,   224,   225,     0,     0,
       0,     0,     0,     0,     0,     0,   168,   169,   170,   171,
     172,   173,     0,     0,     0,     0,     0,     0,     0,     0,
     174,     0,   143,   144,   145,   175,   146,   147,   148,   149,
     150,   151,   152,   153,   222,  -559,   571,     0,     0,     0,
     355,     0,     0,     0,     0,   156,   157,   158,   159,   160,
     161,     0,     0,     0,     0,     0,     0,     0,  -202,  -202,
       4,     0,     5,   162,   163,   164,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   165,     6,     0,
       0,     0,     0,     0,     0,     0,     0,    81,   176,   177,
       0,   178,   224,   225,     0,     0,     0,     0,     0,     0,
       0,     0,   167,   168,   169,   170,   171,   172,   173,     0,
       0,     0,     0,     0,     0,     0,     0,   572,    13,    14,
      15,    16,   175,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,     0,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,     0,     0,
       0,     0,     0,     0,    81,   176,   554,    84,   178,   179,
      86,    87,   143,   144,   145,     0,   146,   147,   148,   149,
     150,   151,   152,   153,   222,  -559,   652,     0,     0,     0,
     355,     0,     0,     0,     0,   156,   157,   158,   159,   160,
     161,     0,     0,     0,     0,     0,     0,     0,  -202,  -202,
       4,     0,     5,   162,   163,   164,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   165,     6,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   167,   168,   169,   170,   171,   172,   173,     0,
       0,     0,     0,     0,     0,     0,     0,   174,    13,    14,
      15,    16,   175,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,     0,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,     0,     0,
       0,     0,     0,     0,    81,   176,   554,    84,   178,   179,
      86,    87,   143,   144,   145,     0,   146,   147,   148,   149,
     150,   151,   152,   153,   222,  -559,   664,     0,     0,     0,
     355,     0,     0,     0,     0,   156,   157,   158,   159,   160,
     161,     0,     0,     0,     0,     0,     0,     0,  -202,  -202,
       4,     0,     5,   162,   163,   164,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   165,     6,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   167,   168,   169,   170,   171,   172,   173,     0,
       0,     0,     0,     0,     0,     0,     0,   665,    13,    14,
      15,    16,   175,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,     0,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,     0,     0,
       0,     0,     0,     0,    81,   176,   554,    84,   178,   179,
      86,    87,   143,   144,   145,     0,   146,   147,   148,   149,
     150,   151,   152,   153,   222,  -559,   663,     0,     0,     0,
     355,     0,     0,     0,     0,   156,   157,   158,   159,   160,
     161,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   162,   163,   164,   143,   144,   145,     0,
     146,   147,   148,   149,   150,   151,   152,   153,   222,  -559,
     667,     0,     0,     0,   355,     0,     0,   165,     0,   156,
     157,   158,   159,   160,   161,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   162,   163,   164,
       0,     0,   167,   168,   169,   170,   171,   172,   173,     0,
       0,     0,     0,     0,     0,     0,     0,   174,     0,     0,
       0,   165,   175,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   167,   168,   169,   170,
     171,   172,   173,     0,     0,     0,     0,     0,     0,     0,
       0,   668,     0,   143,   144,   145,   175,   146,   147,   148,
     149,   150,   151,   152,   153,   222,  -559,   727,     0,     0,
       0,   355,     0,     0,     0,     0,   156,   157,   158,   159,
     160,   161,     0,     0,    81,   176,   177,     0,   178,   179,
      86,     0,     0,     0,   162,   163,   164,   143,   144,   145,
       0,   146,   147,   148,   149,   150,   151,   152,   153,   222,
    -559,   805,     0,     0,     0,   355,     0,     0,   165,     0,
     156,   157,   158,   159,   160,   161,     0,     0,    81,   176,
     177,     0,   178,   179,    86,     0,     0,     0,   162,   163,
     164,     0,     0,   167,   168,   169,   170,   171,   172,   173,
       0,     0,     0,     0,     0,     0,     0,     0,   174,     0,
       0,     0,   165,   175,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   167,   168,   169,
     170,   171,   172,   173,     0,     0,     0,     0,     0,     0,
       0,     0,   174,     0,   143,   144,   145,   175,   146,   147,
     148,   149,   150,   151,   152,   153,   222,  -559,   806,     0,
       0,     0,   355,     0,     0,     0,     0,   156,   157,   158,
     159,   160,   161,     0,     0,    81,   176,   177,     0,   178,
     179,    86,     0,     0,     0,   162,   163,   164,   143,   144,
     145,     0,   146,   147,   148,   149,   150,   151,   152,   153,
     222,  -559,   808,     0,     0,     0,   355,     0,     0,   165,
       0,   156,   157,   158,   159,   160,   161,     0,     0,    81,
     176,   177,     0,   178,   179,    86,     0,     0,     0,   162,
     163,   164,     0,     0,   167,   168,   169,   170,   171,   172,
     173,     0,     0,     0,     0,     0,     0,     0,     0,   807,
       0,     0,     0,   165,   175,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   167,   168,
     169,   170,   171,   172,   173,     0,     0,     0,     0,     0,
       0,     0,     0,   174,     0,   143,   144,   145,   175,   146,
     147,   148,   149,   150,   151,   152,   153,   222,  -559,   941,
       0,     0,     0,   355,     0,     0,     0,     0,   156,   157,
     158,   159,   160,   161,     0,     0,    81,   176,   177,     0,
     178,   179,    86,     0,     0,     0,   162,   163,   164,   143,
     144,   145,     0,   146,   147,   148,   149,   150,   151,   152,
     153,   222,  -559,     0,     0,     0,     0,   355,     0,     0,
     165,     0,   156,   157,   158,   159,   160,   161,     0,     0,
      81,   176,   177,     0,   178,   179,    86,     0,     0,     0,
     162,   163,   164,     0,     0,   167,   168,   169,   170,   171,
     172,   173,     0,     0,     0,     0,     0,     0,     0,     0,
     174,     0,     0,     0,   165,   175,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   167,
     168,   169,   170,   171,   172,   173,  -135,     0,     0,     0,
       0,  -135,     0,     0,   174,     0,     0,     0,     0,   175,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     4,     0,     5,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    81,   176,   177,
       0,   178,   179,    86,     0,     0,     0,     0,     0,     6,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    81,   176,   177,     0,   178,   179,    86,     0,    13,
      14,    15,    16,     0,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,     0,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,  -562,
       0,     0,     0,     0,     0,     0,     0,   137,    84,     0,
       0,     0,    87,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     4,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    13,    14,    15,    16,     0,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,     0,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,     0,     0,     0,     0,     0,   709,  -702,     0,   137,
      84,   296,     0,     0,    87,     0,   156,   157,   158,   159,
     160,   161,     0,     0,     0,     0,     0,   628,     0,     0,
       0,     0,   296,     0,   162,   163,   164,   156,   157,   158,
     159,   160,   161,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   709,   162,   163,   164,   165,   296,
       0,     0,     0,     0,   156,   157,   158,   159,   160,   161,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   165,
       0,     0,   162,   163,   164,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   175,     0,     0,   165,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   175,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -278,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       3,   175,     0,     0,     0,     0,     0,     0,     0,     0,
       4,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    81,   297,   298,     0,   178,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    81,   297,   298,     0,
     178,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    81,   297,   298,     0,   178,    13,    14,
      15,    16,     0,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,     0,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,     0,     0,
       0,     0,     0,     0,    81,    82,    83,    84,   296,    85,
      86,    87,     0,   156,   157,   158,   159,   160,   161,     0,
       0,     0,     0,     0,     0,     0,  -202,  -202,     0,   296,
     514,   162,   163,   164,   156,   157,   158,   159,   160,   161,
     296,     0,     0,   594,     0,   156,   157,   158,   159,   160,
     161,     0,   162,   163,   164,   165,     0,     0,     0,     0,
       0,   296,   992,   162,   163,   164,   156,   157,   158,   159,
     160,   161,   296,     0,     0,   689,   165,   156,   157,   158,
     159,   160,   161,     0,   162,   163,   164,   165,     0,     0,
       0,     0,     0,     0,     0,   162,   163,   164,     0,     0,
     175,     0,     0,     0,   296,  -258,     0,     0,   165,   156,
     157,   158,   159,   160,   161,     0,     0,     0,     0,   165,
       0,   175,     0,     0,     0,     0,     0,   162,   163,   164,
       0,   296,   175,     0,     0,     0,   156,   157,   158,   159,
     160,   161,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   165,     0,   175,   162,   163,   164,     0,     0,     0,
     343,     0,     0,     0,   175,   156,   157,   158,   159,   160,
     161,     0,    81,   297,   298,     0,   178,     0,   165,     0,
       0,     0,     0,   162,   163,   164,     0,     0,     0,     0,
       0,     0,     0,    81,   297,   298,   175,   178,     0,     0,
       0,     0,     0,     0,    81,   297,   298,   165,   178,   722,
       0,     0,     0,     0,   156,   157,   158,   159,   160,   161,
       0,     0,     0,   175,     0,    81,   297,   298,     0,   178,
       0,     0,   162,   163,   164,     0,    81,   297,   298,   724,
     178,     0,     0,     0,   156,   157,   158,   159,   160,   161,
       0,     0,   175,     0,     0,     0,   165,     0,     0,     0,
       0,     0,   162,   163,   164,     0,     0,     0,    81,   297,
     298,     0,   178,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   165,     0,     0,     0,
       0,     0,     0,     0,     0,    81,   297,   298,   730,   178,
       0,   175,     0,   731,   732,   733,   734,   735,   736,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   162,   737,   738,    81,   297,   298,     0,   178,     0,
       0,   175,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   739,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    81,   297,   298,     0,   178,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     175,     0,     0,     0,     0,     0,     0,     0,     0,     4,
       0,     5,     0,    81,   297,   298,     0,   178,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -422,  -422,  -422,     0,     6,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    81,   740,   741,     0,   178,    13,    14,    15,
      16,     0,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,     0,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,     4,     0,     5,
       0,     0,     0,     0,     0,   137,    84,     0,     0,     0,
      87,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     6,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    13,    14,    15,    16,     0,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
       0,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,     4,     0,     0,     0,     0,
       0,    81,  1105,   137,    84,     0,     0,     0,    87,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  -422,
    -422,  -422,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    13,    14,    15,    16,     0,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,     0,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,     4,     0,     0,     0,     0,     0,     0,
       0,   137,    84,     0,     0,     0,    87,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    10,    11,    12,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    13,    14,    15,    16,     0,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,     0,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,     4,     0,     5,     0,     0,     0,     0,     0,   137,
      84,     0,     0,     0,    87,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     6,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    13,
      14,    15,    16,     0,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,     0,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,     4,
       0,     0,     0,     0,     0,     0,     0,   137,    84,     0,
       0,     0,    87,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    13,    14,    15,
      16,     0,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,     0,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,     0,     0,     0,
       0,     0,     0,     0,     0,   137,    84,     0,     0,     0,
      87
};

static const short yycheck[] =
{
       0,     0,     5,   143,   121,     5,     0,   439,   459,     9,
      10,    11,    12,   401,   402,   596,     3,   332,   403,     0,
     929,   313,   937,   440,     5,   457,   549,    10,     9,   131,
     311,   626,   395,   396,   657,   551,   393,   394,    27,   234,
     355,   679,   657,   965,   657,   830,   223,   703,   404,   473,
     835,   228,    56,   230,   839,    24,     0,   156,   157,   158,
     159,   160,   161,   789,     5,    19,    21,   405,    21,   842,
      25,   266,    25,   505,    19,   848,   661,   661,   804,   661,
     397,   398,   399,   400,    25,     0,    24,     5,    88,    88,
       5,     5,     7,    18,    88,   718,    34,   557,   815,    24,
      21,    54,    55,   718,    25,   718,    24,    88,    21,    34,
     691,    25,  1117,  1118,    27,   575,    34,   661,    28,    21,
      18,   121,    22,    25,    11,    12,    26,   949,    28,    50,
      51,  1040,  1041,    24,   657,    45,  1051,  1052,    24,   139,
     121,   657,   129,    34,    88,    45,    41,  1069,    50,    51,
     150,    26,   139,    28,    28,   155,    22,   942,   139,    21,
      18,     5,    57,    25,    18,    23,   598,    21,    34,   150,
      45,    45,   155,    88,   174,   490,   814,    39,   610,   817,
    1185,    25,   474,   187,   286,    21,   842,   102,   612,    25,
      11,    12,   848,    41,   611,   718,   969,    21,   113,   114,
     200,    25,   718,   192,   789,   789,  1115,   789,   208,    57,
     210,  1126,   212,  1128,   661,   215,    18,   200,   413,   804,
     804,    88,   804,   223,   139,   208,    50,    51,   228,   212,
     230,   948,   215,   950,   188,   189,   190,   192,    26,   193,
     194,   343,   346,   243,   244,   789,    34,   188,   189,   190,
     188,   189,   193,   194,  1076,   706,  1078,   434,   435,    21,
     804,   244,   577,   188,   189,   190,     5,    24,   372,   657,
     188,   189,   657,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,    18,   285,   285,    21,   288,   289,
     290,   390,   391,   392,   657,    10,  1081,   188,   189,   439,
     657,   657,    24,   926,   285,    24,   410,   288,   289,   290,
     310,   310,    34,   969,   301,    21,   316,   457,     5,   657,
    1235,    27,   188,   189,   190,    21,   607,   193,   194,   310,
     718,    27,     5,   718,    24,   316,   223,    24,    25,    26,
     657,   228,   789,   230,   188,   189,   190,    34,    34,   193,
     194,    89,    90,    10,    24,   718,   243,   804,   358,    21,
      21,   718,   718,    25,    25,   505,   366,    26,   368,    28,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
     718,    24,   977,   121,   122,   300,    45,    21,   820,    50,
      51,    25,   973,   495,   493,    29,   919,   135,    24,   831,
      26,   718,   223,    18,  1027,   921,    21,   228,   859,   230,
      25,   111,  1027,   413,  1027,   115,    21,   117,    18,   119,
      25,    10,   243,    26,   124,    28,   112,   113,   114,    21,
     413,    37,    38,    25,   434,   435,   136,   431,   138,    10,
     155,   441,    45,   443,   443,    18,    52,    53,   442,   188,
     189,   190,   452,    21,   193,   194,    18,    25,   598,    21,
     463,    23,   443,   463,    24,   465,   188,   189,   190,   946,
     610,   452,   949,   473,    25,    26,   476,    28,    24,   581,
     480,   181,   463,    21,   465,   200,   473,    25,    18,  1112,
      16,    21,   473,   208,    45,   476,    16,   212,   155,   480,
     215,   188,   189,   190,  1027,    18,   193,   194,    21,   509,
      21,  1027,    25,    15,    25,   188,   189,   190,   518,   519,
     193,   194,    25,    26,   628,    28,   914,   915,    21,   244,
     632,   916,    25,     5,    32,    33,   640,   518,   519,    32,
      33,    18,    45,   200,    21,   908,   909,   434,   435,   906,
     907,   208,    24,    16,  1051,   212,   556,   557,   215,  1182,
     102,   917,    34,   557,   564,   564,   155,    21,    24,   269,
      22,    25,   572,   556,    23,   575,   576,    26,    34,    28,
     918,   575,    24,   564,   155,    27,    16,   244,    24,   706,
      26,   695,    34,   910,   911,   912,   913,    22,    34,  1076,
      24,  1078,    26,    18,   304,   709,    21,   307,    54,    55,
      34,   200,   612,   434,   435,   315,    50,    51,   318,   208,
     722,    34,   724,   212,    18,   612,   215,    21,   730,   200,
      29,   612,   731,   732,   733,   734,   735,   736,  1135,  1027,
      22,   212,  1027,  1140,   215,    37,    38,    18,   929,    24,
      21,    26,   210,   653,   654,   244,    39,   657,     5,    34,
      52,    53,    40,    21,  1027,   665,   666,    25,   668,   984,
    1027,  1027,    21,   244,    95,    88,    25,    24,    25,    26,
     820,    21,   682,    18,   684,    25,    21,    34,    21,  1027,
     971,   831,    25,  1190,    56,   695,    25,    26,   413,    28,
     687,   682,   702,   684,   619,   705,   706,   707,    18,  1160,
    1027,    21,   184,   185,   695,    34,   188,   189,   718,   706,
     192,   702,    95,    21,   705,   706,   830,    25,   184,   185,
     430,   835,   188,   189,   874,   839,   192,    21,    25,    26,
     440,    25,   859,     6,     7,   445,   188,   189,   190,   449,
     192,   451,   188,   189,   190,  1036,   413,   193,   194,   195,
      24,   865,    34,    27,   192,  1046,    25,    26,   468,    28,
      34,    26,   472,    19,    21,   188,   189,  1209,    25,    34,
     193,   194,   886,   887,    22,  1066,    45,    22,   892,   893,
     894,   895,   896,   897,   898,   899,   900,   901,   902,    21,
     358,    24,  1083,    25,   903,   904,   905,   807,   366,    24,
     368,    26,  1244,   188,   189,   190,    21,    21,   193,   194,
      25,    25,    21,    24,   413,    26,    25,   827,    32,    33,
     830,    22,   832,    21,    24,   835,    26,    25,   942,   839,
    1121,   556,   413,    21,    42,    43,   827,    25,    21,   830,
      95,   832,    25,    21,   835,    19,    21,    25,   839,   859,
      25,  1142,    21,    20,    37,    38,    25,   867,    95,   188,
     189,   190,   859,    21,   193,   194,   195,    25,   859,    52,
      53,    21,    27,   441,    21,    25,   867,    18,    25,    37,
      38,   990,    20,    21,    21,    24,   596,   812,    25,   556,
     815,   188,   189,   190,    52,    53,   193,   194,   188,   189,
     190,   611,    25,   193,   194,    21,   188,   189,   190,    25,
      23,   193,   194,    21,   188,   189,   190,    25,   192,   929,
     630,    18,    21,   188,   189,   190,    25,   937,   193,   194,
      21,    18,   942,    22,    25,    34,    35,    36,    21,    21,
      24,   509,    25,    25,   123,   124,   125,   126,   658,   128,
     660,   942,    21,    22,   133,   134,    23,   556,   137,   138,
      18,   140,   141,   142,   143,    21,    21,  1081,    21,    25,
      25,    21,    25,    32,    33,    25,   155,   156,    34,    35,
      36,    24,   692,  1095,    21,   995,   996,    25,    25,   557,
      25,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    24,   181,    11,   995,   996,    21,   575,   576,    18,
      25,    18,   191,    25,    68,    69,    70,  1027,    34,    35,
      36,   946,    18,   948,   949,   950,    50,    51,  1038,    18,
    1040,  1041,   742,  1160,  1038,    18,    24,    19,    26,  1049,
      28,  1051,  1052,    34,    35,    36,    52,    53,    54,    54,
      55,    24,    10,    11,    12,    20,    21,    45,  1068,  1209,
      48,    49,    11,  1073,  1073,    20,    21,     9,    13,    14,
      15,  1081,    91,  1223,    21,    22,  1086,  1086,    32,    33,
      21,  1091,  1073,   113,   114,   653,   654,   797,   798,  1086,
    1081,    19,    19,    19,  1244,  1086,    19,    91,   666,    24,
    1091,    25,  1112,  1113,  1114,  1115,    27,  1117,  1118,    24,
      22,    21,    21,    24,    18,    26,  1126,    28,  1128,    25,
      25,  1131,  1113,  1114,    21,  1135,    25,  1137,  1138,    11,
    1140,   841,    24,  1146,    45,    24,  1146,    48,    49,   707,
      24,    27,    25,    23,    20,    19,  1137,  1138,    20,    19,
    1160,  1076,    23,  1078,    27,  1146,    24,    21,   103,   104,
     105,   106,   107,   108,   109,   110,    21,   112,    10,  1160,
     115,     5,  1182,  1183,  1184,  1185,    25,    22,    19,    25,
    1190,    24,    20,    20,    40,    25,   131,    22,   133,   134,
     135,    27,  1183,  1184,   139,    73,    27,   155,    25,    18,
    1210,  1210,    10,    11,    12,    21,    21,    25,    29,    39,
     155,    24,    56,   143,    25,   189,    91,   162,    25,  1210,
      25,    18,    91,    22,    91,  1235,   156,   157,   158,   159,
     160,   161,    91,   163,   164,   945,    25,    91,    91,   184,
      24,    20,   200,    25,    25,    25,    18,    25,    21,    18,
     208,    27,   192,    40,   212,    23,    20,   215,    18,    21,
      23,   194,    18,   973,    22,   223,   224,    24,    91,    22,
     228,    21,   230,    21,    20,    22,    20,    91,   223,   196,
      25,    40,    25,    25,    18,   243,   244,    27,    27,   131,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      20,    20,    27,    25,     0,     0,   316,   937,  1235,  1203,
    1131,   153,  1030,   155,    88,   693,  1103,   262,  1039,  1182,
      19,    20,  1068,   887,   184,    24,   827,    26,   802,    28,
      29,    30,    31,    32,    33,    34,   836,   581,   684,  1210,
     682,   286,   859,   288,   289,   705,   129,   155,    47,    48,
      49,   296,    12,   301,   353,   243,   301,  1166,   200,   865,
     509,  1071,   413,   718,  1027,   709,   208,   864,    -1,    -1,
     212,   316,    71,   215,    -1,    10,    11,    12,    -1,    -1,
      -1,   223,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   200,    -1,    -1,    -1,    -1,    -1,   343,    -1,
     208,    -1,   244,    -1,   212,    -1,    -1,   215,    -1,    -1,
     355,    -1,    -1,   371,    -1,   223,    -1,   116,    -1,    -1,
     228,    -1,   230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   243,   244,    -1,    -1,    -1,
    1150,    -1,    -1,    -1,    10,    11,    12,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   296,   413,    -1,    -1,    -1,    -1,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   434,   435,    -1,    -1,
      -1,   323,   324,   325,   326,   430,    -1,    -1,    -1,   188,
     189,   190,    -1,   192,   193,   194,    -1,    -1,    -1,    -1,
      -1,   343,    -1,    -1,   449,   347,   451,    -1,   453,   439,
      -1,   456,    -1,   355,   459,    -1,   461,    -1,    -1,    -1,
     155,    10,    11,    12,    -1,   470,    -1,   457,   473,    -1,
      18,   373,  1242,    -1,    -1,   480,    24,    -1,    -1,    -1,
      -1,    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,
     495,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    47,
      48,    49,    -1,   493,    -1,   200,    -1,    -1,    -1,    -1,
      -1,   413,    -1,   208,    -1,   505,    -1,   212,    -1,   421,
     215,    -1,    -1,    71,    -1,    -1,    -1,    -1,   223,   155,
      -1,    -1,    -1,   228,    -1,   230,    -1,    -1,   556,    -1,
      -1,    -1,    -1,    -1,    -1,   413,    -1,    -1,   243,   244,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   549,
      -1,   551,    -1,    -1,    -1,    -1,   434,   435,   116,    -1,
      10,    11,    12,   578,   200,    -1,   581,    -1,    -1,    -1,
      -1,    -1,   208,    -1,    -1,    -1,   212,    -1,    -1,   215,
      -1,    -1,   597,    -1,    -1,    -1,    -1,   223,    -1,   604,
     605,   606,   228,    -1,   230,    -1,   155,   612,   598,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   243,   244,    -1,
     610,    -1,    -1,    -1,    -1,    -1,    -1,   632,    -1,    10,
      11,    12,    -1,    -1,    -1,    -1,    -1,    -1,   643,   644,
     188,   189,   190,    -1,   192,    -1,    -1,    -1,   550,    -1,
      -1,   200,   657,    -1,   556,   645,   646,    -1,    -1,   208,
      -1,    -1,    -1,   212,    -1,    -1,   215,   657,   673,    -1,
      -1,    -1,    -1,    -1,   223,    -1,   681,    -1,   683,   228,
      -1,   230,   687,    -1,    -1,    -1,    -1,    -1,   556,    -1,
      -1,   696,   697,    -1,   243,   244,   701,    -1,    -1,    -1,
     705,   706,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   718,    -1,   155,    -1,   722,   413,   724,
      18,    -1,    -1,    -1,   626,   730,    24,    -1,   718,    -1,
      -1,    29,    30,    31,    32,    33,    34,    -1,    -1,   434,
     435,   731,   732,   733,   734,   735,   736,   737,   738,    47,
      48,    49,    -1,   655,    -1,    -1,    -1,   659,    -1,    -1,
     200,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   208,    -1,
      -1,    -1,   212,    71,   155,   215,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   223,    19,    -1,    -1,   413,   228,    24,
     230,    26,    -1,    28,    29,    30,    31,    32,    33,    34,
      -1,    -1,    -1,   243,   244,   810,    -1,    -1,   434,   435,
      -1,    -1,    47,    48,    49,   717,    -1,    -1,   116,   200,
     722,    -1,   724,    -1,    -1,    -1,    -1,   208,   730,    -1,
     820,   212,    -1,    -1,   215,    -1,    71,    -1,    -1,    -1,
      -1,   831,   223,    -1,    -1,    -1,    -1,   228,    -1,   230,
      -1,    -1,    -1,   858,   859,    -1,   861,    -1,    -1,    -1,
      -1,   556,   243,   244,   413,    73,    74,    75,    76,    -1,
      -1,    -1,    80,    81,    82,    83,    84,    85,    86,    -1,
      -1,   116,    -1,    -1,   874,   434,   435,    -1,    -1,    -1,
     188,   189,   190,    -1,   192,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   903,   904,   905,   906,   907,   908,   909,
     910,   911,   912,   913,   914,   915,   916,   917,   918,   919,
     556,   921,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     945,    -1,    -1,    -1,    -1,    -1,    -1,   952,    -1,    -1,
      -1,    19,    -1,   188,   189,   190,    24,   192,   193,   194,
      -1,    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    -1,   413,    42,    43,    -1,    -1,    -1,    47,
      48,    49,    -1,    -1,    -1,    -1,   888,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   434,   435,    -1,    -1,    -1,    -1,
     990,    -1,    -1,    71,    -1,    -1,    -1,   556,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1027,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   413,    -1,    -1,    -1,    -1,  1027,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   116,    -1,
      -1,    -1,    -1,   434,   435,    -1,    -1,    -1,    -1,    19,
      -1,    -1,    -1,    -1,    24,  1070,    -1,    -1,    -1,    29,
      30,    31,    32,    33,    34,   977,    -1,    -1,    -1,    -1,
      -1,  1086,    42,    43,  1089,    -1,    -1,    47,    48,    49,
    1095,    -1,    -1,  1098,  1099,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    71,    -1,    -1,    -1,    -1,   556,    -1,    -1,    -1,
     188,   189,   190,  1025,   192,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1141,    -1,    -1,    -1,
      -1,    -1,    -1,  1148,  1149,     0,     1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1160,   116,    -1,    -1,    -1,
      -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,    -1,    24,
      -1,    -1,    -1,    -1,    -1,   556,    -1,    -1,    -1,    34,
      -1,  1186,    -1,    -1,    -1,    -1,    -1,    -1,  1090,    44,
      -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1206,  1207,    -1,    -1,    -1,    -1,    -1,  1213,    -1,
      -1,    -1,    -1,    68,    69,    70,    -1,    72,    -1,  1209,
      -1,    -1,    77,    78,    79,    -1,    -1,    -1,   188,   189,
     190,    -1,   192,  1223,    -1,    -1,    -1,    92,    93,    94,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1244,    -1,    -1,   112,   113,   114,
     115,    -1,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,    -1,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,     0,     1,    -1,
      -1,    -1,    -1,   188,   189,   190,   191,    -1,   193,   194,
     195,    -1,    -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,
      -1,    24,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    44,    -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    69,    70,    -1,    72,
      -1,    -1,    -1,    -1,    77,    78,    79,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    92,
      93,    94,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,
     113,   114,   115,    -1,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,    -1,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,    -1,
      -1,    -1,    -1,    -1,    -1,   188,   189,   190,   191,     1,
     193,   194,   195,    -1,     6,     7,     8,    -1,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    -1,
      -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    70,    71,
      72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    96,    97,    98,    99,   100,   101,
     102,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,    -1,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
      -1,    -1,    -1,    -1,    -1,    -1,   188,   189,   190,   191,
     192,   193,   194,   195,     1,    -1,    -1,    -1,    -1,     6,
       7,     8,    -1,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    -1,    -1,    -1,    -1,    24,    -1,    -1,
      -1,    -1,    29,    30,    31,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    -1,
      47,    48,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    69,    70,    71,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    96,
      97,    98,    99,   100,   101,   102,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
      -1,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,    -1,    -1,    -1,    -1,    -1,
      -1,   188,   189,   190,   191,   192,   193,   194,   195,     1,
      -1,    -1,    -1,    -1,     6,     7,     8,    -1,    -1,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    -1,
      -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      42,    43,    44,    -1,    -1,    47,    48,    49,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    70,    71,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    97,    98,    99,   100,   101,
     102,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,    -1,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
      -1,    -1,    -1,    -1,    -1,    -1,   188,   189,   190,   191,
     192,   193,   194,   195,     1,    -1,    -1,    -1,    -1,     6,
       7,     8,    -1,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    -1,    26,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    -1,    45,    -1,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    -1,    -1,    -1,    71,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    96,
      97,    98,    99,   100,   101,   102,    -1,    -1,    -1,    -1,
      -1,     1,    -1,    -1,   111,    -1,     6,     7,     8,   116,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      -1,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,
      30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    43,    -1,    -1,    -1,    47,    48,    49,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   188,   189,   190,    -1,   192,   193,   194,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    95,    96,    97,    98,    99,
     100,   101,   102,    -1,    -1,    -1,    -1,    -1,     1,    -1,
      -1,   111,    -1,     6,     7,     8,   116,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    -1,    -1,    -1,
      -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
      43,    -1,    -1,    -1,    47,    48,    49,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   188,   189,
     190,    -1,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    95,    96,    97,    98,    99,   100,   101,   102,
      -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,   111,     6,
       7,     8,    -1,   116,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    -1,    -1,    -1,    24,    25,    -1,
      -1,    -1,    29,    30,    31,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    42,    43,    -1,    -1,    -1,
      47,    48,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    71,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   188,   189,   190,    -1,   192,
     193,   194,    -1,    -1,    -1,    -1,    -1,    -1,    95,    -1,
      97,    98,    99,   100,   101,   102,    -1,    -1,    -1,    -1,
      -1,     1,    -1,    -1,   111,    -1,     6,     7,     8,   116,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,
      30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    43,    -1,    -1,    -1,    47,    48,    49,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   188,   189,   190,    -1,   192,   193,   194,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    96,    97,    98,    99,
     100,   101,   102,    -1,    -1,    -1,    -1,    -1,     1,    -1,
      -1,   111,    -1,     6,     7,     8,   116,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    -1,    -1,    -1,
      -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
      43,    -1,    -1,    -1,    47,    48,    49,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   188,   189,
     190,    -1,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    96,    97,    98,    99,   100,   101,   102,
      -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,   111,     6,
       7,     8,    -1,   116,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    -1,    -1,    -1,    24,    -1,    -1,
      -1,    -1,    29,    30,    31,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    42,    43,    -1,    -1,    -1,
      47,    48,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    71,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   188,   189,   190,    -1,   192,
     193,   194,    -1,    -1,    -1,    -1,    -1,    -1,    95,    -1,
      97,    98,    99,   100,   101,   102,    -1,    -1,    -1,    -1,
       1,    -1,    -1,    -1,   111,     6,     7,     8,    -1,   116,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,
      31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    42,    43,    -1,    -1,    -1,    47,    48,    49,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   188,   189,   190,    -1,   192,   193,   194,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    97,    98,    99,   100,
     101,   102,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     111,    -1,     6,     7,     8,   116,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
      24,    -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,    72,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   188,   189,   190,
      -1,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    96,    97,    98,    99,   100,   101,   102,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,    -1,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,    -1,    -1,
      -1,    -1,    -1,    -1,   188,   189,   190,   191,   192,   193,
     194,   195,     6,     7,     8,    -1,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
      24,    -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,    72,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    96,    97,    98,    99,   100,   101,   102,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,    -1,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,    -1,    -1,
      -1,    -1,    -1,    -1,   188,   189,   190,   191,   192,   193,
     194,   195,     6,     7,     8,    -1,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
      24,    -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,    72,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    96,    97,    98,    99,   100,   101,   102,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,    -1,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,    -1,    -1,
      -1,    -1,    -1,    -1,   188,   189,   190,   191,   192,   193,
     194,   195,     6,     7,     8,    -1,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
      24,    -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    47,    48,    49,     6,     7,     8,    -1,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    -1,    -1,    -1,    24,    -1,    -1,    71,    -1,    29,
      30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    47,    48,    49,
      -1,    -1,    96,    97,    98,    99,   100,   101,   102,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,    -1,    -1,
      -1,    71,   116,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    96,    97,    98,    99,
     100,   101,   102,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   111,    -1,     6,     7,     8,   116,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    -1,    -1,
      -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,    32,
      33,    34,    -1,    -1,   188,   189,   190,    -1,   192,   193,
     194,    -1,    -1,    -1,    47,    48,    49,     6,     7,     8,
      -1,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    -1,    -1,    -1,    24,    -1,    -1,    71,    -1,
      29,    30,    31,    32,    33,    34,    -1,    -1,   188,   189,
     190,    -1,   192,   193,   194,    -1,    -1,    -1,    47,    48,
      49,    -1,    -1,    96,    97,    98,    99,   100,   101,   102,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,    -1,
      -1,    -1,    71,   116,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    96,    97,    98,
      99,   100,   101,   102,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   111,    -1,     6,     7,     8,   116,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    -1,
      -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,
      32,    33,    34,    -1,    -1,   188,   189,   190,    -1,   192,
     193,   194,    -1,    -1,    -1,    47,    48,    49,     6,     7,
       8,    -1,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    -1,    -1,    -1,    24,    -1,    -1,    71,
      -1,    29,    30,    31,    32,    33,    34,    -1,    -1,   188,
     189,   190,    -1,   192,   193,   194,    -1,    -1,    -1,    47,
      48,    49,    -1,    -1,    96,    97,    98,    99,   100,   101,
     102,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,
      -1,    -1,    -1,    71,   116,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    96,    97,
      98,    99,   100,   101,   102,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   111,    -1,     6,     7,     8,   116,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,
      31,    32,    33,    34,    -1,    -1,   188,   189,   190,    -1,
     192,   193,   194,    -1,    -1,    -1,    47,    48,    49,     6,
       7,     8,    -1,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    -1,    -1,    -1,    -1,    24,    -1,    -1,
      71,    -1,    29,    30,    31,    32,    33,    34,    -1,    -1,
     188,   189,   190,    -1,   192,   193,   194,    -1,    -1,    -1,
      47,    48,    49,    -1,    -1,    96,    97,    98,    99,   100,
     101,   102,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     111,    -1,    -1,    -1,    71,   116,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    96,
      97,    98,    99,   100,   101,   102,    19,    -1,    -1,    -1,
      -1,    24,    -1,    -1,   111,    -1,    -1,    -1,    -1,   116,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    44,    -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   188,   189,   190,
      -1,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,    72,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   188,   189,   190,    -1,   192,   193,   194,    -1,   112,
     113,   114,   115,    -1,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,    -1,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,    20,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   190,   191,    -1,
      -1,    -1,   195,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   112,   113,   114,   115,    -1,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,    -1,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,    -1,    -1,    -1,    -1,    -1,    19,    20,    -1,   190,
     191,    24,    -1,    -1,   195,    -1,    29,    30,    31,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    19,    -1,    -1,
      -1,    -1,    24,    -1,    47,    48,    49,    29,    30,    31,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    19,    47,    48,    49,    71,    24,
      -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,
      -1,    -1,    47,    48,    49,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   116,    -1,    -1,    71,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   116,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      24,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      34,   116,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   188,   189,   190,    -1,   192,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   188,   189,   190,    -1,
     192,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   188,   189,   190,    -1,   192,   112,   113,
     114,   115,    -1,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,    -1,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,    -1,    -1,
      -1,    -1,    -1,    -1,   188,   189,   190,   191,    24,   193,
     194,   195,    -1,    29,    30,    31,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,    24,
      25,    47,    48,    49,    29,    30,    31,    32,    33,    34,
      24,    -1,    -1,    27,    -1,    29,    30,    31,    32,    33,
      34,    -1,    47,    48,    49,    71,    -1,    -1,    -1,    -1,
      -1,    24,    25,    47,    48,    49,    29,    30,    31,    32,
      33,    34,    24,    -1,    -1,    27,    71,    29,    30,    31,
      32,    33,    34,    -1,    47,    48,    49,    71,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    47,    48,    49,    -1,    -1,
     116,    -1,    -1,    -1,    24,    25,    -1,    -1,    71,    29,
      30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,    71,
      -1,   116,    -1,    -1,    -1,    -1,    -1,    47,    48,    49,
      -1,    24,   116,    -1,    -1,    -1,    29,    30,    31,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    71,    -1,   116,    47,    48,    49,    -1,    -1,    -1,
      24,    -1,    -1,    -1,   116,    29,    30,    31,    32,    33,
      34,    -1,   188,   189,   190,    -1,   192,    -1,    71,    -1,
      -1,    -1,    -1,    47,    48,    49,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   188,   189,   190,   116,   192,    -1,    -1,
      -1,    -1,    -1,    -1,   188,   189,   190,    71,   192,    24,
      -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,
      -1,    -1,    -1,   116,    -1,   188,   189,   190,    -1,   192,
      -1,    -1,    47,    48,    49,    -1,   188,   189,   190,    24,
     192,    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,
      -1,    -1,   116,    -1,    -1,    -1,    71,    -1,    -1,    -1,
      -1,    -1,    47,    48,    49,    -1,    -1,    -1,   188,   189,
     190,    -1,   192,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    71,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   188,   189,   190,    24,   192,
      -1,   116,    -1,    29,    30,    31,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    47,    48,    49,   188,   189,   190,    -1,   192,    -1,
      -1,   116,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    71,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   188,   189,   190,    -1,   192,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     116,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,
      -1,    46,    -1,   188,   189,   190,    -1,   192,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    69,    70,    -1,    72,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   188,   189,   190,    -1,   192,   112,   113,   114,
     115,    -1,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,    -1,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,    44,    -1,    46,
      -1,    -1,    -1,    -1,    -1,   190,   191,    -1,    -1,    -1,
     195,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    72,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   112,   113,   114,   115,    -1,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
      -1,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,    44,    -1,    -1,    -1,    -1,
      -1,   188,   189,   190,   191,    -1,    -1,    -1,   195,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      69,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   112,   113,   114,   115,    -1,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,    -1,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,    44,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   190,   191,    -1,    -1,    -1,   195,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    92,    93,    94,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   112,   113,   114,   115,    -1,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,    -1,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,    44,    -1,    46,    -1,    -1,    -1,    -1,    -1,   190,
     191,    -1,    -1,    -1,   195,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,
     113,   114,   115,    -1,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,    -1,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,    44,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   190,   191,    -1,
      -1,    -1,   195,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,   113,   114,
     115,    -1,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,    -1,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   190,   191,    -1,    -1,    -1,
     195
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */

/* Skeleton output parser for bison,

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002 Free Software
   Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser when
   the %semantic_parser declaration is not specified in the grammar.
   It was written by Richard Stallman by simplifying the hairy parser
   used when %semantic_parser is specified.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

#if ! defined (yyoverflow) || defined (YYERROR_VERBOSE)

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# if YYSTACK_USE_ALLOCA
#  define YYSTACK_ALLOC alloca
# else
#  ifndef YYSTACK_USE_ALLOCA
#   if defined (alloca) || defined (_ALLOCA_H)
#    define YYSTACK_ALLOC alloca
#   else
#    ifdef __GNUC__
#     define YYSTACK_ALLOC __builtin_alloca
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
# else
#  if defined (__STDC__) || defined (__cplusplus)
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   define YYSIZE_T size_t
#  endif
#  define YYSTACK_ALLOC malloc
#  define YYSTACK_FREE free
# endif
#endif /* ! defined (yyoverflow) || defined (YYERROR_VERBOSE) */


#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || (YYLTYPE_IS_TRIVIAL && cgrammar_YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short yyss;
  cgrammar_YYSTYPE yyvs;
# if YYLSP_NEEDED
  YYLTYPE yyls;
# endif
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAX (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# if YYLSP_NEEDED
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (cgrammar_YYSTYPE) + sizeof (YYLTYPE))	\
      + 2 * YYSTACK_GAP_MAX)
# else
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (cgrammar_YYSTYPE))				\
      + YYSTACK_GAP_MAX)
# endif

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  register YYSIZE_T yyi;		\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (0)
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAX;	\
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (0)

#endif


#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# if defined (__STDC__) || defined (__cplusplus)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# endif
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { 								\
      yyerror ("syntax error: cannot back up");			\
      YYERROR;							\
    }								\
while (0)

#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Compute the default location (before the actions
   are run).

   When YYLLOC_DEFAULT is run, CURRENT is set the location of the
   first token.  By default, to implement support for ranges, extend
   its range to the last symbol.  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)       	\
   Current.last_line   = Rhs[N].last_line;	\
   Current.last_column = Rhs[N].last_column;
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#if YYPURE
# if YYLSP_NEEDED
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, &yylloc, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval, &yylloc)
#  endif
# else /* !YYLSP_NEEDED */
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval)
#  endif
# endif /* !YYLSP_NEEDED */
#else /* !YYPURE */
# define YYLEX			yylex ()
#endif /* !YYPURE */


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)
/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
#endif /* !YYDEBUG */

/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#if YYMAXDEPTH == 0
# undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif

#ifdef YYERROR_VERBOSE

# ifndef yystrlen
#  if defined (__GLIBC__) && defined (_STRING_H)
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
#   if defined (__STDC__) || defined (__cplusplus)
yystrlen (const char *yystr)
#   else
yystrlen (yystr)
     const char *yystr;
#   endif
{
  register const char *yys = yystr;

  while (*yys++ != '\0')
    continue;

  return yys - yystr - 1;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#   if defined (__STDC__) || defined (__cplusplus)
yystpcpy (char *yydest, const char *yysrc)
#   else
yystpcpy (yydest, yysrc)
     char *yydest;
     const char *yysrc;
#   endif
{
  register char *yyd = yydest;
  register const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif
#endif



/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
#  define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL
# else
#  define YYPARSE_PARAM_ARG YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
# endif
#else /* !YYPARSE_PARAM */
# define YYPARSE_PARAM_ARG
# define YYPARSE_PARAM_DECL
#endif /* !YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
# ifdef YYPARSE_PARAM
int yyparse (void *);
# else
int yyparse (void);
# endif
#endif

/* YY_DECL_VARIABLES -- depending whether we use a pure parser,
   variables are global, or local to YYPARSE.  */

#define YY_DECL_NON_LSP_VARIABLES			\
/* The lookahead symbol.  */				\
int yychar;						\
							\
/* The semantic value of the lookahead symbol. */	\
cgrammar_YYSTYPE yylval;						\
							\
/* Number of parse errors so far.  */			\
int yynerrs;

#if YYLSP_NEEDED
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES			\
						\
/* Location data for the lookahead symbol.  */	\
YYLTYPE yylloc;
#else
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES
#endif


/* If nonreentrant, generate the variables here. */

#if !YYPURE
YY_DECL_VARIABLES
#endif  /* !YYPURE */

int
yyparse (YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  /* If reentrant, generate the variables here. */
#if YYPURE
  YY_DECL_VARIABLES
#endif  /* !YYPURE */

  register int yystate;
  register int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Lookahead token as an internal (translated) token number.  */
  int yychar1 = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack. */
  short	yyssa[YYINITDEPTH];
  short *yyss = yyssa;
  register short *yyssp;

  /* The semantic value stack.  */
  cgrammar_YYSTYPE yyvsa[YYINITDEPTH];
  cgrammar_YYSTYPE *yyvs = yyvsa;
  register cgrammar_YYSTYPE *yyvsp;

#if YYLSP_NEEDED
  /* The location stack.  */
  YYLTYPE yylsa[YYINITDEPTH];
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;
#endif

#if YYLSP_NEEDED
# define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
# define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  YYSIZE_T yystacksize = YYINITDEPTH;


  /* The variables used to return semantic value and location from the
     action routines.  */
  cgrammar_YYSTYPE yyval;
#if YYLSP_NEEDED
  YYLTYPE yyloc;
#endif

  /* When reducing, the number of symbols on the RHS of the reduced
     rule. */
  int yylen;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;
#if YYLSP_NEEDED
  yylsp = yyls;
#endif
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack. Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	cgrammar_YYSTYPE *yyvs1 = yyvs;
	short *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  */
# if YYLSP_NEEDED
	YYLTYPE *yyls1 = yyls;
	/* This used to be a conditional around just the two extra args,
	   but that might be undefined if yyoverflow is a macro.  */
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);
	yyls = yyls1;
# else
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);
# endif
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyoverflowlab;
# else
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	goto yyoverflowlab;
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;

      {
	short *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyoverflowlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);
# if YYLSP_NEEDED
	YYSTACK_RELOCATE (yyls);
# endif
# undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
#if YYLSP_NEEDED
      yylsp = yyls + yysize - 1;
#endif

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yychar1 = YYTRANSLATE (yychar);

#if YYDEBUG
     /* We have to keep this `#if YYDEBUG', since we use variables
	which are defined only if `YYDEBUG' is set.  */
      if (yydebug)
	{
	  YYFPRINTF (stderr, "Next token is %d (%s",
		     yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise
	     meaning of a token, for further debugging info.  */
# ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
# endif
	  YYFPRINTF (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */
  YYDPRINTF ((stderr, "Shifting token %d (%s), ",
	      yychar, yytname[yychar1]));

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  yystate = yyn;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to the semantic value of
     the lookahead token.  This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

#if YYLSP_NEEDED
  /* Similarly for the default location.  Let the user run additional
     commands if for instance locations are ranges.  */
  yyloc = yylsp[1-yylen];
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
#endif

#if YYDEBUG
  /* We have to keep this `#if YYDEBUG', since we use variables which
     are defined only if `YYDEBUG' is set.  */
  if (yydebug)
    {
      int yyi;

      YYFPRINTF (stderr, "Reducing via rule %d (line %d), ",
		 yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (yyi = yyprhs[yyn]; yyrhs[yyi] > 0; yyi++)
	YYFPRINTF (stderr, "%s ", yytname[yyrhs[yyi]]);
      YYFPRINTF (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif

  switch (yyn) {

case 3:
{ context_checkGlobalScope (); ;
    break;}
case 4:
{ context_checkGlobalScope (); ;
    break;}
case 5:
{ uentry_clearDecl (); ;
    break;}
case 6:
{ uentry_clearDecl (); ;
    break;}
case 7:
{ uentry_clearDecl (); ;
    break;}
case 8:
{ uentry_clearDecl (); ;
    break;}
case 9:
{ uentry_clearDecl (); ;
    break;}
case 10:
{ uentry_checkDecl (); exprNode_free (yyvsp[0].expr); ;
    break;}
case 11:
{ uentry_clearDecl (); lltok_free (yyvsp[0].tok); /* evans 2002-02-08: okay to have a null statement */ ;
    break;}
case 12:
{ uentry_clearDecl (); ;
    break;}
case 13:
{ checkConstant (yyvsp[-6].qtyp, yyvsp[-4].ntyp); lltok_free2 (yyvsp[-7].tok, yyvsp[0].tok); ;
    break;}
case 14:
{ checkValueConstant (yyvsp[-9].qtyp, yyvsp[-7].ntyp, yyvsp[-3].expr); lltok_free3 (yyvsp[-10].tok, yyvsp[-5].tok, yyvsp[0].tok); ;
    break;}
case 15:
{ context_enterFunctionHeader (); ;
    break;}
case 16:
{ 
     declareStaticFunction (yyvsp[-2].ntyp); context_quietExitFunction (); 
     context_exitFunctionHeader (); 
     lltok_free2 (yyvsp[-4].tok, yyvsp[0].tok); /*!*/
   ;
    break;}
case 17:
{ 
     qtype qint = qtype_create (ctype_int);
     yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, qint);
     qtype_free (qint);
   ;
    break;}
case 18:
{ yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, yyvsp[-2].qtyp); ;
    break;}
case 20:
{ yyval.ntyp = yyvsp[0].ntyp; qtype_adjustPointers (yyvsp[-1].pointers, idDecl_getTyp (yyval.ntyp)); ;
    break;}
case 21:
{ yyval.ntyp = idDecl_create (yyvsp[0].cname, qtype_unknown ()); ;
    break;}
case 22:
{ yyval.ntyp = idDecl_expectFunction (yyvsp[-2].ntyp); lltok_free2 (yyvsp[-4].tok, yyvsp[0].tok); ;
    break;}
case 23:
{ yyval.ntyp = idDecl_replaceCtype (yyvsp[-2].ntyp, ctype_makeInnerArray (idDecl_getCtype (yyvsp[-2].ntyp))); lltok_free2 (yyvsp[-1].tok, yyvsp[0].tok); ;
    break;}
case 24:
{
     exprNode_findValue (yyvsp[-2].expr);
     idDecl_notExpectingFunction (yyvsp[-5].ntyp);

     if (exprNode_hasValue (yyvsp[-2].expr)) 
       {
	 yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ctype_makeInnerFixedArray (idDecl_getCtype (yyvsp[-5].ntyp), 
								  exprNode_getLongValue (yyvsp[-2].expr)));
       } 
     else
       {
	 yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ctype_makeInnerArray (idDecl_getCtype (yyvsp[-5].ntyp))); 
       }

     lltok_free2 (yyvsp[-4].tok, yyvsp[-1].tok);
   ;
    break;}
case 25:
{ setCurrentParams (uentryList_missingParams); ;
    break;}
case 26:
{ /* need to support globals and modifies here! */
     functionClauseList fcl;
     ctype ct = ctype_makeFunction (idDecl_getCtype (yyvsp[-5].ntyp), 
				    uentryList_makeMissingParams ());
     
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ct);

     /*drl 7/25/01 added*/
     setImplicitfcnConstraints();

     DPRINTF((message("namedDeclBase PushType TLPAREN TRPAREN...:\n adding implict constraints to functionClause List: %s",
		      functionClauseList_unparse(yyvsp[0].funcclauselist)
		      )
	      ));
     
     fcl = functionClauseList_setImplicitConstraints(yyvsp[0].funcclauselist);

     idDecl_addClauses (yyval.ntyp, fcl);

     DPRINTF((message("1 added fuctionClause List: %s to the Id",
		      functionClauseList_unparse(fcl)
		      )
	      ));

     
     context_popLoc ();
     lltok_free2 (yyvsp[-3].tok, yyvsp[-2].tok);
   ;
    break;}
case 27:
{ setCurrentParams (yyvsp[-1].entrylist); ;
    break;}
case 28:
{
     functionClauseList fcl;
     setImplicitfcnConstraints ();
     clearCurrentParams ();
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-6].ntyp, ctype_makeFunction (idDecl_getCtype (yyvsp[-6].ntyp), yyvsp[-3].entrylist));

     DPRINTF((message("namedDeclBase PushType TLPAREN genericParamList TRPAREN...:\n adding implict constraints to functionClause List: %s",
		      functionClauseList_unparse(yyvsp[0].funcclauselist)
		      )
	      )) ;
     
     fcl = functionClauseList_setImplicitConstraints(yyvsp[0].funcclauselist);

     idDecl_addClauses (yyval.ntyp, fcl);

     DPRINTF((message("added fuctionClause List: %s to the Id",
		      functionClauseList_unparse(fcl)
		      )
	      ));

     
     context_popLoc (); 
     lltok_free2 (yyvsp[-4].tok, yyvsp[-2].tok);
   ;
    break;}
case 29:
{ yyval.ntyp = idDecl_create (yyvsp[0].cname, qtype_unknown ()); ;
    break;}
case 30:
{ yyval.ntyp = idDecl_expectFunction (yyvsp[-2].ntyp); lltok_free2 (yyvsp[-4].tok, yyvsp[0].tok); ;
    break;}
case 31:
{ yyval.ntyp = idDecl_replaceCtype (yyvsp[-2].ntyp, ctype_makeInnerArray (idDecl_getCtype (yyvsp[-2].ntyp))); 
     lltok_free2 (yyvsp[-1].tok, yyvsp[0].tok); 
   ;
    break;}
case 32:
{ 
     int value;

     if (exprNode_hasValue (yyvsp[-2].expr) 
	 && multiVal_isInt (exprNode_getValue (yyvsp[-2].expr)))
       {
	 value = (int) multiVal_forceInt (exprNode_getValue (yyvsp[-2].expr));
       }
     else
       {
	 value = 0;
       }

     yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ctype_makeInnerFixedArray (idDecl_getCtype (yyvsp[-5].ntyp), value));
     lltok_free2 (yyvsp[-4].tok, yyvsp[-1].tok);
   ;
    break;}
case 33:
{ setCurrentParams (uentryList_missingParams); ;
    break;}
case 34:
{
     ctype ct = ctype_makeFunction (idDecl_getCtype (yyvsp[-5].ntyp), 
				    uentryList_makeMissingParams ());
     
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ct);
     idDecl_addClauses (yyval.ntyp, yyvsp[0].funcclauselist);
     context_popLoc (); 
     lltok_free2 (yyvsp[-3].tok, yyvsp[-2].tok);
   ;
    break;}
case 35:
{ setCurrentParams (yyvsp[-1].entrylist); ;
    break;}
case 36:
{ 
     clearCurrentParams ();
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-6].ntyp, ctype_makeFunction (idDecl_getCtype (yyvsp[-6].ntyp), yyvsp[-3].entrylist));
     idDecl_addClauses (yyval.ntyp, yyvsp[0].funcclauselist);
     context_popLoc (); 
     lltok_free (yyvsp[-4].tok);
     /*!! lltok_free2 ($3, $5); */
   ;
    break;}
case 37:
{ setCurrentParams (yyvsp[-1].entrylist); ;
    break;}
case 38:
{ clearCurrentParams (); ;
    break;}
case 39:
{ declareCIter (yyvsp[-8].cname, yyvsp[-6].entrylist); 
     lltok_free3 (yyvsp[-9].tok, yyvsp[-7].tok, yyvsp[-5].tok); 
   ;
    break;}
case 40:
{ exprNode_checkMacroBody (yyvsp[-1].expr); lltok_free2 (yyvsp[-2].tok, yyvsp[0].tok); ;
    break;}
case 41:
{ exprNode_checkIterBody (yyvsp[-1].expr); lltok_free2 (yyvsp[-2].tok, yyvsp[0].tok); ;
    break;}
case 42:
{ exprNode_checkIterEnd (yyvsp[-1].expr); lltok_free2 (yyvsp[-2].tok, yyvsp[0].tok);;
    break;}
case 43:
{ exprChecks_checkEmptyMacroBody (); lltok_free2 (yyvsp[-1].tok, yyvsp[0].tok); ;
    break;}
case 44:
{ clabstract_declareFunction (yyvsp[0].ntyp); ;
    break;}
case 45:
{ yyval.msconstraint = metaStateConstraint_create (yyvsp[-2].msspec, yyvsp[0].msexpr); lltok_free (yyvsp[-1].tok); ;
    break;}
case 46:
{ cscannerHelp_expectingMetaStateName (); ;
    break;}
case 47:
{ cscannerHelp_clearExpectingMetaStateName ();
      yyval.msspec = metaStateSpecifier_create (yyvsp[-3].sr, yyvsp[0].msinfo); 
      lltok_free (yyvsp[-1].tok); 
    ;
    break;}
case 48:
{ cscannerHelp_expectingMetaStateName (); ;
    break;}
case 49:
{ cscannerHelp_clearExpectingMetaStateName ();
      yyval.msspec = metaStateSpecifier_createElipsis (yyvsp[0].msinfo); 
      lltok_free2 (yyvsp[-3].tok, yyvsp[-1].tok);
    ;
    break;}
case 50:
{ yyval.msexpr = metaStateExpression_create (yyvsp[0].msspec); ;
    break;}
case 51:
{ yyval.msexpr = metaStateExpression_createMerge (yyvsp[-2].msspec, yyvsp[0].msexpr); lltok_free (yyvsp[-1].tok); ;
    break;}
case 55:
{ yyval.conL = constraintList_add (yyvsp[0].conL, yyvsp[-2].con); ;
    break;}
case 56:
{ yyval.conL = constraintList_single (yyvsp[0].con); ;
    break;}
case 57:
{
 yyval.con = makeConstraintParse3 (yyvsp[-2].conE, yyvsp[-1].tok, yyvsp[0].conE);
 DPRINTF(("Done BufConstraint1\n")); ;
    break;}
case 64:
{yyval.conE = constraintExpr_parseMakeUnaryOp (yyvsp[-3].tok, yyvsp[-1].conE);  DPRINTF( ("Got BufConstraintExpr UNary Op ") ); ;
    break;}
case 65:
{
   DPRINTF( ("Got BufConstraintExpr BINary Op ") );
   yyval.conE = constraintExpr_parseMakeBinaryOp (yyvsp[-3].conE, yyvsp[-2].tok, yyvsp[-1].conE); ;
    break;}
case 66:
{ yyval.conE =  constraintExpr_makeTermsRef (yyvsp[0].sr);;
    break;}
case 67:
{ yyval.conE = constraintExpr_makeIntLiteral (exprNode_getLongValue (yyvsp[0].expr)); ;
    break;}
case 68:
{ /*@-onlytrans@*/ yyval.sr = checkbufferConstraintClausesId (yyvsp[0].entry); /*@=onlytrans@*/ /*@i523@*/ ;
    break;}
case 69:
{ yyval.sr = fixStateClausesId (yyvsp[0].cname); ;
    break;}
case 70:
{ yyval.sr = sRef_makeAnyArrayFetch (yyvsp[-2].sr); ;
    break;}
case 71:
{
    /*
    char *t; int c; 
    t =  cstring_toCharsSafe (exprNode_unparse($3)); 
    c = atoi( t );
    */
    yyval.sr = sRef_makeArrayFetchKnown (yyvsp[-3].sr, exprNode_getLongValue (yyvsp[-1].expr));
  ;
    break;}
case 72:
{ yyval.sr = sRef_constructPointer (yyvsp[0].sr); ;
    break;}
case 73:
{ yyval.sr = yyvsp[-1].sr; ;
    break;}
case 74:
{ cstring_markOwned (yyvsp[0].cname); yyval.sr = sRef_buildField (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 75:
{ cstring_markOwned (yyvsp[0].cname); yyval.sr = sRef_makeArrow (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 79:
{ yyval.funcclauselist = functionClauseList_new (); ;
    break;}
case 80:
{ yyval.funcclauselist = functionClauseList_prepend (yyvsp[0].funcclauselist, yyvsp[-1].funcclause); ;
    break;}
case 81:
{ yyval.funcclauselist = functionClauseList_new (); ;
    break;}
case 82:
{ yyval.funcclauselist = functionClauseList_prepend (yyvsp[0].funcclauselist, yyvsp[-1].funcclause); ;
    break;}
case 83:
{ yyval.funcclause = functionClause_createGlobals (yyvsp[0].globsclause); ;
    break;}
case 84:
{ yyval.funcclause = functionClause_createModifies (yyvsp[0].modsclause); ;
    break;}
case 85:
{ yyval.funcclause = functionClause_createModifies (yyvsp[0].modsclause); ;
    break;}
case 86:
{ yyval.funcclause = functionClause_createState (yyvsp[0].stateclause); ;
    break;}
case 87:
{ yyval.funcclause = yyvsp[0].funcclause; ;
    break;}
case 88:
{ yyval.funcclause = functionClause_createWarn (yyvsp[0].warnclause); ;
    break;}
case 89:
{ yyval.funcclause = functionClause_createGlobals (yyvsp[0].globsclause); ;
    break;}
case 90:
{ yyval.funcclause = functionClause_createModifies (yyvsp[0].modsclause); ;
    break;}
case 91:
{ yyval.funcclause = functionClause_createModifies (yyvsp[0].modsclause); ;
    break;}
case 92:
{ yyval.funcclause = functionClause_createState (yyvsp[0].stateclause); ;
    break;}
case 93:
{ yyval.funcclause = yyvsp[0].funcclause; ;
    break;}
case 94:
{ yyval.funcclause = functionClause_createWarn (yyvsp[0].warnclause); ;
    break;}
case 95:
{ yyval.globsclause = yyvsp[-1].globsclause; ;
    break;}
case 96:
{ setProcessingGlobalsList (); ;
    break;}
case 97:
{ 
     unsetProcessingGlobals (); 
     yyval.globsclause = globalsClause_create (yyvsp[-3].tok, yyvsp[-1].globset); 
   ;
    break;}
case 98:
{ yyval.modsclause = modifiesClause_createNoMods (yyvsp[0].tok); ;
    break;}
case 99:
{ yyval.modsclause = yyvsp[-1].modsclause; ;
    break;}
case 100:
{
     context_setProtectVars (); enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;
    break;}
case 101:
{ 
     exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
     yyval.modsclause = modifiesClause_create (yyvsp[-2].tok, yyvsp[0].srset);
   ;
    break;}
case 102:
{ yyval.flagspec = flagSpec_createPlain (yyvsp[0].cname); ;
    break;}
case 103:
{ yyval.flagspec = flagSpec_createOr (yyvsp[-2].cname, yyvsp[0].flagspec); ;
    break;}
case 106:
{ yyval.warnclause = warnClause_undefined; ;
    break;}
case 107:
{ yyval.warnclause = yyvsp[-1].warnclause; ;
    break;}
case 108:
{      
     llassert (exprNode_knownStringValue (yyvsp[0].expr));
     yyval.warnclause = warnClause_create (yyvsp[-2].tok, yyvsp[-1].flagspec, cstring_copy (multiVal_forceString (exprNode_getValue (yyvsp[0].expr)))); 
     exprNode_free (yyvsp[0].expr);
   ;
    break;}
case 109:
{ yyval.warnclause = warnClause_create (yyvsp[-1].tok, yyvsp[0].flagspec, cstring_undefined); ;
    break;}
case 110:
{ yyval.globset = globSet_single (yyvsp[0].sr); ;
    break;}
case 111:
{ yyval.globset = globSet_insert (yyvsp[-2].globset, yyvsp[0].sr); ;
    break;}
case 112:
{ yyval.sr = clabstract_createGlobal (yyvsp[0].sr, yyvsp[-1].tquallist); ;
    break;}
case 113:
{ yyval.tquallist = qualList_undefined; ;
    break;}
case 114:
{ yyval.tquallist = qualList_add (yyvsp[0].tquallist, yyvsp[-1].typequal); ;
    break;}
case 115:
{ yyval.sr = uentry_getSref (yyvsp[0].entry); ;
    break;}
case 116:
{ yyval.sr = clabstract_unrecognizedGlobal (yyvsp[0].cname); ;
    break;}
case 117:
{ yyval.sr = clabstract_checkGlobal (yyvsp[0].expr); ;
    break;}
case 118:
{ yyval.typequal = qual_createUndef (); ;
    break;}
case 119:
{ yyval.typequal = qual_createKilled (); ;
    break;}
case 120:
{ yyval.typequal = qual_createOut (); ;
    break;}
case 121:
{ yyval.typequal = qual_createIn (); ;
    break;}
case 122:
{ yyval.typequal = qual_createPartial (); ;
    break;}
case 130:
{ 
     /**!!! deal with fred; fred (int); declarations! **/
     qtype qint = qtype_create (ctype_int); 
     yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, qint);
     qtype_free (qint);
   ;
    break;}
case 131:
{ yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, yyvsp[-2].qtyp); ;
    break;}
case 132:
{ checkDoneParams (); context_enterInnerContext (); ;
    break;}
case 133:
{  
     exprNode_checkFunctionBody (yyvsp[0].expr); yyval.expr = yyvsp[0].expr; 
     context_exitInner (yyvsp[0].expr); 
   ;
    break;}
case 134:
{ context_enterOldStyleScope (); ;
    break;}
case 135:
{ oldStyleDoneParams (); context_enterInnerContext (); ;
    break;}
case 136:
{
     exprNode_checkFunctionBody (yyvsp[0].expr); 
     yyval.expr = yyvsp[0].expr; /* oldstyle */ 
     context_exitInner (yyvsp[0].expr);
   ;
    break;}
case 137:
{ 
     context_setFunctionDefined (exprNode_loc (yyvsp[0].expr)); 
     exprNode_checkFunction (context_getHeader (),  yyvsp[0].expr); 
     /* DRL 8 8 2000 */
     
     context_exitFunction ();
   ;
    break;}
case 138:
{ yyval.srset = yyvsp[-1].srset; ;
    break;}
case 139:
{ yyval.srset = sRefSet_new (); ;
    break;}
case 140:
{ yyval.sr = uentry_getSref (yyvsp[0].entry); checkModifiesId (yyvsp[0].entry); ;
    break;}
case 141:
{ yyval.sr = fixModifiesId (yyvsp[0].cname); ;
    break;}
case 142:
{ yyval.sr = fixModifiesId (yyvsp[0].cname); ;
    break;}
case 143:
{ yyval.sr = modListArrayFetch (yyvsp[-2].sr, sRef_undefined); ;
    break;}
case 144:
{ yyval.sr = modListArrayFetch (yyvsp[-3].sr, yyvsp[-1].sr); ;
    break;}
case 145:
{ yyval.sr = modListPointer (yyvsp[0].sr); ;
    break;}
case 146:
{ yyval.sr = yyvsp[-1].sr; ;
    break;}
case 147:
{ yyval.sr = modListFieldAccess (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 148:
{ yyval.sr = modListArrowAccess (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 149:
{ yyval.sr = yyvsp[0].sr; ;
    break;}
case 150:
{ yyval.sr = sRef_makeUnknown (); /* sRef_makeConstant ($1); ? */ ;
    break;}
case 151:
{ yyval.srset = sRefSet_single (yyvsp[0].sr); ;
    break;}
case 152:
{ yyval.srset = sRefSet_insert (yyvsp[-2].srset, yyvsp[0].sr); ;
    break;}
case 153:
{ yyval.sr = checkStateClausesId (yyvsp[0].entry); ;
    break;}
case 154:
{ yyval.sr = fixStateClausesId (yyvsp[0].cname); ;
    break;}
case 155:
{ yyval.sr = sRef_makeAnyArrayFetch (yyvsp[-2].sr); ;
    break;}
case 156:
{ yyval.sr = sRef_makeAnyArrayFetch (yyvsp[-3].sr); ;
    break;}
case 157:
{ yyval.sr = sRef_constructPointer (yyvsp[0].sr); ;
    break;}
case 158:
{ yyval.sr = yyvsp[-1].sr; ;
    break;}
case 159:
{ cstring_markOwned (yyvsp[0].cname);
					    yyval.sr = sRef_buildField (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 160:
{ cstring_markOwned (yyvsp[0].cname);
                                            yyval.sr = sRef_makeArrow (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 161:
{ DPRINTF ((message("Empty optSpecClauseList") )); yyval.srset = sRefSet_undefined ;
    break;}
case 163:
{ if (sRef_isValid (yyvsp[0].sr)) { yyval.srset = sRefSet_single (yyvsp[0].sr); } 
      else {
	DPRINTF((message("returning sRefSEt_undefined ")  ));
	yyval.srset = sRefSet_undefined; } 
    ;
    break;}
case 164:
{ if (sRef_isValid (yyvsp[0].sr))
	{
	  yyval.srset = sRefSet_insert (yyvsp[-2].srset, yyvsp[0].sr); 
	}
      else
	{
	  yyval.srset = yyvsp[-2].srset;
	}
    ;
    break;}
case 165:
{ yyval.expr = exprNode_fromIdentifier (yyvsp[0].entry); ;
    break;}
case 166:
{ yyval.expr = exprNode_fromUIO (yyvsp[0].cname); ;
    break;}
case 168:
{ yyval.expr = exprNode_addParens (yyvsp[-2].tok, yyvsp[-1].expr); ;
    break;}
case 169:
{ yyval.expr = exprNode_fromIdentifier (cscannerHelp_coerceId (yyvsp[0].cname)); ;
    break;}
case 170:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 171:
{ exprChecks_inCompoundStatementExpression (); ;
    break;}
case 172:
{ exprChecks_leaveCompoundStatementExpression (); yyval.expr = exprNode_compoundStatementExpression (yyvsp[-3].tok, yyvsp[-1].expr); ;
    break;}
case 174:
{ yyval.expr = exprNode_arrayFetch (yyvsp[-3].expr, yyvsp[-1].expr); ;
    break;}
case 175:
{ yyval.expr = exprNode_functionCall (yyvsp[-2].expr, exprNodeList_new ()); ;
    break;}
case 176:
{ yyval.expr = exprNode_functionCall (yyvsp[-3].expr, yyvsp[-1].exprlist); ;
    break;}
case 177:
{ yyval.expr = exprNode_vaArg (yyvsp[-5].tok, yyvsp[-3].expr, yyvsp[-1].qtyp); ;
    break;}
case 178:
{ yyval.expr = exprNode_fieldAccess (yyvsp[-4].expr, yyvsp[-2].tok, yyvsp[-1].cname); ;
    break;}
case 179:
{ yyval.expr = exprNode_arrowAccess (yyvsp[-4].expr, yyvsp[-2].tok, yyvsp[-1].cname); ;
    break;}
case 180:
{ yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 181:
{ yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 182:
{ /* added for C99 */ yyval.expr = exprNode_undefined; /*@i87 no checking */ ;
    break;}
case 183:
{ yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 184:
{ yyval.exprlist = exprNodeList_push (yyvsp[-2].exprlist, yyvsp[0].expr); ;
    break;}
case 186:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 187:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 188:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 189:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 190:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 191:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 192:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 193:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 194:
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 195:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 196:
{ yyval.cstringlist = cstringList_add (yyvsp[-2].cstringlist, yyvsp[0].cname); lltok_free (yyvsp[-1].tok); ;
    break;}
case 197:
{ yyval.cstringlist = yyvsp[-3].cstringlist; lltok_free2 (yyvsp[-2].tok, yyvsp[0].tok); ;
    break;}
case 198:
{ yyval.cstringlist = cstringList_single (yyvsp[0].cname); ;
    break;}
case 199:
{ yyval.expr = exprNode_offsetof (yyvsp[-5].qtyp, yyvsp[-2].cstringlist); 
     lltok_free3 (yyvsp[-8].tok, yyvsp[-6].tok, yyvsp[-3].tok); lltok_free (yyvsp[-1].tok); ;
    break;}
case 200:
{ context_setProtectVars (); ;
    break;}
case 201:
{ context_sizeofReleaseVars (); yyval.expr = yyvsp[0].expr; ;
    break;}
case 202:
{context_enterSizeof();
    break;}
case 203:
{context_leaveSizeof();
    break;}
case 204:
{ yyval.expr = exprNode_sizeofType (yyvsp[-1].qtyp); lltok_free3 (yyvsp[-3].tok, yyvsp[-2].tok, yyvsp[0].tok);  ;
    break;}
case 205:
{ yyval.expr = exprNode_sizeofExpr (yyvsp[0].expr); lltok_free (yyvsp[-1].tok); ;
    break;}
case 206:
{ yyval.expr = exprNode_alignofType (yyvsp[-1].qtyp); lltok_free3 (yyvsp[-3].tok, yyvsp[-2].tok, yyvsp[0].tok); ;
    break;}
case 207:
{ yyval.expr = exprNode_alignofExpr (yyvsp[0].expr); lltok_free (yyvsp[-1].tok); ;
    break;}
case 209:
{ yyval.expr = exprNode_cast (yyvsp[-3].tok, yyvsp[0].expr, yyvsp[-2].qtyp); lltok_free (yyvsp[-1].tok); ;
    break;}
case 211:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 212:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 213:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 215:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 216:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 218:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 219:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 221:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 222:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 223:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 224:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 226:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 227:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 229:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 231:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 233:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 235:
{ exprNode_produceGuards (yyvsp[-1].expr); 
     context_enterAndClause (yyvsp[-1].expr); 
   ;
    break;}
case 236:
{ 
     yyval.expr = exprNode_op (yyvsp[-3].expr, yyvsp[0].expr, yyvsp[-2].tok); 
     context_exitAndClause (yyval.expr, yyvsp[0].expr);
   ;
    break;}
case 238:
{ 
     exprNode_produceGuards (yyvsp[-1].expr);
     context_enterOrClause (yyvsp[-1].expr); 
   ;
    break;}
case 239:
{ 
     yyval.expr = exprNode_op (yyvsp[-3].expr, yyvsp[0].expr, yyvsp[-2].tok); 
     context_exitOrClause (yyval.expr, yyvsp[0].expr);
   ;
    break;}
case 241:
{ exprNode_produceGuards (yyvsp[-1].expr); context_enterTrueClause (yyvsp[-1].expr); ;
    break;}
case 242:
{ context_enterFalseClause (yyvsp[-4].expr); ;
    break;}
case 243:
{ yyval.expr = exprNode_cond (yyvsp[-6].expr, yyvsp[-3].expr, yyvsp[0].expr); context_exitClause (yyvsp[-6].expr, yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 245:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 246:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 247:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 248:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 249:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 250:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 251:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 252:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 253:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 254:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 255:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 257:
{ yyval.expr = exprNode_comma (yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 258:
{ yyval.expr = exprNode_undefined; ;
    break;}
case 261:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 262:
{ doVaDcl (); yyval.expr = exprNode_makeError (); ;
    break;}
case 263:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 264:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 265:
{
     setProcessingVars (yyvsp[-3].qtyp); 
     processNamedDecl (yyvsp[-1].ntyp); 
   ;
    break;}
case 266:
{ 
     unsetProcessingVars (); 
     yyval.expr = exprNode_makeEmptyInitialization (yyvsp[-6].ntyp); 
     DPRINTF (("Empty initialization: %s", exprNode_unparse (yyval.expr)));
   ;
    break;}
case 267:
{ setProcessingVars (yyvsp[-4].qtyp); processNamedDecl (yyvsp[-2].ntyp); ;
    break;}
case 268:
{ yyval.expr = exprNode_concat (yyvsp[-2].expr, exprNode_makeInitialization (yyvsp[-8].ntyp, yyvsp[-3].expr)); 
     unsetProcessingVars ();
   ;
    break;}
case 269:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 270:
{ yyval.expr = exprNode_fromIdentifier (usymtab_getTypeEntry (ctype_typeId (yyvsp[0].ctyp))); ;
    break;}
case 271:
{ 
     processNamedDecl (yyvsp[-1].ntyp); 
     yyval.expr = exprNode_makeEmptyInitialization (yyvsp[-1].ntyp);
   ;
    break;}
case 272:
{ processNamedDecl (yyvsp[-2].ntyp); ;
    break;}
case 273:
{ yyval.expr = exprNode_makeInitialization (yyvsp[-5].ntyp, yyvsp[0].expr); ;
    break;}
case 274:
{ setProcessingTypedef (yyvsp[0].qtyp); ;
    break;}
case 275:
{ clabstract_declareType (yyvsp[-3].exprlist, yyvsp[-1].warnclause); ;
    break;}
case 276:
{ /* in the ANSI grammar, semantics unclear */ ;
    break;}
case 277:
{ /* in the ANSI grammar, semantics unclear */ ;
    break;}
case 278:
{ cscannerHelp_setExpectingTypeName (); ;
    break;}
case 279:
{ cscannerHelp_setExpectingTypeName (); context_pushLoc (); ;
    break;}
case 280:
{ yyval.exprlist = yyvsp[-1].exprlist; ;
    break;}
case 281:
{ yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 282:
{ yyval.exprlist = exprNodeList_push (yyvsp[-3].exprlist, yyvsp[0].expr); ;
    break;}
case 283:
{ yyval.exprlist = yyvsp[-1].exprlist; ;
    break;}
case 284:
{ yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 285:
{ yyval.exprlist = exprNodeList_push (yyvsp[-3].exprlist, yyvsp[0].expr); ;
    break;}
case 286:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 287:
{ yyval.expr = exprNode_concat (yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 289:
{ yyval.expr = exprNode_makeInitBlock (yyvsp[-2].tok, yyvsp[-1].exprlist); lltok_free (yyvsp[0].tok); ;
    break;}
case 290:
{ yyval.expr = exprNode_makeInitBlock (yyvsp[-3].tok, yyvsp[-2].exprlist); lltok_free2 (yyvsp[-1].tok, yyvsp[0].tok); ;
    break;}
case 291:
{ yyval.expr = exprNode_undefined; ;
    break;}
case 292:
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 293:
{ yyval.expr = exprNode_undefined; 
                                     /* gcc extension, obsolete since 2.5 */ ;
    break;}
case 294:
{ yyval.expr = exprNode_undefined; ;
    break;}
case 295:
{ yyval.expr = exprNode_undefined; ;
    break;}
case 296:
{ yyval.expr = exprNode_undefined; ;
    break;}
case 297:
{ yyval.expr = exprNode_undefined; ;
    break;}
case 298:
{ yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 299:
{ yyval.exprlist = exprNodeList_push (yyvsp[-2].exprlist, yyvsp[0].expr); ;
    break;}
case 300:
{ setStorageClass (SCEXTERN); yyval.typequal = qual_createExtern (); ;
    break;}
case 301:
{ yyval.typequal = qual_createInline (); ;
    break;}
case 302:
{ setStorageClass (SCSTATIC); yyval.typequal = qual_createStatic (); ;
    break;}
case 303:
{ yyval.typequal = qual_createAuto (); ;
    break;}
case 304:
{ yyval.typequal = qual_createRegister (); ;
    break;}
case 305:
{ yyval.stateclause = yyvsp[-1].stateclause; ;
    break;}
case 306:
{
     context_setProtectVars (); 
     enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;
    break;}
case 307:
{ 
     exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
     yyval.stateclause = stateClause_createPlain (yyvsp[-5].tok, yyvsp[-2].srset);
   ;
    break;}
case 308:
{ yyval.funcclause = yyvsp[-1].funcclause; ;
    break;}
case 309:
{ yyval.tok = yyvsp[-1].tok; context_enterFunctionHeader (); ;
    break;}
case 310:
{
     context_exitFunctionHeader ();
     context_setProtectVars (); 
     enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;
    break;}
case 311:
{ 
     exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
     yyval.funcclause = functionClause_createState (stateClause_create (yyvsp[-5].tok, yyvsp[-4].typequal, yyvsp[-2].srset));
   ;
    break;}
case 312:
{
     context_setProtectVars (); 
     enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;
    break;}
case 313:
{
     context_exitFunctionHeader ();
     exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
     DPRINTF (("done optGlobBufConstraintsAux\n"));

     if (lltok_isEnsures (yyvsp[-4].tok)) 
       {
	 yyval.funcclause = functionClause_createEnsures (yyvsp[-2].fcnconstraint);
       }
     else if (lltok_isRequires (yyvsp[-4].tok))
       {
	 yyval.funcclause = functionClause_createRequires (yyvsp[-2].fcnconstraint);
       }
     else
       {
	 BADBRANCH;
       }

     DPRINTF (("FunctionclauseS: %s", functionClause_unparse (yyval.funcclause)));
   ;
    break;}
case 314:
{ yyval.fcnconstraint = functionConstraint_createBufferConstraint (yyvsp[0].conL); ;
    break;}
case 315:
{ yyval.fcnconstraint = functionConstraint_createMetaStateConstraint (yyvsp[0].msconstraint); DPRINTF (("Made constraint: %s", functionConstraint_unparse (yyval.fcnconstraint))); ;
    break;}
case 316:
{ yyval.typequal = qual_createExits (); ;
    break;}
case 317:
{ yyval.typequal = qual_createMayExit (); ;
    break;}
case 318:
{ yyval.typequal = qual_createTrueExit (); ;
    break;}
case 319:
{ yyval.typequal = qual_createFalseExit (); ;
    break;}
case 320:
{ yyval.typequal = qual_createNeverExit (); ;
    break;}
case 321:
{ yyval.typequal = qual_createChecked (); ;
    break;}
case 322:
{ yyval.typequal = qual_createCheckMod (); ;
    break;}
case 323:
{ yyval.typequal = qual_createUnchecked (); ;
    break;}
case 324:
{ yyval.typequal = qual_createCheckedStrict (); ;
    break;}
case 325:
{ yyval.typequal = qual_createOwned (); ;
    break;}
case 326:
{ yyval.typequal = qual_createDependent (); ;
    break;}
case 327:
{ yyval.typequal = qual_createYield (); ;
    break;}
case 328:
{ yyval.typequal = qual_createTemp (); ;
    break;}
case 329:
{ yyval.typequal = qual_createOnly (); ;
    break;}
case 330:
{ yyval.typequal = qual_createKeep (); ;
    break;}
case 331:
{ yyval.typequal = qual_createKept (); ;
    break;}
case 332:
{ yyval.typequal = qual_createShared (); ;
    break;}
case 333:
{ yyval.typequal = qual_createUnique (); ;
    break;}
case 334:
{ yyval.typequal = qual_createNull (); ;
    break;}
case 335:
{ yyval.typequal = qual_createIsNull (); ;
    break;}
case 336:
{ yyval.typequal = qual_createRelNull (); ;
    break;}
case 337:
{ yyval.typequal = qual_createNotNull (); ;
    break;}
case 338:
{ yyval.typequal = qual_createExposed (); ;
    break;}
case 339:
{ yyval.typequal = qual_createObserver (); ;
    break;}
case 340:
{ yyval.typequal = qual_createNullTerminated (); ;
    break;}
case 341:
{ yyval.typequal = qual_createMetaState (yyvsp[0].annotation); ;
    break;}
case 342:
{ yyval.typequal = qual_createReturned (); ;
    break;}
case 343:
{ yyval.typequal = qual_createSef (); ;
    break;}
case 344:
{ yyval.typequal = qual_createUnused (); ;
    break;}
case 345:
{ yyval.typequal = qual_createExternal (); ;
    break;}
case 346:
{ yyval.typequal = qual_createTrueNull (); ;
    break;}
case 347:
{ yyval.typequal = qual_createFalseNull (); ;
    break;}
case 348:
{ yyval.typequal = qual_createAbstract (); ;
    break;}
case 349:
{ yyval.typequal = qual_createNumAbstract (); ;
    break;}
case 350:
{ yyval.typequal = qual_createConcrete (); ;
    break;}
case 351:
{ yyval.typequal = qual_createMutable (); ;
    break;}
case 352:
{ yyval.typequal = qual_createImmutable (); ;
    break;}
case 353:
{ yyval.typequal = qual_createRefCounted (); ;
    break;}
case 354:
{ yyval.typequal = qual_createRefs (); ;
    break;}
case 355:
{ yyval.typequal = qual_createKillRef (); ;
    break;}
case 356:
{ yyval.typequal = qual_createRelDef (); ;
    break;}
case 357:
{ yyval.typequal = qual_createNewRef (); ;
    break;}
case 358:
{ yyval.typequal = qual_createTempRef (); ;
    break;}
case 359:
{ yyval.typequal = qual_createShort (); ;
    break;}
case 360:
{ yyval.typequal = qual_createLong (); ;
    break;}
case 361:
{ yyval.typequal = qual_createSigned (); ;
    break;}
case 362:
{ yyval.typequal = qual_createUnsigned (); ;
    break;}
case 363:
{ yyval.typequal = qual_createOut (); ;
    break;}
case 364:
{ yyval.typequal = qual_createIn (); ;
    break;}
case 365:
{ yyval.typequal = qual_createPartial (); ;
    break;}
case 366:
{ yyval.typequal = qual_createSpecial (); ;
    break;}
case 367:
{ yyval.typequal = qual_createConst (); ;
    break;}
case 368:
{ yyval.typequal = qual_createVolatile (); ;
    break;}
case 369:
{ yyval.typequal = qual_createRestrict (); ;
    break;}
case 370:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 371:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 372:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 373:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 374:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 375:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 376:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 377:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 378:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 385:
{ yyval.ctyp = ctype_makeAnytype (); ;
    break;}
case 386:
{ yyval.ctyp = ctype_anyintegral; ;
    break;}
case 387:
{ yyval.ctyp = ctype_unsignedintegral; ;
    break;}
case 388:
{ yyval.ctyp = ctype_signedintegral; ;
    break;}
case 392:
{ yyval.ctyp = ctype_fromQual (yyvsp[-1].typequal); ;
    break;}
case 393:
{ yyval.qtyp = qtype_resolve (yyvsp[-1].qtyp); ;
    break;}
case 394:
{ yyval.qtyp = yyvsp[0].qtyp; ;
    break;}
case 395:
{ yyval.qtyp = qtype_mergeAlt (yyvsp[-3].qtyp, yyvsp[-1].qtyp); ;
    break;}
case 397:
{ yyval.qtyp = qtype_mergeAlt (yyvsp[-2].qtyp, yyvsp[0].qtyp); ;
    break;}
case 398:
{ yyval.qtyp = qtype_addQual (yyvsp[0].qtyp, yyvsp[-1].typequal); ;
    break;}
case 399:
{ yyval.qtyp = qtype_addQual (yyvsp[0].qtyp, yyvsp[-1].typequal); ;
    break;}
case 400:
{ yyval.qtyp = qtype_combine (yyvsp[0].qtyp, yyvsp[-1].ctyp); ;
    break;}
case 401:
{ yyval.qtyp = qtype_unknown (); ;
    break;}
case 402:
{ yyval.qtyp = yyvsp[0].qtyp; ;
    break;}
case 403:
{ yyval.conL = constraintList_undefined; ;
    break;}
case 404:
{ sRef_setGlobalScopeSafe (); ;
    break;}
case 405:
{ sRef_clearGlobalScopeSafe (); ;
    break;}
case 406:
{ ctype ct; ct = declareStruct (yyvsp[-9].cname, yyvsp[-4].flist); /* context_setGlobalStructInfo(ct, $12); */ yyval.ctyp = ct; ;
    break;}
case 407:
{ sRef_setGlobalScopeSafe (); ;
    break;}
case 408:
{ sRef_clearGlobalScopeSafe (); ;
    break;}
case 409:
{ yyval.ctyp = declareUnion (yyvsp[-8].cname, yyvsp[-3].flist); ;
    break;}
case 410:
{ yyval.ctyp = declareStruct (yyvsp[-3].cname, uentryList_new ()); ;
    break;}
case 411:
{ yyval.ctyp = declareUnion (yyvsp[-3].cname, uentryList_new ()); ;
    break;}
case 412:
{ sRef_setGlobalScopeSafe (); ;
    break;}
case 413:
{ sRef_clearGlobalScopeSafe (); ;
    break;}
case 414:
{ yyval.ctyp = declareUnnamedStruct (yyvsp[-3].flist); ;
    break;}
case 415:
{ sRef_setGlobalScopeSafe (); ;
    break;}
case 416:
{ sRef_clearGlobalScopeSafe (); ;
    break;}
case 417:
{ yyval.ctyp = declareUnnamedUnion (yyvsp[-3].flist); ;
    break;}
case 418:
{ yyval.ctyp = ctype_createUnnamedStruct (uentryList_new ()); ;
    break;}
case 419:
{ yyval.ctyp = ctype_createUnnamedUnion (uentryList_new ()); ;
    break;}
case 420:
{ yyval.ctyp = handleStruct (yyvsp[-1].cname); ;
    break;}
case 421:
{ yyval.ctyp = handleUnion (yyvsp[-1].cname); ;
    break;}
case 422:
{ cscannerHelp_clearExpectingTypeName (); ;
    break;}
case 424:
{ yyval.flist = uentryList_undefined; /* bogus! */ ;
    break;}
case 425:
{ yyval.flist = uentryList_mergeFields (yyvsp[-1].flist, yyvsp[0].flist); ;
    break;}
case 426:
{ yyval.flist = fixUentryList (yyvsp[-2].ntyplist, yyvsp[-4].qtyp); ;
    break;}
case 427:
{ yyval.flist = fixUnnamedDecl (yyvsp[-2].qtyp); ;
    break;}
case 428:
{ yyval.ntyplist = idDeclList_singleton (yyvsp[-1].ntyp); ;
    break;}
case 429:
{ yyval.ntyplist = idDeclList_add (yyvsp[-3].ntyplist, yyvsp[-1].ntyp); ;
    break;}
case 430:
{ yyval.ntyp = yyvsp[0].ntyp; ;
    break;}
case 431:
{ yyval.ntyp = idDecl_undefined; ;
    break;}
case 432:
{ yyval.ntyp = yyvsp[-3].ntyp; ;
    break;}
case 433:
{ yyval.ctyp = declareUnnamedEnum (yyvsp[-2].enumnamelist); ;
    break;}
case 434:
{ context_pushLoc (); ;
    break;}
case 435:
{ context_popLoc (); yyval.ctyp = declareEnum (yyvsp[-5].cname, yyvsp[-2].enumnamelist); ;
    break;}
case 436:
{ yyval.ctyp = handleEnum (yyvsp[-1].cname); ;
    break;}
case 437:
{ yyval.enumnamelist = enumNameList_single (yyvsp[0].cname); ;
    break;}
case 438:
{ yyval.enumnamelist = enumNameList_push (yyvsp[-2].enumnamelist, yyvsp[0].cname); ;
    break;}
case 440:
{ uentry ue = uentry_makeEnumConstant (yyvsp[0].cname, ctype_unknown);
     usymtab_supGlobalEntry (ue);
     yyval.cname = yyvsp[0].cname;
   ;
    break;}
case 441:
{ uentry ue = uentry_makeEnumInitializedConstant (yyvsp[-3].cname, ctype_unknown, yyvsp[0].expr);
     usymtab_supGlobalEntry (ue);
     yyval.cname = yyvsp[-3].cname; 
   ;
    break;}
case 443:
{ yyval.ntyp = idDecl_create (cstring_undefined, qtype_create (yyvsp[0].ctyp)); ;
    break;}
case 444:
{ 
     qtype qt = qtype_unknown ();
     qtype_adjustPointers (yyvsp[-1].pointers, qt);
     yyval.ntyp = idDecl_create (cstring_copy (cscannerHelp_observeLastIdentifier ()), qt);
   ;
    break;}
case 445:
{ yyval.ntyp = yyvsp[0].ntyp; qtype_adjustPointers (yyvsp[-1].pointers, idDecl_getTyp (yyval.ntyp)); ;
    break;}
case 447:
{ yyval.ntyp = yyvsp[0].ntyp; qtype_adjustPointers (yyvsp[-1].pointers, idDecl_getTyp (yyval.ntyp)); ;
    break;}
case 448:
{ yyval.entrylist = handleParamTypeList (yyvsp[0].entrylist); ;
    break;}
case 449:
{ yyval.entrylist = handleParamIdList (yyvsp[0].entrylist); ;
    break;}
case 450:
{ yyval.typequal = qual_createConst (); ;
    break;}
case 451:
{ yyval.typequal = qual_createRestrict (); ;
    break;}
case 452:
{ yyval.typequal = qual_createVolatile (); ;
    break;}
case 453:
{ yyval.tquallist = qualList_single (yyvsp[0].typequal); ;
    break;}
case 454:
{ yyval.tquallist = qualList_add (yyvsp[-1].tquallist, yyvsp[0].typequal); ;
    break;}
case 455:
{ yyval.pointers = pointers_create (yyvsp[0].tok); ;
    break;}
case 456:
{ yyval.pointers = pointers_createMods (yyvsp[-1].tok, yyvsp[0].tquallist); ;
    break;}
case 457:
{ yyval.pointers = pointers_extend (pointers_create (yyvsp[-1].tok), yyvsp[0].pointers); ;
    break;}
case 458:
{ yyval.pointers = pointers_extend (pointers_createMods (yyvsp[-2].tok, yyvsp[-1].tquallist), yyvsp[0].pointers); ;
    break;}
case 460:
{ yyval.entrylist = uentryList_add (yyvsp[-2].entrylist, uentry_makeElipsisMarker ()); ;
    break;}
case 461:
{ yyval.entrylist = uentryList_single (uentry_makeVariableLoc (yyvsp[0].cname, ctype_int)); ;
    break;}
case 462:
{ yyval.entrylist = uentryList_add (yyvsp[-2].entrylist, uentry_makeVariableLoc (yyvsp[0].cname, ctype_int)); ;
    break;}
case 463:
{ yyval.entrylist = uentryList_single (uentry_makeElipsisMarker ()); ;
    break;}
case 465:
{ yyval.entrylist = uentryList_add (yyvsp[-2].entrylist, uentry_makeElipsisMarker ()); ;
    break;}
case 466:
{ storeLoc (); ;
    break;}
case 467:
{ yyval.entrylist = uentryList_single (yyvsp[0].oentry); ;
    break;}
case 468:
{ storeLoc (); ;
    break;}
case 469:
{ yyval.entrylist = uentryList_add (yyvsp[-3].entrylist, yyvsp[0].oentry); ;
    break;}
case 470:
{ 
     if (isFlipOldStyle ()) 
       { 
	 llparseerror (cstring_makeLiteral ("Inconsistent function parameter syntax (mixing old and new style declaration)")); 
       }
     else 
       { 
	 setNewStyle (); 
       }
     yyval.oentry = makeCurrentParam (idDecl_fixParamBase (yyvsp[-1].ntyp, yyvsp[-2].qtyp)); 
   ;
    break;}
case 471:
{ 
     idDecl tparam = idDecl_create (yyvsp[0].cname, qtype_unknown ());

     if (isNewStyle ()) 
       {
	 llparseerror (message ("Inconsistent function parameter syntax: %q",
				idDecl_unparse (tparam))); 
       }

     setFlipOldStyle ();
     yyval.oentry = makeCurrentParam (tparam);
     idDecl_free (tparam);
   ;
    break;}
case 473:
{ yyval.qtyp = qtype_newBase (yyvsp[-1].qtyp, yyvsp[0].ctyp); ;
    break;}
case 474:
{ yyval.ctyp = ctype_adjustPointers (yyvsp[0].pointers, ctype_unknown); ;
    break;}
case 476:
{ yyval.ctyp = ctype_adjustPointers (yyvsp[-1].pointers, yyvsp[0].ctyp); ;
    break;}
case 477:
{ yyval.ctyp = ctype_unknown; ;
    break;}
case 479:
{ yyval.ctyp = ctype_expectFunction (yyvsp[-1].ctyp); ;
    break;}
case 480:
{ yyval.ctyp = ctype_makeArray (ctype_unknown); ;
    break;}
case 481:
{ yyval.ctyp = ctype_makeFixedArray (ctype_unknown, exprNode_getLongValue (yyvsp[-1].expr)); ;
    break;}
case 482:
{ yyval.ctyp = ctype_makeInnerArray (yyvsp[-2].ctyp); ;
    break;}
case 483:
{ yyval.ctyp = ctype_makeInnerFixedArray (yyvsp[-3].ctyp, exprNode_getLongValue (yyvsp[-1].expr)); ;
    break;}
case 484:
{ yyval.ctyp = ctype_makeFunction (ctype_unknown, uentryList_makeMissingParams ()); ;
    break;}
case 485:
{ yyval.ctyp = ctype_makeParamsFunction (ctype_unknown, yyvsp[-1].entrylist); ;
    break;}
case 486:
{ yyval.ctyp = ctype_makeFunction (yyvsp[-3].ctyp, uentryList_makeMissingParams ()); ;
    break;}
case 487:
{ yyval.ctyp = ctype_makeParamsFunction (yyvsp[-4].ctyp, yyvsp[-1].entrylist); ;
    break;}
case 498:
{ exprNode_revealState (yyvsp[-1].expr); yyval.expr = exprNode_undefined; ;
    break;}
case 499:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 502:
{ yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 503:
{ yyval.expr = exprNode_while (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 504:
{ yyval.expr = exprNode_doWhile (yyvsp[-5].expr, yyvsp[-2].expr); ;
    break;}
case 505:
{ yyval.expr = exprNode_doWhile (yyvsp[-4].expr, yyvsp[-1].expr); ;
    break;}
case 506:
{ yyval.expr = exprNode_for (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 507:
{ context_setProtectVars (); ;
    break;}
case 508:
{ context_sizeofReleaseVars (); ;
    break;}
case 509:
{ yyval.expr = exprNode_forPred (yyvsp[-7].expr, yyvsp[-5].expr, yyvsp[-2].expr); 
     context_enterForClause (yyvsp[-5].expr); ;
    break;}
case 510:
{ setProcessingIterVars (yyvsp[-2].entry); ;
    break;}
case 511:
{ yyval.expr = exprNode_iterStart (yyvsp[-5].entry, yyvsp[-1].exprlist); ;
    break;}
case 512:
{ yyval.expr = exprNode_createId (yyvsp[0].entry); ;
    break;}
case 516:
{ yyval.expr = yyvsp[-1].expr; DPRINTF (("def stmt: %s", exprNode_unparse (yyval.expr))); ;
    break;}
case 524:
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 525:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 526:
{ exprNode_checkIfPred (yyvsp[0].expr); ;
    break;}
case 527:
{ /* don't: context_exitTrueClause ($1, $2); */
     yyval.expr = exprNode_if (yyvsp[-2].expr, yyvsp[0].expr); 
   ;
    break;}
case 528:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 529:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 540:
{ yyval.expr = exprNode_addParens (yyvsp[-2].tok, yyvsp[-1].expr); ;
    break;}
case 543:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 544:
{ yyval.expr = exprNode_labelMarker (yyvsp[-1].cname); ;
    break;}
case 545:
{ yyval.expr = exprNode_notReached (yyvsp[0].expr); ;
    break;}
case 546:
{ ; ;
    break;}
case 547:
{ ; ;
    break;}
case 548:
{ context_enterCaseClause (yyvsp[0].expr); ;
    break;}
case 549:
{ yyval.expr = exprNode_caseMarker (yyvsp[-2].expr, FALSE); ;
    break;}
case 550:
{ context_enterCaseClause (yyvsp[0].expr); ;
    break;}
case 551:
{ yyval.expr = exprNode_caseMarker (yyvsp[-2].expr, TRUE); ;
    break;}
case 552:
{ context_enterCaseClause (exprNode_undefined); ;
    break;}
case 553:
{ yyval.expr = exprNode_defaultMarker (yyvsp[-2].tok, FALSE); ;
    break;}
case 554:
{ context_enterCaseClause (exprNode_undefined); ;
    break;}
case 555:
{ yyval.expr = exprNode_defaultMarker (yyvsp[-2].tok, TRUE); ;
    break;}
case 556:
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 557:
{ yyval.expr = yyvsp[0].expr; context_exitInner (yyvsp[0].expr); ;
    break;}
case 558:
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 559:
{ context_enterInnerContext (); ;
    break;}
case 560:
{ context_exitInnerPlain (); ;
    break;}
case 561:
{ context_enterStructInnerContext (); ;
    break;}
case 562:
{ context_exitStructInnerContext (); ;
    break;}
case 563:
{ context_exitInnerSafe (); ;
    break;}
case 564:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 565:
{ yyval.expr = exprNode_notReached (exprNode_createTok (yyvsp[0].tok)); ;
    break;}
case 566:
{ yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 567:
{ yyval.expr = exprNode_notReached (exprNode_updateLocation (yyvsp[-2].expr, lltok_getLoc (yyvsp[0].tok))); ;
    break;}
case 568:
{ yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 569:
{ yyval.expr = exprNode_notReached (exprNode_updateLocation (yyvsp[-2].expr, lltok_getLoc (yyvsp[0].tok))); ;
    break;}
case 570:
{ yyval.expr = exprNode_updateLocation (exprNode_concat (yyvsp[-2].expr, yyvsp[-1].expr), lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 571:
{ yyval.expr = exprNode_notReached (exprNode_updateLocation (exprNode_concat (yyvsp[-3].expr, yyvsp[-2].expr), 
							lltok_getLoc (yyvsp[-1].tok))); 
   ;
    break;}
case 572:
{ yyval.expr = exprNode_makeBlock (yyvsp[0].expr); ;
    break;}
case 573:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 574:
{ yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 575:
{ yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 576:
{ yyval.expr = exprNode_updateLocation (exprNode_concat (yyvsp[-2].expr, yyvsp[-1].expr), lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 578:
{ yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 579:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 580:
{ yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 581:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 582:
{ yyval.expr = exprNode_concat (yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 583:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 584:
{ yyval.expr = yyvsp[-2].expr; ;
    break;}
case 585:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 586:
{ yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 587:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 588:
{ yyval.expr = exprNode_statement (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 589:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 590:
{ yyval.expr = exprNode_statement (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 591:
{ yyval.expr = exprNode_checkExpr (yyvsp[0].expr); ;
    break;}
case 592:
{ 
     exprNode_produceGuards (yyvsp[-1].expr); context_enterTrueClause (yyvsp[-1].expr); 
     exprNode_checkIfPred (yyvsp[-1].expr);
     yyval.expr = yyvsp[-1].expr;
   ;
    break;}
case 593:
{ 
     context_exitTrueClause (yyvsp[-1].expr, yyvsp[0].expr);
     yyval.expr = exprNode_if (yyvsp[-1].expr, yyvsp[0].expr); 
   ;
    break;}
case 594:
{ context_enterFalseClause (yyvsp[-2].expr); ;
    break;}
case 595:
{
     context_exitClause (yyvsp[-4].expr, yyvsp[-3].expr, yyvsp[0].expr);
     yyval.expr = exprNode_ifelse (yyvsp[-4].expr, yyvsp[-3].expr, yyvsp[0].expr); 
   ;
    break;}
case 596:
{ context_enterSwitch (yyvsp[0].expr); ;
    break;}
case 597:
{ yyval.expr = exprNode_switch (yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 598:
{ yyval.expr = exprNode_whilePred (yyvsp[-1].expr); context_enterWhileClause (yyvsp[-1].expr); ;
    break;}
case 599:
{ yyval.expr = exprNode_whilePred(yyvsp[-1].expr); ;
    break;}
case 600:
{ context_enterIterClause (); ;
    break;}
case 601:
{ setProcessingIterVars (yyvsp[-3].entry); ;
    break;}
case 602:
{ 
     yyval.expr = exprNode_iter (yyvsp[-9].entry, yyvsp[-4].exprlist, yyvsp[-2].expr, yyvsp[-1].entry); 

   ;
    break;}
case 603:
{ yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 604:
{ nextIterParam (); ;
    break;}
case 605:
{ yyval.exprlist = exprNodeList_push (yyvsp[-3].exprlist, yyvsp[0].expr); ;
    break;}
case 606:
{ yyval.expr = exprNode_iterExpr (yyvsp[0].expr); ;
    break;}
case 607:
{ yyval.expr = exprNode_iterId (yyvsp[0].entry); ;
    break;}
case 608:
{ uentry ue = cscannerHelp_coerceIterId (yyvsp[0].cname);

		      if (uentry_isValid (ue)) 
			{
			  yyval.expr = exprNode_iterId (ue);
			}
		      else
			{
			  yyval.expr = exprNode_iterNewId (cstring_copy (cscannerHelp_observeLastIdentifier ()));
			}
		    ;
    break;}
case 609:
{ yyval.expr = exprNode_iterNewId (yyvsp[0].cname); ;
    break;}
case 611:
{ yyval.expr = exprNode_combineLiterals (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 613:
{ yyval.expr = exprNode_addParens (yyvsp[-2].tok, yyvsp[-1].expr); ;
    break;}
case 615:
{ yyval.expr = exprNode_arrayFetch (yyvsp[-3].expr, yyvsp[-1].expr); ;
    break;}
case 616:
{ yyval.expr = exprNode_functionCall (yyvsp[-2].expr, exprNodeList_new ()); ;
    break;}
case 617:
{ yyval.expr = exprNode_functionCall (yyvsp[-3].expr, yyvsp[-1].exprlist); ;
    break;}
case 618:
{ yyval.expr = exprNode_vaArg (yyvsp[-5].tok, yyvsp[-3].expr, yyvsp[-1].qtyp); ;
    break;}
case 619:
{ yyval.expr = exprNode_fieldAccess (yyvsp[-4].expr, yyvsp[-2].tok, yyvsp[-1].cname); ;
    break;}
case 620:
{ yyval.expr = exprNode_arrowAccess (yyvsp[-4].expr, yyvsp[-2].tok, yyvsp[-1].cname); ;
    break;}
case 621:
{ yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 622:
{ yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 624:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 625:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 626:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 627:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 628:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 629:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 630:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 631:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 632:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 634:
{ yyval.expr = exprNode_cast (yyvsp[-3].tok, yyvsp[0].expr, yyvsp[-2].qtyp); ;
    break;}
case 636:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 637:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 638:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 640:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 641:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 643:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 644:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 646:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 647:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 648:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 649:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 651:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 652:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 654:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 656:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 658:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 660:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 662:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 664:
{ context_enterTrueClause (yyvsp[-1].expr); ;
    break;}
case 665:
{ context_enterFalseClause (yyvsp[-4].expr); ;
    break;}
case 666:
{ yyval.expr = exprNode_cond (yyvsp[-6].expr, yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 668:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 669:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 670:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 671:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 672:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 673:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 674:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 675:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 676:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 677:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 678:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 679:
{ yyval.entry = yyvsp[0].entry; ;
    break;}
case 680:
{ yyval.entry = uentry_undefined; ;
    break;}
case 681:
{ context_enterDoWhileClause (); yyval.tok = yyvsp[0].tok; ;
    break;}
case 682:
{ yyval.expr = exprNode_while (yyvsp[-1].expr, yyvsp[0].expr); context_exitWhileClause (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 683:
{ yyval.expr = exprNode_statement (exprNode_doWhile (yyvsp[-5].expr, yyvsp[-2].expr), yyvsp[0].tok); ;
    break;}
case 684:
{ yyval.expr = exprNode_for (yyvsp[-1].expr, yyvsp[0].expr); context_exitForClause (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 685:
{ yyval.expr = exprNode_while (yyvsp[-1].expr, yyvsp[0].expr); context_exitWhileClause (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 686:
{ yyval.expr = exprNode_statement (exprNode_doWhile (yyvsp[-5].expr, yyvsp[-2].expr), yyvsp[0].tok); ;
    break;}
case 687:
{ yyval.expr = exprNode_doWhile (yyvsp[-4].expr, yyvsp[-1].expr); ;
    break;}
case 688:
{ yyval.expr = exprNode_for (yyvsp[-1].expr, yyvsp[0].expr); context_exitForClause (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 689:
{ yyval.expr = exprNode_goto (yyvsp[-1].cname); ;
    break;}
case 690:
{ yyval.expr = exprNode_continue (yyvsp[-1].tok, BADTOK); ;
    break;}
case 691:
{ yyval.expr = exprNode_continue (yyvsp[-2].tok, QINNERCONTINUE); ;
    break;}
case 692:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, BADTOK); ;
    break;}
case 693:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, QSWITCHBREAK); ;
    break;}
case 694:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, QLOOPBREAK); ;
    break;}
case 695:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, QINNERBREAK); ;
    break;}
case 696:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, QSAFEBREAK); ;
    break;}
case 697:
{ yyval.expr = exprNode_nullReturn (yyvsp[-1].tok); ;
    break;}
case 698:
{ yyval.expr = exprNode_return (yyvsp[-1].expr); ;
    break;}
case 700:
{ ; ;
    break;}
case 702:
{ ; ;
    break;}
case 705:
{ yyval.cname = uentry_getName (yyvsp[0].entry); ;
    break;}
case 706:
{ yyval.cname = uentry_getName (yyvsp[0].entry); ;
    break;}
case 707:
{ yyval.cname = uentry_getName (yyvsp[0].entry); ;
    break;}
case 708:
{ yyval.cname = yyvsp[0].cname; ;
    break;}
case 710:
{ yyval.ctyp = ctype_unknown; ;
    break;}
case 711:
{ yyval.ctyp = exprNode_getType (yyvsp[-1].expr); exprNode_free (yyvsp[-1].expr); ;
    break;}
case 712:
{ yyval.ctyp = qtype_getType (yyvsp[-1].qtyp); ;
    break;}
}



  yyvsp -= yylen;
  yyssp -= yylen;
#if YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;
#if YYLSP_NEEDED
  *++yylsp = yyloc;
#endif

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  YYSIZE_T yysize = 0;
	  char *yymsg;
	  int yyx, yycount;

	  yycount = 0;
	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  for (yyx = yyn < 0 ? -yyn : 0;
	       yyx < (int) (sizeof (yytname) / sizeof (char *)); yyx++)
	    if (yycheck[yyx + yyn] == yyx)
	      yysize += yystrlen (yytname[yyx]) + 15, yycount++;
	  yysize += yystrlen ("parse error, unexpected ") + 1;
	  yysize += yystrlen (yytname[YYTRANSLATE (yychar)]);
	  yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg != 0)
	    {
	      char *yyp = yystpcpy (yymsg, "parse error, unexpected ");
	      yyp = yystpcpy (yyp, yytname[YYTRANSLATE (yychar)]);

	      if (yycount < 5)
		{
		  yycount = 0;
		  for (yyx = yyn < 0 ? -yyn : 0;
		       yyx < (int) (sizeof (yytname) / sizeof (char *));
		       yyx++)
		    if (yycheck[yyx + yyn] == yyx)
		      {
			const char *yyq = ! yycount ? ", expecting " : " or ";
			yyp = yystpcpy (yyp, yyq);
			yyp = yystpcpy (yyp, yytname[yyx]);
			yycount++;
		      }
		}
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exhausted");
	}
      else
#endif /* defined (YYERROR_VERBOSE) */
	yyerror ("parse error");
    }
  goto yyerrlab1;


/*--------------------------------------------------.
| yyerrlab1 -- error raised explicitly by an action |
`--------------------------------------------------*/
yyerrlab1:
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;
      YYDPRINTF ((stderr, "Discarding token %d (%s).\n",
		  yychar, yytname[yychar1]));
      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;


/*-------------------------------------------------------------------.
| yyerrdefault -- current state does not do anything special for the |
| error token.                                                       |
`-------------------------------------------------------------------*/
yyerrdefault:
#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */

  /* If its default is to accept any token, ok.  Otherwise pop it.  */
  yyn = yydefact[yystate];
  if (yyn)
    goto yydefault;
#endif


/*---------------------------------------------------------------.
| yyerrpop -- pop the current state because it cannot handle the |
| error token                                                    |
`---------------------------------------------------------------*/
yyerrpop:
  if (yyssp == yyss)
    YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#if YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "Error: state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

/*--------------.
| yyerrhandle.  |
`--------------*/
yyerrhandle:
  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

  YYDPRINTF ((stderr, "Shifting error token, "));

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

/*---------------------------------------------.
| yyoverflowab -- parser overflow comes here.  |
`---------------------------------------------*/
yyoverflowlab:
  yyerror ("parser stack overflow");
  yyresult = 2;
  /* Fall through.  */

yyreturn:
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  return yyresult;
}


/*@-redecl@*/ /*@-namechecks@*/
extern char *yytext;
/*@=redecl@*/ /*@=namechecks@*/

# include "bison.reset"

void yyerror (/*@unused@*/ char *s) 
{
  static bool givehint = FALSE;

  if (context_inIterDef ())
    {
      llerror (FLG_SYNTAX, message ("Iter syntax not parseable: %s", 
				    context_inFunctionName ()));
    }
  else if (context_inIterEnd ())
    {
      llerror (FLG_SYNTAX, message ("Iter finalizer syntax not parseable: %s", 
				    context_inFunctionName ()));
    }
  else if (context_inMacro ())
    {
      llerror (FLG_SYNTAX, message ("Macro syntax not parseable: %s", 
				    context_inFunctionName ()));
      
      if (context_inUnknownMacro ())
	{
	  if (!givehint)
	    {
	      llhint (cstring_makeLiteral 
		     ("Precede macro definition with /*@notfunction@*/ "
		      "to suppress checking and force expansion"));
	      givehint = TRUE;
	    }
	}

      cscannerHelp_swallowMacro ();
      context_exitAllClausesQuiet ();
    }
  else
    {
      llparseerror (cstring_undefined);
    }
}












/*
** Resets all flags in bison.head
*/


/*@=allmacros@*/
/*@=boolint@*/
/*@=charint@*/
/*@=macroparams@*/
/*@=macroundef@*/
/*@=unreachable@*/
/*@=macrospec@*/
/*@=varuse@*/
/*@=ignorequals@*/
/*@=macrostmt@*/
/*@=noeffect@*/
/*@=shadow@*/
/*@=exitarg@*/
/*@=macroredef@*/
/*@=uniondef@*/
/*@=compdef@*/
/*@=matchfields@*/
/*@=exportlocal@*/
/*@=evalorderuncon@*/
/*@=exportheader@*/
/*@=typeuse@*/
/*@=redecl@*/
/*@=redef@*/
/*@=noparams@*/
/*@=ansireserved@*/
/*@=fielduse@*/
/*@=ifblock@*/
/*@=elseifcomplete@*/
/*@=whileblock@*/
/*@=forblock@*/
/*@=branchstate@*/
/*@=readonlytrans@*/
/*@=namechecks@*/
/*@=usedef@*/
/*@=systemunrecog@*/
/*@=dependenttrans@*/
/*@=unqualifiedtrans@*/
/*@=declundef@*/


/*drl added 11/27/2001*/
/*@=bounds@*/

/*drl added 12/11/2002*/
/*@=type@*/
