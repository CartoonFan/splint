/*
** Inserted at beginning of c files generated by bison
** REMEMBER:  Change bison.reset too.
*/

/*@-allmacros@*/
/*@+boolint@*/
/*@+charint@*/
/*@-macroparams@*/
/*@-macroundef@*/
/*@-unreachable@*/
/*@-macrospec@*/
/*@-varuse@*/
/*@+ignorequals@*/
/*@-macrostmt@*/
/*@-noeffect@*/
/*@-shadow@*/
/*@-exitarg@*/
/*@-macroredef@*/
/*@-uniondef@*/
/*@-compdef@*/
/*@-matchfields@*/
/*@-exportlocal@*/
/*@-evalorderuncon@*/
/*@-exportheader@*/
/*@-typeuse@*/
/*@-redecl@*/
/*@-redef@*/
/*@-noparams@*/
/*@-ansireserved@*/
/*@-fielduse@*/
/*@-ifblock@*/
/*@-elseifcomplete@*/
/*@-whileblock@*/
/*@-forblock@*/
/*@-branchstate@*/
/*@-readonlytrans@*/
/*@-namechecks@*/
/*@-usedef@*/
/*@-systemunrecog@*/
/*@-dependenttrans@*/
/*@-unqualifiedtrans@*/
/*@-nullassign@*/
/*@-nullpass@*/
/*@-nullptrarith*/
/*@-usereleased@*/
/*@-declundef@*/

/*drl added 11/27/2001*/
/*@-bounds@*/
/* < end of bison.head > */


/*  A Bison parser, made from cgrammar.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	BADTOK	257
#define	SKIPTOK	258
#define	CTOK_ELIPSIS	259
#define	CASE	260
#define	DEFAULT	261
#define	CIF	262
#define	CELSE	263
#define	SWITCH	264
#define	WHILE	265
#define	DO	266
#define	CFOR	267
#define	GOTO	268
#define	CONTINUE	269
#define	BREAK	270
#define	RETURN	271
#define	TSEMI	272
#define	TLBRACE	273
#define	TRBRACE	274
#define	TCOMMA	275
#define	TCOLON	276
#define	TASSIGN	277
#define	TLPAREN	278
#define	TRPAREN	279
#define	TLSQBR	280
#define	TRSQBR	281
#define	TDOT	282
#define	TAMPERSAND	283
#define	TEXCL	284
#define	TTILDE	285
#define	TMINUS	286
#define	TPLUS	287
#define	TMULT	288
#define	TDIV	289
#define	TPERCENT	290
#define	TLT	291
#define	TGT	292
#define	TCIRC	293
#define	TBAR	294
#define	TQUEST	295
#define	CSIZEOF	296
#define	CALIGNOF	297
#define	ARROW_OP	298
#define	CTYPEDEF	299
#define	COFFSETOF	300
#define	INC_OP	301
#define	DEC_OP	302
#define	LEFT_OP	303
#define	RIGHT_OP	304
#define	LE_OP	305
#define	GE_OP	306
#define	EQ_OP	307
#define	NE_OP	308
#define	AND_OP	309
#define	OR_OP	310
#define	MUL_ASSIGN	311
#define	DIV_ASSIGN	312
#define	MOD_ASSIGN	313
#define	ADD_ASSIGN	314
#define	SUB_ASSIGN	315
#define	LEFT_ASSIGN	316
#define	RIGHT_ASSIGN	317
#define	AND_ASSIGN	318
#define	XOR_ASSIGN	319
#define	OR_ASSIGN	320
#define	CSTRUCT	321
#define	CUNION	322
#define	CENUM	323
#define	VA_ARG	324
#define	VA_DCL	325
#define	QWARN	326
#define	QGLOBALS	327
#define	QMODIFIES	328
#define	QNOMODS	329
#define	QCONSTANT	330
#define	QFUNCTION	331
#define	QITER	332
#define	QDEFINES	333
#define	QUSES	334
#define	QALLOCATES	335
#define	QSETS	336
#define	QRELEASES	337
#define	QPRECLAUSE	338
#define	QPOSTCLAUSE	339
#define	QINVARIANT	340
#define	QALT	341
#define	QUNDEF	342
#define	QKILLED	343
#define	QENDMACRO	344
#define	LLMACRO	345
#define	LLMACROITER	346
#define	LLMACROEND	347
#define	TENDMACRO	348
#define	QSWITCHBREAK	349
#define	QLOOPBREAK	350
#define	QINNERBREAK	351
#define	QSAFEBREAK	352
#define	QINNERCONTINUE	353
#define	QFALLTHROUGH	354
#define	QLINTNOTREACHED	355
#define	QLINTFALLTHROUGH	356
#define	QLINTFALLTHRU	357
#define	QARGSUSED	358
#define	QPRINTFLIKE	359
#define	QLINTPRINTFLIKE	360
#define	QSCANFLIKE	361
#define	QMESSAGELIKE	362
#define	QNOTREACHED	363
#define	QCONST	364
#define	QVOLATILE	365
#define	QINLINE	366
#define	QEXTENSION	367
#define	QEXTERN	368
#define	QSTATIC	369
#define	QAUTO	370
#define	QREGISTER	371
#define	QOUT	372
#define	QIN	373
#define	QYIELD	374
#define	QONLY	375
#define	QTEMP	376
#define	QSHARED	377
#define	QREF	378
#define	QUNIQUE	379
#define	QCHECKED	380
#define	QUNCHECKED	381
#define	QCHECKEDSTRICT	382
#define	QCHECKMOD	383
#define	QKEEP	384
#define	QKEPT	385
#define	QPARTIAL	386
#define	QSPECIAL	387
#define	QOWNED	388
#define	QDEPENDENT	389
#define	QRETURNED	390
#define	QEXPOSED	391
#define	QNULL	392
#define	QOBSERVER	393
#define	QISNULL	394
#define	QEXITS	395
#define	QMAYEXIT	396
#define	QNEVEREXIT	397
#define	QTRUEEXIT	398
#define	QFALSEEXIT	399
#define	QLONG	400
#define	QSIGNED	401
#define	QUNSIGNED	402
#define	QSHORT	403
#define	QUNUSED	404
#define	QSEF	405
#define	QNOTNULL	406
#define	QRELNULL	407
#define	QABSTRACT	408
#define	QCONCRETE	409
#define	QMUTABLE	410
#define	QIMMUTABLE	411
#define	QTRUENULL	412
#define	QFALSENULL	413
#define	QEXTERNAL	414
#define	QREFCOUNTED	415
#define	QREFS	416
#define	QNEWREF	417
#define	QTEMPREF	418
#define	QKILLREF	419
#define	QRELDEF	420
#define	CGCHAR	421
#define	CBOOL	422
#define	CINT	423
#define	CGFLOAT	424
#define	CDOUBLE	425
#define	CVOID	426
#define	QANYTYPE	427
#define	QINTEGRALTYPE	428
#define	QUNSIGNEDINTEGRALTYPE	429
#define	QSIGNEDINTEGRALTYPE	430
#define	QNULLTERMINATED	431
#define	QSETBUFFERSIZE	432
#define	QSETSTRINGLENGTH	433
#define	QMAXSET	434
#define	QMAXREAD	435
#define	QTESTINRANGE	436
#define	TCAND	437
#define	IDENTIFIER	438
#define	NEW_IDENTIFIER	439
#define	TYPE_NAME_OR_ID	440
#define	CANNOTATION	441
#define	CCONSTANT	442
#define	ITER_NAME	443
#define	ITER_ENDNAME	444
#define	TYPE_NAME	445
#define	METASTATE_NAME	446


/*
**
** cgrammar.y
**
** Yacc/Bison grammar for extended ANSI C used by Splint.
**
** original grammar by Nate Osgood ---
**    hacrat@catfish.lcs.mit.edu Mon Jun 14 13:06:32 1993
**
** changes for Splint --- handle typedef names correctly
** fix struct/union parsing bug (empty struct is accepted)
** add productions to handle macros --- require
** error correction --- main source of conflicts in grammar.
** need to process initializations sequentially, L->R
**
** production names are cryptic, so more productions fit on one line
**
** conflicts:  87 shift/reduce, 18 reduce/reduce
** most of these are due to handling macros
** a few are due to handling type expressions
*/

/*@=allmacros@*/

extern int yylex ();
extern void swallowMacro (void);
extern void yyerror (char *);

# include "splintMacros.nf"
# include "basic.h"
# include "cscanner.h"
# include "cgrammar.h"
# include "exprChecks.h"

/*@-allmacros@*/
/*@-matchfields@*/

# define SHOWCSYM FALSE

/*
** This is necessary, or else when the bison-generated code #include's malloc.h,
** there will be a parse error.
**
** Unfortunately, it means the error checking on malloc, etc. is lost for allocations
** in bison-generated files under Win32.
*/

# ifdef WIN32
# undef malloc
# undef calloc
# undef realloc
# endif


typedef union
{
  lltok tok;
  int count;
  qual typequal;
  qualList tquallist;
  ctype ctyp;
  /*@dependent@*/ sRef sr;
  /*@only@*/ sRef osr;

  /*@only@*/ functionClauseList funcclauselist;
  /*@only@*/ functionClause funcclause;  
  /*@only@*/ flagSpec flagspec;
  /*@only@*/ globalsClause globsclause;
  /*@only@*/ modifiesClause modsclause;
  /*@only@*/ warnClause warnclause;
  /*@only@*/ stateClause stateclause;

  /*@only@*/ functionConstraint fcnconstraint; 

  /*@only@*/ metaStateConstraint msconstraint;
  /*@only@*/ metaStateSpecifier msspec;
  /*@only@*/ metaStateExpression msexpr;
  /*@observer@*/ metaStateInfo msinfo;

  /*@only@*/ sRefList srlist;
  /*@only@*/ globSet globset;
  /*@only@*/ qtype qtyp;
  /*@only@*/ cstring cname;
  /*@observer@*/ annotationInfo annotation;
  /*@only@*/ idDecl ntyp;
  /*@only@*/ idDeclList ntyplist;
  /*@only@*/ uentryList flist;
  /*@owned@*/ uentryList entrylist;
  /*@observer@*/ /*@dependent@*/ uentry entry;
  /*@only@*/ uentry oentry;
  /*@only@*/ exprNode expr;
  /*@only@*/ enumNameList enumnamelist;
  /*@only@*/ exprNodeList exprlist;
  /*@only@*/ sRefSet srset; 
  /*@only@*/ cstringList cstringlist;

  /*drl
    added 1/19/2001
  */
  constraint con;
  constraintList conL;
  constraintExpr conE;
  /* drl */  
} YYSTYPE;
#ifndef YYDEBUG
#define YYDEBUG 1
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1197
#define	YYFLAG		-32768
#define	YYNTBASE	193

#define YYTRANSLATE(x) ((unsigned)(x) <= 446 ? yytranslate[x] : 451)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
   177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
   187,   188,   189,   190,   191,   192
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     1,     3,     5,     8,    11,    13,    15,    17,    19,
    21,    23,    25,    34,    46,    47,    53,    55,    59,    61,
    64,    66,    73,    77,    84,    85,    92,    93,   101,   103,
   110,   114,   121,   122,   129,   130,   138,   139,   140,   151,
   155,   159,   163,   166,   168,   172,   173,   178,   179,   184,
   186,   190,   192,   194,   196,   200,   202,   206,   208,   210,
   212,   214,   216,   218,   223,   229,   231,   233,   235,   237,
   241,   246,   249,   253,   257,   261,   263,   265,   267,   268,
   271,   272,   275,   277,   279,   281,   283,   285,   287,   289,
   291,   293,   295,   297,   299,   302,   303,   308,   310,   313,
   314,   318,   320,   324,   326,   328,   329,   332,   336,   339,
   341,   345,   348,   349,   352,   354,   356,   358,   360,   362,
   364,   366,   368,   370,   372,   374,   376,   378,   380,   382,
   384,   388,   389,   393,   394,   395,   400,   403,   406,   408,
   410,   412,   416,   421,   424,   428,   432,   436,   438,   440,
   442,   446,   448,   450,   454,   459,   462,   466,   470,   474,
   475,   477,   479,   483,   485,   487,   489,   493,   495,   497,
   499,   504,   508,   513,   520,   526,   532,   535,   538,   540,
   544,   546,   549,   552,   555,   558,   561,   564,   567,   570,
   572,   574,   578,   580,   590,   591,   595,   600,   603,   608,
   611,   613,   618,   620,   624,   628,   632,   634,   638,   642,
   644,   648,   652,   654,   658,   662,   666,   670,   672,   676,
   680,   682,   686,   688,   692,   694,   698,   700,   701,   706,
   708,   709,   714,   716,   717,   718,   726,   728,   732,   736,
   740,   744,   748,   752,   756,   760,   764,   768,   772,   774,
   778,   779,   781,   783,   785,   787,   789,   793,   794,   804,
   805,   817,   820,   821,   828,   829,   838,   843,   848,   849,
   850,   853,   855,   860,   861,   866,   868,   872,   877,   879,
   883,   885,   887,   889,   891,   893,   896,   897,   904,   907,
   910,   911,   918,   919,   925,   927,   929,   931,   933,   935,
   937,   939,   941,   943,   945,   947,   949,   951,   953,   955,
   957,   959,   961,   963,   965,   967,   969,   971,   973,   975,
   977,   979,   981,   983,   985,   987,   989,   991,   993,   995,
   997,   999,  1001,  1003,  1005,  1007,  1009,  1011,  1013,  1015,
  1017,  1019,  1021,  1023,  1025,  1027,  1029,  1032,  1035,  1038,
  1041,  1044,  1047,  1050,  1053,  1056,  1059,  1062,  1065,  1068,
  1071,  1074,  1077,  1080,  1083,  1086,  1089,  1092,  1095,  1098,
  1101,  1104,  1108,  1110,  1115,  1117,  1121,  1124,  1127,  1130,
  1131,  1133,  1134,  1135,  1136,  1149,  1150,  1151,  1163,  1170,
  1177,  1178,  1179,  1190,  1191,  1192,  1203,  1209,  1215,  1220,
  1225,  1226,  1228,  1230,  1233,  1239,  1243,  1246,  1251,  1253,
  1257,  1262,  1269,  1270,  1279,  1284,  1286,  1290,  1293,  1295,
  1300,  1302,  1304,  1307,  1310,  1312,  1315,  1317,  1320,  1322,
  1324,  1326,  1329,  1331,  1334,  1337,  1341,  1343,  1347,  1349,
  1353,  1355,  1357,  1361,  1362,  1365,  1366,  1371,  1376,  1378,
  1380,  1383,  1385,  1387,  1390,  1391,  1393,  1399,  1402,  1406,
  1410,  1415,  1419,  1424,  1429,  1435,  1437,  1439,  1441,  1443,
  1445,  1447,  1449,  1451,  1453,  1455,  1457,  1459,  1462,  1465,
  1473,  1480,  1483,  1484,  1485,  1496,  1497,  1504,  1506,  1508,
  1510,  1512,  1515,  1517,  1519,  1521,  1523,  1525,  1527,  1529,
  1533,  1535,  1536,  1540,  1543,  1546,  1548,  1550,  1552,  1554,
  1556,  1558,  1560,  1562,  1564,  1566,  1570,  1572,  1574,  1577,
  1580,  1581,  1584,  1585,  1590,  1591,  1598,  1599,  1603,  1604,
  1610,  1614,  1617,  1621,  1622,  1623,  1624,  1625,  1626,  1628,
  1631,  1634,  1638,  1641,  1645,  1649,  1654,  1657,  1660,  1664,
  1668,  1673,  1675,  1678,  1680,  1683,  1685,  1688,  1690,  1693,
  1695,  1698,  1700,  1705,  1708,  1709,  1715,  1716,  1723,  1728,
  1733,  1734,  1735,  1746,  1748,  1749,  1754,  1756,  1758,  1760,
  1762,  1764,  1767,  1769,  1773,  1775,  1780,  1784,  1789,  1796,
  1802,  1808,  1811,  1814,  1816,  1819,  1822,  1825,  1828,  1831,
  1834,  1837,  1840,  1842,  1844,  1849,  1851,  1855,  1859,  1863,
  1865,  1869,  1873,  1875,  1879,  1883,  1885,  1889,  1893,  1897,
  1901,  1903,  1907,  1911,  1913,  1917,  1919,  1923,  1925,  1929,
  1931,  1935,  1937,  1941,  1943,  1944,  1945,  1953,  1955,  1959,
  1963,  1967,  1971,  1975,  1979,  1983,  1987,  1991,  1995,  1999,
  2001,  2002,  2004,  2007,  2015,  2018,  2021,  2029,  2036,  2039,
  2043,  2046,  2050,  2053,  2057,  2061,  2065,  2069,  2072,  2076,
  2077,  2079,  2081,  2083,  2085,  2087,  2089,  2091,  2093
};

static const short yyrhs[] = {    -1,
   194,     0,   195,     0,   194,   195,     0,   256,   447,     0,
   196,     0,   197,     0,   207,     0,   210,     0,   293,     0,
    18,     0,     1,     0,    76,   331,   345,   355,   345,   447,
   301,    90,     0,    76,   331,   345,   355,   345,    23,   301,
   306,   305,   447,    90,     0,     0,    77,   198,   199,   447,
    90,     0,   200,     0,   331,   345,   200,     0,   204,     0,
   359,   204,     0,   449,     0,   301,    24,   345,   355,   301,
    25,     0,   201,    26,    27,     0,   201,    26,   301,   292,
    27,   345,     0,     0,   201,   302,    24,    25,   202,   228,
     0,     0,   201,   302,    24,   356,    25,   203,   228,     0,
   449,     0,   301,    24,   345,   200,   301,    25,     0,   204,
    26,    27,     0,   204,    26,   301,   292,    27,   345,     0,
     0,   204,   302,    24,    25,   205,   229,     0,     0,   204,
   302,    24,   356,    25,   206,   229,     0,     0,     0,    78,
   449,    24,   356,    25,   208,   229,   209,   447,    90,     0,
    91,   386,    94,     0,    92,   372,    94,     0,    93,   373,
    94,     0,    91,    94,     0,   251,     0,   213,    23,   216,
     0,     0,   225,   214,    22,   217,     0,     0,     5,   215,
    22,   217,     0,   213,     0,   213,    40,   216,     0,   192,
     0,   183,     0,    55,     0,   220,   218,   219,     0,   220,
     0,   223,   222,   223,     0,   180,     0,   181,     0,    52,
     0,    51,     0,    53,     0,   224,     0,   226,    24,   223,
    25,     0,    24,   223,   227,   223,    25,     0,   225,     0,
   188,     0,   448,     0,   185,     0,   225,    26,    27,     0,
   225,    26,   188,    27,     0,    34,   225,     0,    24,   225,
    25,     0,   225,    28,   449,     0,   225,    44,   449,     0,
   221,     0,    33,     0,    32,     0,     0,   230,   228,     0,
     0,   231,   229,     0,   232,     0,   236,     0,   235,     0,
   309,     0,   312,     0,   242,     0,   233,     0,   237,     0,
   235,     0,   310,     0,   314,     0,   243,     0,   233,    90,
     0,     0,    73,   234,   244,   447,     0,    75,     0,   237,
    90,     0,     0,    74,   238,   257,     0,   240,     0,   240,
    40,   239,     0,   185,     0,   242,     0,     0,   243,    90,
     0,    72,   239,   423,     0,    72,   239,     0,   245,     0,
   244,    21,   245,     0,   246,   247,     0,     0,   248,   246,
     0,   448,     0,   185,     0,   293,     0,    88,     0,    89,
     0,   118,     0,   119,     0,   132,     0,    79,     0,    80,
     0,    81,     0,    82,     0,    83,     0,    84,     0,    85,
     0,   355,     0,   331,   345,   355,     0,     0,    19,   253,
   403,     0,     0,     0,   254,   407,   255,   396,     0,   211,
   252,     0,   260,   447,     0,   447,     0,   448,     0,   185,
     0,   258,    26,    27,     0,   258,    26,   259,    27,     0,
    34,   258,     0,    24,   258,    25,     0,   258,    28,   449,
     0,   258,    44,   449,     0,   258,     0,   423,     0,   258,
     0,   260,    21,   258,     0,   448,     0,   185,     0,   261,
    26,    27,     0,   261,    26,   259,    27,     0,    34,   261,
     0,    24,   261,    25,     0,   261,    28,   449,     0,   261,
    44,   449,     0,     0,   263,     0,   261,     0,   263,    21,
   261,     0,   448,     0,   185,     0,   423,     0,    24,   290,
    25,     0,   186,     0,   113,     0,   264,     0,   265,    26,
   290,    27,     0,   265,    24,    25,     0,   265,    24,   266,
    25,     0,    70,    24,   289,    21,   367,    25,     0,   265,
   345,    28,   449,   301,     0,   265,   345,    44,   449,   301,
     0,   265,    47,     0,   265,    48,     0,   289,     0,   266,
    21,   289,     0,   265,     0,    47,   267,     0,    48,   267,
     0,    29,   273,     0,    34,   273,     0,    33,   273,     0,
    32,   273,     0,    31,   273,     0,    30,   273,     0,   270,
     0,   269,     0,   268,    28,   449,     0,   449,     0,    46,
   301,    24,   367,   345,    21,   268,    25,   301,     0,     0,
   301,   271,   272,     0,    42,    24,   367,    25,     0,    42,
   267,     0,    43,    24,   367,    25,     0,    43,   267,     0,
   267,     0,    24,   367,    25,   273,     0,   273,     0,   274,
    34,   273,     0,   274,    35,   273,     0,   274,    36,   273,
     0,   274,     0,   275,    33,   274,     0,   275,    32,   274,
     0,   275,     0,   276,    49,   275,     0,   276,    50,   275,
     0,   276,     0,   277,    37,   276,     0,   277,    38,   276,
     0,   277,    51,   276,     0,   277,    52,   276,     0,   277,
     0,   278,    53,   277,     0,   278,    54,   277,     0,   278,
     0,   279,    29,   278,     0,   279,     0,   280,    39,   279,
     0,   280,     0,   281,    40,   280,     0,   281,     0,     0,
   282,    55,   283,   281,     0,   282,     0,     0,   284,    56,
   285,   282,     0,   284,     0,     0,     0,   284,    41,   287,
   290,    22,   288,   286,     0,   286,     0,   267,    23,   289,
     0,   267,    57,   289,     0,   267,    58,   289,     0,   267,
    59,   289,     0,   267,    60,   289,     0,   267,    61,   289,
     0,   267,    62,   289,     0,   267,    63,   289,     0,   267,
    64,   289,     0,   267,    65,   289,     0,   267,    66,   289,
     0,   289,     0,   290,    21,   289,     0,     0,   290,     0,
   286,     0,   294,     0,    71,     0,   299,     0,   331,   301,
    18,     0,     0,   331,   345,   355,   345,   295,   301,   305,
    18,   301,     0,     0,   331,   345,   355,   345,    23,   296,
   301,   306,   305,    18,   301,     0,   355,   345,     0,     0,
   355,   345,    23,   298,   301,   306,     0,     0,    45,   331,
   300,   345,   303,   301,   241,    18,     0,    45,   331,   301,
    18,     0,    45,   303,   301,    18,     0,     0,     0,   304,
   301,     0,   297,     0,   303,    21,   345,   297,     0,     0,
   305,    21,   345,   297,     0,   289,     0,    19,   307,    20,
     0,    19,   307,    21,    20,     0,   306,     0,   307,    21,
   306,     0,   114,     0,   112,     0,   115,     0,   116,     0,
   117,     0,   310,    90,     0,     0,   249,   345,   311,   263,
   447,   301,     0,   314,    90,     0,   250,   345,     0,     0,
   313,   320,   315,   262,   447,   301,     0,     0,   313,   316,
   317,   447,   301,     0,   219,     0,   212,     0,   141,     0,
   142,     0,   144,     0,   145,     0,   143,     0,   126,     0,
   129,     0,   127,     0,   128,     0,   134,     0,   135,     0,
   120,     0,   122,     0,   121,     0,   130,     0,   131,     0,
   123,     0,   125,     0,   138,     0,   140,     0,   153,     0,
   152,     0,   137,     0,   139,     0,   177,     0,   187,     0,
   136,     0,   151,     0,   150,     0,   160,     0,   158,     0,
   159,     0,   154,     0,   155,     0,   156,     0,   157,     0,
   161,     0,   162,     0,   165,     0,   166,     0,   163,     0,
   164,     0,   149,     0,   146,     0,   147,     0,   148,     0,
   118,     0,   119,     0,   132,     0,   133,     0,   110,   301,
     0,   111,   301,     0,   327,   301,     0,   320,   301,     0,
   318,   301,     0,   321,   301,     0,   319,   301,     0,   323,
   301,     0,   322,   301,     0,   324,   301,     0,   325,   301,
     0,   167,   345,     0,   169,   345,     0,   168,   345,     0,
   170,   345,     0,   171,   345,     0,   172,   345,     0,   173,
   345,     0,   174,   345,     0,   175,   345,     0,   176,   345,
     0,   450,   345,     0,   336,   345,     0,   350,   345,     0,
   326,   345,     0,   301,   331,   301,     0,   333,     0,   333,
    87,   332,    90,     0,   367,     0,   367,    21,   332,     0,
   308,   334,     0,   328,   334,     0,   329,   334,     0,     0,
   331,     0,     0,     0,     0,   345,    67,   449,   301,    19,
   337,   400,   346,   401,   338,    20,   335,     0,     0,     0,
   345,    68,   449,   301,    19,   339,   400,   346,   401,   340,
    20,     0,   345,    67,   449,   301,    19,    20,     0,   345,
    68,   449,   301,    19,    20,     0,     0,     0,   345,    67,
   301,    19,   341,   400,   346,   401,   342,    20,     0,     0,
     0,   345,    68,   301,    19,   343,   400,   346,   401,   344,
    20,     0,   345,    67,   301,    19,    20,     0,   345,    68,
   301,    19,    20,     0,   345,    67,   449,   345,     0,   345,
    68,   449,   345,     0,     0,   347,     0,   210,     0,   346,
   347,     0,   331,   345,   348,   301,    18,     0,   331,   301,
    18,     0,   349,   345,     0,   348,    21,   349,   345,     0,
   355,     0,    22,   301,   292,     0,   355,    22,   301,   292,
     0,   345,    69,    19,   352,    20,   301,     0,     0,   345,
    69,   449,    19,   351,   352,    20,   301,     0,   345,    69,
   449,   301,     0,   353,     0,   352,    21,   353,     0,   352,
    21,     0,   449,     0,   449,    23,   301,   292,     0,   201,
     0,   369,     0,   359,   191,     0,   359,   354,     0,   201,
     0,   359,   201,     0,   362,     0,   345,   360,     0,   110,
     0,   111,     0,   357,     0,   358,   357,     0,    34,     0,
    34,   358,     0,    34,   359,     0,    34,   358,   359,     0,
   361,     0,   361,    21,     5,     0,   449,     0,   361,    21,
   449,     0,     5,     0,   363,     0,   363,    21,     5,     0,
     0,   364,   366,     0,     0,   363,    21,   365,   366,     0,
   301,   331,   354,   301,     0,   449,     0,   330,     0,   330,
   368,     0,   359,     0,   370,     0,   359,   370,     0,     0,
   370,     0,   301,    24,   345,   368,    25,     0,    26,    27,
     0,    26,   292,    27,     0,   370,    26,    27,     0,   370,
    26,   292,    27,     0,   301,    24,    25,     0,   301,    24,
   362,    25,     0,   370,   301,    24,    25,     0,   370,   301,
    24,   362,    25,     0,   388,     0,   390,     0,   393,     0,
   396,     0,   409,     0,   412,     0,   444,     0,   417,     0,
   446,     0,   374,     0,   372,     0,   381,     0,   374,   381,
     0,   416,   374,     0,   443,   387,    11,    24,   290,    25,
    18,     0,   443,   387,    11,    24,   290,    25,     0,   376,
   381,     0,     0,     0,    13,    24,   291,    18,   291,    18,
   377,   291,   378,    25,     0,     0,   189,   398,    24,   380,
   420,    25,     0,   190,     0,   388,     0,   390,     0,   393,
     0,   384,   407,     0,   384,     0,   385,     0,   409,     0,
   382,     0,   375,     0,   379,     0,   446,     0,    24,   381,
    25,     0,     1,     0,     0,   411,   383,   381,     0,   398,
    19,     0,   402,    20,     0,   387,     0,   406,     0,   388,
     0,   390,     0,   393,     0,   397,     0,   410,     0,   412,
     0,   417,     0,   445,     0,    24,   387,    25,     0,   446,
     0,     1,     0,   449,    22,     0,   109,   371,     0,     0,
   100,   389,     0,     0,     6,   292,   391,    22,     0,     0,
   100,   389,     6,   292,   392,    22,     0,     0,     7,   394,
    22,     0,     0,   100,   389,     7,   395,    22,     0,    24,
   396,    25,     0,   398,   404,     0,   398,   405,   399,     0,
     0,     0,     0,     0,     0,    20,     0,   109,    20,     0,
   408,    20,     0,   408,   109,    20,     0,   407,    20,     0,
   407,   109,    20,     0,   407,   408,    20,     0,   407,   408,
   109,    20,     0,    19,   403,     0,    19,    20,     0,    19,
   406,    20,     0,    19,   407,    20,     0,    19,   407,   408,
    20,     0,   387,     0,   406,   387,     0,   293,     0,   407,
   293,     0,   371,     0,   408,   371,     0,    18,     0,   290,
    18,     0,    18,     0,   290,    18,     0,   290,     0,     8,
    24,   290,    25,     0,   411,   371,     0,     0,   411,   371,
     9,   413,   371,     0,     0,    10,    24,   290,   414,    25,
   371,     0,    11,    24,   290,    25,     0,    11,    24,   290,
    25,     0,     0,     0,   189,   418,   398,    24,   419,   420,
    25,   396,   442,   399,     0,   422,     0,     0,   420,   421,
    21,   422,     0,   441,     0,   448,     0,   186,     0,   185,
     0,   188,     0,   423,   188,     0,   423,     0,    24,   290,
    25,     0,   424,     0,   265,    26,   290,    27,     0,   265,
    24,    25,     0,   265,    24,   266,    25,     0,    70,    24,
   289,    21,   367,    25,     0,   265,   345,    28,   449,   301,
     0,   265,   345,    44,   449,   301,     0,   265,    47,     0,
   265,    48,     0,   425,     0,    47,   267,     0,    48,   267,
     0,    29,   273,     0,    34,   273,     0,    33,   273,     0,
    32,   273,     0,    31,   273,     0,    30,   273,     0,   270,
     0,   426,     0,    24,   367,    25,   273,     0,   427,     0,
   274,    34,   273,     0,   274,    35,   273,     0,   274,    36,
   273,     0,   428,     0,   275,    33,   274,     0,   275,    32,
   274,     0,   429,     0,   276,    49,   275,     0,   276,    50,
   275,     0,   430,     0,   277,    37,   276,     0,   277,    38,
   276,     0,   277,    51,   276,     0,   277,    52,   276,     0,
   431,     0,   278,    53,   277,     0,   278,    54,   277,     0,
   432,     0,   279,    29,   278,     0,   433,     0,   280,    39,
   279,     0,   434,     0,   281,    40,   280,     0,   435,     0,
   282,    55,   281,     0,   436,     0,   284,    56,   282,     0,
   437,     0,     0,     0,   284,    41,   439,   290,    22,   440,
   286,     0,   438,     0,   267,    23,   289,     0,   267,    57,
   289,     0,   267,    58,   289,     0,   267,    59,   289,     0,
   267,    60,   289,     0,   267,    61,   289,     0,   267,    62,
   289,     0,   267,    63,   289,     0,   267,    64,   289,     0,
   267,    65,   289,     0,   267,    66,   289,     0,   190,     0,
     0,    12,     0,   415,   371,     0,   443,   371,    11,    24,
   290,    25,    18,     0,   376,   371,     0,   415,   387,     0,
   443,   387,    11,    24,   290,    25,    18,     0,   443,   387,
    11,    24,   290,    25,     0,   376,   387,     0,    14,   449,
    18,     0,    15,    18,     0,    99,    15,    18,     0,    16,
    18,     0,    95,    16,    18,     0,    96,    16,    18,     0,
    97,    16,    18,     0,    98,    16,    18,     0,    17,    18,
     0,    17,   290,    18,     0,     0,    18,     0,   184,     0,
   185,     0,   189,     0,   190,     0,   448,     0,   186,     0,
   191,     0,   186,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   322,   323,   326,   327,   330,   331,   332,   333,   334,   335,
   336,   337,   340,   342,   346,   346,   353,   359,   363,   364,
   368,   369,   371,   373,   386,   389,   399,   402,   410,   411,
   413,   415,   431,   434,   442,   445,   453,   455,   455,   459,
   460,   461,   462,   465,   468,   472,   472,   475,   475,   480,
   481,   484,   489,   490,   493,   494,   497,   502,   503,   506,
   507,   508,   511,   512,   513,   518,   519,   522,   524,   526,
   528,   537,   539,   541,   543,   559,   563,   564,   571,   572,
   580,   582,   586,   587,   588,   589,   590,   591,   594,   595,
   596,   597,   598,   599,   602,   605,   606,   613,   616,   619,
   625,   633,   635,   639,   642,   643,   646,   649,   655,   659,
   660,   663,   666,   667,   670,   671,   672,   675,   676,   677,
   678,   679,   682,   683,   684,   685,   686,   689,   690,   693,
   699,   703,   705,   709,   710,   712,   719,   729,   730,   733,
   734,   735,   736,   737,   738,   739,   740,   744,   745,   749,
   750,   753,   755,   757,   758,   759,   760,   761,   763,   767,
   768,   771,   775,   787,   788,   789,   790,   791,   792,   795,
   796,   797,   798,   799,   800,   801,   802,   803,   806,   807,
   810,   811,   812,   813,   814,   815,   816,   817,   818,   819,
   820,   823,   824,   827,   831,   832,   835,   836,   837,   838,
   841,   842,   846,   847,   848,   849,   852,   853,   854,   857,
   858,   859,   862,   863,   864,   865,   866,   869,   870,   871,
   874,   875,   878,   879,   883,   884,   887,   888,   893,   899,
   900,   906,   912,   913,   913,   915,   918,   919,   920,   921,
   922,   923,   924,   925,   926,   927,   928,   929,   932,   933,
   936,   937,   940,   945,   946,   947,   950,   964,   969,   975,
   977,   983,   988,   988,   992,   993,   995,   996,   999,  1002,
  1005,  1008,  1009,  1012,  1013,  1016,  1017,  1018,  1022,  1024,
  1033,  1034,  1035,  1036,  1037,  1040,  1043,  1049,  1058,  1061,
  1064,  1071,  1078,  1084,  1109,  1110,  1113,  1114,  1115,  1116,
  1117,  1120,  1121,  1122,  1123,  1126,  1127,  1128,  1129,  1130,
  1131,  1132,  1133,  1134,  1135,  1136,  1137,  1138,  1139,  1140,
  1141,  1142,  1146,  1147,  1150,  1151,  1154,  1155,  1158,  1159,
  1160,  1161,  1164,  1165,  1166,  1167,  1168,  1169,  1172,  1173,
  1174,  1175,  1178,  1179,  1180,  1181,  1184,  1185,  1186,  1187,
  1188,  1189,  1190,  1191,  1192,  1193,  1194,  1201,  1202,  1203,
  1204,  1205,  1206,  1207,  1208,  1209,  1210,  1211,  1212,  1213,
  1214,  1217,  1221,  1222,  1226,  1227,  1231,  1232,  1233,  1236,
  1237,  1241,  1248,  1250,  1252,  1253,  1255,  1257,  1258,  1260,
  1262,  1264,  1266,  1267,  1268,  1271,  1272,  1274,  1276,  1277,
  1280,  1283,  1284,  1285,  1288,  1290,  1294,  1296,  1300,  1301,
  1302,  1306,  1308,  1308,  1310,  1313,  1315,  1317,  1320,  1325,
  1332,  1333,  1334,  1341,  1345,  1346,  1350,  1351,  1354,  1355,
  1358,  1359,  1362,  1363,  1364,  1365,  1368,  1369,  1372,  1373,
  1376,  1377,  1378,  1381,  1381,  1382,  1383,  1386,  1398,  1414,
  1415,  1418,  1419,  1420,  1423,  1424,  1427,  1429,  1430,  1432,
  1433,  1435,  1437,  1439,  1441,  1447,  1448,  1449,  1450,  1451,
  1452,  1453,  1454,  1455,  1459,  1462,  1465,  1466,  1470,  1472,
  1474,  1476,  1480,  1481,  1483,  1487,  1489,  1491,  1494,  1495,
  1496,  1497,  1498,  1499,  1500,  1501,  1502,  1503,  1504,  1505,
  1506,  1509,  1510,  1515,  1518,  1521,  1522,  1525,  1526,  1527,
  1528,  1529,  1530,  1531,  1532,  1533,  1534,  1535,  1538,  1539,
  1546,  1547,  1553,  1554,  1555,  1556,  1559,  1560,  1561,  1562,
  1565,  1566,  1570,  1573,  1576,  1579,  1582,  1585,  1588,  1589,
  1590,  1591,  1593,  1594,  1596,  1598,  1604,  1608,  1610,  1612,
  1614,  1618,  1619,  1622,  1623,  1626,  1627,  1630,  1631,  1634,
  1635,  1636,  1639,  1652,  1657,  1658,  1662,  1663,  1666,  1671,
  1674,  1675,  1676,  1684,  1685,  1685,  1689,  1690,  1691,  1702,
  1709,  1710,  1713,  1714,  1717,  1718,  1719,  1720,  1721,  1723,
  1724,  1725,  1726,  1729,  1730,  1731,  1732,  1733,  1734,  1735,
  1736,  1737,  1738,  1741,  1742,  1745,  1746,  1747,  1748,  1751,
  1752,  1753,  1756,  1757,  1758,  1761,  1762,  1763,  1764,  1765,
  1768,  1769,  1770,  1773,  1774,  1777,  1778,  1782,  1783,  1786,
  1787,  1790,  1791,  1794,  1795,  1796,  1797,  1800,  1801,  1802,
  1803,  1804,  1805,  1806,  1807,  1808,  1809,  1810,  1811,  1814,
  1815,  1818,  1821,  1823,  1825,  1829,  1830,  1832,  1834,  1837,
  1838,  1839,  1841,  1842,  1843,  1844,  1845,  1846,  1847,  1850,
  1851,  1854,  1857,  1858,  1859,  1860,  1861,  1864,  1865
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","BADTOK",
"SKIPTOK","CTOK_ELIPSIS","CASE","DEFAULT","CIF","CELSE","SWITCH","WHILE","DO",
"CFOR","GOTO","CONTINUE","BREAK","RETURN","TSEMI","TLBRACE","TRBRACE","TCOMMA",
"TCOLON","TASSIGN","TLPAREN","TRPAREN","TLSQBR","TRSQBR","TDOT","TAMPERSAND",
"TEXCL","TTILDE","TMINUS","TPLUS","TMULT","TDIV","TPERCENT","TLT","TGT","TCIRC",
"TBAR","TQUEST","CSIZEOF","CALIGNOF","ARROW_OP","CTYPEDEF","COFFSETOF","INC_OP",
"DEC_OP","LEFT_OP","RIGHT_OP","LE_OP","GE_OP","EQ_OP","NE_OP","AND_OP","OR_OP",
"MUL_ASSIGN","DIV_ASSIGN","MOD_ASSIGN","ADD_ASSIGN","SUB_ASSIGN","LEFT_ASSIGN",
"RIGHT_ASSIGN","AND_ASSIGN","XOR_ASSIGN","OR_ASSIGN","CSTRUCT","CUNION","CENUM",
"VA_ARG","VA_DCL","QWARN","QGLOBALS","QMODIFIES","QNOMODS","QCONSTANT","QFUNCTION",
"QITER","QDEFINES","QUSES","QALLOCATES","QSETS","QRELEASES","QPRECLAUSE","QPOSTCLAUSE",
"QINVARIANT","QALT","QUNDEF","QKILLED","QENDMACRO","LLMACRO","LLMACROITER","LLMACROEND",
"TENDMACRO","QSWITCHBREAK","QLOOPBREAK","QINNERBREAK","QSAFEBREAK","QINNERCONTINUE",
"QFALLTHROUGH","QLINTNOTREACHED","QLINTFALLTHROUGH","QLINTFALLTHRU","QARGSUSED",
"QPRINTFLIKE","QLINTPRINTFLIKE","QSCANFLIKE","QMESSAGELIKE","QNOTREACHED","QCONST",
"QVOLATILE","QINLINE","QEXTENSION","QEXTERN","QSTATIC","QAUTO","QREGISTER","QOUT",
"QIN","QYIELD","QONLY","QTEMP","QSHARED","QREF","QUNIQUE","QCHECKED","QUNCHECKED",
"QCHECKEDSTRICT","QCHECKMOD","QKEEP","QKEPT","QPARTIAL","QSPECIAL","QOWNED",
"QDEPENDENT","QRETURNED","QEXPOSED","QNULL","QOBSERVER","QISNULL","QEXITS","QMAYEXIT",
"QNEVEREXIT","QTRUEEXIT","QFALSEEXIT","QLONG","QSIGNED","QUNSIGNED","QSHORT",
"QUNUSED","QSEF","QNOTNULL","QRELNULL","QABSTRACT","QCONCRETE","QMUTABLE","QIMMUTABLE",
"QTRUENULL","QFALSENULL","QEXTERNAL","QREFCOUNTED","QREFS","QNEWREF","QTEMPREF",
"QKILLREF","QRELDEF","CGCHAR","CBOOL","CINT","CGFLOAT","CDOUBLE","CVOID","QANYTYPE",
"QINTEGRALTYPE","QUNSIGNEDINTEGRALTYPE","QSIGNEDINTEGRALTYPE","QNULLTERMINATED",
"QSETBUFFERSIZE","QSETSTRINGLENGTH","QMAXSET","QMAXREAD","QTESTINRANGE","TCAND",
"IDENTIFIER","NEW_IDENTIFIER","TYPE_NAME_OR_ID","CANNOTATION","CCONSTANT","ITER_NAME",
"ITER_ENDNAME","TYPE_NAME","METASTATE_NAME","file","externalDefs","externalDef",
"constantDecl","fcnDecl","@1","plainFcn","plainNamedDecl","namedDeclBase","@2",
"@3","plainNamedDeclBase","@4","@5","iterDecl","@6","@7","macroDef","fcnDefHdr",
"metaStateConstraint","metaStateSpecifier","@8","@9","metaStateExpression","metaStateName",
"constraintSeperator","BufConstraintList","BufConstraint","bufferModifier","relationalOp",
"BufConstraintExpr","BufConstraintTerm","BufConstraintSrefExpr","BufUnaryOp",
"BufBinaryOp","functionClauses","functionClausesPlain","functionClause","functionClausePlain",
"globalsClause","globalsClausePlain","@10","nomodsClause","modifiesClause","modifiesClausePlain",
"@11","flagSpec","flagId","optWarnClause","warnClause","warnClausePlain","globIdList",
"globIdListExpr","optGlobQuals","globId","globQual","stateTag","conditionTag",
"fcnDefHdrAux","fcnBody","@12","@13","@14","fcnDef","locModifies","modListExpr",
"mExpr","modList","specClauseListExpr","optSpecClauseList","specClauseList",
"primaryExpr","postfixExpr","argumentExprList","unaryExpr","fieldDesignator",
"offsetofExpr","sizeofExpr","@15","sizeofExprAux","castExpr","timesExpr","plusExpr",
"shiftExpr","relationalExpr","equalityExpr","bitandExpr","xorExpr","bitorExpr",
"andExpr","@16","orExpr","@17","conditionalExpr","@18","@19","assignExpr","expr",
"optExpr","constantExpr","initializer","instanceDecl","@20","@21","namedInitializer",
"@22","typeDecl","@23","IsType","PushType","namedInitializerList","namedInitializerListAux",
"optDeclarators","init","initList","storageSpecifier","stateClause","stateClausePlain",
"@24","conditionClause","startConditionClause","conditionClausePlain","@25",
"@26","functionConstraint","exitsQualifier","checkQualifier","stateQualifier",
"paramQualifier","visibilityQualifier","returnQualifier","typedefQualifier",
"refcountQualifier","typeModifier","definedQualifier","typeQualifier","typeSpecifier",
"completeType","completeTypeSpecifier","altType","completeTypeSpecifierAux",
"optCompleteType","optStructInvariant","suSpc","@27","@28","@29","@30","@31",
"@32","@33","@34","NotType","structDeclList","structDecl","structNamedDeclList",
"structNamedDecl","enumSpc","@35","enumeratorList","enumerator","optNamedDecl",
"namedDecl","genericParamList","innerMods","innerModsList","pointers","paramIdList",
"idList","paramTypeList","paramList","@36","@37","paramDecl","typeExpression",
"abstractDecl","optAbstractDeclBase","abstractDeclBase","stmt","iterBody","endBody",
"iterDefStmtList","iterDefIterationStmt","forPred","@38","@39","partialIterStmt",
"@40","iterDefStmt","iterSelectionStmt","@41","openScope","closeScope","macroBody",
"stmtErr","labeledStmt","optExtraFallThroughs","caseStmt","@42","@43","defaultStmt",
"@44","@45","compoundStmt","compoundStmtErr","CreateInnerScope","DeleteInnerScope",
"CreateStructInnerScope","DeleteStructInnerScope","DeleteInnerScopeSafe","compoundStmtRest",
"compoundStmtAux","compoundStmtAuxErr","stmtListErr","initializerList","stmtList",
"expressionStmt","expressionStmtErr","ifPred","selectionStmt","@46","@47","whilePred",
"iterWhilePred","iterStmt","@48","@49","iterArgList","@50","iterArgExpr","cconstantExpr",
"primaryIterExpr","postfixIterExpr","unaryIterExpr","castIterExpr","timesIterExpr",
"plusIterExpr","shiftIterExpr","relationalIterExpr","equalityIterExpr","bitandIterExpr",
"xorIterExpr","bitorIterExpr","andIterExpr","orIterExpr","conditionalIterExpr",
"@51","@52","assignIterExpr","endIter","doHeader","iterationStmt","iterationStmtErr",
"jumpStmt","optSemi","id","newId","typeName", NULL
};
#endif

static const short yyr1[] = {     0,
   193,   193,   194,   194,   195,   195,   195,   195,   195,   195,
   195,   195,   196,   196,   198,   197,   199,   199,   200,   200,
   201,   201,   201,   201,   202,   201,   203,   201,   204,   204,
   204,   204,   205,   204,   206,   204,   208,   209,   207,   210,
   210,   210,   210,   211,   212,   214,   213,   215,   213,   216,
   216,   217,   218,   218,   219,   219,   220,   221,   221,   222,
   222,   222,   223,   223,   223,   224,   224,   225,   225,   225,
   225,   225,   225,   225,   225,   226,   227,   227,   228,   228,
   229,   229,   230,   230,   230,   230,   230,   230,   231,   231,
   231,   231,   231,   231,   232,   234,   233,   235,   236,   238,
   237,   239,   239,   240,   241,   241,   242,   243,   243,   244,
   244,   245,   246,   246,   247,   247,   247,   248,   248,   248,
   248,   248,   249,   249,   249,   249,   249,   250,   250,   251,
   251,   253,   252,   254,   255,   252,   256,   257,   257,   258,
   258,   258,   258,   258,   258,   258,   258,   259,   259,   260,
   260,   261,   261,   261,   261,   261,   261,   261,   261,   262,
   262,   263,   263,   264,   264,   264,   264,   264,   264,   265,
   265,   265,   265,   265,   265,   265,   265,   265,   266,   266,
   267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
   267,   268,   268,   269,   271,   270,   272,   272,   272,   272,
   273,   273,   274,   274,   274,   274,   275,   275,   275,   276,
   276,   276,   277,   277,   277,   277,   277,   278,   278,   278,
   279,   279,   280,   280,   281,   281,   282,   283,   282,   284,
   285,   284,   286,   287,   288,   286,   289,   289,   289,   289,
   289,   289,   289,   289,   289,   289,   289,   289,   290,   290,
   291,   291,   292,   293,   293,   293,   294,   295,   294,   296,
   294,   297,   298,   297,   300,   299,   299,   299,   301,   302,
   303,   304,   304,   305,   305,   306,   306,   306,   307,   307,
   308,   308,   308,   308,   308,   309,   311,   310,   312,   313,
   315,   314,   316,   314,   317,   317,   318,   318,   318,   318,
   318,   319,   319,   319,   319,   320,   320,   320,   320,   320,
   320,   320,   320,   320,   320,   320,   320,   320,   320,   320,
   320,   320,   321,   321,   322,   322,   323,   323,   324,   324,
   324,   324,   325,   325,   325,   325,   325,   325,   326,   326,
   326,   326,   327,   327,   327,   327,   328,   328,   328,   328,
   328,   328,   328,   328,   328,   328,   328,   329,   329,   329,
   329,   329,   329,   329,   329,   329,   329,   329,   329,   329,
   329,   330,   331,   331,   332,   332,   333,   333,   333,   334,
   334,   335,   337,   338,   336,   339,   340,   336,   336,   336,
   341,   342,   336,   343,   344,   336,   336,   336,   336,   336,
   345,   346,   346,   346,   347,   347,   348,   348,   349,   349,
   349,   350,   351,   350,   350,   352,   352,   352,   353,   353,
   354,   354,   354,   354,   355,   355,   356,   356,   357,   357,
   358,   358,   359,   359,   359,   359,   360,   360,   361,   361,
   362,   362,   362,   364,   363,   365,   363,   366,   366,   367,
   367,   368,   368,   368,   369,   369,   370,   370,   370,   370,
   370,   370,   370,   370,   370,   371,   371,   371,   371,   371,
   371,   371,   371,   371,   372,   373,   374,   374,   375,   375,
   375,   375,   377,   378,   376,   380,   379,   379,   381,   381,
   381,   381,   381,   381,   381,   381,   381,   381,   381,   381,
   381,   383,   382,   384,   385,   386,   386,   387,   387,   387,
   387,   387,   387,   387,   387,   387,   387,   387,   388,   388,
   389,   389,   391,   390,   392,   390,   394,   393,   395,   393,
   396,   396,   397,   398,   399,   400,   401,   402,   403,   403,
   403,   403,   403,   403,   403,   403,   404,   405,   405,   405,
   405,   406,   406,   407,   407,   408,   408,   409,   409,   410,
   410,   410,   411,   412,   413,   412,   414,   412,   415,   416,
   418,   419,   417,   420,   421,   420,   422,   422,   422,   422,
   423,   423,   424,   424,   425,   425,   425,   425,   425,   425,
   425,   425,   425,   426,   426,   426,   426,   426,   426,   426,
   426,   426,   426,   427,   427,   428,   428,   428,   428,   429,
   429,   429,   430,   430,   430,   431,   431,   431,   431,   431,
   432,   432,   432,   433,   433,   434,   434,   435,   435,   436,
   436,   437,   437,   438,   439,   440,   438,   441,   441,   441,
   441,   441,   441,   441,   441,   441,   441,   441,   441,   442,
   442,   443,   444,   444,   444,   445,   445,   445,   445,   446,
   446,   446,   446,   446,   446,   446,   446,   446,   446,   447,
   447,   448,   449,   449,   449,   449,   449,   450,   450
};

static const short yyr2[] = {     0,
     0,     1,     1,     2,     2,     1,     1,     1,     1,     1,
     1,     1,     8,    11,     0,     5,     1,     3,     1,     2,
     1,     6,     3,     6,     0,     6,     0,     7,     1,     6,
     3,     6,     0,     6,     0,     7,     0,     0,    10,     3,
     3,     3,     2,     1,     3,     0,     4,     0,     4,     1,
     3,     1,     1,     1,     3,     1,     3,     1,     1,     1,
     1,     1,     1,     4,     5,     1,     1,     1,     1,     3,
     4,     2,     3,     3,     3,     1,     1,     1,     0,     2,
     0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     2,     0,     4,     1,     2,     0,
     3,     1,     3,     1,     1,     0,     2,     3,     2,     1,
     3,     2,     0,     2,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     3,     0,     3,     0,     0,     4,     2,     2,     1,     1,
     1,     3,     4,     2,     3,     3,     3,     1,     1,     1,
     3,     1,     1,     3,     4,     2,     3,     3,     3,     0,
     1,     1,     3,     1,     1,     1,     3,     1,     1,     1,
     4,     3,     4,     6,     5,     5,     2,     2,     1,     3,
     1,     2,     2,     2,     2,     2,     2,     2,     2,     1,
     1,     3,     1,     9,     0,     3,     4,     2,     4,     2,
     1,     4,     1,     3,     3,     3,     1,     3,     3,     1,
     3,     3,     1,     3,     3,     3,     3,     1,     3,     3,
     1,     3,     1,     3,     1,     3,     1,     0,     4,     1,
     0,     4,     1,     0,     0,     7,     1,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     1,     3,
     0,     1,     1,     1,     1,     1,     3,     0,     9,     0,
    11,     2,     0,     6,     0,     8,     4,     4,     0,     0,
     2,     1,     4,     0,     4,     1,     3,     4,     1,     3,
     1,     1,     1,     1,     1,     2,     0,     6,     2,     2,
     0,     6,     0,     5,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     3,     1,     4,     1,     3,     2,     2,     2,     0,
     1,     0,     0,     0,    12,     0,     0,    11,     6,     6,
     0,     0,    10,     0,     0,    10,     5,     5,     4,     4,
     0,     1,     1,     2,     5,     3,     2,     4,     1,     3,
     4,     6,     0,     8,     4,     1,     3,     2,     1,     4,
     1,     1,     2,     2,     1,     2,     1,     2,     1,     1,
     1,     2,     1,     2,     2,     3,     1,     3,     1,     3,
     1,     1,     3,     0,     2,     0,     4,     4,     1,     1,
     2,     1,     1,     2,     0,     1,     5,     2,     3,     3,
     4,     3,     4,     4,     5,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     2,     2,     7,
     6,     2,     0,     0,    10,     0,     6,     1,     1,     1,
     1,     2,     1,     1,     1,     1,     1,     1,     1,     3,
     1,     0,     3,     2,     2,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     3,     1,     1,     2,     2,
     0,     2,     0,     4,     0,     6,     0,     3,     0,     5,
     3,     2,     3,     0,     0,     0,     0,     0,     1,     2,
     2,     3,     2,     3,     3,     4,     2,     2,     3,     3,
     4,     1,     2,     1,     2,     1,     2,     1,     2,     1,
     2,     1,     4,     2,     0,     5,     0,     6,     4,     4,
     0,     0,    10,     1,     0,     4,     1,     1,     1,     1,
     1,     2,     1,     3,     1,     4,     3,     4,     6,     5,
     5,     2,     2,     1,     2,     2,     2,     2,     2,     2,
     2,     2,     1,     1,     4,     1,     3,     3,     3,     1,
     3,     3,     1,     3,     3,     1,     3,     3,     3,     3,
     1,     3,     3,     1,     3,     1,     3,     1,     3,     1,
     3,     1,     3,     1,     0,     0,     7,     1,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     1,
     0,     1,     2,     7,     2,     2,     7,     6,     2,     3,
     2,     3,     2,     3,     3,     3,     3,     2,     3,     0,
     1,     1,     1,     1,     1,     1,     1,     1,     1
};

static const short yydefact[] = {     0,
    12,    11,   433,   401,   255,   401,    15,     0,     0,     0,
     0,   269,   269,   282,   281,   283,   284,   285,   343,   344,
   308,   310,   309,   313,   314,   302,   304,   305,   303,   311,
   312,   345,   346,   306,   307,   323,   319,   315,   320,   316,
   297,   298,   301,   299,   300,   340,   341,   342,   339,   325,
   324,   318,   317,   329,   330,   331,   332,   327,   328,   326,
   333,   334,   337,   338,   335,   336,   401,   401,   401,   401,
   401,   401,   401,   401,   401,   401,   321,   672,   673,   677,
   322,   674,   675,   678,     0,     3,     6,     7,   425,     8,
     9,   134,    44,   670,    10,   254,   256,     0,   380,   269,
   269,   269,   269,   269,   269,   269,   269,   401,   269,   380,
   380,   401,   373,   401,     0,   401,   130,   269,   676,    21,
   401,   429,   430,   431,   434,   435,   272,   269,   269,   265,
   401,   679,   401,   401,   677,     0,   518,   269,   527,     0,
     0,     0,   652,     0,     0,     0,     0,   269,   560,     0,
   269,   269,   269,   269,   269,   269,   269,   269,   269,     0,
    43,     0,     0,     0,     0,     0,   521,   269,   169,   165,
   168,   581,   571,   170,   181,   201,   191,   190,   203,   207,
   210,   213,   218,   221,   223,   225,   227,   230,   233,   237,
   249,   562,   195,     0,     0,   552,   508,   509,   510,   511,
     0,     0,   512,   269,   513,     0,   514,   166,     0,   515,
   517,   164,     0,   501,     0,   558,     0,   534,   488,     0,
     0,     0,   497,     0,   498,   477,   496,   493,   494,   489,
   490,   491,     0,     0,   495,   502,     0,     0,   499,   476,
     0,   347,   348,   358,   360,   359,   361,   362,   363,   364,
   365,   366,   367,     4,   269,     0,   132,   137,   401,   671,
     5,   401,   381,   377,   351,   353,   350,   352,   355,   354,
   356,   357,   371,   349,   378,   379,     0,   269,   269,   369,
   269,   269,     0,   370,   426,   368,   432,   436,   401,     0,
   271,   401,     0,   262,   269,   670,    17,    19,     0,   401,
   269,    29,   444,   269,   165,   168,   201,   253,   523,   164,
     0,   269,   269,   269,   269,     0,   661,   663,   668,     0,
     0,   401,   450,     0,     0,   184,   189,   188,   187,   186,
   185,     0,   269,   182,   183,   269,     0,     0,     0,     0,
     0,   521,     0,   269,   520,   269,   466,   467,   468,   469,
     0,   470,   471,   269,   473,   269,   472,   474,   534,   269,
   269,   177,   178,     0,   269,   269,   269,   269,   269,   269,
   269,   269,   269,   269,   269,   269,   269,   269,   269,   269,
   269,   269,   269,   269,   269,   269,   269,   269,   269,   269,
   269,   228,   234,   231,   561,   269,     0,   659,    40,     0,
   535,   553,   564,   656,   582,     0,   519,   269,     0,     0,
     0,   559,    41,   478,   482,   554,   401,   492,   504,   505,
     0,     0,     0,    42,    23,   269,   444,   401,   401,   269,
   257,   131,   401,     0,   375,     0,   401,     0,   401,     0,
   269,   269,   268,   269,   267,   263,   401,     0,   269,     0,
   401,   269,    20,   441,     0,     0,   427,   442,   269,     0,
     0,   528,     0,   567,     0,   252,     0,   660,   669,   167,
   269,   269,     0,   452,   451,   453,   269,   516,   269,     0,
   664,   665,   666,   667,   662,   522,   269,   529,     0,   655,
   401,   532,   653,     0,     0,   172,     0,   179,     0,     0,
     0,   238,   239,   240,   241,   242,   243,   244,   245,   246,
   247,   248,   204,   205,   206,   209,   208,   211,   212,   214,
   215,   216,   217,   219,   220,   222,   224,   226,   269,   269,
   269,   250,   269,   269,   196,   548,   168,   552,     0,   401,
   533,   565,     0,     0,   500,   486,   269,   555,   503,     0,
     0,    25,     0,   539,   269,   556,   133,   401,   269,   534,
   269,   258,   374,   269,   391,     0,   399,   394,     0,   400,
     0,   416,   419,   413,   415,   273,   269,   269,   670,    16,
    31,   269,   444,   269,    18,   428,   437,   439,    37,   446,
   401,   445,   449,   524,   563,     0,   569,   269,   372,   458,
     0,   444,   454,   269,     0,   202,   401,   269,   525,     0,
   531,   547,     0,   572,   269,   173,   171,   269,   269,   229,
     0,   232,   269,   198,   269,   200,   549,   550,   269,   269,
   269,   570,   269,   401,   269,   401,    79,    27,   540,   543,
   269,   269,   541,   269,   557,   534,   136,     0,   260,   269,
   376,   397,   536,   383,   398,   536,   386,   269,   418,   269,
     0,   106,   269,   269,   269,     0,    33,     0,   269,     0,
    81,   443,   269,   455,   269,     0,   459,   462,   269,     0,
   460,     0,   444,     0,     0,     0,   530,   269,   269,   180,
   175,   176,   235,     0,     0,   551,   566,     0,   269,   269,
   269,   269,   269,   269,   269,   269,   269,     0,   165,   168,
   181,   201,   190,   207,   210,   213,   218,   221,   223,   225,
   227,   230,     0,   575,   574,   166,   585,   594,   604,   606,
   610,   613,   616,   621,   624,   626,   628,   630,   632,   634,
   638,   577,   164,     0,    24,     0,    96,   100,    98,   123,
   124,   125,   126,   127,   128,   129,    26,    79,    83,     0,
    85,    84,     0,    88,     0,   401,   401,    86,     0,    87,
   293,     0,    79,   544,   545,   269,   542,    22,   269,   274,
   401,   389,   536,   401,   390,   536,   412,   417,   269,     0,
     0,   105,   269,   276,   264,   269,     0,   401,    81,    35,
     0,   438,   440,    38,    81,    89,    91,    90,    94,    92,
    93,   447,   421,     0,   269,   455,   422,   456,   568,   483,
     0,   463,   461,   464,     0,     0,   174,   526,     0,   575,
   269,   197,   199,   658,     0,     0,   184,   189,   188,   187,
   186,   185,   182,   183,   269,   269,   269,   177,   178,     0,
   269,   269,   269,   269,   269,   269,   269,   269,   269,   269,
   269,   269,   269,   269,   269,   269,   269,   269,   269,   269,
   269,   269,   269,   269,   269,   269,   269,   228,   635,   231,
   487,     0,   481,   104,   109,   102,   113,   670,    80,    95,
    99,   107,   287,   290,   286,     0,   291,   289,    28,   546,
   269,     0,   403,   401,   401,   402,   401,   401,   401,   420,
   269,   266,   279,     0,   274,    13,    32,    34,    81,    30,
   670,    82,   444,   448,   423,   424,   269,   457,   465,     0,
   193,     0,   534,   236,   657,   167,   269,     0,   172,     0,
     0,     0,     0,   639,   640,   641,   642,   643,   644,   645,
   646,   647,   648,   649,   204,   205,   206,   209,   208,   211,
   212,   214,   215,   216,   217,   219,   220,   222,   224,   226,
   631,   269,   633,   269,   480,   108,     0,   118,   119,   120,
   121,   122,   670,   110,   401,   113,     0,     0,   141,   101,
   150,   670,   139,   140,     0,    48,     0,     0,    58,    59,
    69,    67,   296,     0,   295,    56,    76,     0,    63,    66,
     0,   670,    68,   160,   274,   269,   401,     0,   269,   404,
   392,   401,   395,   401,   414,   277,   269,   670,    36,     0,
   269,   484,   269,     0,   654,   651,   202,   269,   173,   171,
   269,   269,     0,   576,   103,   113,    97,   116,   112,   117,
   115,   114,     0,   144,     0,     0,     0,     0,   138,     0,
     0,   153,   162,   670,   152,     0,     0,    66,     0,    72,
     0,    54,    53,     0,    61,    60,    62,     0,     0,     0,
     0,     0,     0,   269,   670,   161,     0,   259,   269,   406,
   269,   269,   401,   409,     0,   384,     0,   387,   278,   280,
     0,    39,   269,     0,   194,   192,   650,   535,     0,   175,
   176,   636,   111,   145,   142,   148,     0,   149,   146,   147,
   151,     0,   156,     0,     0,     0,     0,   269,     0,    78,
    77,     0,    73,     0,    50,    45,    46,    55,    66,    57,
    70,     0,    74,    75,     0,     0,   294,   269,   269,   275,
   269,   269,     0,   407,   269,   393,     0,   396,     0,    14,
   485,   573,   174,   269,   143,   157,   154,     0,   158,   159,
   163,   288,    52,    49,     0,     0,    71,    47,    64,   292,
   261,   410,   401,   405,   269,   382,   388,   637,   155,    65,
    51,   408,   411,   385,     0,     0,     0
};

static const short yydefgoto[] = {  1195,
    85,    86,    87,    88,   134,   296,   297,    89,   637,   773,
   298,   799,   919,    90,   671,   921,   903,    92,  1003,  1135,
  1082,  1066,  1136,  1174,  1074,  1005,  1006,  1007,  1078,  1008,
  1009,  1139,  1011,  1132,   757,   804,   758,   805,   759,   806,
   887,   807,   762,   808,   888,   885,   886,   791,   764,   765,
   983,   984,   985,  1049,   986,   766,   767,    93,   258,   428,
   259,   560,    94,   990,  1116,  1117,   992,  1063,  1085,  1064,
   174,   175,   497,   176,   930,   177,   178,   397,   535,   179,
   180,   181,   182,   183,   184,   185,   186,   187,   188,   529,
   189,   531,   190,   530,   831,   191,   220,   467,   309,   416,
    96,   650,   779,   127,   578,    97,   292,   193,   256,   128,
   129,   902,   795,   914,    99,   768,   810,   995,   770,   771,
   811,  1014,   896,  1012,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   323,   417,   434,   113,
   264,  1194,   114,   783,  1157,   786,  1159,   653,  1095,   656,
  1097,   115,   905,   906,  1092,  1093,   116,   661,   571,   572,
   815,   131,   456,   124,   125,   118,   586,   587,   457,   458,
   459,   673,   592,   324,   821,   817,   476,   345,   221,   241,
   222,   223,   346,   927,  1104,   225,   633,   226,   227,   421,
   228,   229,   195,   402,   347,   343,   348,   461,   686,   349,
   311,   610,   350,   200,   351,   541,   781,  1021,   234,   557,
   492,   401,   202,   558,   559,   352,   203,   204,   353,   630,
   596,   354,   237,   355,   359,   689,   724,   882,   725,   208,
   727,   728,   729,   730,   731,   732,   733,   734,   735,   736,
   737,   738,   739,   740,   741,   972,  1164,   742,  1108,   356,
   357,   210,   358,   261,   310,   213,   121
};

static const short yypact[] = {  2061,
-32768,-32768,   119,  5146,-32768,  6281,-32768,   724,  3013,  3310,
  3310,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   657,
-32768,-32768,-32768,-32768,  2253,-32768,-32768,-32768,   136,-32768,
-32768,    78,-32768,    93,-32768,-32768,-32768,   109,  6116,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  6116,
  6116,   124,    62,-32768,   776,-32768,-32768,   724,-32768,-32768,
-32768,-32768,-32768,-32768,   119,-32768,-32768,   167,-32768,   124,
-32768,-32768,-32768,  5146,-32768,   174,-32768,  5382,-32768,   199,
   215,   246,-32768,   273,   724,   295,   313,  1433,-32768,  2631,
  5382,  5382,  5382,  5382,  5382,  5382,-32768,  5407,  5407,   321,
-32768,   236,   337,   374,   416,   322,   260,  4586,-32768,   440,
   460,-32768,   475,-32768,   806,   841,-32768,-32768,-32768,   838,
   272,   271,   931,   349,   391,   387,   497,   489,    60,-32768,
-32768,   254,-32768,  3436,   482,   491,-32768,-32768,-32768,-32768,
   546,  3057,-32768,  4586,-32768,  3436,-32768,   405,  3436,-32768,
-32768,   580,   587,-32768,   619,-32768,  2822,   475,   702,   361,
   555,  3206,-32768,  3310,-32768,-32768,-32768,  5739,-32768,-32768,
-32768,-32768,   696,   709,-32768,-32768,  3310,  3436,-32768,-32768,
   647,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   719,   745,-32768,-32768,  6005,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   762,   367,-32768,-32768,
   724,   724,    57,-32768,   136,-32768,-32768,-32768,-32768,   769,
-32768,-32768,   780,   799,   367,    93,-32768,   150,   783,-32768,
   724,-32768,   228,  5382,-32768,-32768,-32768,-32768,-32768,-32768,
   790,  5382,  5382,  5382,  1550,   833,-32768,-32768,-32768,   390,
   550,  5606,   104,   861,   869,-32768,-32768,-32768,-32768,-32768,
-32768,   873,  5382,-32768,-32768,  5382,   840,   894,   899,   917,
   920,   260,   432,  1914,-32768,  4586,-32768,-32768,-32768,-32768,
   928,-32768,-32768,  4586,-32768,  4586,-32768,-32768,-32768,  5157,
  5382,-32768,-32768,    56,  5382,  5382,  5382,  5382,  5382,  5382,
  5382,  5382,  5382,  5382,  5382,  5382,  5382,  5382,  5382,  5382,
  5382,  5382,  5382,  5382,  5382,  5382,  5382,  5382,  5382,  5382,
  5382,-32768,-32768,-32768,-32768,  5382,   473,-32768,-32768,  2440,
-32768,-32768,   947,-32768,-32768,   968,-32768,  5382,   552,   936,
   960,-32768,-32768,-32768,-32768,-32768,   124,  5739,-32768,-32768,
  3310,  1881,   975,-32768,-32768,  5382,   209,  3540,  4668,   367,
-32768,   616,  6281,   903,   978,   977,   983,   985,   983,   724,
   994,   367,-32768,   367,-32768,-32768,-32768,   945,   999,  1017,
-32768,   367,   150,-32768,   724,   996,-32768,  1021,   724,   127,
  1025,-32768,   305,  1029,   344,  1029,  1030,-32768,-32768,-32768,
-32768,  5320,  1028,   612,-32768,   766,  5382,-32768,-32768,  1038,
-32768,-32768,-32768,-32768,-32768,-32768,  5382,-32768,  1026,-32768,
  3540,-32768,-32768,  1051,  1039,-32768,   404,-32768,   234,   724,
   724,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   838,   838,   272,   272,   271,
   271,   271,   271,   931,   931,   349,   391,   387,  5382,  5382,
  5382,-32768,  5439,  5494,-32768,-32768,  4902,-32768,  3250,  3726,
-32768,-32768,  1040,   477,-32768,-32768,   367,-32768,-32768,  1041,
  1043,-32768,  1047,-32768,  4098,-32768,-32768,  3912,  4142,  1042,
-32768,  1050,-32768,-32768,  1055,  1057,-32768,  1062,  1065,-32768,
   651,-32768,  1063,-32768,-32768,-32768,   167,-32768,   217,-32768,
-32768,  5382,   220,   367,-32768,-32768,  1066,-32768,-32768,  1083,
  6281,-32768,-32768,-32768,-32768,  1067,-32768,  1550,-32768,-32768,
  1069,   730,   766,  5331,  1074,-32768,-32768,-32768,-32768,  1071,
-32768,-32768,  1075,-32768,  5382,-32768,-32768,-32768,-32768,   497,
   507,   489,  5382,-32768,  5382,-32768,-32768,-32768,  4246,  4586,
  5382,-32768,  5527,-32768,  5382,-32768,  1927,-32768,-32768,-32768,
  4290,  4394,-32768,  4438,-32768,  1042,-32768,  1076,-32768,-32768,
-32768,-32768,-32768,  1082,-32768,-32768,  1088,-32768,   724,-32768,
   724,  1022,  5066,-32768,-32768,  1084,-32768,  1085,-32768,   410,
  1927,-32768,   724,   548,  4586,  1091,-32768,-32768,   121,  1087,
-32768,  1086,    77,  1093,  1094,  1096,-32768,  5382,  5527,-32768,
-32768,-32768,-32768,  1095,  1103,-32768,-32768,   524,  5382,  5382,
  5382,  5382,  5382,  5382,  5382,  5407,  5407,  1097,   529,   558,
   843,  1689,   590,   976,   688,   816,   938,   784,  1101,  1098,
  1099,  1078,    69,  1106,-32768,    33,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   607,   627,-32768,   949,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1927,-32768,  1045,
-32768,-32768,  1052,-32768,  1054,-32768,-32768,-32768,  1059,-32768,
  2174,  1064,  1927,-32768,-32768,  4542,-32768,-32768,-32768,-32768,
  6203,-32768,-32768,  6203,-32768,-32768,-32768,-32768,  5382,   950,
  1127,-32768,  5066,-32768,-32768,  5066,  1081,-32768,  1927,-32768,
  1131,-32768,-32768,-32768,  1927,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   136,  1133,-32768,   149,-32768,   766,-32768,-32768,
  1147,-32768,-32768,-32768,  1154,   724,-32768,-32768,   639,  1155,
  5382,-32768,-32768,  1163,   642,  1157,   675,   693,   722,   727,
   738,   740,   758,   772,  5382,  5351,  5382,   788,   789,    80,
  5382,  5382,  5382,  5382,  5382,  5382,  5382,  5382,  5382,  5382,
  5382,  5382,  5382,  5382,  5382,  5382,  5382,  5382,  5382,  5382,
  5382,  5382,  5382,  5382,  5382,  5382,  5382,  5382,-32768,  5382,
-32768,  1162,  1166,-32768,   998,  1148,   591,    75,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   502,-32768,-32768,-32768,-32768,
  5066,   471,-32768,   124,  4746,-32768,  6203,  4746,  6203,-32768,
-32768,-32768,-32768,   986,-32768,-32768,-32768,-32768,  1927,-32768,
    93,-32768,    64,-32768,-32768,-32768,  5362,-32768,-32768,   360,
-32768,  1169,  1042,-32768,-32768,   800,  5382,  1172,   810,   836,
   259,   724,   724,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   854,   860,   868,   923,  1070,   194,
   633,   462,   474,   681,   770,   915,  1002,   118,   398,    96,
   497,  5382,   489,  5527,-32768,   405,   949,-32768,-32768,-32768,
-32768,-32768,   517,-32768,  5872,   591,   413,   413,-32768,-32768,
   240,   598,-32768,-32768,   493,-32768,   586,   593,-32768,-32768,
-32768,-32768,-32768,  1167,-32768,    13,-32768,   965,-32768,   435,
  1170,    93,-32768,   493,-32768,-32768,-32768,  1177,   122,-32768,
-32768,  4746,-32768,  4746,-32768,-32768,  1837,   604,-32768,  1107,
   508,-32768,-32768,   724,-32768,  1006,   890,-32768,   897,   916,
-32768,-32768,  1003,-32768,-32768,   591,-32768,-32768,-32768,-32768,
-32768,-32768,   579,   240,   597,   724,   724,   413,-32768,   493,
   493,-32768,   342,   667,-32768,  1176,   997,   834,   593,   422,
    47,-32768,-32768,   586,-32768,-32768,-32768,   586,     5,   724,
   724,  1179,   586,-32768,    93,  1178,   686,-32768,   367,-32768,
-32768,  1181,-32768,  1183,  1187,-32768,  1189,-32768,-32768,-32768,
  1113,-32768,   291,  1185,-32768,-32768,-32768,-32768,  1186,   924,
   925,-32768,-32768,-32768,-32768,   240,  1188,   405,-32768,-32768,
   240,   895,   342,   692,   724,   724,   493,-32768,  1020,-32768,
-32768,   586,-32768,   834,  1180,-32768,   422,-32768,   422,-32768,
-32768,  1190,-32768,-32768,  1020,  1191,-32768,-32768,-32768,-32768,
  5382,   122,  1196,-32768,-32768,-32768,  1199,-32768,  1204,-32768,
-32768,-32768,   980,  5382,-32768,-32768,-32768,  1200,-32768,-32768,
   342,-32768,-32768,-32768,  1201,    47,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  5382,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  1228,  1230,-32768
};

static const short yypgoto[] = {-32768,
-32768,  1146,-32768,-32768,-32768,-32768,  -377,  -111,-32768,-32768,
   933,-32768,-32768,-32768,-32768,-32768,    73,-32768,-32768,   336,
-32768,-32768,    59,    92,-32768,   164,-32768,-32768,-32768,  -937,
-32768,  -866,-32768,-32768,  -636,  -727,-32768,-32768,-32768,  -572,
-32768,  -522,-32768,  -322,-32768,   262,-32768,-32768,   578,  -642,
-32768,   195,   256,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  -868,   123,-32768,  -947,-32768,   229,
-32768,  -612,   399,  1174,-32768,-32768,  -585,-32768,-32768,  -113,
  -362,  -348,  -339,  -360,  -366,  -371,  -334,  -504,  -507,-32768,
  -582,-32768,  -136,-32768,-32768,   559,  1141,  -584,  -423,     6,
-32768,-32768,-32768,  -427,-32768,-32768,-32768,   699,  -276,   804,
-32768,  -836,  -740,-32768,-32768,-32768,  -315,-32768,-32768,-32768,
  -313,-32768,-32768,-32768,-32768,-32768,   479,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,    55,   689,-32768,
   934,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  1092,  -689,  -825,-32768,   102,-32768,-32768,   594,   599,
   441,     1,  -392,  1134,-32768,     2,-32768,-32768,  -571,-32768,
-32768,-32768,   583,  -266,   939,-32768,  -458,   761,  1250,-32768,
  1031,-32768,   551,-32768,-32768,-32768,-32768,  -130,-32768,-32768,
-32768,-32768,-32768,    94,   646,   927,  1027,-32768,-32768,  1289,
-32768,-32768,  -332,-32768,   247,   158,  -619,  -812,-32768,   779,
-32768,-32768,   871,  -192,  -435,    52,-32768,   159,   169,-32768,
-32768,   178,-32768,   284,-32768,-32768,   584,-32768,   298,  -583,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1420,
-32768,-32768,  1595,  -270,     0,    66,-32768
};


#define	YYLAST		6472


static const short yytable[] = {   119,
   117,   308,   551,   119,   126,    95,   285,   119,   212,   212,
   212,   489,   435,   676,   576,   603,   516,   517,   527,   991,
   711,   450,   526,   622,   620,   448,   524,   525,   809,  1010,
   680,  1141,   518,   519,   553,   418,   784,   326,   327,   328,
   329,   330,   331,   520,   521,   522,   523,   713,   601,   726,
   723,   996,   913,  -583,   112,   915,   528,  -583,   130,  1067,
   133,   235,   235,   609,   760,   120,   429,  1072,   454,   120,
  1069,   918,    91,   136,   585,   440,   711,   922,  1028,  1020,
   998,   454,  1020,   500,   119,   117,   410,  -401,   678,  -401,
    95,   414,   260,   415,   908,  1023,   257,  -401,   987,   501,
   393,   824,   196,   713,   629,   726,   723,   942,   988,   879,
   260,   825,  1122,  1123,   761,   394,  -629,   119,  1053,  1054,
  -629,   889,   642,   943,   880,   722,   288,  -269,   721,   472,
  1068,  1070,   262,   119,   390,   301,   899,     3,  -625,   112,
  1140,  -269,  -625,  1091,   119,  1146,   472,   396,   279,   212,
   120,   470,     3,   263,     3,     3,   809,    91,   666,  -270,
  1015,   255,   809,   907,   263,   263,   909,   212,   236,   236,
   387,   388,  -269,  -270,   472,   449,   450,   205,  1087,  1171,
   682,   722,     3,   120,   721,   760,   206,   289,   300,  1121,
   668,  1029,  1142,   212,  1175,  1073,  1020,   303,  1020,   302,
   760,   212,  1134,   212,  1137,   212,   669,   540,   212,  1096,
   316,  1098,   607,   454,  -614,   818,   212,  1022,  -614,  1024,
   405,   212,   312,   212,   454,   379,   380,   647,   122,   123,
    78,  1001,   454,   552,   260,   761,   212,   212,   313,   664,
    78,    79,   135,   325,   667,    82,    83,  -401,  -401,  -401,
   761,   337,  -401,  -401,   396,   201,   233,   233,    78,   989,
   617,   719,   513,   514,   515,  1055,   718,  1056,   235,   314,
   714,   395,   717,   235,   396,   235,   809,   119,   432,   396,
   119,   119,   119,  1057,   715,  1040,  1100,   398,   235,   308,
   549,   414,   207,   716,   119,   447,   315,   435,   720,   404,
   119,   976,   406,   379,   380,    78,    79,   135,   665,  1137,
    82,    83,   317,   489,   763,  -452,   472,   719,   205,   381,
   382,   769,   718,   772,   474,   396,   714,   206,   717,   595,
   318,   423,    78,    79,   135,   308,   341,    82,    83,   925,
   715,   685,  1032,   120,   336,   212,   437,   439,   441,   716,
   308,   680,   338,   212,   720,   212,   694,   818,   695,   342,
   120,   711,   205,   606,   396,   910,   302,  1124,   597,  1125,
   205,   206,   973,   971,   205,   236,   471,   205,   412,   206,
   236,   396,   236,   206,  1033,  1126,   206,  1034,   713,   339,
   726,   723,  -401,  -401,  -401,   236,   201,  -401,  -401,   212,
     3,   387,   388,  -401,  -401,  -401,   205,   469,  -401,  -401,
   396,  -401,  -401,  -401,   802,   206,  -401,  -401,  -627,   389,
   212,   212,  -627,   548,   615,   390,   389,   212,   616,   119,
   561,   340,   836,   207,   548,   763,   987,   487,   488,   119,
   201,   119,   769,   119,   772,   308,   988,  1079,   201,  1080,
   763,   119,   201,   301,   119,   201,   -46,   769,   119,   772,
  1079,  -673,  1080,   233,   411,  1081,   722,   308,   233,   721,
   233,  1118,   235,   235,    78,    79,   135,   207,  1081,    82,
    83,  -677,  -617,   233,   201,   207,  -617,   471,  1016,   207,
   212,  1017,   207,   538,  -618,   120,  -674,   396,  -618,   119,
   119,   632,   958,   959,   969,   573,   996,   120,   968,   120,
   381,   382,   966,   967,   533,   534,  1060,   302,   960,   961,
   588,   207,   381,   382,   593,   997,  1061,   396,   693,   962,
   963,   964,   965,   472,   260,   998,   391,  1046,   212,   212,
  1118,     3,   970,   392,   396,   548,   119,   634,   834,  -580,
    78,    79,   135,  -580,   212,    82,    83,   212,   212,   194,
   224,   224,   813,   548,   400,   618,   619,   395,   205,   412,
   396,  -269,   396,   472,   470,   399,   470,   206,  -579,   236,
   236,     3,  -579,   119,  -506,   301,   837,   838,   839,   840,
   841,   842,   405,    78,    79,   135,    78,   989,    82,    83,
  1036,  -676,   719,  1114,  1055,   495,  1056,   718,   407,   997,
  -603,   714,   120,   717,  -603,   260,  1069,   993,  1058,   998,
   987,   260,  1057,  1115,  1017,   715,   998,  -578,   212,   212,
   988,  -578,   743,  -401,   716,  -269,  -401,   472,  -401,   720,
   212,   212,   408,   212,   603,   674,   201,   396,   413,   302,
  1030,   883,   308,  -615,   197,   230,   230,  -615,   119,   396,
   119,  1150,   396,   932,   379,   380,   936,   233,   233,   119,
   658,   659,   119,   119,   212,   816,    78,  1062,   978,   979,
   474,   999,  1000,   207,   260,    78,  1001,  1127,   743,  1002,
  -679,    78,    79,   135,   934,  -597,    82,    83,    98,  -597,
   194,  -619,    98,  1149,   813,  -619,  1017,   205,   980,   981,
   242,   243,  1047,  -602,   419,   987,   206,  -602,  1167,   865,
   866,  1059,   982,  -675,   573,   988,   573,  1182,   420,   381,
   382,    78,    79,   135,   454,   803,    82,    83,   593,   120,
   424,  1084,  -601,  -679,   194,   425,  -601,  -600,   955,   956,
   957,  -600,   194,  -401,   678,  -401,   194,  1101,  -599,   194,
  -598,  1193,  -599,  -401,  -598,   999,  1000,   224,   427,    78,
  1001,  1109,   224,  1002,   224,   212,    78,  1001,  -595,   431,
    78,   989,  -595,    98,   172,   201,   443,   224,   194,  -269,
  -620,   604,  -596,  1128,  -620,   197,  -596,   445,   265,   266,
   267,   268,   269,   270,   271,   272,   451,   274,  -592,  -593,
   277,   462,  -592,  -593,  1148,   119,    98,   816,   381,   382,
  -584,   446,   207,  1037,  -584,   119,   290,   291,   293,   360,
  -587,   361,   299,  -401,  -587,   904,   873,   874,   904,   197,
  -679,  -679,   281,   282,   283,  -679,  -679,   197,   322,  -401,
   468,   197,   362,   363,   197,   332,   615,   481,  1133,  1079,
  1039,  1080,   230,   365,   867,   868,   846,   230,   847,   230,
  -401,   376,   377,   378,  -607,    78,   989,  1081,  -607,   172,
  -608,   120,   230,   197,  -608,   477,  -401,   994,  -609,   848,
   849,   931,  -609,   478,   480,  1013,   479,   366,   367,   368,
   369,   370,   371,   372,   373,   374,   375,    78,    79,   135,
  -605,   482,    82,    83,  -605,   322,   483,  -588,   498,  1166,
  1124,  -588,  1125,   502,   503,   504,   505,   506,   507,   508,
   509,   510,   511,   512,   484,  -622,  -586,   485,  1126,  -622,
  -586,   119,   119,  -612,  -590,  -591,   491,  -612,  -590,  -591,
   194,   383,   384,   426,   532,   542,   376,   377,   378,   904,
   545,   904,   904,   904,   403,   385,   386,   383,   384,   911,
   659,   224,   224,   743,   869,   870,    98,   433,   543,   436,
   438,   385,   386,   546,  1051,   550,   994,   994,   871,   872,
  1050,   285,   563,    98,  1065,   565,  1013,  1013,   564,   299,
  -589,  -269,   322,   568,  -589,  1026,  1027,  1041,  1042,   862,
   863,   864,   574,  1065,   308,  1075,  1076,  1077,   119,  1094,
   589,   473,  -623,   396,  1112,   581,  -623,  1188,  1130,  1131,
   119,   561,  1103,   119,   580,   198,   231,   231,   383,   384,
   583,   590,   322,   275,   276,   197,   594,   598,   308,   396,
   611,   602,   385,   386,   994,   119,   119,   994,   608,  1065,
  1065,   613,   614,   631,   635,   646,   230,   230,  1013,   636,
  1013,   638,   649,  1013,   652,   654,   904,  1013,   904,   119,
   119,   655,  1013,   657,   120,   660,   670,   672,   119,   194,
  -611,   675,   687,   746,  -611,   677,   120,   683,   688,  1106,
   778,   782,   119,   376,   377,   378,   490,   785,   820,   800,
   798,   822,   823,   826,   493,   277,   494,   828,   827,   832,
   845,  1119,  1120,   994,   119,   119,  1065,   833,    98,   875,
   881,  1013,   878,   884,   890,   566,   876,   569,   877,   575,
    98,   891,    98,   892,   912,  1143,  1144,   582,   895,   192,
   299,   119,  1094,   898,   120,   920,   923,   591,   244,   245,
   246,   247,   248,   249,   250,   251,   252,   253,   120,   599,
   916,   928,   473,   690,   605,  1013,   198,   433,   929,   933,
   935,   937,   974,   975,   197,   172,  1035,   977,   556,  1071,
  1169,  1170,  1038,  1083,  1090,  1107,  1102,  1129,  1127,   273,
  1145,  1152,  1160,   278,  1155,   280,  1156,   284,  1158,  1161,
  1163,  1173,   286,  1184,  1165,  1179,  1177,   120,  1186,  1176,
   198,   794,   294,  1187,   295,  1190,  1189,  1196,   198,  1197,
   254,  1004,   198,   453,  1191,   198,  1178,  1138,  1045,   792,
  1113,  1052,  1086,   231,   940,    98,  1168,   577,   231,   897,
   231,   556,   651,  1183,   790,   812,   926,   788,   287,   648,
   240,   475,   433,   231,   198,  1162,   364,   422,   486,   612,
   539,  1044,   830,     0,     0,   662,   663,     0,     0,     0,
     0,     0,   299,     0,     0,     0,     0,     0,   320,     0,
   321,     0,     0,     0,     0,     0,     0,   199,   232,   232,
   556,   605,     0,     0,     0,     0,   433,     0,     0,     0,
     0,   307,     0,     0,     0,     0,   691,   692,   556,   645,
     0,   322,     0,   322,   307,   307,   307,   307,   307,   307,
     0,   334,   335,     0,   192,     0,     0,     0,     0,     0,
     0,     0,   192,     0,     0,     0,   192,     0,   780,   192,
     0,   794,     0,   430,   794,     0,   787,   409,   789,     0,
     0,     0,   796,   797,     0,     0,     0,   801,     0,     0,
     0,   591,   814,     0,     0,     0,     0,   473,   192,     0,
   442,     0,     0,   444,     0,     0,     0,     0,     0,   645,
   697,   452,     0,     0,   455,     0,     0,   322,     0,     0,
     0,     0,   645,   938,   498,     0,     0,     0,     0,   944,
   945,   946,   947,   948,   949,   950,   951,   952,   953,   954,
     0,     0,     0,     0,     0,     0,   198,     0,   209,   238,
   238,     0,     0,     0,     0,   819,     0,     0,   199,     0,
     0,     0,     0,     0,   460,     0,     0,   231,   231,     0,
   319,     0,   463,   464,   465,   466,   304,     0,     0,   794,
     0,   151,   152,   153,   154,   155,   156,     0,     0,     0,
     0,     0,     0,   460,     0,     0,     0,   901,   157,   158,
   159,     0,   199,     0,   460,     0,     0,     0,     0,     0,
   199,     0,     0,     0,   199,     0,     0,   199,     0,     0,
     0,   499,   160,     0,     0,   232,     0,     0,   547,     0,
   232,     0,   232,   924,   814,     0,   605,     0,   455,     0,
     0,     0,     0,   562,     0,   232,   199,     0,   567,     0,
   570,     0,     0,     0,     0,     0,     0,     0,   579,     0,
   192,     0,   584,     0,     0,   169,     0,     0,   544,   307,
   307,   307,   307,   307,   307,   307,   307,   307,   307,   307,
   307,   307,   307,   307,   307,   198,     0,  -251,     0,   209,
     0,     0,     0,   304,     0,     0,     0,     0,   151,   152,
   153,   154,   155,   156,     0,   794,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   157,   158,   159,     0,   307,
     0,     0,  1018,   211,   239,   239,     0,     0,     0,  1025,
     0,     0,     0,   209,     0,     0,    78,   305,   306,   160,
   172,   209,     0,     0,     0,   209,     0,     0,   209,     0,
     0,     0,     0,     0,     0,     0,   238,     0,     0,     0,
     0,   238,     0,   238,     0,   307,     0,     0,     0,     0,
   307,     0,     0,     0,     0,     0,   238,   209,     0,     0,
   307,     0,   169,     0,     0,     0,     0,     0,     0,     0,
   621,     0,     0,     0,   455,     0,     0,     0,     0,   192,
     0,     0,     0,     0,     0,     0,     0,     0,   199,     0,
     0,     0,     0,   679,     0,     0,     0,     0,   684,     0,
     0,     0,   307,     0,   307,     0,   624,   626,     0,   232,
   232,   851,     0,     0,  1088,     0,     0,    98,     0,     0,
     0,     0,     0,     0,     0,   562,     0,   745,     0,   814,
     0,  1105,     0,    78,   305,   306,   433,   172,   466,  1110,
  1111,     0,     0,     0,   211,   852,   853,   854,   855,   856,
   857,   858,   859,   860,   861,   307,     0,     0,     0,     0,
     0,     0,     0,   460,     0,   460,     0,     0,     0,     0,
     0,   698,     0,     0,     0,   744,     0,   307,     0,     0,
     0,     0,  1147,     0,     0,     0,     0,    98,   211,  1151,
  1153,     0,     0,     0,     0,     0,   211,     0,     0,     0,
   211,   814,   850,   211,     0,     0,   712,     0,     0,     0,
     0,   239,     0,     0,     0,     0,   239,     0,   239,   209,
     0,     0,     0,     0,     0,     0,  1172,   199,   829,     0,
     0,   239,   211,     0,     0,     0,     0,     0,     0,   835,
   238,   238,     0,     0,     0,     0,  1180,  1181,     0,     0,
    98,     0,     0,  1185,     0,   793,  1099,   893,   894,     0,
   304,     0,   712,     0,     0,   151,   152,   153,   154,   155,
   156,     0,     0,   307,   307,   307,   307,   307,   307,   843,
   844,   214,   157,   158,   159,     0,   138,   139,   140,   917,
     0,   215,   143,   144,   145,   146,   147,   148,   216,  -479,
  -479,     0,     0,     0,   217,  -479,   160,     0,     0,   151,
   152,   153,   154,   155,   156,     0,     0,     0,     0,     0,
     0,     0,  -269,  -269,     0,     0,   157,   158,   159,     0,
     0,     0,  -534,     0,     0,     0,     0,   344,     0,     0,
     0,     0,   151,   152,   153,   154,   155,   156,     0,   169,
   160,     0,     0,     0,     0,     0,     0,     0,   209,   157,
   158,   159,   307,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,  -479,   162,   163,   164,   165,   166,
   167,     0,     0,   160,     0,     0,     0,   941,     0,   168,
     0,     0,     0,   169,   211,  1019,     0,     0,   746,   747,
   748,   749,     0,     0,   307,   750,   751,   752,   753,   754,
   755,   756,     0,     0,  1031,   239,   239,     0,     0,     0,
    78,   305,   306,     0,   172,     0,   169,     0,     0,     0,
     0,     0,     0,     0,     0,   307,   307,   307,   307,   307,
   307,   307,   307,   307,   307,   307,   307,   307,   307,   307,
   307,   307,     0,   307,     0,     0,     0,     0,     0,     0,
    -1,     1,     0,     0,    78,   170,   171,   466,   172,   218,
   219,     0,     0,     0,     0,     0,     0,     0,     2,     0,
     0,     0,     0,     0,  -269,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     3,     0,     0,    78,   305,   306,
     0,   172,     0,     0,     0,     4,     0,     0,  1089,     0,
   307,     0,  1043,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,  -401,  -401,  -401,
     0,     5,     0,   211,     0,     0,     6,     7,     8,     0,
     0,     0,     0,     0,     0,     0,     0,   712,     0,     0,
     0,     9,    10,    11,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    12,    13,    14,     0,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,  1154,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
    70,    71,    72,    73,    74,    75,    76,    77,     0,     0,
     0,     0,     0,     0,    78,    79,    80,    81,     0,    82,
    83,    84,    -2,     1,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     2,     0,     0,     0,  1192,     0,  -269,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     3,     0,     0,     0,
     0,     0,     0,    21,    22,    23,    24,     4,    25,     0,
     0,     0,     0,    30,    31,     0,     0,    34,    35,     0,
    37,    38,    39,    40,     0,     0,     0,     0,     0,  -401,
  -401,  -401,     0,     5,   307,    52,    53,     0,     6,     7,
     8,     0,     0,     0,     0,     0,     0,   307,     0,     0,
     0,     0,     0,     9,    10,    11,     0,     0,     0,     0,
    77,     0,     0,     0,     0,     0,     0,     0,   307,     0,
    81,     0,    12,    13,    14,     0,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,     0,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
     0,     0,     0,     0,     0,     0,    78,    79,    80,    81,
   137,    82,    83,    84,     0,   138,   139,   140,     0,   141,
   142,   143,   144,   145,   146,   147,   148,   149,  -534,   536,
     0,     0,     0,   150,     0,     0,     0,     0,   151,   152,
   153,   154,   155,   156,     0,     0,     0,     0,     0,     0,
     0,  -269,  -269,     0,     4,   157,   158,   159,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,  -401,  -401,  -401,   160,
     5,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   162,   163,   164,   165,   166,   167,
     0,     0,     0,     0,     0,     0,     0,     0,   168,    12,
    13,    14,   169,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,     0,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
    51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
    61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
    71,    72,    73,    74,    75,    76,    77,     0,     0,     0,
     0,     0,     0,    78,   170,   537,    81,   172,   173,    83,
    84,   137,     0,     0,     0,     0,   138,   139,   140,     0,
   141,   142,   143,   144,   145,   146,   147,   148,   149,  -534,
     0,     0,     0,     0,   150,     0,     0,     0,     0,   151,
   152,   153,   154,   155,   156,     0,     0,     0,     0,     0,
     0,     0,  -269,  -269,     0,     0,   157,   158,   159,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,  -269,  -269,  -269,
   160,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   162,   163,   164,   165,   166,
   167,     0,     0,     0,     0,     0,     0,     0,     0,   168,
  -269,  -269,  -269,   169,  -269,  -269,  -269,  -269,  -269,  -269,
  -269,  -269,  -269,  -269,     0,  -269,  -269,  -269,  -269,  -269,
  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,
  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,
  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,
  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,
  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,     0,     0,
     0,     0,     0,     0,    78,   170,   171,  -269,   172,   173,
    83,  -269,   214,     0,     0,     0,     0,   138,   139,   140,
     0,     0,   215,   143,   144,   145,   146,   147,   148,   216,
  -534,  -538,     0,     0,     0,   217,     0,     0,     0,     0,
   151,   152,   153,   154,   155,   156,     0,     0,     0,     0,
     0,     0,     0,  -269,  -269,     0,     0,   157,   158,   159,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,  -269,  -269,
  -269,   160,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   162,   163,   164,   165,
   166,   167,     0,     0,     0,     0,     0,     0,     0,     0,
   168,  -269,  -269,  -269,   169,  -269,  -269,  -269,  -269,  -269,
  -269,  -269,  -269,  -269,  -269,     0,  -269,  -269,  -269,  -269,
  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,
  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,
  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,
  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,
  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,     0,
     0,     0,     0,     0,     0,    78,   170,   171,  -269,   172,
   218,   219,  -269,   137,     0,     0,     0,     0,   138,   139,
   140,     0,   141,   142,   143,   144,   145,   146,   147,   148,
   149,  -534,     0,     0,     0,     0,   150,     0,     0,     0,
     0,   151,   152,   153,   154,   155,   156,     0,     0,     0,
     0,     0,     0,     0,  -269,  -269,     0,   137,   157,   158,
   159,     0,   138,   139,   140,     0,   141,   142,   143,   144,
   145,   146,   147,   148,   149,  -534,     0,     0,     0,     0,
   150,     0,   160,     0,     0,   151,   152,   153,   154,   155,
   156,     0,     0,     0,     0,     0,     0,     0,  -269,  -269,
     0,     0,   157,   158,   159,     0,   161,   162,   163,   164,
   165,   166,   167,     0,     0,     0,     0,     0,     0,     0,
     0,   168,     0,     0,     0,   169,   160,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
  -507,   162,   163,   164,   165,   166,   167,     0,     0,     0,
     0,     0,     0,     0,     0,   168,     0,     0,     0,   169,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    78,   170,   171,     0,
   172,   173,    83,     0,     0,     0,   214,     0,     0,     0,
     0,   138,   139,   140,     0,     0,   215,   143,   144,   145,
   146,   147,   148,   216,  -534,  -538,     0,     0,     0,   217,
     0,     0,     0,     0,   151,   152,   153,   154,   155,   156,
    78,   170,   171,     0,   172,   173,    83,  -269,  -269,     0,
   137,   157,   158,   159,     0,   138,   139,   140,     0,   141,
   142,   143,   144,   145,   146,   147,   148,   149,  -534,   627,
     0,     0,     0,   150,     0,   160,     0,     0,   151,   152,
   153,   154,   155,   156,     0,     0,     0,     0,     0,     0,
     0,  -269,  -269,     0,     0,   157,   158,   159,     0,  -475,
   162,   163,   164,   165,   166,   167,     0,     0,     0,     0,
   214,     0,     0,     0,   168,   138,   139,   140,   169,   160,
   215,   143,   144,   145,   146,   147,   148,   216,  -534,  -538,
     0,     0,     0,   217,     0,     0,     0,     0,   151,   152,
   153,   154,   155,   156,   162,   163,   164,   165,   166,   167,
     0,  -269,  -269,     0,     0,   157,   158,   159,   168,     0,
     0,     0,   169,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   160,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    78,
   170,   171,     0,   172,   218,   219,     0,     0,     0,     0,
     0,     0,     0,     0,   162,   163,   164,   165,   166,   167,
     0,     0,     0,     0,     0,     0,     0,     0,   168,     0,
     0,     0,   169,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    78,   170,   171,   137,   172,   173,    83,
     0,   138,   139,   140,     0,   141,   142,   143,   144,   145,
   146,   147,   148,   149,  -534,     0,     0,     0,     0,   150,
     0,     0,     0,     0,   151,   152,   153,   154,   155,   156,
     0,     0,     0,     0,     0,     0,     0,  -269,  -269,     0,
     0,   157,   158,   159,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    78,   170,   171,     0,   172,   218,   219,
     0,     0,     0,     0,     0,   160,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   162,   163,   164,   165,   166,   167,     0,     0,     0,     0,
     0,     0,     0,     0,   168,   138,   139,   140,   169,   141,
   142,   143,   144,   145,   146,   147,   148,   216,  -534,   554,
     0,     0,     0,   344,     0,     0,     0,     0,   151,   152,
   153,   154,   155,   156,     0,     0,     0,     0,     0,     0,
     0,  -269,  -269,     0,     4,   157,   158,   159,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   160,
     5,     0,     0,     0,     0,     0,     0,     0,     0,    78,
   170,   171,     0,   172,   173,    83,     0,     0,     0,     0,
     0,     0,     0,     0,   162,   163,   164,   165,   166,   167,
     0,     0,     0,     0,     0,     0,     0,     0,   555,    12,
    13,    14,   169,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,     0,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
    51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
    61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
    71,    72,    73,    74,    75,    76,    77,     0,     0,     0,
     0,     0,     0,    78,   170,   537,    81,   172,   173,    83,
    84,   138,   139,   140,     0,   141,   142,   143,   144,   145,
   146,   147,   148,   216,  -534,   628,     0,     0,     0,   344,
     0,     0,     0,     0,   151,   152,   153,   154,   155,   156,
     0,     0,     0,     0,     0,     0,     0,  -269,  -269,     0,
     4,   157,   158,   159,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   160,     5,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   162,   163,   164,   165,   166,   167,     0,     0,     0,     0,
     0,     0,     0,     0,   168,    12,    13,    14,   169,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
    65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
    75,    76,    77,     0,     0,     0,     0,     0,     0,    78,
   170,   537,    81,   172,   173,    83,    84,   138,   139,   140,
     0,   141,   142,   143,   144,   145,   146,   147,   148,   216,
  -534,   640,     0,     0,     0,   344,     0,     0,     0,     0,
   151,   152,   153,   154,   155,   156,     0,     0,     0,     0,
     0,     0,     0,  -269,  -269,     0,     4,   157,   158,   159,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   160,     5,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   162,   163,   164,   165,
   166,   167,     0,     0,     0,     0,     0,     0,     0,     0,
   641,    12,    13,    14,   169,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,     0,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    73,    74,    75,    76,    77,     0,
     0,     0,     0,     0,     0,    78,   170,   537,    81,   172,
   173,    83,    84,   138,   139,   140,     0,   141,   142,   143,
   144,   145,   146,   147,   148,   216,  -534,   639,     0,     0,
     0,   344,     0,     0,     0,     0,   151,   152,   153,   154,
   155,   156,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   157,   158,   159,     0,   138,   139,   140,
     0,   141,   142,   143,   144,   145,   146,   147,   148,   216,
  -534,   643,     0,     0,     0,   344,     0,   160,     0,     0,
   151,   152,   153,   154,   155,   156,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   157,   158,   159,
     0,     0,   162,   163,   164,   165,   166,   167,     0,     0,
     0,     0,     0,     0,     0,     0,   168,     0,     0,     0,
   169,   160,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   162,   163,   164,   165,
   166,   167,     0,     0,     0,     0,     0,     0,     0,     0,
   644,   138,   139,   140,   169,   141,   142,   143,   144,   145,
   146,   147,   148,   216,  -534,   696,     0,     0,     0,   344,
     0,     0,     0,     0,   151,   152,   153,   154,   155,   156,
     0,    78,   170,   171,     0,   172,   173,    83,     0,     0,
     0,   157,   158,   159,     0,   138,   139,   140,     0,   141,
   142,   143,   144,   145,   146,   147,   148,   216,  -534,   774,
     0,     0,     0,   344,     0,   160,     0,     0,   151,   152,
   153,   154,   155,   156,     0,    78,   170,   171,     0,   172,
   173,    83,     0,     0,     0,   157,   158,   159,     0,     0,
   162,   163,   164,   165,   166,   167,     0,     0,     0,     0,
     0,     0,     0,     0,   168,     0,     0,     0,   169,   160,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   162,   163,   164,   165,   166,   167,
     0,     0,     0,     0,     0,     0,     0,     0,   168,   138,
   139,   140,   169,   141,   142,   143,   144,   145,   146,   147,
   148,   216,  -534,   775,     0,     0,     0,   344,     0,     0,
     0,     0,   151,   152,   153,   154,   155,   156,     0,    78,
   170,   171,     0,   172,   173,    83,     0,     0,     0,   157,
   158,   159,     0,   138,   139,   140,     0,   141,   142,   143,
   144,   145,   146,   147,   148,   216,  -534,   777,     0,     0,
     0,   344,     0,   160,     0,     0,   151,   152,   153,   154,
   155,   156,     0,    78,   170,   171,     0,   172,   173,    83,
     0,     0,     0,   157,   158,   159,     0,     0,   162,   163,
   164,   165,   166,   167,     0,     0,     0,     0,     0,     0,
     0,     0,   776,     0,     0,     0,   169,   160,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   162,   163,   164,   165,   166,   167,     0,     0,
     0,     0,     0,     0,     0,     0,   168,   138,   139,   140,
   169,   141,   142,   143,   144,   145,   146,   147,   148,   216,
  -534,   900,     0,     0,     0,   344,     0,     0,     0,     0,
   151,   152,   153,   154,   155,   156,     0,    78,   170,   171,
     0,   172,   173,    83,     0,     0,     0,   157,   158,   159,
     0,   138,   139,   140,     0,   141,   142,   143,   144,   145,
   146,   147,   148,   216,  -534,     0,     0,     0,     0,   344,
     0,   160,     0,     0,   151,   152,   153,   154,   155,   156,
     0,    78,   170,   171,     0,   172,   173,    83,     0,     0,
     0,   157,   158,   159,     0,     0,   162,   163,   164,   165,
   166,   167,     0,     0,     0,     0,     0,     0,     0,     0,
   168,     0,     0,     0,   169,   160,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   162,   163,   164,   165,   166,   167,  -135,     0,     0,     0,
     0,  -135,     0,     0,   168,     0,     0,     0,   169,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     4,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    78,   170,   171,     0,   172,
   173,    83,     0,     0,     0,     0,     0,     0,     5,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,  -537,     0,     0,     0,    78,
   170,   171,     0,   172,   173,    83,     0,    12,    13,    14,
     0,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,     0,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
    73,    74,    75,    76,    77,     0,     0,     0,     0,     0,
     0,     0,     0,   132,    81,    12,    13,    14,    84,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
    65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
    75,    76,    77,  -677,     0,     0,     0,     0,     0,     0,
     0,   132,    81,     0,     0,     0,    84,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,  -679,  -679,
  -679,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,  -679,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,  -679,  -679,  -679,     0,  -679,  -679,  -679,  -679,  -679,
  -679,  -679,  -679,  -679,  -679,     0,  -679,  -679,  -679,  -679,
  -679,  -679,  -679,  -679,  -679,  -679,  -679,  -679,  -679,  -679,
  -679,  -679,  -679,  -679,  -679,  -679,  -679,  -679,  -679,  -679,
  -679,  -679,  -679,  -679,  -679,  -679,  -679,  -679,  -679,  -679,
  -679,  -679,  -679,  -679,  -679,  -679,  -679,  -679,  -679,  -679,
  -679,  -679,  -679,  -679,  -679,  -679,  -679,  -679,  -679,     0,
     0,     0,     0,     0,   793,     0,     0,     0,  -679,   304,
     0,     0,  -679,     0,   151,   152,   153,   154,   155,   156,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   157,   158,   159,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   160,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,  -269,
     0,     0,     0,     0,     0,     0,     0,     0,   169,     3,
   304,   496,     0,     0,     0,   151,   152,   153,   154,   155,
   156,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   157,   158,   159,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   160,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    78,
   305,   306,     0,   172,     0,    12,    13,    14,     0,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,   169,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
    65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
    75,    76,    77,     0,     0,     0,     0,     0,     0,    78,
    79,    80,    81,     0,    82,    83,    84,     0,     0,     0,
    78,   305,   306,   304,   172,     0,   600,     0,   151,   152,
   153,   154,   155,   156,   304,     0,     0,   681,     0,   151,
   152,   153,   154,   155,   156,   157,   158,   159,     0,     0,
     0,     0,     0,     0,   304,   939,   157,   158,   159,   151,
   152,   153,   154,   155,   156,   304,  -251,     0,     0,   160,
   151,   152,   153,   154,   155,   156,   157,   158,   159,     0,
   160,     0,     0,     0,     0,   304,     0,   157,   158,   159,
   151,   152,   153,   154,   155,   156,     0,     0,     0,     0,
   160,     0,     0,     0,     0,     0,     0,   157,   158,   159,
   333,   160,   169,     0,     0,   151,   152,   153,   154,   155,
   156,     0,     0,   169,     0,     0,     0,     0,     0,     0,
     0,   160,   157,   158,   159,     0,     0,     0,     0,     0,
     0,     0,   623,   169,     0,     0,     0,   151,   152,   153,
   154,   155,   156,     0,   169,     0,   160,     0,     0,     0,
     0,     0,     0,     0,   157,   158,   159,     0,     0,     0,
     0,     0,     0,     0,   169,     0,     0,     0,     0,     0,
     0,     0,     0,    78,   305,   306,     0,   172,   160,     0,
     0,     0,     0,     0,    78,   305,   306,   625,   172,   169,
     0,     0,   151,   152,   153,   154,   155,   156,     0,     0,
     0,     0,     0,     0,    78,   305,   306,     0,   172,   157,
   158,   159,     0,     0,     0,    78,   305,   306,     0,   172,
   699,   169,     0,     0,     0,   700,   701,   702,   703,   704,
   705,     0,     0,   160,     0,    78,   305,   306,     0,   172,
     0,     0,   157,   706,   707,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    78,   305,   306,     0,   172,     0,   708,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   169,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    78,   305,   306,     0,   172,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   169,
     0,     0,     0,     0,     0,     0,     0,  -195,  -195,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    78,   305,   306,
     0,   172,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    78,   709,   710,     0,   172,    12,    13,    14,     0,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
    65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
    75,    76,    77,     4,     0,     0,     0,     0,     0,     0,
     0,   132,    81,     0,     0,     0,    84,     0,     0,     0,
     0,     0,     0,     0,     0,  -401,  -401,  -401,     0,     5,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    12,    13,
    14,     0,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,     0,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
    62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
    72,    73,    74,    75,    76,    77,     4,     0,     0,     0,
     0,     0,     0,     0,   132,    81,     0,     0,     0,    84,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     5,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    12,    13,    14,     0,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,     0,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    73,    74,    75,    76,    77,     4,
     0,     0,     0,     0,     0,    78,  1048,   132,    81,     0,
     0,     0,    84,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     5,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    12,    13,    14,     0,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,     0,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,  -401,  -401,  -401,     0,     0,     0,     0,     0,
   132,    81,     0,     0,     0,    84,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    12,    13,    14,     0,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
    65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
    75,    76,    77,     9,    10,    11,     0,     0,     0,     0,
     0,   132,    81,     0,     0,     0,    84,     0,     0,     0,
     0,     0,    12,    13,    14,     0,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,     0,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
     0,     0,     0,     0,     0,     0,     0,     0,   132,    81,
    12,    13,    14,    84,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,     0,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
    70,    71,    72,    73,    74,    75,    76,    77,     0,     0,
     0,     0,     0,     0,     0,     0,   132,    81,     0,     0,
     0,    84
};

static const short yycheck[] = {     0,
     0,   138,   426,     4,     3,     0,   118,     8,     9,    10,
    11,   344,   279,   598,   442,   474,   379,   380,   390,   888,
   633,   298,   389,   531,   529,   296,   387,   388,   671,   896,
   602,    27,   381,   382,   427,   228,   656,   151,   152,   153,
   154,   155,   156,   383,   384,   385,   386,   633,   472,   633,
   633,     5,   793,    21,     0,   796,   391,    25,     4,   997,
     6,    10,    11,   487,   637,     0,   259,    55,     5,     4,
    24,   799,     0,     8,   452,    19,   689,   805,   915,   905,
    34,     5,   908,    28,    85,    85,   217,    24,    25,    26,
    85,   222,    18,   224,   784,   908,    19,    34,    24,    44,
    41,    25,     9,   689,   540,   689,   689,    28,    34,    41,
    18,   683,  1060,  1061,   637,    56,    21,   118,   987,   988,
    25,   758,   558,    44,    56,   633,   125,    24,   633,    26,
   997,   998,    24,   134,    39,   134,   773,    34,    21,    85,
  1078,    18,    25,    22,   145,  1083,    26,    21,    87,   150,
    85,    25,    34,    99,    34,    34,   799,    85,   582,    24,
   901,    26,   805,   783,   110,   111,   786,   168,    10,    11,
    53,    54,    24,    24,    26,    26,   453,     9,  1015,  1127,
   604,   689,    34,   118,   689,   758,     9,    21,   134,  1058,
   583,   919,   188,   194,  1132,   183,  1022,    24,  1024,   134,
   773,   202,  1069,   204,  1071,   206,   584,   400,   209,  1022,
   145,  1024,   479,     5,    21,   674,   217,   907,    25,   909,
   188,   222,    24,   224,     5,    32,    33,   560,   110,   111,
   184,   185,     5,    25,    18,   758,   237,   238,    24,    23,
   184,   185,   186,   150,    25,   189,   190,   184,   185,   186,
   773,    16,   189,   190,    21,     9,    10,    11,   184,   185,
    27,   633,   376,   377,   378,    26,   633,    28,   217,    24,
   633,    18,   633,   222,    21,   224,   919,   278,   278,    21,
   281,   282,   283,    44,   633,    27,  1027,   194,   237,   426,
   421,   422,     9,   633,   295,   295,    24,   564,   633,   206,
   301,   885,   209,    32,    33,   184,   185,   186,   579,  1176,
   189,   190,    18,   646,   637,    25,    26,   689,   150,    49,
    50,   637,   689,   637,   323,    21,   689,   150,   689,    25,
    18,   238,   184,   185,   186,   472,    15,   189,   190,   191,
   689,   608,   927,   278,    24,   346,   281,   282,   283,   689,
   487,   923,    16,   354,   689,   356,   623,   816,   625,   100,
   295,   974,   194,   477,    21,   789,   301,    26,    25,    28,
   202,   194,   880,   878,   206,   217,   322,   209,    18,   202,
   222,    21,   224,   206,    25,    44,   209,    28,   974,    16,
   974,   974,   184,   185,   186,   237,   150,   189,   190,   400,
    34,    53,    54,   184,   185,   186,   238,    18,   189,   190,
    21,   184,   185,   186,     5,   238,   189,   190,    21,    29,
   421,   422,    25,   418,    21,    39,    29,   428,    25,   430,
   430,    16,   699,   150,   429,   758,    24,     6,     7,   440,
   194,   442,   758,   444,   758,   582,    34,    26,   202,    28,
   773,   452,   206,   452,   455,   209,    22,   773,   459,   773,
    26,    22,    28,   217,   218,    44,   974,   604,   222,   974,
   224,  1055,   421,   422,   184,   185,   186,   194,    44,   189,
   190,    22,    21,   237,   238,   202,    25,   433,    18,   206,
   491,    21,   209,   400,    21,   430,    22,    21,    25,   500,
   501,    25,   865,   866,   876,   440,     5,   442,   875,   444,
    49,    50,   873,   874,    42,    43,    24,   452,   867,   868,
   455,   238,    49,    50,   459,    24,    34,    21,    22,   869,
   870,   871,   872,    26,    18,    34,    40,    21,   539,   540,
  1124,    34,   877,    55,    21,   540,   547,   547,    25,    21,
   184,   185,   186,    25,   555,   189,   190,   558,   559,     9,
    10,    11,   674,   558,    19,   500,   501,    18,   400,    18,
    21,    24,    21,    26,    25,    94,    25,   400,    21,   421,
   422,    34,    25,   584,    94,   584,   700,   701,   702,   703,
   704,   705,   188,   184,   185,   186,   184,   185,   189,   190,
   933,    22,   974,    25,    26,   359,    28,   974,    22,    24,
    21,   974,   547,   974,    25,    18,    24,   888,    21,    34,
    24,    18,    44,    27,    21,   974,    34,    21,   629,   630,
    34,    25,   633,    18,   974,    24,    21,    26,    23,   974,
   641,   642,    24,   644,  1103,   591,   400,    21,    94,   584,
   921,    25,   789,    21,     9,    10,    11,    25,   659,    21,
   661,  1089,    21,    25,    32,    33,    25,   421,   422,   670,
    20,    21,   673,   674,   675,   674,   184,   185,    88,    89,
   679,   180,   181,   400,    18,   184,   185,    21,   689,   188,
    34,   184,   185,   186,   831,    21,   189,   190,     0,    25,
   150,    21,     4,    18,   816,    25,    21,   539,   118,   119,
    12,    13,   983,    21,    19,    24,   539,    25,    27,    32,
    33,   992,   132,    22,   659,    34,   661,  1151,    20,    49,
    50,   184,   185,   186,     5,   670,   189,   190,   673,   674,
    94,  1012,    21,    87,   194,    27,    25,    21,   862,   863,
   864,    25,   202,    24,    25,    26,   206,  1028,    21,   209,
    21,  1185,    25,    34,    25,   180,   181,   217,    24,   184,
   185,  1038,   222,   188,   224,   776,   184,   185,    21,    18,
   184,   185,    25,    85,   188,   539,    18,   237,   238,    24,
    21,    26,    21,  1064,    25,   150,    25,    18,   100,   101,
   102,   103,   104,   105,   106,   107,    24,   109,    21,    21,
   112,    22,    25,    25,  1085,   816,   118,   816,    49,    50,
    21,    23,   539,   937,    25,   826,   128,   129,   130,    24,
    21,    26,   134,    28,    25,   781,    53,    54,   784,   194,
   184,   185,    67,    68,    69,   189,   190,   202,   150,    44,
    18,   206,    47,    48,   209,   157,    21,    18,    25,    26,
    25,    28,   217,    23,    49,    50,    24,   222,    26,   224,
    28,    34,    35,    36,    21,   184,   185,    44,    25,   188,
    21,   816,   237,   238,    25,    25,    44,   888,    21,    47,
    48,   826,    25,    25,   336,   896,    24,    57,    58,    59,
    60,    61,    62,    63,    64,    65,    66,   184,   185,   186,
    21,    18,   189,   190,    25,   217,    18,    21,   360,    25,
    26,    25,    28,   365,   366,   367,   368,   369,   370,   371,
   372,   373,   374,   375,    18,    21,    21,    18,    44,    25,
    25,   942,   943,    21,    21,    21,    19,    25,    25,    25,
   400,    37,    38,   255,   396,     9,    34,    35,    36,   905,
    25,   907,   908,   909,   204,    51,    52,    37,    38,    20,
    21,   421,   422,   974,    37,    38,   278,   279,    11,   281,
   282,    51,    52,    24,   985,    11,   987,   988,    51,    52,
   985,  1103,    90,   295,   995,    19,   997,   998,    21,   301,
    21,    19,   304,    19,    25,    20,    21,   942,   943,    34,
    35,    36,    19,  1014,  1151,    51,    52,    53,  1019,  1019,
    25,   323,    21,    21,    22,    27,    25,  1164,    32,    33,
  1031,  1031,  1031,  1034,    90,     9,    10,    11,    37,    38,
    24,    21,   344,   110,   111,   400,    22,    18,  1185,    21,
    25,    24,    51,    52,  1055,  1056,  1057,  1058,    21,  1060,
  1061,    11,    24,    24,    24,    24,   421,   422,  1069,    27,
  1071,    25,    23,  1074,    20,    19,  1022,  1078,  1024,  1080,
  1081,    20,  1083,    19,  1019,    23,    21,     5,  1089,   539,
    21,    25,    22,    72,    25,    27,  1031,    24,    24,  1034,
    25,    20,  1103,    34,    35,    36,   346,    20,    18,    25,
    27,    25,    27,    21,   354,   417,   356,    22,    25,    25,
    24,  1056,  1057,  1124,  1125,  1126,  1127,    25,   430,    29,
    25,  1132,    55,   185,    90,   437,    39,   439,    40,   441,
   442,    90,   444,    90,    18,  1080,  1081,   449,    90,     9,
   452,  1152,  1152,    90,  1089,    25,    24,   459,    67,    68,
    69,    70,    71,    72,    73,    74,    75,    76,  1103,   471,
    90,    25,   474,   615,   476,  1176,   150,   479,    25,    25,
    18,    25,    21,    18,   539,   188,    18,    40,   428,    23,
  1125,  1126,    21,    24,    18,   190,    90,    22,    21,   108,
    22,    21,    90,   112,    22,   114,    20,   116,    20,    25,
    25,   192,   121,    18,    27,    25,    27,  1152,    20,    40,
   194,   663,   131,    20,   133,    25,    27,     0,   202,     0,
    85,   896,   206,   301,  1176,   209,  1145,  1074,   977,   662,
  1046,   986,  1014,   217,   846,   547,  1124,   444,   222,   771,
   224,   491,   564,  1152,   661,   673,   816,   659,   125,   561,
    11,   323,   564,   237,   238,  1108,   175,   237,   342,   491,
   400,   974,   689,    -1,    -1,   577,   578,    -1,    -1,    -1,
    -1,    -1,   584,    -1,    -1,    -1,    -1,    -1,   148,    -1,
   150,    -1,    -1,    -1,    -1,    -1,    -1,     9,    10,    11,
   540,   603,    -1,    -1,    -1,    -1,   608,    -1,    -1,    -1,
    -1,   138,    -1,    -1,    -1,    -1,   618,   619,   558,   559,
    -1,   623,    -1,   625,   151,   152,   153,   154,   155,   156,
    -1,   158,   159,    -1,   194,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   202,    -1,    -1,    -1,   206,    -1,   650,   209,
    -1,   793,    -1,   262,   796,    -1,   658,   217,   660,    -1,
    -1,    -1,   664,   665,    -1,    -1,    -1,   669,    -1,    -1,
    -1,   673,   674,    -1,    -1,    -1,    -1,   679,   238,    -1,
   289,    -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,   629,
   630,   300,    -1,    -1,   303,    -1,    -1,   699,    -1,    -1,
    -1,    -1,   642,   845,   846,    -1,    -1,    -1,    -1,   851,
   852,   853,   854,   855,   856,   857,   858,   859,   860,   861,
    -1,    -1,    -1,    -1,    -1,    -1,   400,    -1,     9,    10,
    11,    -1,    -1,    -1,    -1,   675,    -1,    -1,   150,    -1,
    -1,    -1,    -1,    -1,   304,    -1,    -1,   421,   422,    -1,
    18,    -1,   312,   313,   314,   315,    24,    -1,    -1,   901,
    -1,    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,
    -1,    -1,    -1,   333,    -1,    -1,    -1,   779,    46,    47,
    48,    -1,   194,    -1,   344,    -1,    -1,    -1,    -1,    -1,
   202,    -1,    -1,    -1,   206,    -1,    -1,   209,    -1,    -1,
    -1,   361,    70,    -1,    -1,   217,    -1,    -1,   417,    -1,
   222,    -1,   224,   815,   816,    -1,   818,    -1,   427,    -1,
    -1,    -1,    -1,   432,    -1,   237,   238,    -1,   437,    -1,
   439,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   447,    -1,
   400,    -1,   451,    -1,    -1,   113,    -1,    -1,   408,   376,
   377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
   387,   388,   389,   390,   391,   539,    -1,    18,    -1,   150,
    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,
    31,    32,    33,    34,    -1,  1027,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    46,    47,    48,    -1,   426,
    -1,    -1,   904,     9,    10,    11,    -1,    -1,    -1,   911,
    -1,    -1,    -1,   194,    -1,    -1,   184,   185,   186,    70,
   188,   202,    -1,    -1,    -1,   206,    -1,    -1,   209,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   217,    -1,    -1,    -1,
    -1,   222,    -1,   224,    -1,   472,    -1,    -1,    -1,    -1,
   477,    -1,    -1,    -1,    -1,    -1,   237,   238,    -1,    -1,
   487,    -1,   113,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   530,    -1,    -1,    -1,   583,    -1,    -1,    -1,    -1,   539,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,    -1,
    -1,    -1,    -1,   602,    -1,    -1,    -1,    -1,   607,    -1,
    -1,    -1,   529,    -1,   531,    -1,   533,   534,    -1,   421,
   422,    23,    -1,    -1,  1016,    -1,    -1,  1019,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   634,    -1,   636,    -1,  1031,
    -1,  1033,    -1,   184,   185,   186,  1038,   188,   598,  1041,
  1042,    -1,    -1,    -1,   150,    57,    58,    59,    60,    61,
    62,    63,    64,    65,    66,   582,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   623,    -1,   625,    -1,    -1,    -1,    -1,
    -1,   631,    -1,    -1,    -1,   635,    -1,   604,    -1,    -1,
    -1,    -1,  1084,    -1,    -1,    -1,    -1,  1089,   194,  1091,
  1092,    -1,    -1,    -1,    -1,    -1,   202,    -1,    -1,    -1,
   206,  1103,   711,   209,    -1,    -1,   633,    -1,    -1,    -1,
    -1,   217,    -1,    -1,    -1,    -1,   222,    -1,   224,   400,
    -1,    -1,    -1,    -1,    -1,    -1,  1128,   539,   688,    -1,
    -1,   237,   238,    -1,    -1,    -1,    -1,    -1,    -1,   699,
   421,   422,    -1,    -1,    -1,    -1,  1148,  1149,    -1,    -1,
  1152,    -1,    -1,  1155,    -1,    19,    20,   766,   767,    -1,
    24,    -1,   689,    -1,    -1,    29,    30,    31,    32,    33,
    34,    -1,    -1,   700,   701,   702,   703,   704,   705,   706,
   707,     1,    46,    47,    48,    -1,     6,     7,     8,   798,
    -1,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    -1,    -1,    -1,    24,    25,    70,    -1,    -1,    29,
    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    42,    43,    -1,    -1,    46,    47,    48,    -1,
    -1,    -1,    19,    -1,    -1,    -1,    -1,    24,    -1,    -1,
    -1,    -1,    29,    30,    31,    32,    33,    34,    -1,   113,
    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   539,    46,
    47,    48,   789,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    94,    95,    96,    97,    98,    99,
   100,    -1,    -1,    70,    -1,    -1,    -1,   847,    -1,   109,
    -1,    -1,    -1,   113,   400,   904,    -1,    -1,    72,    73,
    74,    75,    -1,    -1,   831,    79,    80,    81,    82,    83,
    84,    85,    -1,    -1,   923,   421,   422,    -1,    -1,    -1,
   184,   185,   186,    -1,   188,    -1,   113,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   862,   863,   864,   865,   866,
   867,   868,   869,   870,   871,   872,   873,   874,   875,   876,
   877,   878,    -1,   880,    -1,    -1,    -1,    -1,    -1,    -1,
     0,     1,    -1,    -1,   184,   185,   186,   927,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    18,    -1,
    -1,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    34,    -1,    -1,   184,   185,   186,
    -1,   188,    -1,    -1,    -1,    45,    -1,    -1,  1017,    -1,
   937,    -1,   972,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,
    -1,    71,    -1,   539,    -1,    -1,    76,    77,    78,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   974,    -1,    -1,
    -1,    91,    92,    93,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   110,   111,   112,    -1,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,  1093,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
   150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
   160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
   170,   171,   172,   173,   174,   175,   176,   177,    -1,    -1,
    -1,    -1,    -1,    -1,   184,   185,   186,   187,    -1,   189,
   190,   191,     0,     1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    18,    -1,    -1,    -1,  1183,    -1,    24,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,    -1,    -1,
    -1,    -1,    -1,   120,   121,   122,   123,    45,   125,    -1,
    -1,    -1,    -1,   130,   131,    -1,    -1,   134,   135,    -1,
   137,   138,   139,   140,    -1,    -1,    -1,    -1,    -1,    67,
    68,    69,    -1,    71,  1151,   152,   153,    -1,    76,    77,
    78,    -1,    -1,    -1,    -1,    -1,    -1,  1164,    -1,    -1,
    -1,    -1,    -1,    91,    92,    93,    -1,    -1,    -1,    -1,
   177,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1185,    -1,
   187,    -1,   110,   111,   112,    -1,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,    -1,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
   158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
   168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
    -1,    -1,    -1,    -1,    -1,    -1,   184,   185,   186,   187,
     1,   189,   190,   191,    -1,     6,     7,     8,    -1,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,
    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    42,    43,    -1,    45,    46,    47,    48,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    70,
    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    95,    96,    97,    98,    99,   100,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,    -1,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
   161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
   171,   172,   173,   174,   175,   176,   177,    -1,    -1,    -1,
    -1,    -1,    -1,   184,   185,   186,   187,   188,   189,   190,
   191,     1,    -1,    -1,    -1,    -1,     6,     7,     8,    -1,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    -1,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,
    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    42,    43,    -1,    -1,    46,    47,    48,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,
    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    95,    96,    97,    98,    99,
   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,    -1,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
   150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
   160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
   170,   171,   172,   173,   174,   175,   176,   177,    -1,    -1,
    -1,    -1,    -1,    -1,   184,   185,   186,   187,   188,   189,
   190,   191,     1,    -1,    -1,    -1,    -1,     6,     7,     8,
    -1,    -1,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,
    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    42,    43,    -1,    -1,    46,    47,    48,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,
    69,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    95,    96,    97,    98,
    99,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
   159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
   169,   170,   171,   172,   173,   174,   175,   176,   177,    -1,
    -1,    -1,    -1,    -1,    -1,   184,   185,   186,   187,   188,
   189,   190,   191,     1,    -1,    -1,    -1,    -1,     6,     7,
     8,    -1,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    -1,    -1,    -1,    -1,    24,    -1,    -1,    -1,
    -1,    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    42,    43,    -1,     1,    46,    47,
    48,    -1,     6,     7,     8,    -1,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    -1,    -1,    -1,    -1,
    24,    -1,    70,    -1,    -1,    29,    30,    31,    32,    33,
    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,
    -1,    -1,    46,    47,    48,    -1,    94,    95,    96,    97,
    98,    99,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   109,    -1,    -1,    -1,   113,    70,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    94,    95,    96,    97,    98,    99,   100,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   184,   185,   186,    -1,
   188,   189,   190,    -1,    -1,    -1,     1,    -1,    -1,    -1,
    -1,     6,     7,     8,    -1,    -1,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    24,
    -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,
   184,   185,   186,    -1,   188,   189,   190,    42,    43,    -1,
     1,    46,    47,    48,    -1,     6,     7,     8,    -1,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    -1,    -1,    -1,    24,    -1,    70,    -1,    -1,    29,    30,
    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    42,    43,    -1,    -1,    46,    47,    48,    -1,    94,
    95,    96,    97,    98,    99,   100,    -1,    -1,    -1,    -1,
     1,    -1,    -1,    -1,   109,     6,     7,     8,   113,    70,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,
    31,    32,    33,    34,    95,    96,    97,    98,    99,   100,
    -1,    42,    43,    -1,    -1,    46,    47,    48,   109,    -1,
    -1,    -1,   113,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   184,
   185,   186,    -1,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    95,    96,    97,    98,    99,   100,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,    -1,
    -1,    -1,   113,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   184,   185,   186,     1,   188,   189,   190,
    -1,     6,     7,     8,    -1,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    -1,    -1,    -1,    -1,    24,
    -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,
    -1,    46,    47,    48,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   184,   185,   186,    -1,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,    70,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    95,    96,    97,    98,    99,   100,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   109,     6,     7,     8,   113,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,
    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    42,    43,    -1,    45,    46,    47,    48,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,
    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   184,
   185,   186,    -1,   188,   189,   190,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    95,    96,    97,    98,    99,   100,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,    -1,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
   161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
   171,   172,   173,   174,   175,   176,   177,    -1,    -1,    -1,
    -1,    -1,    -1,   184,   185,   186,   187,   188,   189,   190,
   191,     6,     7,     8,    -1,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    24,
    -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,
    45,    46,    47,    48,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    70,    71,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    95,    96,    97,    98,    99,   100,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,    -1,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
   155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
   165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
   175,   176,   177,    -1,    -1,    -1,    -1,    -1,    -1,   184,
   185,   186,   187,   188,   189,   190,   191,     6,     7,     8,
    -1,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,
    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    42,    43,    -1,    45,    46,    47,    48,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    70,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    95,    96,    97,    98,
    99,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
   159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
   169,   170,   171,   172,   173,   174,   175,   176,   177,    -1,
    -1,    -1,    -1,    -1,    -1,   184,   185,   186,   187,   188,
   189,   190,   191,     6,     7,     8,    -1,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    -1,    -1,
    -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,    32,
    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    46,    47,    48,    -1,     6,     7,     8,
    -1,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    -1,    -1,    -1,    24,    -1,    70,    -1,    -1,
    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    47,    48,
    -1,    -1,    95,    96,    97,    98,    99,   100,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   109,    -1,    -1,    -1,
   113,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    95,    96,    97,    98,
    99,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   109,     6,     7,     8,   113,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    24,
    -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,
    -1,   184,   185,   186,    -1,   188,   189,   190,    -1,    -1,
    -1,    46,    47,    48,    -1,     6,     7,     8,    -1,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    -1,    -1,    -1,    24,    -1,    70,    -1,    -1,    29,    30,
    31,    32,    33,    34,    -1,   184,   185,   186,    -1,   188,
   189,   190,    -1,    -1,    -1,    46,    47,    48,    -1,    -1,
    95,    96,    97,    98,    99,   100,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,    70,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    95,    96,    97,    98,    99,   100,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,     6,
     7,     8,   113,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    -1,    -1,    -1,    24,    -1,    -1,
    -1,    -1,    29,    30,    31,    32,    33,    34,    -1,   184,
   185,   186,    -1,   188,   189,   190,    -1,    -1,    -1,    46,
    47,    48,    -1,     6,     7,     8,    -1,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    -1,    -1,
    -1,    24,    -1,    70,    -1,    -1,    29,    30,    31,    32,
    33,    34,    -1,   184,   185,   186,    -1,   188,   189,   190,
    -1,    -1,    -1,    46,    47,    48,    -1,    -1,    95,    96,
    97,    98,    99,   100,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   109,    -1,    -1,    -1,   113,    70,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    95,    96,    97,    98,    99,   100,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   109,     6,     7,     8,
   113,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,
    29,    30,    31,    32,    33,    34,    -1,   184,   185,   186,
    -1,   188,   189,   190,    -1,    -1,    -1,    46,    47,    48,
    -1,     6,     7,     8,    -1,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    -1,    -1,    -1,    -1,    24,
    -1,    70,    -1,    -1,    29,    30,    31,    32,    33,    34,
    -1,   184,   185,   186,    -1,   188,   189,   190,    -1,    -1,
    -1,    46,    47,    48,    -1,    -1,    95,    96,    97,    98,
    99,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   109,    -1,    -1,    -1,   113,    70,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    95,    96,    97,    98,    99,   100,    19,    -1,    -1,    -1,
    -1,    24,    -1,    -1,   109,    -1,    -1,    -1,   113,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   184,   185,   186,    -1,   188,
   189,   190,    -1,    -1,    -1,    -1,    -1,    -1,    71,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    20,    -1,    -1,    -1,   184,
   185,   186,    -1,   188,   189,   190,    -1,   110,   111,   112,
    -1,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,    -1,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
   163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
   173,   174,   175,   176,   177,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   186,   187,   110,   111,   112,   191,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,    -1,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
   155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
   165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
   175,   176,   177,    22,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   186,   187,    -1,    -1,    -1,   191,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,
    69,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    87,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   110,   111,   112,    -1,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
   159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
   169,   170,   171,   172,   173,   174,   175,   176,   177,    -1,
    -1,    -1,    -1,    -1,    19,    -1,    -1,    -1,   187,    24,
    -1,    -1,   191,    -1,    29,    30,    31,    32,    33,    34,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    46,    47,    48,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    70,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    24,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   113,    34,
    24,    25,    -1,    -1,    -1,    29,    30,    31,    32,    33,
    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    46,    47,    48,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    70,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   184,
   185,   186,    -1,   188,    -1,   110,   111,   112,    -1,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   113,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
   155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
   165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
   175,   176,   177,    -1,    -1,    -1,    -1,    -1,    -1,   184,
   185,   186,   187,    -1,   189,   190,   191,    -1,    -1,    -1,
   184,   185,   186,    24,   188,    -1,    27,    -1,    29,    30,
    31,    32,    33,    34,    24,    -1,    -1,    27,    -1,    29,
    30,    31,    32,    33,    34,    46,    47,    48,    -1,    -1,
    -1,    -1,    -1,    -1,    24,    25,    46,    47,    48,    29,
    30,    31,    32,    33,    34,    24,    25,    -1,    -1,    70,
    29,    30,    31,    32,    33,    34,    46,    47,    48,    -1,
    70,    -1,    -1,    -1,    -1,    24,    -1,    46,    47,    48,
    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,
    70,    -1,    -1,    -1,    -1,    -1,    -1,    46,    47,    48,
    24,    70,   113,    -1,    -1,    29,    30,    31,    32,    33,
    34,    -1,    -1,   113,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    70,    46,    47,    48,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    24,   113,    -1,    -1,    -1,    29,    30,    31,
    32,    33,    34,    -1,   113,    -1,    70,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    46,    47,    48,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   113,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   184,   185,   186,    -1,   188,    70,    -1,
    -1,    -1,    -1,    -1,   184,   185,   186,    24,   188,   113,
    -1,    -1,    29,    30,    31,    32,    33,    34,    -1,    -1,
    -1,    -1,    -1,    -1,   184,   185,   186,    -1,   188,    46,
    47,    48,    -1,    -1,    -1,   184,   185,   186,    -1,   188,
    24,   113,    -1,    -1,    -1,    29,    30,    31,    32,    33,
    34,    -1,    -1,    70,    -1,   184,   185,   186,    -1,   188,
    -1,    -1,    46,    47,    48,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   184,   185,   186,    -1,   188,    -1,    70,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   113,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   184,   185,   186,    -1,   188,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   113,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   184,   185,   186,
    -1,   188,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   184,   185,   186,    -1,   188,   110,   111,   112,    -1,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,    -1,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
   155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
   165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
   175,   176,   177,    45,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   186,   187,    -1,    -1,    -1,   191,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,    71,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
   112,    -1,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,    -1,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
   152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
   162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
   172,   173,   174,   175,   176,   177,    45,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   186,   187,    -1,    -1,    -1,   191,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   110,   111,   112,    -1,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
   159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
   169,   170,   171,   172,   173,   174,   175,   176,   177,    45,
    -1,    -1,    -1,    -1,    -1,   184,   185,   186,   187,    -1,
    -1,    -1,   191,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    71,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   110,   111,   112,    -1,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,    -1,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
   156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
   166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
   176,   177,    67,    68,    69,    -1,    -1,    -1,    -1,    -1,
   186,   187,    -1,    -1,    -1,   191,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   110,   111,   112,    -1,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,    -1,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
   155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
   165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
   175,   176,   177,    91,    92,    93,    -1,    -1,    -1,    -1,
    -1,   186,   187,    -1,    -1,    -1,   191,    -1,    -1,    -1,
    -1,    -1,   110,   111,   112,    -1,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,    -1,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
   158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
   168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   186,   187,
   110,   111,   112,   191,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,    -1,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
   150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
   160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
   170,   171,   172,   173,   174,   175,   176,   177,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   186,   187,    -1,    -1,
    -1,   191
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */

/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif



/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 3:
{ context_checkGlobalScope (); ;
    break;}
case 4:
{ context_checkGlobalScope (); ;
    break;}
case 5:
{ uentry_clearDecl (); ;
    break;}
case 6:
{ uentry_clearDecl (); ;
    break;}
case 7:
{ uentry_clearDecl (); ;
    break;}
case 8:
{ uentry_clearDecl (); ;
    break;}
case 9:
{ uentry_clearDecl (); ;
    break;}
case 10:
{ uentry_checkDecl (); exprNode_free (yyvsp[0].expr); ;
    break;}
case 11:
{ uentry_clearDecl (); /* evans 2002-02-08: okay to have a null statement */ ;
    break;}
case 12:
{ uentry_clearDecl (); ;
    break;}
case 13:
{ checkConstant (yyvsp[-6].qtyp, yyvsp[-4].ntyp); ;
    break;}
case 14:
{ checkValueConstant (yyvsp[-9].qtyp, yyvsp[-7].ntyp, yyvsp[-3].expr) ; ;
    break;}
case 15:
{ context_enterFunctionHeader (); ;
    break;}
case 16:
{ 
     declareStaticFunction (yyvsp[-2].ntyp); context_quietExitFunction (); 
     context_exitFunctionHeader (); 
   ;
    break;}
case 17:
{ 
     qtype qint = qtype_create (ctype_int);
     yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, qint);
     qtype_free (qint);
   ;
    break;}
case 18:
{ yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, yyvsp[-2].qtyp); ;
    break;}
case 20:
{ yyval.ntyp = yyvsp[0].ntyp; qtype_adjustPointers (yyvsp[-1].count, idDecl_getTyp (yyval.ntyp)); ;
    break;}
case 21:
{ yyval.ntyp = idDecl_create (yyvsp[0].cname, qtype_unknown ()); ;
    break;}
case 22:
{ yyval.ntyp = idDecl_expectFunction (yyvsp[-2].ntyp); ;
    break;}
case 23:
{ yyval.ntyp = idDecl_replaceCtype (yyvsp[-2].ntyp, ctype_makeArray (idDecl_getCtype (yyvsp[-2].ntyp))); ;
    break;}
case 24:
{
     exprNode_findValue(yyvsp[-2].expr);
     if (exprNode_hasValue (yyvsp[-2].expr)) 
       {
	 yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ctype_makeInnerFixedArray (idDecl_getCtype (yyvsp[-5].ntyp), 
								  exprNode_getLongValue (yyvsp[-2].expr)));
       } 
     else
       {
	 yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ctype_makeArray (idDecl_getCtype (yyvsp[-5].ntyp))); 
       }
   ;
    break;}
case 25:
{ setCurrentParams (uentryList_missingParams); ;
    break;}
case 26:
{ /* need to support globals and modifies here! */
     ctype ct = ctype_makeFunction (idDecl_getCtype (yyvsp[-5].ntyp), 
				    uentryList_makeMissingParams ());
     
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ct);
     idDecl_addClauses (yyval.ntyp, yyvsp[0].funcclauselist);
     context_popLoc ();
     /*drl 7/25/01 added*/
     setImplictfcnConstraints();
   ;
    break;}
case 27:
{ setCurrentParams (yyvsp[-1].entrylist); ;
    break;}
case 28:
{ setImplictfcnConstraints ();
     clearCurrentParams ();
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-6].ntyp, ctype_makeFunction (idDecl_getCtype (yyvsp[-6].ntyp), yyvsp[-3].entrylist));
     idDecl_addClauses (yyval.ntyp, yyvsp[0].funcclauselist);
     context_popLoc (); 
   ;
    break;}
case 29:
{ yyval.ntyp = idDecl_create (yyvsp[0].cname, qtype_unknown ()); ;
    break;}
case 30:
{ yyval.ntyp = idDecl_expectFunction (yyvsp[-2].ntyp); ;
    break;}
case 31:
{ yyval.ntyp = idDecl_replaceCtype (yyvsp[-2].ntyp, ctype_makeArray (idDecl_getCtype (yyvsp[-2].ntyp))); ;
    break;}
case 32:
{ 
     int value;

     if (exprNode_hasValue (yyvsp[-2].expr) 
	 && multiVal_isInt (exprNode_getValue (yyvsp[-2].expr)))
       {
	 value = (int) multiVal_forceInt (exprNode_getValue (yyvsp[-2].expr));
       }
     else
       {
	 value = 0;
       }

     yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ctype_makeFixedArray (idDecl_getCtype (yyvsp[-5].ntyp), value));
   ;
    break;}
case 33:
{ setCurrentParams (uentryList_missingParams); ;
    break;}
case 34:
{
     ctype ct = ctype_makeFunction (idDecl_getCtype (yyvsp[-5].ntyp), 
				    uentryList_makeMissingParams ());
     
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ct);
     idDecl_addClauses (yyval.ntyp, yyvsp[0].funcclauselist);
     context_popLoc (); 
   ;
    break;}
case 35:
{ setCurrentParams (yyvsp[-1].entrylist); ;
    break;}
case 36:
{ 
     clearCurrentParams ();
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-6].ntyp, ctype_makeFunction (idDecl_getCtype (yyvsp[-6].ntyp), yyvsp[-3].entrylist));
     idDecl_addClauses (yyval.ntyp, yyvsp[0].funcclauselist);
     context_popLoc (); 
   ;
    break;}
case 37:
{ setCurrentParams (yyvsp[-1].entrylist); ;
    break;}
case 38:
{ clearCurrentParams (); ;
    break;}
case 39:
{ declareCIter (yyvsp[-8].cname, yyvsp[-6].entrylist); ;
    break;}
case 40:
{ exprNode_checkMacroBody (yyvsp[-1].expr); ;
    break;}
case 41:
{ exprNode_checkIterBody (yyvsp[-1].expr); ;
    break;}
case 42:
{ exprNode_checkIterEnd (yyvsp[-1].expr); ;
    break;}
case 43:
{ exprChecks_checkEmptyMacroBody (); ;
    break;}
case 44:
{ clabstract_declareFunction (yyvsp[0].ntyp); ;
    break;}
case 45:
{ yyval.msconstraint = metaStateConstraint_create (yyvsp[-2].msspec, yyvsp[0].msexpr); ;
    break;}
case 46:
{ cscanner_expectingMetaStateName (); ;
    break;}
case 47:
{ cscanner_clearExpectingMetaStateName ();
      yyval.msspec = metaStateSpecifier_create (yyvsp[-3].sr, yyvsp[0].msinfo); ;
    break;}
case 48:
{ cscanner_expectingMetaStateName (); ;
    break;}
case 49:
{ cscanner_clearExpectingMetaStateName ();
      yyval.msspec = metaStateSpecifier_createElipsis (yyvsp[0].msinfo); ;
    break;}
case 50:
{ yyval.msexpr = metaStateExpression_create (yyvsp[0].msspec); ;
    break;}
case 51:
{ yyval.msexpr = metaStateExpression_createMerge (yyvsp[-2].msspec, yyvsp[0].msexpr); ;
    break;}
case 55:
{ yyval.conL = constraintList_add (yyvsp[0].conL, yyvsp[-2].con); ;
    break;}
case 56:
{ yyval.conL = constraintList_single (yyvsp[0].con); ;
    break;}
case 57:
{
 yyval.con = makeConstraintParse3 (yyvsp[-2].conE, yyvsp[-1].tok, yyvsp[0].conE);
 DPRINTF(("Done BufConstraint1\n")); ;
    break;}
case 64:
{yyval.conE = constraintExpr_parseMakeUnaryOp (yyvsp[-3].tok, yyvsp[-1].conE);  DPRINTF( ("Got BufConstraintExpr UNary Op ") ); ;
    break;}
case 65:
{
   DPRINTF( ("Got BufConstraintExpr BINary Op ") );
   yyval.conE = constraintExpr_parseMakeBinaryOp (yyvsp[-3].conE, yyvsp[-2].tok, yyvsp[-1].conE); ;
    break;}
case 66:
{ yyval.conE =  constraintExpr_makeTermsRef (yyvsp[0].sr);;
    break;}
case 67:
{ yyval.conE = constraintExpr_makeIntLiteral (exprNode_getLongValue (yyvsp[0].expr)); ;
    break;}
case 68:
{ /*@-onlytrans@*/ yyval.sr = checkbufferConstraintClausesId (yyvsp[0].entry); /*@=onlytrans@*/ /*@i523@*/ ;
    break;}
case 69:
{ yyval.sr = fixStateClausesId (yyvsp[0].cname); ;
    break;}
case 70:
{ yyval.sr = sRef_makeAnyArrayFetch (yyvsp[-2].sr); ;
    break;}
case 71:
{
    /*
    char *t; int c; 
    t =  cstring_toCharsSafe (exprNode_unparse($3)); 
    c = atoi( t );
    */
    yyval.sr = sRef_makeArrayFetchKnown (yyvsp[-3].sr, exprNode_getLongValue (yyvsp[-1].expr));
  ;
    break;}
case 72:
{ yyval.sr = sRef_constructPointer (yyvsp[0].sr); ;
    break;}
case 73:
{ yyval.sr = yyvsp[-1].sr; ;
    break;}
case 74:
{ cstring_markOwned (yyvsp[0].cname); yyval.sr = sRef_buildField (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 75:
{ cstring_markOwned (yyvsp[0].cname); yyval.sr = sRef_makeArrow (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 79:
{ yyval.funcclauselist = functionClauseList_new (); ;
    break;}
case 80:
{ yyval.funcclauselist = functionClauseList_prepend (yyvsp[0].funcclauselist, yyvsp[-1].funcclause); ;
    break;}
case 81:
{ yyval.funcclauselist = functionClauseList_new (); ;
    break;}
case 82:
{ yyval.funcclauselist = functionClauseList_prepend (yyvsp[0].funcclauselist, yyvsp[-1].funcclause); ;
    break;}
case 83:
{ yyval.funcclause = functionClause_createGlobals (yyvsp[0].globsclause); ;
    break;}
case 84:
{ yyval.funcclause = functionClause_createModifies (yyvsp[0].modsclause); ;
    break;}
case 85:
{ yyval.funcclause = functionClause_createModifies (yyvsp[0].modsclause); ;
    break;}
case 86:
{ yyval.funcclause = functionClause_createState (yyvsp[0].stateclause); ;
    break;}
case 87:
{ yyval.funcclause = yyvsp[0].funcclause; ;
    break;}
case 88:
{ yyval.funcclause = functionClause_createWarn (yyvsp[0].warnclause); ;
    break;}
case 89:
{ yyval.funcclause = functionClause_createGlobals (yyvsp[0].globsclause); ;
    break;}
case 90:
{ yyval.funcclause = functionClause_createModifies (yyvsp[0].modsclause); ;
    break;}
case 91:
{ yyval.funcclause = functionClause_createModifies (yyvsp[0].modsclause); ;
    break;}
case 92:
{ yyval.funcclause = functionClause_createState (yyvsp[0].stateclause); ;
    break;}
case 93:
{ yyval.funcclause = yyvsp[0].funcclause; ;
    break;}
case 94:
{ yyval.funcclause = functionClause_createWarn (yyvsp[0].warnclause); ;
    break;}
case 95:
{ yyval.globsclause = yyvsp[-1].globsclause; ;
    break;}
case 96:
{ setProcessingGlobalsList (); ;
    break;}
case 97:
{ 
     unsetProcessingGlobals (); 
     yyval.globsclause = globalsClause_create (yyvsp[-3].tok, yyvsp[-1].globset); 
   ;
    break;}
case 98:
{ yyval.modsclause = modifiesClause_createNoMods (yyvsp[0].tok); ;
    break;}
case 99:
{ yyval.modsclause = yyvsp[-1].modsclause; ;
    break;}
case 100:
{
     context_setProtectVars (); enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;
    break;}
case 101:
{ 
     exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
     yyval.modsclause = modifiesClause_create (yyvsp[-2].tok, yyvsp[0].srset);
   ;
    break;}
case 102:
{ yyval.flagspec = flagSpec_createPlain (yyvsp[0].cname); ;
    break;}
case 103:
{ yyval.flagspec = flagSpec_createOr (yyvsp[-2].cname, yyvsp[0].flagspec); ;
    break;}
case 106:
{ yyval.warnclause = warnClause_undefined; ;
    break;}
case 107:
{ yyval.warnclause = yyvsp[-1].warnclause; ;
    break;}
case 108:
{      
     llassert (exprNode_knownStringValue (yyvsp[0].expr));
     yyval.warnclause = warnClause_create (yyvsp[-2].tok, yyvsp[-1].flagspec, cstring_copy (multiVal_forceString (exprNode_getValue (yyvsp[0].expr)))); 
     exprNode_free (yyvsp[0].expr);
   ;
    break;}
case 109:
{ yyval.warnclause = warnClause_create (yyvsp[-1].tok, yyvsp[0].flagspec, cstring_undefined); ;
    break;}
case 110:
{ yyval.globset = globSet_single (yyvsp[0].sr); ;
    break;}
case 111:
{ yyval.globset = globSet_insert (yyvsp[-2].globset, yyvsp[0].sr); ;
    break;}
case 112:
{ yyval.sr = clabstract_createGlobal (yyvsp[0].sr, yyvsp[-1].tquallist); ;
    break;}
case 113:
{ yyval.tquallist = qualList_undefined; ;
    break;}
case 114:
{ yyval.tquallist = qualList_add (yyvsp[0].tquallist, yyvsp[-1].typequal); ;
    break;}
case 115:
{ yyval.sr = uentry_getSref (yyvsp[0].entry); ;
    break;}
case 116:
{ yyval.sr = clabstract_unrecognizedGlobal (yyvsp[0].cname); ;
    break;}
case 117:
{ yyval.sr = clabstract_checkGlobal (yyvsp[0].expr); ;
    break;}
case 118:
{ yyval.typequal = qual_createUndef (); ;
    break;}
case 119:
{ yyval.typequal = qual_createKilled (); ;
    break;}
case 120:
{ yyval.typequal = qual_createOut (); ;
    break;}
case 121:
{ yyval.typequal = qual_createIn (); ;
    break;}
case 122:
{ yyval.typequal = qual_createPartial (); ;
    break;}
case 130:
{ 
     qtype qint = qtype_create (ctype_int);
     yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, qint);
     qtype_free (qint);
   ;
    break;}
case 131:
{ yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, yyvsp[-2].qtyp); ;
    break;}
case 132:
{ checkDoneParams (); context_enterInnerContext (); ;
    break;}
case 133:
{  
     exprNode_checkFunctionBody (yyvsp[0].expr); yyval.expr = yyvsp[0].expr; 
     context_exitInner (yyvsp[0].expr); 
   ;
    break;}
case 134:
{ context_enterOldStyleScope (); ;
    break;}
case 135:
{ oldStyleDoneParams (); context_enterInnerContext (); ;
    break;}
case 136:
{
     exprNode_checkFunctionBody (yyvsp[0].expr); 
     yyval.expr = yyvsp[0].expr; /* oldstyle */ 
     context_exitInner (yyvsp[0].expr);
   ;
    break;}
case 137:
{ 
     context_setFunctionDefined (exprNode_loc (yyvsp[0].expr)); 
     exprNode_checkFunction (context_getHeader (),  yyvsp[0].expr); 
     /* DRL 8 8 2000 */
     
     context_exitFunction ();
   ;
    break;}
case 138:
{ yyval.srset = yyvsp[-1].srset; ;
    break;}
case 139:
{ yyval.srset = sRefSet_new (); ;
    break;}
case 140:
{ yyval.sr = uentry_getSref (yyvsp[0].entry); checkModifiesId (yyvsp[0].entry); ;
    break;}
case 141:
{ yyval.sr = fixModifiesId (yyvsp[0].cname); ;
    break;}
case 142:
{ yyval.sr = modListArrayFetch (yyvsp[-2].sr, sRef_undefined); ;
    break;}
case 143:
{ yyval.sr = modListArrayFetch (yyvsp[-3].sr, yyvsp[-1].sr); ;
    break;}
case 144:
{ yyval.sr = modListPointer (yyvsp[0].sr); ;
    break;}
case 145:
{ yyval.sr = yyvsp[-1].sr; ;
    break;}
case 146:
{ yyval.sr = modListFieldAccess (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 147:
{ yyval.sr = modListArrowAccess (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 148:
{ yyval.sr = yyvsp[0].sr; ;
    break;}
case 149:
{ yyval.sr = sRef_makeUnknown (); /* sRef_makeConstant ($1); ? */ ;
    break;}
case 150:
{ yyval.srset = sRefSet_single (yyvsp[0].sr); ;
    break;}
case 151:
{ yyval.srset = sRefSet_insert (yyvsp[-2].srset, yyvsp[0].sr); ;
    break;}
case 152:
{ yyval.sr = checkStateClausesId (yyvsp[0].entry); ;
    break;}
case 153:
{ yyval.sr = fixStateClausesId (yyvsp[0].cname); ;
    break;}
case 154:
{ yyval.sr = sRef_makeAnyArrayFetch (yyvsp[-2].sr); ;
    break;}
case 155:
{ yyval.sr = sRef_makeAnyArrayFetch (yyvsp[-3].sr); ;
    break;}
case 156:
{ yyval.sr = sRef_constructPointer (yyvsp[0].sr); ;
    break;}
case 157:
{ yyval.sr = yyvsp[-1].sr; ;
    break;}
case 158:
{ cstring_markOwned (yyvsp[0].cname);
					    yyval.sr = sRef_buildField (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 159:
{ cstring_markOwned (yyvsp[0].cname);
                                            yyval.sr = sRef_makeArrow (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 160:
{ yyval.srset = sRefSet_undefined ;
    break;}
case 162:
{ if (sRef_isValid (yyvsp[0].sr)) { yyval.srset = sRefSet_single (yyvsp[0].sr); } 
      else { yyval.srset = sRefSet_undefined; } 
    ;
    break;}
case 163:
{ if (sRef_isValid (yyvsp[0].sr))
	{
	  yyval.srset = sRefSet_insert (yyvsp[-2].srset, yyvsp[0].sr); 
	}
      else
	{
	  yyval.srset = yyvsp[-2].srset;
	}
    ;
    break;}
case 164:
{ yyval.expr = exprNode_fromIdentifier (yyvsp[0].entry); ;
    break;}
case 165:
{ yyval.expr = exprNode_fromUIO (yyvsp[0].cname); ;
    break;}
case 167:
{ yyval.expr = exprNode_addParens (yyvsp[-2].tok, yyvsp[-1].expr); ;
    break;}
case 168:
{ yyval.expr = exprNode_fromIdentifier (coerceId (yyvsp[0].cname)); ;
    break;}
case 169:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 171:
{ yyval.expr = exprNode_arrayFetch (yyvsp[-3].expr, yyvsp[-1].expr); ;
    break;}
case 172:
{ yyval.expr = exprNode_functionCall (yyvsp[-2].expr, exprNodeList_new ()); ;
    break;}
case 173:
{ yyval.expr = exprNode_functionCall (yyvsp[-3].expr, yyvsp[-1].exprlist); ;
    break;}
case 174:
{ yyval.expr = exprNode_vaArg (yyvsp[-5].tok, yyvsp[-3].expr, yyvsp[-1].qtyp); ;
    break;}
case 175:
{ yyval.expr = exprNode_fieldAccess (yyvsp[-4].expr, yyvsp[-2].tok, yyvsp[-1].cname); ;
    break;}
case 176:
{ yyval.expr = exprNode_arrowAccess (yyvsp[-4].expr, yyvsp[-2].tok, yyvsp[-1].cname); ;
    break;}
case 177:
{ yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 178:
{ yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 179:
{ yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 180:
{ yyval.exprlist = exprNodeList_push (yyvsp[-2].exprlist, yyvsp[0].expr); ;
    break;}
case 182:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 183:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 184:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 185:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 186:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 187:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 188:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 189:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 190:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 191:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 192:
{ yyval.cstringlist = cstringList_add (yyvsp[-2].cstringlist, yyvsp[0].cname); ;
    break;}
case 193:
{ yyval.cstringlist = cstringList_single (yyvsp[0].cname); ;
    break;}
case 194:
{ yyval.expr = exprNode_offsetof (yyvsp[-5].qtyp, yyvsp[-2].cstringlist); ;
    break;}
case 195:
{ context_setProtectVars (); ;
    break;}
case 196:
{ context_sizeofReleaseVars (); yyval.expr = yyvsp[0].expr; ;
    break;}
case 197:
{ yyval.expr = exprNode_sizeofType (yyvsp[-1].qtyp); ;
    break;}
case 198:
{ yyval.expr = exprNode_sizeofExpr (yyvsp[0].expr); ;
    break;}
case 199:
{ yyval.expr = exprNode_alignofType (yyvsp[-1].qtyp); ;
    break;}
case 200:
{ yyval.expr = exprNode_alignofExpr (yyvsp[0].expr); ;
    break;}
case 202:
{ yyval.expr = exprNode_cast (yyvsp[-3].tok, yyvsp[0].expr, yyvsp[-2].qtyp); ;
    break;}
case 204:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 205:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 206:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 208:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 209:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 211:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 212:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 214:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 215:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 216:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 217:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 219:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 220:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 222:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 224:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 226:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 228:
{ exprNode_produceGuards (yyvsp[-1].expr); 
     context_enterAndClause (yyvsp[-1].expr); 
   ;
    break;}
case 229:
{ 
     yyval.expr = exprNode_op (yyvsp[-3].expr, yyvsp[0].expr, yyvsp[-2].tok); 
     context_exitAndClause (yyval.expr, yyvsp[0].expr);
   ;
    break;}
case 231:
{ 
     exprNode_produceGuards (yyvsp[-1].expr);
     context_enterOrClause (yyvsp[-1].expr); 
   ;
    break;}
case 232:
{ 
     yyval.expr = exprNode_op (yyvsp[-3].expr, yyvsp[0].expr, yyvsp[-2].tok); 
     context_exitOrClause (yyval.expr, yyvsp[0].expr);
   ;
    break;}
case 234:
{ exprNode_produceGuards (yyvsp[-1].expr); context_enterTrueClause (yyvsp[-1].expr); ;
    break;}
case 235:
{ context_enterFalseClause (yyvsp[-4].expr); ;
    break;}
case 236:
{ yyval.expr = exprNode_cond (yyvsp[-6].expr, yyvsp[-3].expr, yyvsp[0].expr); context_exitClause (yyvsp[-6].expr, yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 238:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 239:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 240:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 241:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 242:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 243:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 244:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 245:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 246:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 247:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 248:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 250:
{ yyval.expr = exprNode_comma (yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 251:
{ yyval.expr = exprNode_undefined; ;
    break;}
case 254:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 255:
{ doVaDcl (); yyval.expr = exprNode_makeError (); ;
    break;}
case 256:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 257:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 258:
{
     setProcessingVars (yyvsp[-3].qtyp); 
     processNamedDecl (yyvsp[-1].ntyp); 
   ;
    break;}
case 259:
{ 
     unsetProcessingVars (); 
     yyval.expr = exprNode_makeEmptyInitialization (yyvsp[-6].ntyp); 
     DPRINTF (("Empty initialization: %s", exprNode_unparse (yyval.expr)));
   ;
    break;}
case 260:
{ setProcessingVars (yyvsp[-4].qtyp); processNamedDecl (yyvsp[-2].ntyp); ;
    break;}
case 261:
{ yyval.expr = exprNode_concat (yyvsp[-2].expr, exprNode_makeInitialization (yyvsp[-8].ntyp, yyvsp[-3].expr)); 
     unsetProcessingVars ();
   ;
    break;}
case 262:
{ 
     processNamedDecl (yyvsp[-1].ntyp); 
     yyval.expr = exprNode_makeEmptyInitialization (yyvsp[-1].ntyp);
   ;
    break;}
case 263:
{ processNamedDecl (yyvsp[-2].ntyp); ;
    break;}
case 264:
{ yyval.expr = exprNode_makeInitialization (yyvsp[-5].ntyp, yyvsp[0].expr); ;
    break;}
case 265:
{ setProcessingTypedef (yyvsp[0].qtyp); ;
    break;}
case 266:
{ clabstract_declareType (yyvsp[-3].exprlist, yyvsp[-1].warnclause); ;
    break;}
case 267:
{ /* in the ANSI grammar, semantics unclear */ ;
    break;}
case 268:
{ /* in the ANSI grammar, semantics unclear */ ;
    break;}
case 269:
{ g_expectingTypeName = TRUE; ;
    break;}
case 270:
{ g_expectingTypeName = TRUE; context_pushLoc (); ;
    break;}
case 271:
{ yyval.exprlist = yyvsp[-1].exprlist; ;
    break;}
case 272:
{ yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 273:
{ yyval.exprlist = exprNodeList_push (yyvsp[-3].exprlist, yyvsp[0].expr); ;
    break;}
case 274:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 275:
{ yyval.expr = exprNode_concat (yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 277:
{ yyval.expr = exprNode_makeInitBlock (yyvsp[-2].tok, yyvsp[-1].exprlist); ;
    break;}
case 278:
{ yyval.expr = exprNode_makeInitBlock (yyvsp[-3].tok, yyvsp[-2].exprlist); ;
    break;}
case 279:
{ yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 280:
{ yyval.exprlist = exprNodeList_push (yyvsp[-2].exprlist, yyvsp[0].expr); ;
    break;}
case 281:
{ setStorageClass (SCEXTERN); yyval.typequal = qual_createExtern (); ;
    break;}
case 282:
{ yyval.typequal = qual_createInline (); ;
    break;}
case 283:
{ setStorageClass (SCSTATIC); yyval.typequal = qual_createStatic (); ;
    break;}
case 284:
{ yyval.typequal = qual_createAuto (); ;
    break;}
case 285:
{ yyval.typequal = qual_createRegister (); ;
    break;}
case 286:
{ yyval.stateclause = yyvsp[-1].stateclause; ;
    break;}
case 287:
{
     context_setProtectVars (); 
     enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;
    break;}
case 288:
{ 
     exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
     yyval.stateclause = stateClause_createPlain (yyvsp[-5].tok, yyvsp[-2].srset);
   ;
    break;}
case 289:
{ yyval.funcclause = yyvsp[-1].funcclause; ;
    break;}
case 290:
{ yyval.tok = yyvsp[-1].tok; context_enterFunctionHeader (); ;
    break;}
case 291:
{
     context_exitFunctionHeader ();
     context_setProtectVars (); 
     enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;
    break;}
case 292:
{ 
     exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
     yyval.funcclause = functionClause_createState (stateClause_create (yyvsp[-5].tok, yyvsp[-4].typequal, yyvsp[-2].srset));
   ;
    break;}
case 293:
{
     context_setProtectVars (); 
     enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;
    break;}
case 294:
{
     context_exitFunctionHeader ();
     exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
     DPRINTF (("done optGlobBufConstraintsAux\n"));

     if (lltok_isEnsures (yyvsp[-4].tok)) 
       {
	 yyval.funcclause = functionClause_createEnsures (yyvsp[-2].fcnconstraint);
       }
     else if (lltok_isRequires (yyvsp[-4].tok))
       {
	 yyval.funcclause = functionClause_createRequires (yyvsp[-2].fcnconstraint);
       }
     else
       {
	 BADBRANCH;
       }

     DPRINTF (("FunctionclauseS: %s", functionClause_unparse (yyval.funcclause)));
   ;
    break;}
case 295:
{ yyval.fcnconstraint = functionConstraint_createBufferConstraint (yyvsp[0].conL); ;
    break;}
case 296:
{ yyval.fcnconstraint = functionConstraint_createMetaStateConstraint (yyvsp[0].msconstraint); DPRINTF (("Made constraint: %s", functionConstraint_unparse (yyval.fcnconstraint))); ;
    break;}
case 297:
{ yyval.typequal = qual_createExits (); ;
    break;}
case 298:
{ yyval.typequal = qual_createMayExit (); ;
    break;}
case 299:
{ yyval.typequal = qual_createTrueExit (); ;
    break;}
case 300:
{ yyval.typequal = qual_createFalseExit (); ;
    break;}
case 301:
{ yyval.typequal = qual_createNeverExit (); ;
    break;}
case 302:
{ yyval.typequal = qual_createChecked (); ;
    break;}
case 303:
{ yyval.typequal = qual_createCheckMod (); ;
    break;}
case 304:
{ yyval.typequal = qual_createUnchecked (); ;
    break;}
case 305:
{ yyval.typequal = qual_createCheckedStrict (); ;
    break;}
case 306:
{ yyval.typequal = qual_createOwned (); ;
    break;}
case 307:
{ yyval.typequal = qual_createDependent (); ;
    break;}
case 308:
{ yyval.typequal = qual_createYield (); ;
    break;}
case 309:
{ yyval.typequal = qual_createTemp (); ;
    break;}
case 310:
{ yyval.typequal = qual_createOnly (); ;
    break;}
case 311:
{ yyval.typequal = qual_createKeep (); ;
    break;}
case 312:
{ yyval.typequal = qual_createKept (); ;
    break;}
case 313:
{ yyval.typequal = qual_createShared (); ;
    break;}
case 314:
{ yyval.typequal = qual_createUnique (); ;
    break;}
case 315:
{ yyval.typequal = qual_createNull (); ;
    break;}
case 316:
{ yyval.typequal = qual_createIsNull (); ;
    break;}
case 317:
{ yyval.typequal = qual_createRelNull (); ;
    break;}
case 318:
{ yyval.typequal = qual_createNotNull (); ;
    break;}
case 319:
{ yyval.typequal = qual_createExposed (); ;
    break;}
case 320:
{ yyval.typequal = qual_createObserver (); ;
    break;}
case 321:
{ yyval.typequal = qual_createNullTerminated (); ;
    break;}
case 322:
{ yyval.typequal = qual_createMetaState (yyvsp[0].annotation); ;
    break;}
case 323:
{ yyval.typequal = qual_createReturned (); ;
    break;}
case 324:
{ yyval.typequal = qual_createSef (); ;
    break;}
case 325:
{ yyval.typequal = qual_createUnused (); ;
    break;}
case 326:
{ yyval.typequal = qual_createExternal (); ;
    break;}
case 327:
{ yyval.typequal = qual_createTrueNull (); ;
    break;}
case 328:
{ yyval.typequal = qual_createFalseNull (); ;
    break;}
case 329:
{ yyval.typequal = qual_createAbstract (); ;
    break;}
case 330:
{ yyval.typequal = qual_createConcrete (); ;
    break;}
case 331:
{ yyval.typequal = qual_createMutable (); ;
    break;}
case 332:
{ yyval.typequal = qual_createImmutable (); ;
    break;}
case 333:
{ yyval.typequal = qual_createRefCounted (); ;
    break;}
case 334:
{ yyval.typequal = qual_createRefs (); ;
    break;}
case 335:
{ yyval.typequal = qual_createKillRef (); ;
    break;}
case 336:
{ yyval.typequal = qual_createRelDef (); ;
    break;}
case 337:
{ yyval.typequal = qual_createNewRef (); ;
    break;}
case 338:
{ yyval.typequal = qual_createTempRef (); ;
    break;}
case 339:
{ yyval.typequal = qual_createShort (); ;
    break;}
case 340:
{ yyval.typequal = qual_createLong (); ;
    break;}
case 341:
{ yyval.typequal = qual_createSigned (); ;
    break;}
case 342:
{ yyval.typequal = qual_createUnsigned (); ;
    break;}
case 343:
{ yyval.typequal = qual_createOut (); ;
    break;}
case 344:
{ yyval.typequal = qual_createIn (); ;
    break;}
case 345:
{ yyval.typequal = qual_createPartial (); ;
    break;}
case 346:
{ yyval.typequal = qual_createSpecial (); ;
    break;}
case 347:
{ yyval.typequal = qual_createConst (); ;
    break;}
case 348:
{ yyval.typequal = qual_createVolatile (); ;
    break;}
case 349:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 350:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 351:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 352:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 353:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 354:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 355:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 356:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 357:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 364:
{ yyval.ctyp = ctype_unknown; ;
    break;}
case 365:
{ yyval.ctyp = ctype_anyintegral; ;
    break;}
case 366:
{ yyval.ctyp = ctype_unsignedintegral; ;
    break;}
case 367:
{ yyval.ctyp = ctype_signedintegral; ;
    break;}
case 371:
{ yyval.ctyp = ctype_fromQual (yyvsp[-1].typequal); ;
    break;}
case 372:
{ yyval.qtyp = qtype_resolve (yyvsp[-1].qtyp); ;
    break;}
case 373:
{ yyval.qtyp = yyvsp[0].qtyp; ;
    break;}
case 374:
{ yyval.qtyp = qtype_mergeAlt (yyvsp[-3].qtyp, yyvsp[-1].qtyp); ;
    break;}
case 376:
{ yyval.qtyp = qtype_mergeAlt (yyvsp[-2].qtyp, yyvsp[0].qtyp); ;
    break;}
case 377:
{ yyval.qtyp = qtype_addQual (yyvsp[0].qtyp, yyvsp[-1].typequal); ;
    break;}
case 378:
{ yyval.qtyp = qtype_addQual (yyvsp[0].qtyp, yyvsp[-1].typequal); ;
    break;}
case 379:
{ yyval.qtyp = qtype_combine (yyvsp[0].qtyp, yyvsp[-1].ctyp); ;
    break;}
case 380:
{ yyval.qtyp = qtype_unknown (); ;
    break;}
case 381:
{ yyval.qtyp = yyvsp[0].qtyp; ;
    break;}
case 382:
{ yyval.conL = constraintList_undefined; ;
    break;}
case 383:
{ sRef_setGlobalScopeSafe (); ;
    break;}
case 384:
{ sRef_clearGlobalScopeSafe (); ;
    break;}
case 385:
{ {ctype ct; ct = declareStruct (yyvsp[-9].cname, yyvsp[-4].flist); /* setGlobalStructInfo(ct, $12);*/ yyval.ctyp = ct;} ;
    break;}
case 386:
{ sRef_setGlobalScopeSafe (); ;
    break;}
case 387:
{ sRef_clearGlobalScopeSafe (); ;
    break;}
case 388:
{ yyval.ctyp = declareUnion (yyvsp[-8].cname, yyvsp[-3].flist); ;
    break;}
case 389:
{ yyval.ctyp = declareStruct (yyvsp[-3].cname, uentryList_new ()); ;
    break;}
case 390:
{ yyval.ctyp = declareUnion (yyvsp[-3].cname, uentryList_new ()); ;
    break;}
case 391:
{ sRef_setGlobalScopeSafe (); ;
    break;}
case 392:
{ sRef_clearGlobalScopeSafe (); ;
    break;}
case 393:
{ yyval.ctyp = declareUnnamedStruct (yyvsp[-3].flist); ;
    break;}
case 394:
{ sRef_setGlobalScopeSafe (); ;
    break;}
case 395:
{ sRef_clearGlobalScopeSafe (); ;
    break;}
case 396:
{ yyval.ctyp = declareUnnamedUnion (yyvsp[-3].flist); ;
    break;}
case 397:
{ yyval.ctyp = ctype_createUnnamedStruct (uentryList_new ()); ;
    break;}
case 398:
{ yyval.ctyp = ctype_createUnnamedUnion (uentryList_new ()); ;
    break;}
case 399:
{ yyval.ctyp = handleStruct (yyvsp[-1].cname); ;
    break;}
case 400:
{ yyval.ctyp = handleUnion (yyvsp[-1].cname); ;
    break;}
case 401:
{ g_expectingTypeName = FALSE; ;
    break;}
case 403:
{ yyval.flist = uentryList_undefined; /* bogus! */ ;
    break;}
case 404:
{ yyval.flist = uentryList_mergeFields (yyvsp[-1].flist, yyvsp[0].flist); ;
    break;}
case 405:
{ yyval.flist = fixUentryList (yyvsp[-2].ntyplist, yyvsp[-4].qtyp); ;
    break;}
case 406:
{ yyval.flist = fixUnnamedDecl (yyvsp[-2].qtyp); ;
    break;}
case 407:
{ yyval.ntyplist = idDeclList_singleton (yyvsp[-1].ntyp); ;
    break;}
case 408:
{ yyval.ntyplist = idDeclList_add (yyvsp[-3].ntyplist, yyvsp[-1].ntyp); ;
    break;}
case 409:
{ yyval.ntyp = yyvsp[0].ntyp; ;
    break;}
case 410:
{ yyval.ntyp = idDecl_undefined; ;
    break;}
case 411:
{ yyval.ntyp = yyvsp[-3].ntyp; ;
    break;}
case 412:
{ yyval.ctyp = declareUnnamedEnum (yyvsp[-2].enumnamelist); ;
    break;}
case 413:
{ context_pushLoc (); ;
    break;}
case 414:
{ context_popLoc (); yyval.ctyp = declareEnum (yyvsp[-5].cname, yyvsp[-2].enumnamelist); ;
    break;}
case 415:
{ yyval.ctyp = handleEnum (yyvsp[-1].cname); ;
    break;}
case 416:
{ yyval.enumnamelist = enumNameList_single (yyvsp[0].cname); ;
    break;}
case 417:
{ yyval.enumnamelist = enumNameList_push (yyvsp[-2].enumnamelist, yyvsp[0].cname); ;
    break;}
case 419:
{ uentry ue = uentry_makeEnumConstant (yyvsp[0].cname, ctype_unknown);
     usymtab_supGlobalEntry (ue);
     yyval.cname = yyvsp[0].cname;
   ;
    break;}
case 420:
{ uentry ue = uentry_makeEnumInitializedConstant (yyvsp[-3].cname, ctype_unknown, yyvsp[0].expr);
     usymtab_supGlobalEntry (ue);
     yyval.cname = yyvsp[-3].cname; 
   ;
    break;}
case 422:
{ yyval.ntyp = idDecl_create (cstring_undefined, qtype_create (yyvsp[0].ctyp)); ;
    break;}
case 423:
{ 
     qtype qt = qtype_unknown ();

     qtype_adjustPointers (yyvsp[-1].count, qt);
     yyval.ntyp = idDecl_create (cstring_copy (LastIdentifier ()), qt);
   ;
    break;}
case 424:
{ yyval.ntyp = yyvsp[0].ntyp; qtype_adjustPointers (yyvsp[-1].count, idDecl_getTyp (yyval.ntyp)); ;
    break;}
case 426:
{ yyval.ntyp = yyvsp[0].ntyp; qtype_adjustPointers (yyvsp[-1].count, idDecl_getTyp (yyval.ntyp)); ;
    break;}
case 427:
{ yyval.entrylist = handleParamTypeList (yyvsp[0].entrylist); ;
    break;}
case 428:
{ yyval.entrylist = handleParamIdList (yyvsp[0].entrylist); ;
    break;}
case 429:
{ /* ignored for now */; ;
    break;}
case 430:
{ ; ;
    break;}
case 431:
{ ; ;
    break;}
case 432:
{ ; ;
    break;}
case 433:
{ yyval.count = 1; ;
    break;}
case 434:
{ yyval.count = 1; ;
    break;}
case 435:
{ yyval.count = 1 + yyvsp[0].count; ;
    break;}
case 436:
{ yyval.count = 1 + yyvsp[0].count; ;
    break;}
case 438:
{ yyval.entrylist = uentryList_add (yyvsp[-2].entrylist, uentry_makeElipsisMarker ()); ;
    break;}
case 439:
{ yyval.entrylist = uentryList_single (uentry_makeVariableLoc (yyvsp[0].cname, ctype_int)); ;
    break;}
case 440:
{ yyval.entrylist = uentryList_add (yyvsp[-2].entrylist, uentry_makeVariableLoc (yyvsp[0].cname, ctype_int)); ;
    break;}
case 441:
{ yyval.entrylist = uentryList_single (uentry_makeElipsisMarker ()); ;
    break;}
case 443:
{ yyval.entrylist = uentryList_add (yyvsp[-2].entrylist, uentry_makeElipsisMarker ()); ;
    break;}
case 444:
{ storeLoc (); ;
    break;}
case 445:
{ yyval.entrylist = uentryList_single (yyvsp[0].oentry); ;
    break;}
case 446:
{ storeLoc (); ;
    break;}
case 447:
{ yyval.entrylist = uentryList_add (yyvsp[-3].entrylist, yyvsp[0].oentry); ;
    break;}
case 448:
{ 
     if (isFlipOldStyle ()) 
       { 
	 llparseerror (cstring_makeLiteral ("Inconsistent function parameter syntax (mixing old and new style declaration)")); 
       }
     else 
       { 
	 setNewStyle (); 
       }
     yyval.oentry = makeCurrentParam (idDecl_fixParamBase (yyvsp[-1].ntyp, yyvsp[-2].qtyp)); 
   ;
    break;}
case 449:
{ 
     idDecl tparam = idDecl_create (yyvsp[0].cname, qtype_unknown ());

     if (isNewStyle ()) 
       {
	 llparseerror (message ("Inconsistent function parameter syntax: %q",
				idDecl_unparse (tparam))); 
       }

     setFlipOldStyle ();
     yyval.oentry = makeCurrentParam (tparam);
     idDecl_free (tparam);
   ;
    break;}
case 451:
{ yyval.qtyp = qtype_newBase (yyvsp[-1].qtyp, yyvsp[0].ctyp); ;
    break;}
case 452:
{ yyval.ctyp = ctype_adjustPointers (yyvsp[0].count, ctype_unknown); ;
    break;}
case 454:
{ yyval.ctyp = ctype_adjustPointers (yyvsp[-1].count, yyvsp[0].ctyp); ;
    break;}
case 455:
{ yyval.ctyp = ctype_unknown; ;
    break;}
case 457:
{ yyval.ctyp = ctype_expectFunction (yyvsp[-1].ctyp); ;
    break;}
case 458:
{ yyval.ctyp = ctype_makeArray (ctype_unknown); ;
    break;}
case 459:
{ yyval.ctyp = ctype_makeFixedArray (ctype_unknown, exprNode_getLongValue (yyvsp[-1].expr)); ;
    break;}
case 460:
{ yyval.ctyp = ctype_makeArray (yyvsp[-2].ctyp); ;
    break;}
case 461:
{ yyval.ctyp = ctype_makeInnerFixedArray (yyvsp[-3].ctyp, exprNode_getLongValue (yyvsp[-1].expr)); ;
    break;}
case 462:
{ yyval.ctyp = ctype_makeFunction (ctype_unknown, uentryList_makeMissingParams ()); ;
    break;}
case 463:
{ yyval.ctyp = ctype_makeParamsFunction (ctype_unknown, yyvsp[-1].entrylist); ;
    break;}
case 464:
{ yyval.ctyp = ctype_makeFunction (yyvsp[-3].ctyp, uentryList_makeMissingParams ()); ;
    break;}
case 465:
{ yyval.ctyp = ctype_makeParamsFunction (yyvsp[-4].ctyp, yyvsp[-1].entrylist); ;
    break;}
case 475:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 478:
{ yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 479:
{ yyval.expr = exprNode_while (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 480:
{ yyval.expr = exprNode_doWhile (yyvsp[-5].expr, yyvsp[-2].expr); ;
    break;}
case 481:
{ yyval.expr = exprNode_doWhile (yyvsp[-4].expr, yyvsp[-1].expr); ;
    break;}
case 482:
{ yyval.expr = exprNode_for (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 483:
{ context_setProtectVars (); ;
    break;}
case 484:
{ context_sizeofReleaseVars (); ;
    break;}
case 485:
{ yyval.expr = exprNode_forPred (yyvsp[-7].expr, yyvsp[-5].expr, yyvsp[-2].expr); 
     context_enterForClause (yyvsp[-5].expr); ;
    break;}
case 486:
{ setProcessingIterVars (yyvsp[-2].entry); ;
    break;}
case 487:
{ yyval.expr = exprNode_iterStart (yyvsp[-5].entry, yyvsp[-1].exprlist); ;
    break;}
case 488:
{ yyval.expr = exprNode_createId (yyvsp[0].entry); ;
    break;}
case 492:
{ yyval.expr = yyvsp[-1].expr; DPRINTF (("def stmt: %s", exprNode_unparse (yyval.expr))); ;
    break;}
case 500:
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 501:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 502:
{ exprNode_checkIfPred (yyvsp[0].expr); ;
    break;}
case 503:
{ /* don't: context_exitTrueClause ($1, $2); */
     yyval.expr = exprNode_if (yyvsp[-2].expr, yyvsp[0].expr); 
   ;
    break;}
case 504:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 505:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 516:
{ yyval.expr = exprNode_addParens (yyvsp[-2].tok, yyvsp[-1].expr); ;
    break;}
case 518:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 519:
{ yyval.expr = exprNode_labelMarker (yyvsp[-1].cname); ;
    break;}
case 520:
{ yyval.expr = exprNode_notReached (yyvsp[0].expr); ;
    break;}
case 521:
{ ; ;
    break;}
case 522:
{ ; ;
    break;}
case 523:
{ context_enterCaseClause (yyvsp[0].expr); ;
    break;}
case 524:
{ yyval.expr = exprNode_caseMarker (yyvsp[-2].expr, FALSE); ;
    break;}
case 525:
{ context_enterCaseClause (yyvsp[0].expr); ;
    break;}
case 526:
{ yyval.expr = exprNode_caseMarker (yyvsp[-2].expr, TRUE); ;
    break;}
case 527:
{ context_enterCaseClause (exprNode_undefined); ;
    break;}
case 528:
{ yyval.expr = exprNode_defaultMarker (yyvsp[-2].tok, FALSE); ;
    break;}
case 529:
{ context_enterCaseClause (exprNode_undefined); ;
    break;}
case 530:
{ yyval.expr = exprNode_defaultMarker (yyvsp[-2].tok, TRUE); ;
    break;}
case 531:
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 532:
{ yyval.expr = yyvsp[0].expr; context_exitInner (yyvsp[0].expr); ;
    break;}
case 533:
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 534:
{ context_enterInnerContext (); ;
    break;}
case 535:
{ context_exitInnerPlain (); ;
    break;}
case 536:
{ context_enterStructInnerContext (); ;
    break;}
case 537:
{ context_exitStructInnerContext (); ;
    break;}
case 538:
{ context_exitInnerSafe (); ;
    break;}
case 539:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 540:
{ yyval.expr = exprNode_notReached (exprNode_createTok (yyvsp[0].tok)); ;
    break;}
case 541:
{ yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 542:
{ yyval.expr = exprNode_notReached (exprNode_updateLocation (yyvsp[-2].expr, lltok_getLoc (yyvsp[0].tok))); ;
    break;}
case 543:
{ yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 544:
{ yyval.expr = exprNode_notReached (exprNode_updateLocation (yyvsp[-2].expr, lltok_getLoc (yyvsp[0].tok))); ;
    break;}
case 545:
{ yyval.expr = exprNode_updateLocation (exprNode_concat (yyvsp[-2].expr, yyvsp[-1].expr), lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 546:
{ yyval.expr = exprNode_notReached (exprNode_updateLocation (exprNode_concat (yyvsp[-3].expr, yyvsp[-2].expr), 
							lltok_getLoc (yyvsp[-1].tok))); 
   ;
    break;}
case 547:
{ yyval.expr = exprNode_makeBlock (yyvsp[0].expr); ;
    break;}
case 548:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 549:
{ yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 550:
{ yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 551:
{ yyval.expr = exprNode_updateLocation (exprNode_concat (yyvsp[-2].expr, yyvsp[-1].expr), lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 553:
{ yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 554:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 555:
{ yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 556:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 557:
{ yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 558:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 559:
{ yyval.expr = exprNode_statement (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 560:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 561:
{ yyval.expr = exprNode_statement (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 562:
{ yyval.expr = exprNode_checkExpr (yyvsp[0].expr); ;
    break;}
case 563:
{ 
     exprNode_produceGuards (yyvsp[-1].expr); context_enterTrueClause (yyvsp[-1].expr); 
     exprNode_checkIfPred (yyvsp[-1].expr);
     yyval.expr = yyvsp[-1].expr;
   ;
    break;}
case 564:
{ 
     context_exitTrueClause (yyvsp[-1].expr, yyvsp[0].expr);
     yyval.expr = exprNode_if (yyvsp[-1].expr, yyvsp[0].expr); 
   ;
    break;}
case 565:
{ context_enterFalseClause (yyvsp[-2].expr); ;
    break;}
case 566:
{
     context_exitClause (yyvsp[-4].expr, yyvsp[-3].expr, yyvsp[0].expr);
     yyval.expr = exprNode_ifelse (yyvsp[-4].expr, yyvsp[-3].expr, yyvsp[0].expr); 
   ;
    break;}
case 567:
{ context_enterSwitch (yyvsp[0].expr); ;
    break;}
case 568:
{ yyval.expr = exprNode_switch (yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 569:
{ yyval.expr = exprNode_whilePred (yyvsp[-1].expr); context_enterWhileClause (yyvsp[-1].expr); ;
    break;}
case 570:
{ yyval.expr = exprNode_whilePred(yyvsp[-1].expr); ;
    break;}
case 571:
{ context_enterIterClause (); ;
    break;}
case 572:
{ setProcessingIterVars (yyvsp[-3].entry); ;
    break;}
case 573:
{ 
     yyval.expr = exprNode_iter (yyvsp[-9].entry, yyvsp[-4].exprlist, yyvsp[-2].expr, yyvsp[-1].entry); 

   ;
    break;}
case 574:
{ yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 575:
{ nextIterParam (); ;
    break;}
case 576:
{ yyval.exprlist = exprNodeList_push (yyvsp[-3].exprlist, yyvsp[0].expr); ;
    break;}
case 577:
{ yyval.expr = exprNode_iterExpr (yyvsp[0].expr); ;
    break;}
case 578:
{ yyval.expr = exprNode_iterId (yyvsp[0].entry); ;
    break;}
case 579:
{ uentry ue = coerceIterId (yyvsp[0].cname);

		      if (uentry_isValid (ue)) 
			{
			  yyval.expr = exprNode_iterId (ue);
			}
		      else
			{
			  yyval.expr = exprNode_iterNewId (cstring_copy (LastIdentifier ()));
			}
		    ;
    break;}
case 580:
{ yyval.expr = exprNode_iterNewId (yyvsp[0].cname); ;
    break;}
case 582:
{ yyval.expr = exprNode_combineLiterals (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 584:
{ yyval.expr = exprNode_addParens (yyvsp[-2].tok, yyvsp[-1].expr); ;
    break;}
case 586:
{ yyval.expr = exprNode_arrayFetch (yyvsp[-3].expr, yyvsp[-1].expr); ;
    break;}
case 587:
{ yyval.expr = exprNode_functionCall (yyvsp[-2].expr, exprNodeList_new ()); ;
    break;}
case 588:
{ yyval.expr = exprNode_functionCall (yyvsp[-3].expr, yyvsp[-1].exprlist); ;
    break;}
case 589:
{ yyval.expr = exprNode_vaArg (yyvsp[-5].tok, yyvsp[-3].expr, yyvsp[-1].qtyp); ;
    break;}
case 590:
{ yyval.expr = exprNode_fieldAccess (yyvsp[-4].expr, yyvsp[-2].tok, yyvsp[-1].cname); ;
    break;}
case 591:
{ yyval.expr = exprNode_arrowAccess (yyvsp[-4].expr, yyvsp[-2].tok, yyvsp[-1].cname); ;
    break;}
case 592:
{ yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 593:
{ yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 595:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 596:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 597:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 598:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 599:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 600:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 601:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 602:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 603:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 605:
{ yyval.expr = exprNode_cast (yyvsp[-3].tok, yyvsp[0].expr, yyvsp[-2].qtyp); ;
    break;}
case 607:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 608:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 609:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 611:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 612:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 614:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 615:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 617:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 618:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 619:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 620:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 622:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 623:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 625:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 627:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 629:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 631:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 633:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 635:
{ context_enterTrueClause (yyvsp[-1].expr); ;
    break;}
case 636:
{ context_enterFalseClause (yyvsp[-4].expr); ;
    break;}
case 637:
{ yyval.expr = exprNode_cond (yyvsp[-6].expr, yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 639:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 640:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 641:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 642:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 643:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 644:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 645:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 646:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 647:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 648:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 649:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 650:
{ yyval.entry = yyvsp[0].entry; ;
    break;}
case 651:
{ yyval.entry = uentry_undefined; ;
    break;}
case 652:
{ context_enterDoWhileClause (); yyval.tok = yyvsp[0].tok; ;
    break;}
case 653:
{ yyval.expr = exprNode_while (yyvsp[-1].expr, yyvsp[0].expr); context_exitWhileClause (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 654:
{ yyval.expr = exprNode_statement (exprNode_doWhile (yyvsp[-5].expr, yyvsp[-2].expr), yyvsp[0].tok); ;
    break;}
case 655:
{ yyval.expr = exprNode_for (yyvsp[-1].expr, yyvsp[0].expr); context_exitForClause (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 656:
{ yyval.expr = exprNode_while (yyvsp[-1].expr, yyvsp[0].expr); context_exitWhileClause (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 657:
{ yyval.expr = exprNode_statement (exprNode_doWhile (yyvsp[-5].expr, yyvsp[-2].expr), yyvsp[0].tok); ;
    break;}
case 658:
{ yyval.expr = exprNode_doWhile (yyvsp[-4].expr, yyvsp[-1].expr); ;
    break;}
case 659:
{ yyval.expr = exprNode_for (yyvsp[-1].expr, yyvsp[0].expr); context_exitForClause (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 660:
{ yyval.expr = exprNode_goto (yyvsp[-1].cname); ;
    break;}
case 661:
{ yyval.expr = exprNode_continue (yyvsp[-1].tok, BADTOK); ;
    break;}
case 662:
{ yyval.expr = exprNode_continue (yyvsp[-2].tok, QINNERCONTINUE); ;
    break;}
case 663:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, BADTOK); ;
    break;}
case 664:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, QSWITCHBREAK); ;
    break;}
case 665:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, QLOOPBREAK); ;
    break;}
case 666:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, QINNERBREAK); ;
    break;}
case 667:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, QSAFEBREAK); ;
    break;}
case 668:
{ yyval.expr = exprNode_nullReturn (yyvsp[-1].tok); ;
    break;}
case 669:
{ yyval.expr = exprNode_return (yyvsp[-1].expr); ;
    break;}
case 671:
{ ; ;
    break;}
case 674:
{ yyval.cname = uentry_getName (yyvsp[0].entry); ;
    break;}
case 675:
{ yyval.cname = uentry_getName (yyvsp[0].entry); ;
    break;}
case 676:
{ yyval.cname = uentry_getName (yyvsp[0].entry); ;
    break;}
case 677:
{ yyval.cname = yyvsp[0].cname; ;
    break;}
case 679:
{ yyval.ctyp = ctype_unknown; ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */


  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}


/*@-redecl@*/ /*@-namechecks@*/
extern char *yytext;
/*@=redecl@*/ /*@=namechecks@*/

# include "bison.reset"

void yyerror (/*@unused@*/ char *s) 
{
  static bool givehint = FALSE;

  if (context_inIterDef ())
    {
      llerror (FLG_SYNTAX, message ("Iter syntax not parseable: %s", 
				    context_inFunctionName ()));
    }
  else if (context_inIterEnd ())
    {
      llerror (FLG_SYNTAX, message ("Iter finalizer syntax not parseable: %s", 
				    context_inFunctionName ()));
    }
  else if (context_inMacro ())
    {
      llerror (FLG_SYNTAX, message ("Macro syntax not parseable: %s", 
				    context_inFunctionName ()));
      
      if (context_inUnknownMacro ())
	{
	  if (!givehint)
	    {
	      llhint (cstring_makeLiteral 
		     ("Precede macro definition with /*@notfunction@*/ "
		      "to suppress checking and force expansion"));
	      givehint = TRUE;
	    }
	}

      swallowMacro ();
      context_exitAllClausesQuiet ();
    }
  else
    {
      llparseerror (cstring_undefined);
    }
}












/*
** Resets all flags in bison.head
*/


/*@=allmacros@*/
/*@=boolint@*/
/*@=charint@*/
/*@=macroparams@*/
/*@=macroundef@*/
/*@=unreachable@*/
/*@=macrospec@*/
/*@=varuse@*/
/*@=ignorequals@*/
/*@=macrostmt@*/
/*@=noeffect@*/
/*@=shadow@*/
/*@=exitarg@*/
/*@=macroredef@*/
/*@=uniondef@*/
/*@=compdef@*/
/*@=matchfields@*/
/*@=exportlocal@*/
/*@=evalorderuncon@*/
/*@=exportheader@*/
/*@=typeuse@*/
/*@=redecl@*/
/*@=redef@*/
/*@=noparams@*/
/*@=ansireserved@*/
/*@=fielduse@*/
/*@=ifblock@*/
/*@=elseifcomplete@*/
/*@=whileblock@*/
/*@=forblock@*/
/*@=branchstate@*/
/*@=readonlytrans@*/
/*@=namechecks@*/
/*@=usedef@*/
/*@=systemunrecog@*/
/*@=dependenttrans@*/
/*@=unqualifiedtrans@*/
/*@=declundef@*/


/*drl added 11/27/2001*/
/*@=bounds@*/
