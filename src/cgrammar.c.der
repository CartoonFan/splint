/*
** Inserted at beginning of c files generated by bison
** REMEMBER:  Change bison.reset too.
*/

/*@-allmacros@*/
/*@+boolint@*/
/*@+charint@*/
/*@-macroparams@*/
/*@-macroundef@*/
/*@-unreachable@*/
/*@-macrospec@*/
/*@-varuse@*/
/*@+ignorequals@*/
/*@-macrostmt@*/
/*@-noeffect@*/
/*@-shadow@*/
/*@-exitarg@*/
/*@-macroredef@*/
/*@-uniondef@*/
/*@-compdef@*/
/*@-matchfields@*/
/*@-exportlocal@*/
/*@-evalorderuncon@*/
/*@-exportheader@*/
/*@-typeuse@*/
/*@-redecl@*/
/*@-redef@*/
/*@-noparams@*/
/*@-ansireserved@*/
/*@-fielduse@*/
/*@-ifblock@*/
/*@-elseifcomplete@*/
/*@-whileblock@*/
/*@-forblock@*/
/*@-branchstate@*/
/*@-readonlytrans@*/
/*@-namechecks@*/
/*@-usedef@*/
/*@-systemunrecog@*/
/*@-dependenttrans@*/
/*@-unqualifiedtrans@*/
/*@-nullassign@*/
/*@-nullpass@*/
/*@-nullptrarith*/
/*@-usereleased@*/
/*@-declundef@*/

/*drl added 11/27/2001*/
/*@-bounds@*/
/* < end of bison.head > */


/*  A Bison parser, made from cgrammar.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	BADTOK	257
#define	SKIPTOK	258
#define	CTOK_ELIPSIS	259
#define	CASE	260
#define	DEFAULT	261
#define	CIF	262
#define	CELSE	263
#define	SWITCH	264
#define	WHILE	265
#define	DO	266
#define	CFOR	267
#define	GOTO	268
#define	CONTINUE	269
#define	BREAK	270
#define	RETURN	271
#define	TSEMI	272
#define	TLBRACE	273
#define	TRBRACE	274
#define	TCOMMA	275
#define	TCOLON	276
#define	TASSIGN	277
#define	TLPAREN	278
#define	TRPAREN	279
#define	TLSQBR	280
#define	TRSQBR	281
#define	TDOT	282
#define	TAMPERSAND	283
#define	TEXCL	284
#define	TTILDE	285
#define	TMINUS	286
#define	TPLUS	287
#define	TMULT	288
#define	TDIV	289
#define	TPERCENT	290
#define	TLT	291
#define	TGT	292
#define	TCIRC	293
#define	TBAR	294
#define	TQUEST	295
#define	CSIZEOF	296
#define	CALIGNOF	297
#define	ARROW_OP	298
#define	CTYPEDEF	299
#define	COFFSETOF	300
#define	INC_OP	301
#define	DEC_OP	302
#define	LEFT_OP	303
#define	RIGHT_OP	304
#define	LE_OP	305
#define	GE_OP	306
#define	EQ_OP	307
#define	NE_OP	308
#define	AND_OP	309
#define	OR_OP	310
#define	MUL_ASSIGN	311
#define	DIV_ASSIGN	312
#define	MOD_ASSIGN	313
#define	ADD_ASSIGN	314
#define	SUB_ASSIGN	315
#define	LEFT_ASSIGN	316
#define	RIGHT_ASSIGN	317
#define	AND_ASSIGN	318
#define	XOR_ASSIGN	319
#define	OR_ASSIGN	320
#define	CSTRUCT	321
#define	CUNION	322
#define	CENUM	323
#define	VA_ARG	324
#define	VA_DCL	325
#define	QWARN	326
#define	QGLOBALS	327
#define	QMODIFIES	328
#define	QNOMODS	329
#define	QCONSTANT	330
#define	QFUNCTION	331
#define	QITER	332
#define	QDEFINES	333
#define	QUSES	334
#define	QALLOCATES	335
#define	QSETS	336
#define	QRELEASES	337
#define	QPRECLAUSE	338
#define	QPOSTCLAUSE	339
#define	QALT	340
#define	QUNDEF	341
#define	QKILLED	342
#define	QENDMACRO	343
#define	LLMACRO	344
#define	LLMACROITER	345
#define	LLMACROEND	346
#define	TENDMACRO	347
#define	QSWITCHBREAK	348
#define	QLOOPBREAK	349
#define	QINNERBREAK	350
#define	QSAFEBREAK	351
#define	QINNERCONTINUE	352
#define	QFALLTHROUGH	353
#define	QLINTNOTREACHED	354
#define	QLINTFALLTHROUGH	355
#define	QLINTFALLTHRU	356
#define	QARGSUSED	357
#define	QPRINTFLIKE	358
#define	QLINTPRINTFLIKE	359
#define	QSCANFLIKE	360
#define	QMESSAGELIKE	361
#define	QNOTREACHED	362
#define	QCONST	363
#define	QVOLATILE	364
#define	QINLINE	365
#define	QEXTENSION	366
#define	QEXTERN	367
#define	QSTATIC	368
#define	QAUTO	369
#define	QREGISTER	370
#define	QOUT	371
#define	QIN	372
#define	QYIELD	373
#define	QONLY	374
#define	QTEMP	375
#define	QSHARED	376
#define	QREF	377
#define	QUNIQUE	378
#define	QCHECKED	379
#define	QUNCHECKED	380
#define	QCHECKEDSTRICT	381
#define	QCHECKMOD	382
#define	QKEEP	383
#define	QKEPT	384
#define	QPARTIAL	385
#define	QSPECIAL	386
#define	QOWNED	387
#define	QDEPENDENT	388
#define	QRETURNED	389
#define	QEXPOSED	390
#define	QNULL	391
#define	QOBSERVER	392
#define	QISNULL	393
#define	QEXITS	394
#define	QMAYEXIT	395
#define	QNEVEREXIT	396
#define	QTRUEEXIT	397
#define	QFALSEEXIT	398
#define	QLONG	399
#define	QSIGNED	400
#define	QUNSIGNED	401
#define	QSHORT	402
#define	QUNUSED	403
#define	QSEF	404
#define	QNOTNULL	405
#define	QRELNULL	406
#define	QABSTRACT	407
#define	QCONCRETE	408
#define	QMUTABLE	409
#define	QIMMUTABLE	410
#define	QTRUENULL	411
#define	QFALSENULL	412
#define	QEXTERNAL	413
#define	QREFCOUNTED	414
#define	QREFS	415
#define	QNEWREF	416
#define	QTEMPREF	417
#define	QKILLREF	418
#define	QRELDEF	419
#define	CGCHAR	420
#define	CBOOL	421
#define	CINT	422
#define	CGFLOAT	423
#define	CDOUBLE	424
#define	CVOID	425
#define	QANYTYPE	426
#define	QINTEGRALTYPE	427
#define	QUNSIGNEDINTEGRALTYPE	428
#define	QSIGNEDINTEGRALTYPE	429
#define	QNULLTERMINATED	430
#define	QSETBUFFERSIZE	431
#define	QSETSTRINGLENGTH	432
#define	QMAXSET	433
#define	QMAXREAD	434
#define	QTESTINRANGE	435
#define	TCAND	436
#define	IDENTIFIER	437
#define	NEW_IDENTIFIER	438
#define	TYPE_NAME_OR_ID	439
#define	CANNOTATION	440
#define	CCONSTANT	441
#define	ITER_NAME	442
#define	ITER_ENDNAME	443
#define	TYPE_NAME	444
#define	METASTATE_NAME	445


/*
**
** cgrammar.y
**
** Yacc/Bison grammar for extended ANSI C used by Splint.
**
** original grammar by Nate Osgood ---
**    hacrat@catfish.lcs.mit.edu Mon Jun 14 13:06:32 1993
**
** changes for Splint --- handle typedef names correctly
** fix struct/union parsing bug (empty struct is accepted)
** add productions to handle macros --- require
** error correction --- main source of conflicts in grammar.
** need to process initializations sequentially, L->R
**
** production names are cryptic, so more productions fit on one line
**
** conflicts:  87 shift/reduce, 18 reduce/reduce
** most of these are due to handling macros
** a few are due to handling type expressions
*/

/*@=allmacros@*/

extern int yylex ();
extern void swallowMacro (void);
extern void yyerror (char *);

# include "splintMacros.nf"
# include "basic.h"
# include "cscanner.h"
# include "cgrammar.h"
# include "exprChecks.h"

/*@-allmacros@*/
/*@-matchfields@*/

# define SHOWCSYM FALSE

/*
** This is necessary, or else when the bison-generated code #include's malloc.h,
** there will be a parse error.
**
** Unfortunately, it means the error checking on malloc, etc. is lost for allocations
** in bison-generated files under Win32.
*/

# ifdef WIN32
# undef malloc
# undef calloc
# undef realloc
# endif


typedef union
{
  lltok tok;
  int count;
  qual typequal;
  qualList tquallist;
  ctype ctyp;
  /*@dependent@*/ sRef sr;
  /*@only@*/ sRef osr;

  /*@only@*/ functionClauseList funcclauselist;
  /*@only@*/ functionClause funcclause;  
  /*@only@*/ flagSpec flagspec;
  /*@only@*/ globalsClause globsclause;
  /*@only@*/ modifiesClause modsclause;
  /*@only@*/ warnClause warnclause;
  /*@only@*/ stateClause stateclause;

  /*@only@*/ functionConstraint fcnconstraint; 

  /*@only@*/ metaStateConstraint msconstraint;
  /*@only@*/ metaStateSpecifier msspec;
  /*@only@*/ metaStateExpression msexpr;
  /*@observer@*/ metaStateInfo msinfo;

  /*@only@*/ sRefList srlist;
  /*@only@*/ globSet globset;
  /*@only@*/ qtype qtyp;
  /*@only@*/ cstring cname;
  /*@observer@*/ annotationInfo annotation;
  /*@only@*/ idDecl ntyp;
  /*@only@*/ idDeclList ntyplist;
  /*@only@*/ uentryList flist;
  /*@owned@*/ uentryList entrylist;
  /*@observer@*/ /*@dependent@*/ uentry entry;
  /*@only@*/ uentry oentry;
  /*@only@*/ exprNode expr;
  /*@only@*/ enumNameList enumnamelist;
  /*@only@*/ exprNodeList exprlist;
  /*@only@*/ sRefSet srset; 
  /*@only@*/ cstringList cstringlist;

  /*drl
    added 1/19/2001
  */
  constraint con;
  constraintList conL;
  constraintExpr conE;
  /* drl */  
} YYSTYPE;
#ifndef YYDEBUG
#define YYDEBUG 1
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1193
#define	YYFLAG		-32768
#define	YYNTBASE	192

#define YYTRANSLATE(x) ((unsigned)(x) <= 445 ? yytranslate[x] : 448)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
   177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
   187,   188,   189,   190,   191
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     1,     3,     5,     8,    11,    13,    15,    17,    19,
    21,    23,    32,    44,    45,    51,    53,    57,    59,    62,
    64,    71,    75,    82,    83,    90,    91,    99,   101,   108,
   112,   119,   120,   127,   128,   136,   137,   138,   149,   153,
   157,   161,   164,   166,   170,   171,   176,   177,   182,   184,
   188,   190,   194,   196,   200,   202,   204,   206,   208,   210,
   212,   217,   223,   225,   227,   229,   231,   235,   240,   243,
   247,   251,   255,   257,   259,   261,   262,   265,   266,   269,
   271,   273,   275,   277,   279,   281,   283,   285,   287,   289,
   291,   293,   296,   297,   302,   304,   307,   308,   312,   314,
   318,   320,   322,   323,   326,   330,   333,   335,   339,   342,
   343,   346,   348,   350,   352,   354,   356,   358,   360,   362,
   364,   366,   368,   370,   372,   374,   376,   378,   382,   383,
   387,   388,   389,   394,   397,   400,   402,   404,   406,   410,
   415,   418,   422,   426,   430,   432,   434,   436,   440,   442,
   444,   448,   453,   456,   460,   464,   468,   469,   471,   473,
   477,   479,   481,   483,   487,   489,   491,   493,   498,   502,
   507,   514,   520,   526,   529,   532,   534,   538,   540,   543,
   546,   549,   552,   555,   558,   561,   564,   566,   568,   572,
   574,   584,   585,   589,   594,   597,   602,   605,   607,   612,
   614,   618,   622,   626,   628,   632,   636,   638,   642,   646,
   648,   652,   656,   660,   664,   666,   670,   674,   676,   680,
   682,   686,   688,   692,   694,   695,   700,   702,   703,   708,
   710,   711,   712,   720,   722,   726,   730,   734,   738,   742,
   746,   750,   754,   758,   762,   766,   768,   772,   773,   775,
   777,   779,   781,   783,   787,   788,   798,   799,   811,   814,
   815,   822,   823,   832,   837,   842,   843,   844,   847,   849,
   854,   855,   860,   862,   866,   871,   873,   877,   879,   881,
   883,   885,   887,   890,   893,   894,   901,   904,   907,   908,
   915,   916,   922,   924,   926,   928,   930,   932,   934,   936,
   938,   940,   942,   944,   946,   948,   950,   952,   954,   956,
   958,   960,   962,   964,   966,   968,   970,   972,   974,   976,
   978,   980,   982,   984,   986,   988,   990,   992,   994,   996,
   998,  1000,  1002,  1004,  1006,  1008,  1010,  1012,  1014,  1016,
  1018,  1020,  1022,  1024,  1026,  1029,  1032,  1035,  1038,  1041,
  1044,  1047,  1050,  1053,  1056,  1059,  1062,  1065,  1068,  1071,
  1074,  1077,  1080,  1083,  1086,  1089,  1092,  1095,  1098,  1101,
  1105,  1107,  1112,  1114,  1118,  1121,  1124,  1127,  1128,  1130,
  1131,  1132,  1144,  1145,  1146,  1158,  1165,  1172,  1173,  1174,
  1185,  1186,  1187,  1198,  1204,  1210,  1215,  1220,  1221,  1223,
  1225,  1228,  1234,  1238,  1241,  1246,  1248,  1252,  1257,  1264,
  1265,  1274,  1279,  1281,  1285,  1288,  1290,  1295,  1297,  1299,
  1302,  1305,  1307,  1310,  1312,  1315,  1317,  1319,  1321,  1324,
  1326,  1329,  1332,  1336,  1338,  1342,  1344,  1348,  1350,  1352,
  1356,  1357,  1360,  1361,  1366,  1371,  1373,  1375,  1378,  1380,
  1382,  1385,  1386,  1388,  1394,  1397,  1401,  1405,  1410,  1414,
  1419,  1424,  1430,  1432,  1434,  1436,  1438,  1440,  1442,  1444,
  1446,  1448,  1450,  1452,  1454,  1457,  1460,  1468,  1475,  1478,
  1479,  1480,  1491,  1492,  1499,  1501,  1503,  1505,  1507,  1510,
  1512,  1514,  1516,  1518,  1520,  1522,  1524,  1528,  1530,  1531,
  1535,  1538,  1541,  1543,  1545,  1547,  1549,  1551,  1553,  1555,
  1557,  1559,  1561,  1565,  1567,  1569,  1572,  1575,  1576,  1579,
  1580,  1585,  1586,  1593,  1594,  1598,  1599,  1605,  1609,  1612,
  1616,  1617,  1618,  1619,  1620,  1621,  1623,  1626,  1629,  1633,
  1636,  1640,  1644,  1649,  1652,  1655,  1659,  1663,  1668,  1670,
  1673,  1675,  1678,  1680,  1683,  1685,  1688,  1690,  1693,  1695,
  1700,  1703,  1704,  1710,  1711,  1718,  1723,  1728,  1729,  1730,
  1741,  1743,  1744,  1749,  1751,  1753,  1755,  1757,  1759,  1762,
  1764,  1768,  1770,  1775,  1779,  1784,  1791,  1797,  1803,  1806,
  1809,  1811,  1814,  1817,  1820,  1823,  1826,  1829,  1832,  1835,
  1837,  1839,  1844,  1846,  1850,  1854,  1858,  1860,  1864,  1868,
  1870,  1874,  1878,  1880,  1884,  1888,  1892,  1896,  1898,  1902,
  1906,  1908,  1912,  1914,  1918,  1920,  1924,  1926,  1930,  1932,
  1936,  1938,  1939,  1940,  1948,  1950,  1954,  1958,  1962,  1966,
  1970,  1974,  1978,  1982,  1986,  1990,  1994,  1996,  1997,  1999,
  2002,  2010,  2013,  2016,  2024,  2031,  2034,  2038,  2041,  2045,
  2048,  2052,  2056,  2060,  2064,  2067,  2071,  2072,  2074,  2076,
  2078,  2080,  2082,  2084,  2086,  2088
};

static const short yyrhs[] = {    -1,
   193,     0,   194,     0,   193,   194,     0,   254,   444,     0,
   195,     0,   196,     0,   206,     0,   209,     0,   291,     0,
     1,     0,    76,   329,   342,   352,   342,   444,   299,    89,
     0,    76,   329,   342,   352,   342,    23,   299,   304,   303,
   444,    89,     0,     0,    77,   197,   198,   444,    89,     0,
   199,     0,   329,   342,   199,     0,   203,     0,   356,   203,
     0,   446,     0,   299,    24,   342,   352,   299,    25,     0,
   200,    26,    27,     0,   200,    26,   299,   290,    27,   342,
     0,     0,   200,   300,    24,    25,   201,   226,     0,     0,
   200,   300,    24,   353,    25,   202,   226,     0,   446,     0,
   299,    24,   342,   199,   299,    25,     0,   203,    26,    27,
     0,   203,    26,   299,   290,    27,   342,     0,     0,   203,
   300,    24,    25,   204,   227,     0,     0,   203,   300,    24,
   353,    25,   205,   227,     0,     0,     0,    78,   446,    24,
   353,    25,   207,   227,   208,   444,    89,     0,    90,   383,
    93,     0,    91,   369,    93,     0,    92,   370,    93,     0,
    90,    93,     0,   249,     0,   212,    23,   215,     0,     0,
   223,   213,    22,   216,     0,     0,     5,   214,    22,   216,
     0,   212,     0,   212,    40,   215,     0,   191,     0,   218,
   182,   217,     0,   218,     0,   221,   220,   221,     0,   179,
     0,   180,     0,    52,     0,    51,     0,    53,     0,   222,
     0,   224,    24,   221,    25,     0,    24,   221,   225,   221,
    25,     0,   223,     0,   187,     0,   445,     0,   184,     0,
   223,    26,    27,     0,   223,    26,   187,    27,     0,    34,
   223,     0,    24,   223,    25,     0,   223,    28,   446,     0,
   223,    44,   446,     0,   219,     0,    33,     0,    32,     0,
     0,   228,   226,     0,     0,   229,   227,     0,   230,     0,
   234,     0,   233,     0,   307,     0,   310,     0,   240,     0,
   231,     0,   235,     0,   233,     0,   308,     0,   312,     0,
   241,     0,   231,    89,     0,     0,    73,   232,   242,   444,
     0,    75,     0,   235,    89,     0,     0,    74,   236,   255,
     0,   238,     0,   238,    40,   237,     0,   184,     0,   240,
     0,     0,   241,    89,     0,    72,   237,   420,     0,    72,
   237,     0,   243,     0,   242,    21,   243,     0,   244,   245,
     0,     0,   246,   244,     0,   445,     0,   184,     0,   291,
     0,    87,     0,    88,     0,   117,     0,   118,     0,   131,
     0,    79,     0,    80,     0,    81,     0,    82,     0,    83,
     0,    84,     0,    85,     0,   352,     0,   329,   342,   352,
     0,     0,    19,   251,   400,     0,     0,     0,   252,   404,
   253,   393,     0,   210,   250,     0,   258,   444,     0,   444,
     0,   445,     0,   184,     0,   256,    26,    27,     0,   256,
    26,   257,    27,     0,    34,   256,     0,    24,   256,    25,
     0,   256,    28,   446,     0,   256,    44,   446,     0,   256,
     0,   420,     0,   256,     0,   258,    21,   256,     0,   445,
     0,   184,     0,   259,    26,    27,     0,   259,    26,   257,
    27,     0,    34,   259,     0,    24,   259,    25,     0,   259,
    28,   446,     0,   259,    44,   446,     0,     0,   261,     0,
   259,     0,   261,    21,   259,     0,   445,     0,   184,     0,
   420,     0,    24,   288,    25,     0,   185,     0,   112,     0,
   262,     0,   263,    26,   288,    27,     0,   263,    24,    25,
     0,   263,    24,   264,    25,     0,    70,    24,   287,    21,
   364,    25,     0,   263,   342,    28,   446,   299,     0,   263,
   342,    44,   446,   299,     0,   263,    47,     0,   263,    48,
     0,   287,     0,   264,    21,   287,     0,   263,     0,    47,
   265,     0,    48,   265,     0,    29,   271,     0,    34,   271,
     0,    33,   271,     0,    32,   271,     0,    31,   271,     0,
    30,   271,     0,   268,     0,   267,     0,   266,    28,   446,
     0,   446,     0,    46,   299,    24,   364,   342,    21,   266,
    25,   299,     0,     0,   299,   269,   270,     0,    42,    24,
   364,    25,     0,    42,   265,     0,    43,    24,   364,    25,
     0,    43,   265,     0,   265,     0,    24,   364,    25,   271,
     0,   271,     0,   272,    34,   271,     0,   272,    35,   271,
     0,   272,    36,   271,     0,   272,     0,   273,    33,   272,
     0,   273,    32,   272,     0,   273,     0,   274,    49,   273,
     0,   274,    50,   273,     0,   274,     0,   275,    37,   274,
     0,   275,    38,   274,     0,   275,    51,   274,     0,   275,
    52,   274,     0,   275,     0,   276,    53,   275,     0,   276,
    54,   275,     0,   276,     0,   277,    29,   276,     0,   277,
     0,   278,    39,   277,     0,   278,     0,   279,    40,   278,
     0,   279,     0,     0,   280,    55,   281,   279,     0,   280,
     0,     0,   282,    56,   283,   280,     0,   282,     0,     0,
     0,   282,    41,   285,   288,    22,   286,   284,     0,   284,
     0,   265,    23,   287,     0,   265,    57,   287,     0,   265,
    58,   287,     0,   265,    59,   287,     0,   265,    60,   287,
     0,   265,    61,   287,     0,   265,    62,   287,     0,   265,
    63,   287,     0,   265,    64,   287,     0,   265,    65,   287,
     0,   265,    66,   287,     0,   287,     0,   288,    21,   287,
     0,     0,   288,     0,   284,     0,   292,     0,    71,     0,
   297,     0,   329,   299,    18,     0,     0,   329,   342,   352,
   342,   293,   299,   303,    18,   299,     0,     0,   329,   342,
   352,   342,    23,   294,   299,   304,   303,    18,   299,     0,
   352,   342,     0,     0,   352,   342,    23,   296,   299,   304,
     0,     0,    45,   329,   298,   342,   301,   299,   239,    18,
     0,    45,   329,   299,    18,     0,    45,   301,   299,    18,
     0,     0,     0,   302,   299,     0,   295,     0,   301,    21,
   342,   295,     0,     0,   303,    21,   342,   295,     0,   287,
     0,    19,   305,    20,     0,    19,   305,    21,    20,     0,
   304,     0,   305,    21,   304,     0,   113,     0,   111,     0,
   114,     0,   115,     0,   116,     0,   176,   299,     0,   308,
    89,     0,     0,   247,   342,   309,   261,   444,   299,     0,
   312,    89,     0,   248,   342,     0,     0,   311,   318,   313,
   260,   444,   299,     0,     0,   311,   314,   315,   444,   299,
     0,   217,     0,   211,     0,   140,     0,   141,     0,   143,
     0,   144,     0,   142,     0,   125,     0,   128,     0,   126,
     0,   127,     0,   133,     0,   134,     0,   119,     0,   121,
     0,   120,     0,   129,     0,   130,     0,   122,     0,   124,
     0,   137,     0,   139,     0,   152,     0,   151,     0,   136,
     0,   138,     0,   176,     0,   186,     0,   135,     0,   150,
     0,   149,     0,   159,     0,   157,     0,   158,     0,   153,
     0,   154,     0,   155,     0,   156,     0,   160,     0,   161,
     0,   164,     0,   165,     0,   162,     0,   163,     0,   148,
     0,   145,     0,   146,     0,   147,     0,   117,     0,   118,
     0,   131,     0,   132,     0,   109,   299,     0,   110,   299,
     0,   325,   299,     0,   318,   299,     0,   316,   299,     0,
   319,   299,     0,   317,   299,     0,   321,   299,     0,   320,
   299,     0,   322,   299,     0,   323,   299,     0,   166,   342,
     0,   168,   342,     0,   167,   342,     0,   169,   342,     0,
   170,   342,     0,   171,   342,     0,   172,   342,     0,   173,
   342,     0,   174,   342,     0,   175,   342,     0,   447,   342,
     0,   333,   342,     0,   347,   342,     0,   324,   342,     0,
   299,   329,   299,     0,   331,     0,   331,    86,   330,    89,
     0,   364,     0,   364,    21,   330,     0,   306,   332,     0,
   326,   332,     0,   327,   332,     0,     0,   329,     0,     0,
     0,   342,    67,   446,   299,    19,   334,   397,   343,   398,
   335,    20,     0,     0,     0,   342,    68,   446,   299,    19,
   336,   397,   343,   398,   337,    20,     0,   342,    67,   446,
   299,    19,    20,     0,   342,    68,   446,   299,    19,    20,
     0,     0,     0,   342,    67,   299,    19,   338,   397,   343,
   398,   339,    20,     0,     0,     0,   342,    68,   299,    19,
   340,   397,   343,   398,   341,    20,     0,   342,    67,   299,
    19,    20,     0,   342,    68,   299,    19,    20,     0,   342,
    67,   446,   342,     0,   342,    68,   446,   342,     0,     0,
   344,     0,   209,     0,   343,   344,     0,   329,   342,   345,
   299,    18,     0,   329,   299,    18,     0,   346,   342,     0,
   345,    21,   346,   342,     0,   352,     0,    22,   299,   290,
     0,   352,    22,   299,   290,     0,   342,    69,    19,   349,
    20,   299,     0,     0,   342,    69,   446,    19,   348,   349,
    20,   299,     0,   342,    69,   446,   299,     0,   350,     0,
   349,    21,   350,     0,   349,    21,     0,   446,     0,   446,
    23,   299,   290,     0,   200,     0,   366,     0,   356,   190,
     0,   356,   351,     0,   200,     0,   356,   200,     0,   359,
     0,   342,   357,     0,   109,     0,   110,     0,   354,     0,
   355,   354,     0,    34,     0,    34,   355,     0,    34,   356,
     0,    34,   355,   356,     0,   358,     0,   358,    21,     5,
     0,   446,     0,   358,    21,   446,     0,     5,     0,   360,
     0,   360,    21,     5,     0,     0,   361,   363,     0,     0,
   360,    21,   362,   363,     0,   299,   329,   351,   299,     0,
   446,     0,   328,     0,   328,   365,     0,   356,     0,   367,
     0,   356,   367,     0,     0,   367,     0,   299,    24,   342,
   365,    25,     0,    26,    27,     0,    26,   290,    27,     0,
   367,    26,    27,     0,   367,    26,   290,    27,     0,   299,
    24,    25,     0,   299,    24,   359,    25,     0,   367,   299,
    24,    25,     0,   367,   299,    24,   359,    25,     0,   385,
     0,   387,     0,   390,     0,   393,     0,   406,     0,   409,
     0,   441,     0,   414,     0,   443,     0,   371,     0,   369,
     0,   378,     0,   371,   378,     0,   413,   371,     0,   440,
   384,    11,    24,   288,    25,    18,     0,   440,   384,    11,
    24,   288,    25,     0,   373,   378,     0,     0,     0,    13,
    24,   289,    18,   289,    18,   374,   289,   375,    25,     0,
     0,   188,   395,    24,   377,   417,    25,     0,   189,     0,
   385,     0,   387,     0,   390,     0,   381,   404,     0,   381,
     0,   382,     0,   406,     0,   379,     0,   372,     0,   376,
     0,   443,     0,    24,   378,    25,     0,     1,     0,     0,
   408,   380,   378,     0,   395,    19,     0,   399,    20,     0,
   384,     0,   403,     0,   385,     0,   387,     0,   390,     0,
   394,     0,   407,     0,   409,     0,   414,     0,   442,     0,
    24,   384,    25,     0,   443,     0,     1,     0,   446,    22,
     0,   108,   368,     0,     0,    99,   386,     0,     0,     6,
   290,   388,    22,     0,     0,    99,   386,     6,   290,   389,
    22,     0,     0,     7,   391,    22,     0,     0,    99,   386,
     7,   392,    22,     0,    24,   393,    25,     0,   395,   401,
     0,   395,   402,   396,     0,     0,     0,     0,     0,     0,
    20,     0,   108,    20,     0,   405,    20,     0,   405,   108,
    20,     0,   404,    20,     0,   404,   108,    20,     0,   404,
   405,    20,     0,   404,   405,   108,    20,     0,    19,   400,
     0,    19,    20,     0,    19,   403,    20,     0,    19,   404,
    20,     0,    19,   404,   405,    20,     0,   384,     0,   403,
   384,     0,   291,     0,   404,   291,     0,   368,     0,   405,
   368,     0,    18,     0,   288,    18,     0,    18,     0,   288,
    18,     0,   288,     0,     8,    24,   288,    25,     0,   408,
   368,     0,     0,   408,   368,     9,   410,   368,     0,     0,
    10,    24,   288,   411,    25,   368,     0,    11,    24,   288,
    25,     0,    11,    24,   288,    25,     0,     0,     0,   188,
   415,   395,    24,   416,   417,    25,   393,   439,   396,     0,
   419,     0,     0,   417,   418,    21,   419,     0,   438,     0,
   445,     0,   185,     0,   184,     0,   187,     0,   420,   187,
     0,   420,     0,    24,   288,    25,     0,   421,     0,   263,
    26,   288,    27,     0,   263,    24,    25,     0,   263,    24,
   264,    25,     0,    70,    24,   287,    21,   364,    25,     0,
   263,   342,    28,   446,   299,     0,   263,   342,    44,   446,
   299,     0,   263,    47,     0,   263,    48,     0,   422,     0,
    47,   265,     0,    48,   265,     0,    29,   271,     0,    34,
   271,     0,    33,   271,     0,    32,   271,     0,    31,   271,
     0,    30,   271,     0,   268,     0,   423,     0,    24,   364,
    25,   271,     0,   424,     0,   272,    34,   271,     0,   272,
    35,   271,     0,   272,    36,   271,     0,   425,     0,   273,
    33,   272,     0,   273,    32,   272,     0,   426,     0,   274,
    49,   273,     0,   274,    50,   273,     0,   427,     0,   275,
    37,   274,     0,   275,    38,   274,     0,   275,    51,   274,
     0,   275,    52,   274,     0,   428,     0,   276,    53,   275,
     0,   276,    54,   275,     0,   429,     0,   277,    29,   276,
     0,   430,     0,   278,    39,   277,     0,   431,     0,   279,
    40,   278,     0,   432,     0,   280,    55,   279,     0,   433,
     0,   282,    56,   280,     0,   434,     0,     0,     0,   282,
    41,   436,   288,    22,   437,   284,     0,   435,     0,   265,
    23,   287,     0,   265,    57,   287,     0,   265,    58,   287,
     0,   265,    59,   287,     0,   265,    60,   287,     0,   265,
    61,   287,     0,   265,    62,   287,     0,   265,    63,   287,
     0,   265,    64,   287,     0,   265,    65,   287,     0,   265,
    66,   287,     0,   189,     0,     0,    12,     0,   412,   368,
     0,   440,   368,    11,    24,   288,    25,    18,     0,   373,
   368,     0,   412,   384,     0,   440,   384,    11,    24,   288,
    25,    18,     0,   440,   384,    11,    24,   288,    25,     0,
   373,   384,     0,    14,   446,    18,     0,    15,    18,     0,
    98,    15,    18,     0,    16,    18,     0,    94,    16,    18,
     0,    95,    16,    18,     0,    96,    16,    18,     0,    97,
    16,    18,     0,    17,    18,     0,    17,   288,    18,     0,
     0,    18,     0,   183,     0,   184,     0,   188,     0,   189,
     0,   445,     0,   185,     0,   190,     0,   185,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   317,   318,   321,   322,   325,   326,   327,   328,   329,   330,
   331,   334,   336,   340,   340,   347,   353,   357,   358,   362,
   363,   365,   367,   379,   382,   392,   395,   403,   404,   406,
   408,   424,   427,   435,   438,   446,   448,   448,   452,   453,
   454,   455,   458,   461,   465,   465,   468,   468,   473,   474,
   477,   482,   483,   486,   491,   492,   495,   496,   497,   500,
   501,   502,   507,   508,   511,   513,   515,   517,   526,   528,
   530,   532,   548,   552,   553,   560,   561,   569,   571,   575,
   576,   577,   578,   579,   580,   583,   584,   585,   586,   587,
   588,   591,   594,   595,   602,   605,   608,   614,   622,   624,
   628,   631,   632,   635,   638,   644,   648,   649,   652,   655,
   656,   659,   660,   661,   664,   665,   666,   667,   668,   671,
   672,   673,   674,   675,   678,   679,   682,   688,   692,   694,
   698,   699,   701,   708,   718,   719,   722,   723,   724,   725,
   726,   727,   728,   729,   733,   734,   738,   739,   742,   744,
   746,   747,   748,   749,   750,   752,   756,   757,   760,   764,
   776,   777,   778,   779,   780,   781,   784,   785,   786,   787,
   788,   789,   790,   791,   792,   795,   796,   799,   800,   801,
   802,   803,   804,   805,   806,   807,   808,   809,   812,   813,
   816,   820,   821,   824,   825,   826,   827,   830,   831,   835,
   836,   837,   838,   841,   842,   843,   846,   847,   848,   851,
   852,   853,   854,   855,   858,   859,   860,   863,   864,   867,
   868,   872,   873,   876,   877,   882,   888,   889,   895,   901,
   902,   902,   904,   907,   908,   909,   910,   911,   912,   913,
   914,   915,   916,   917,   918,   921,   922,   925,   926,   929,
   934,   935,   936,   939,   953,   958,   964,   966,   972,   977,
   977,   981,   982,   984,   985,   988,   991,   994,   997,   998,
  1001,  1002,  1005,  1006,  1007,  1011,  1013,  1022,  1023,  1024,
  1025,  1026,  1028,  1032,  1035,  1041,  1050,  1053,  1056,  1063,
  1070,  1076,  1101,  1102,  1105,  1106,  1107,  1108,  1109,  1112,
  1113,  1114,  1115,  1118,  1119,  1120,  1121,  1122,  1123,  1124,
  1125,  1126,  1127,  1128,  1129,  1130,  1131,  1132,  1133,  1134,
  1138,  1139,  1142,  1143,  1146,  1147,  1150,  1151,  1152,  1153,
  1156,  1157,  1158,  1159,  1160,  1161,  1164,  1165,  1166,  1167,
  1170,  1171,  1172,  1173,  1176,  1177,  1178,  1179,  1180,  1181,
  1182,  1183,  1184,  1185,  1186,  1193,  1194,  1195,  1196,  1197,
  1198,  1199,  1200,  1201,  1202,  1203,  1204,  1205,  1206,  1209,
  1213,  1214,  1218,  1219,  1223,  1224,  1225,  1228,  1229,  1232,
  1234,  1236,  1237,  1239,  1241,  1242,  1244,  1246,  1248,  1250,
  1251,  1252,  1255,  1256,  1258,  1260,  1261,  1264,  1267,  1268,
  1269,  1272,  1274,  1278,  1280,  1284,  1285,  1286,  1290,  1292,
  1292,  1294,  1297,  1299,  1301,  1304,  1309,  1316,  1317,  1318,
  1325,  1329,  1330,  1334,  1335,  1338,  1339,  1342,  1343,  1346,
  1347,  1348,  1349,  1352,  1353,  1356,  1357,  1360,  1361,  1362,
  1365,  1365,  1366,  1367,  1370,  1382,  1398,  1399,  1402,  1403,
  1404,  1407,  1408,  1411,  1413,  1414,  1416,  1417,  1419,  1421,
  1423,  1425,  1431,  1432,  1433,  1434,  1435,  1436,  1437,  1438,
  1439,  1442,  1445,  1448,  1449,  1453,  1455,  1457,  1459,  1463,
  1464,  1466,  1470,  1472,  1474,  1477,  1478,  1479,  1480,  1481,
  1482,  1483,  1484,  1485,  1486,  1487,  1488,  1489,  1492,  1493,
  1498,  1501,  1504,  1505,  1508,  1509,  1510,  1511,  1512,  1513,
  1514,  1515,  1516,  1517,  1518,  1521,  1522,  1529,  1530,  1536,
  1537,  1538,  1539,  1542,  1543,  1544,  1545,  1548,  1549,  1553,
  1556,  1559,  1562,  1565,  1568,  1571,  1572,  1573,  1574,  1576,
  1577,  1579,  1581,  1587,  1591,  1593,  1595,  1597,  1601,  1602,
  1605,  1606,  1609,  1610,  1613,  1614,  1617,  1618,  1619,  1622,
  1635,  1640,  1641,  1645,  1646,  1649,  1654,  1657,  1658,  1659,
  1667,  1668,  1668,  1672,  1673,  1674,  1685,  1692,  1693,  1696,
  1697,  1700,  1701,  1702,  1703,  1704,  1706,  1707,  1708,  1709,
  1712,  1713,  1714,  1715,  1716,  1717,  1718,  1719,  1720,  1721,
  1724,  1725,  1728,  1729,  1730,  1731,  1734,  1735,  1736,  1739,
  1740,  1741,  1744,  1745,  1746,  1747,  1748,  1751,  1752,  1753,
  1756,  1757,  1760,  1761,  1765,  1766,  1769,  1770,  1773,  1774,
  1777,  1778,  1779,  1780,  1783,  1784,  1785,  1786,  1787,  1788,
  1789,  1790,  1791,  1792,  1793,  1794,  1797,  1798,  1801,  1804,
  1806,  1808,  1812,  1813,  1815,  1817,  1820,  1821,  1822,  1824,
  1825,  1826,  1827,  1828,  1829,  1830,  1833,  1834,  1837,  1840,
  1841,  1842,  1843,  1844,  1847,  1848
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","BADTOK",
"SKIPTOK","CTOK_ELIPSIS","CASE","DEFAULT","CIF","CELSE","SWITCH","WHILE","DO",
"CFOR","GOTO","CONTINUE","BREAK","RETURN","TSEMI","TLBRACE","TRBRACE","TCOMMA",
"TCOLON","TASSIGN","TLPAREN","TRPAREN","TLSQBR","TRSQBR","TDOT","TAMPERSAND",
"TEXCL","TTILDE","TMINUS","TPLUS","TMULT","TDIV","TPERCENT","TLT","TGT","TCIRC",
"TBAR","TQUEST","CSIZEOF","CALIGNOF","ARROW_OP","CTYPEDEF","COFFSETOF","INC_OP",
"DEC_OP","LEFT_OP","RIGHT_OP","LE_OP","GE_OP","EQ_OP","NE_OP","AND_OP","OR_OP",
"MUL_ASSIGN","DIV_ASSIGN","MOD_ASSIGN","ADD_ASSIGN","SUB_ASSIGN","LEFT_ASSIGN",
"RIGHT_ASSIGN","AND_ASSIGN","XOR_ASSIGN","OR_ASSIGN","CSTRUCT","CUNION","CENUM",
"VA_ARG","VA_DCL","QWARN","QGLOBALS","QMODIFIES","QNOMODS","QCONSTANT","QFUNCTION",
"QITER","QDEFINES","QUSES","QALLOCATES","QSETS","QRELEASES","QPRECLAUSE","QPOSTCLAUSE",
"QALT","QUNDEF","QKILLED","QENDMACRO","LLMACRO","LLMACROITER","LLMACROEND","TENDMACRO",
"QSWITCHBREAK","QLOOPBREAK","QINNERBREAK","QSAFEBREAK","QINNERCONTINUE","QFALLTHROUGH",
"QLINTNOTREACHED","QLINTFALLTHROUGH","QLINTFALLTHRU","QARGSUSED","QPRINTFLIKE",
"QLINTPRINTFLIKE","QSCANFLIKE","QMESSAGELIKE","QNOTREACHED","QCONST","QVOLATILE",
"QINLINE","QEXTENSION","QEXTERN","QSTATIC","QAUTO","QREGISTER","QOUT","QIN",
"QYIELD","QONLY","QTEMP","QSHARED","QREF","QUNIQUE","QCHECKED","QUNCHECKED",
"QCHECKEDSTRICT","QCHECKMOD","QKEEP","QKEPT","QPARTIAL","QSPECIAL","QOWNED",
"QDEPENDENT","QRETURNED","QEXPOSED","QNULL","QOBSERVER","QISNULL","QEXITS","QMAYEXIT",
"QNEVEREXIT","QTRUEEXIT","QFALSEEXIT","QLONG","QSIGNED","QUNSIGNED","QSHORT",
"QUNUSED","QSEF","QNOTNULL","QRELNULL","QABSTRACT","QCONCRETE","QMUTABLE","QIMMUTABLE",
"QTRUENULL","QFALSENULL","QEXTERNAL","QREFCOUNTED","QREFS","QNEWREF","QTEMPREF",
"QKILLREF","QRELDEF","CGCHAR","CBOOL","CINT","CGFLOAT","CDOUBLE","CVOID","QANYTYPE",
"QINTEGRALTYPE","QUNSIGNEDINTEGRALTYPE","QSIGNEDINTEGRALTYPE","QNULLTERMINATED",
"QSETBUFFERSIZE","QSETSTRINGLENGTH","QMAXSET","QMAXREAD","QTESTINRANGE","TCAND",
"IDENTIFIER","NEW_IDENTIFIER","TYPE_NAME_OR_ID","CANNOTATION","CCONSTANT","ITER_NAME",
"ITER_ENDNAME","TYPE_NAME","METASTATE_NAME","file","externalDefs","externalDef",
"constantDecl","fcnDecl","@1","plainFcn","plainNamedDecl","namedDeclBase","@2",
"@3","plainNamedDeclBase","@4","@5","iterDecl","@6","@7","macroDef","fcnDefHdr",
"metaStateConstraint","metaStateSpecifier","@8","@9","metaStateExpression","metaStateName",
"BufConstraintList","BufConstraint","bufferModifier","relationalOp","BufConstraintExpr",
"BufConstraintTerm","BufConstraintSrefExpr","BufUnaryOp","BufBinaryOp","functionClauses",
"functionClausesPlain","functionClause","functionClausePlain","globalsClause",
"globalsClausePlain","@10","nomodsClause","modifiesClause","modifiesClausePlain",
"@11","flagSpec","flagId","optWarnClause","warnClause","warnClausePlain","globIdList",
"globIdListExpr","optGlobQuals","globId","globQual","stateTag","conditionTag",
"fcnDefHdrAux","fcnBody","@12","@13","@14","fcnDef","locModifies","modListExpr",
"mExpr","modList","specClauseListExpr","optSpecClauseList","specClauseList",
"primaryExpr","postfixExpr","argumentExprList","unaryExpr","fieldDesignator",
"offsetofExpr","sizeofExpr","@15","sizeofExprAux","castExpr","timesExpr","plusExpr",
"shiftExpr","relationalExpr","equalityExpr","bitandExpr","xorExpr","bitorExpr",
"andExpr","@16","orExpr","@17","conditionalExpr","@18","@19","assignExpr","expr",
"optExpr","constantExpr","initializer","instanceDecl","@20","@21","namedInitializer",
"@22","typeDecl","@23","IsType","PushType","namedInitializerList","namedInitializerListAux",
"optDeclarators","init","initList","storageSpecifier","stateClause","stateClausePlain",
"@24","conditionClause","startConditionClause","conditionClausePlain","@25",
"@26","functionConstraint","exitsQualifier","checkQualifier","stateQualifier",
"paramQualifier","visibilityQualifier","returnQualifier","typedefQualifier",
"refcountQualifier","typeModifier","definedQualifier","typeQualifier","typeSpecifier",
"completeType","completeTypeSpecifier","altType","completeTypeSpecifierAux",
"optCompleteType","suSpc","@27","@28","@29","@30","@31","@32","@33","@34","NotType",
"structDeclList","structDecl","structNamedDeclList","structNamedDecl","enumSpc",
"@35","enumeratorList","enumerator","optNamedDecl","namedDecl","genericParamList",
"innerMods","innerModsList","pointers","paramIdList","idList","paramTypeList",
"paramList","@36","@37","paramDecl","typeExpression","abstractDecl","optAbstractDeclBase",
"abstractDeclBase","stmt","iterBody","endBody","iterDefStmtList","iterDefIterationStmt",
"forPred","@38","@39","partialIterStmt","@40","iterDefStmt","iterSelectionStmt",
"@41","openScope","closeScope","macroBody","stmtErr","labeledStmt","optExtraFallThroughs",
"caseStmt","@42","@43","defaultStmt","@44","@45","compoundStmt","compoundStmtErr",
"CreateInnerScope","DeleteInnerScope","CreateStructInnerScope","DeleteStructInnerScope",
"DeleteInnerScopeSafe","compoundStmtRest","compoundStmtAux","compoundStmtAuxErr",
"stmtListErr","initializerList","stmtList","expressionStmt","expressionStmtErr",
"ifPred","selectionStmt","@46","@47","whilePred","iterWhilePred","iterStmt",
"@48","@49","iterArgList","@50","iterArgExpr","cconstantExpr","primaryIterExpr",
"postfixIterExpr","unaryIterExpr","castIterExpr","timesIterExpr","plusIterExpr",
"shiftIterExpr","relationalIterExpr","equalityIterExpr","bitandIterExpr","xorIterExpr",
"bitorIterExpr","andIterExpr","orIterExpr","conditionalIterExpr","@51","@52",
"assignIterExpr","endIter","doHeader","iterationStmt","iterationStmtErr","jumpStmt",
"optSemi","id","newId","typeName", NULL
};
#endif

static const short yyr1[] = {     0,
   192,   192,   193,   193,   194,   194,   194,   194,   194,   194,
   194,   195,   195,   197,   196,   198,   198,   199,   199,   200,
   200,   200,   200,   201,   200,   202,   200,   203,   203,   203,
   203,   204,   203,   205,   203,   207,   208,   206,   209,   209,
   209,   209,   210,   211,   213,   212,   214,   212,   215,   215,
   216,   217,   217,   218,   219,   219,   220,   220,   220,   221,
   221,   221,   222,   222,   223,   223,   223,   223,   223,   223,
   223,   223,   224,   225,   225,   226,   226,   227,   227,   228,
   228,   228,   228,   228,   228,   229,   229,   229,   229,   229,
   229,   230,   232,   231,   233,   234,   236,   235,   237,   237,
   238,   239,   239,   240,   241,   241,   242,   242,   243,   244,
   244,   245,   245,   245,   246,   246,   246,   246,   246,   247,
   247,   247,   247,   247,   248,   248,   249,   249,   251,   250,
   252,   253,   250,   254,   255,   255,   256,   256,   256,   256,
   256,   256,   256,   256,   257,   257,   258,   258,   259,   259,
   259,   259,   259,   259,   259,   259,   260,   260,   261,   261,
   262,   262,   262,   262,   262,   262,   263,   263,   263,   263,
   263,   263,   263,   263,   263,   264,   264,   265,   265,   265,
   265,   265,   265,   265,   265,   265,   265,   265,   266,   266,
   267,   269,   268,   270,   270,   270,   270,   271,   271,   272,
   272,   272,   272,   273,   273,   273,   274,   274,   274,   275,
   275,   275,   275,   275,   276,   276,   276,   277,   277,   278,
   278,   279,   279,   280,   281,   280,   282,   283,   282,   284,
   285,   286,   284,   287,   287,   287,   287,   287,   287,   287,
   287,   287,   287,   287,   287,   288,   288,   289,   289,   290,
   291,   291,   291,   292,   293,   292,   294,   292,   295,   296,
   295,   298,   297,   297,   297,   299,   300,   301,   302,   302,
   303,   303,   304,   304,   304,   305,   305,   306,   306,   306,
   306,   306,    -1,   307,   309,   308,   310,   311,   313,   312,
   314,   312,   315,   315,   316,   316,   316,   316,   316,   317,
   317,   317,   317,   318,   318,   318,   318,   318,   318,   318,
   318,   318,   318,   318,   318,   318,   318,   318,   318,   318,
   319,   319,   320,   320,   321,   321,   322,   322,   322,   322,
   323,   323,   323,   323,   323,   323,   324,   324,   324,   324,
   325,   325,   325,   325,   326,   326,   326,   326,   326,   326,
   326,   326,   326,   326,   326,   327,   327,   327,   327,   327,
   327,   327,   327,   327,   327,   327,   327,   327,   327,   328,
   329,   329,   330,   330,   331,   331,   331,   332,   332,   334,
   335,   333,   336,   337,   333,   333,   333,   338,   339,   333,
   340,   341,   333,   333,   333,   333,   333,   342,   343,   343,
   343,   344,   344,   345,   345,   346,   346,   346,   347,   348,
   347,   347,   349,   349,   349,   350,   350,   351,   351,   351,
   351,   352,   352,   353,   353,   354,   354,   355,   355,   356,
   356,   356,   356,   357,   357,   358,   358,   359,   359,   359,
   361,   360,   362,   360,   363,   363,   364,   364,   365,   365,
   365,   366,   366,   367,   367,   367,   367,   367,   367,   367,
   367,   367,   368,   368,   368,   368,   368,   368,   368,   368,
   368,   369,   370,   371,   371,   372,   372,   372,   372,   374,
   375,   373,   377,   376,   376,   378,   378,   378,   378,   378,
   378,   378,   378,   378,   378,   378,   378,   378,   380,   379,
   381,   382,   383,   383,   384,   384,   384,   384,   384,   384,
   384,   384,   384,   384,   384,   385,   385,   386,   386,   388,
   387,   389,   387,   391,   390,   392,   390,   393,   393,   394,
   395,   396,   397,   398,   399,   400,   400,   400,   400,   400,
   400,   400,   400,   401,   402,   402,   402,   402,   403,   403,
   404,   404,   405,   405,   406,   406,   407,   407,   407,   408,
   409,   410,   409,   411,   409,   412,   413,   415,   416,   414,
   417,   418,   417,   419,   419,   419,   419,   420,   420,   421,
   421,   422,   422,   422,   422,   422,   422,   422,   422,   422,
   423,   423,   423,   423,   423,   423,   423,   423,   423,   423,
   424,   424,   425,   425,   425,   425,   426,   426,   426,   427,
   427,   427,   428,   428,   428,   428,   428,   429,   429,   429,
   430,   430,   431,   431,   432,   432,   433,   433,   434,   434,
   435,   436,   437,   435,   438,   438,   438,   438,   438,   438,
   438,   438,   438,   438,   438,   438,   439,   439,   440,   441,
   441,   441,   442,   442,   442,   442,   443,   443,   443,   443,
   443,   443,   443,   443,   443,   443,   444,   444,   445,   446,
   446,   446,   446,   446,   447,   447
};

static const short yyr2[] = {     0,
     0,     1,     1,     2,     2,     1,     1,     1,     1,     1,
     1,     8,    11,     0,     5,     1,     3,     1,     2,     1,
     6,     3,     6,     0,     6,     0,     7,     1,     6,     3,
     6,     0,     6,     0,     7,     0,     0,    10,     3,     3,
     3,     2,     1,     3,     0,     4,     0,     4,     1,     3,
     1,     3,     1,     3,     1,     1,     1,     1,     1,     1,
     4,     5,     1,     1,     1,     1,     3,     4,     2,     3,
     3,     3,     1,     1,     1,     0,     2,     0,     2,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     2,     0,     4,     1,     2,     0,     3,     1,     3,
     1,     1,     0,     2,     3,     2,     1,     3,     2,     0,
     2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     3,     0,     3,
     0,     0,     4,     2,     2,     1,     1,     1,     3,     4,
     2,     3,     3,     3,     1,     1,     1,     3,     1,     1,
     3,     4,     2,     3,     3,     3,     0,     1,     1,     3,
     1,     1,     1,     3,     1,     1,     1,     4,     3,     4,
     6,     5,     5,     2,     2,     1,     3,     1,     2,     2,
     2,     2,     2,     2,     2,     2,     1,     1,     3,     1,
     9,     0,     3,     4,     2,     4,     2,     1,     4,     1,
     3,     3,     3,     1,     3,     3,     1,     3,     3,     1,
     3,     3,     3,     3,     1,     3,     3,     1,     3,     1,
     3,     1,     3,     1,     0,     4,     1,     0,     4,     1,
     0,     0,     7,     1,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     1,     3,     0,     1,     1,
     1,     1,     1,     3,     0,     9,     0,    11,     2,     0,
     6,     0,     8,     4,     4,     0,     0,     2,     1,     4,
     0,     4,     1,     3,     4,     1,     3,     1,     1,     1,
     1,     1,     2,     2,     0,     6,     2,     2,     0,     6,
     0,     5,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     3,
     1,     4,     1,     3,     2,     2,     2,     0,     1,     0,
     0,    11,     0,     0,    11,     6,     6,     0,     0,    10,
     0,     0,    10,     5,     5,     4,     4,     0,     1,     1,
     2,     5,     3,     2,     4,     1,     3,     4,     6,     0,
     8,     4,     1,     3,     2,     1,     4,     1,     1,     2,
     2,     1,     2,     1,     2,     1,     1,     1,     2,     1,
     2,     2,     3,     1,     3,     1,     3,     1,     1,     3,
     0,     2,     0,     4,     4,     1,     1,     2,     1,     1,
     2,     0,     1,     5,     2,     3,     3,     4,     3,     4,
     4,     5,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     2,     2,     7,     6,     2,     0,
     0,    10,     0,     6,     1,     1,     1,     1,     2,     1,
     1,     1,     1,     1,     1,     1,     3,     1,     0,     3,
     2,     2,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     3,     1,     1,     2,     2,     0,     2,     0,
     4,     0,     6,     0,     3,     0,     5,     3,     2,     3,
     0,     0,     0,     0,     0,     1,     2,     2,     3,     2,
     3,     3,     4,     2,     2,     3,     3,     4,     1,     2,
     1,     2,     1,     2,     1,     2,     1,     2,     1,     4,
     2,     0,     5,     0,     6,     4,     4,     0,     0,    10,
     1,     0,     4,     1,     1,     1,     1,     1,     2,     1,
     3,     1,     4,     3,     4,     6,     5,     5,     2,     2,
     1,     2,     2,     2,     2,     2,     2,     2,     2,     1,
     1,     4,     1,     3,     3,     3,     1,     3,     3,     1,
     3,     3,     1,     3,     3,     3,     3,     1,     3,     3,
     1,     3,     1,     3,     1,     3,     1,     3,     1,     3,
     1,     0,     0,     7,     1,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     1,     0,     1,     2,
     7,     2,     2,     7,     6,     2,     3,     2,     3,     2,
     3,     3,     3,     3,     2,     3,     0,     1,     1,     1,
     1,     1,     1,     1,     1,     1
};

static const short yydefact[] = {     0,
    11,   430,   398,   252,   398,    14,     0,     0,     0,     0,
   266,   266,   279,   278,   280,   281,   282,   341,   342,   306,
   308,   307,   311,   312,   300,   302,   303,   301,   309,   310,
   343,   344,   304,   305,   321,   317,   313,   318,   314,   295,
   296,   299,   297,   298,   338,   339,   340,   337,   323,   322,
   316,   315,   327,   328,   329,   330,   325,   326,   324,   331,
   332,   335,   336,   333,   334,   398,   398,   398,   398,   398,
   398,   398,   398,   398,   398,   319,   669,   670,   674,   320,
   671,   672,   675,     0,     3,     6,     7,   422,     8,     9,
   131,    43,   667,    10,   251,   253,     0,   378,   266,   266,
   266,   266,   266,   266,   266,   266,   398,   266,   378,   378,
   398,   371,   398,     0,   398,   127,   266,   673,    20,   398,
   426,   427,   428,   431,   432,   269,   266,   266,   262,   398,
   676,   398,   398,   674,     0,   515,   266,   524,     0,     0,
     0,   649,     0,     0,     0,     0,   266,   557,     0,   266,
   266,   266,   266,   266,   266,   266,   266,   266,     0,    42,
     0,     0,     0,     0,     0,   518,   266,   166,   162,   165,
   578,   568,   167,   178,   198,   188,   187,   200,   204,   207,
   210,   215,   218,   220,   222,   224,   227,   230,   234,   246,
   559,   192,     0,     0,   549,   505,   506,   507,   508,     0,
     0,   509,   266,   510,     0,   511,   163,     0,   512,   514,
   161,     0,   498,     0,   555,     0,   531,   485,     0,     0,
     0,   494,     0,   495,   474,   493,   490,   491,   486,   487,
   488,     0,     0,   492,   499,     0,     0,   496,   473,     0,
   345,   346,   356,   358,   357,   359,   360,   361,   362,   363,
   364,   365,     4,   266,     0,   129,   134,   398,   668,     5,
   398,   379,   375,   349,   351,   348,   350,   353,   352,   354,
   355,   369,   347,   376,   377,     0,   266,   266,   367,   266,
   266,     0,   368,   423,   366,   429,   433,   398,     0,   268,
   398,     0,   259,   266,   667,    16,    18,     0,   398,   266,
    28,   441,   266,   162,   165,   198,   250,   520,   161,     0,
   266,   266,   266,   266,     0,   658,   660,   665,     0,     0,
   398,   447,     0,     0,   181,   186,   185,   184,   183,   182,
     0,   266,   179,   180,   266,     0,     0,     0,     0,     0,
   518,     0,   266,   517,   266,   463,   464,   465,   466,     0,
   467,   468,   266,   470,   266,   469,   471,   531,   266,   266,
   174,   175,     0,   266,   266,   266,   266,   266,   266,   266,
   266,   266,   266,   266,   266,   266,   266,   266,   266,   266,
   266,   266,   266,   266,   266,   266,   266,   266,   266,   266,
   225,   231,   228,   558,   266,     0,   656,    39,     0,   532,
   550,   561,   653,   579,     0,   516,   266,     0,     0,     0,
   556,    40,   475,   479,   551,   398,   489,   501,   502,     0,
     0,     0,    41,    22,   266,   441,   398,   398,   266,   254,
   128,   398,     0,   373,     0,   398,     0,   398,     0,   266,
   266,   265,   266,   264,   260,   398,     0,   266,     0,   398,
   266,    19,   438,     0,     0,   424,   439,   266,     0,     0,
   525,     0,   564,     0,   249,     0,   657,   666,   164,   266,
   266,     0,   449,   448,   450,   266,   513,   266,     0,   661,
   662,   663,   664,   659,   519,   266,   526,     0,   652,   398,
   529,   650,     0,     0,   169,     0,   176,     0,     0,     0,
   235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
   245,   201,   202,   203,   206,   205,   208,   209,   211,   212,
   213,   214,   216,   217,   219,   221,   223,   266,   266,   266,
   247,   266,   266,   193,   545,   165,   549,     0,   398,   530,
   562,     0,     0,   497,   483,   266,   552,   500,     0,     0,
    24,     0,   536,   266,   553,   130,   398,   266,   531,   266,
   255,   372,   266,   388,     0,   396,   391,     0,   397,     0,
   413,   416,   410,   412,   270,   266,   266,   667,    15,    30,
   266,   441,   266,    17,   425,   434,   436,    36,   443,   398,
   442,   446,   521,   560,     0,   566,   266,   370,   455,     0,
   441,   451,   266,     0,   199,   398,   266,   522,     0,   528,
   544,     0,   569,   266,   170,   168,   266,   266,   226,     0,
   229,   266,   195,   266,   197,   546,   547,   266,   266,   266,
   567,   266,   398,   266,   398,    76,    26,   537,   540,   266,
   266,   538,   266,   554,   531,   133,     0,   257,   266,   374,
   394,   533,   380,   395,   533,   383,   266,   415,   266,     0,
   103,   266,   266,   266,     0,    32,     0,   266,     0,    78,
   440,   266,   452,   266,     0,   456,   459,   266,     0,   457,
     0,   441,     0,     0,     0,   527,   266,   266,   177,   172,
   173,   232,     0,     0,   548,   563,     0,   266,   266,   266,
   266,   266,   266,   266,   266,   266,     0,   162,   165,   178,
   198,   187,   204,   207,   210,   215,   218,   220,   222,   224,
   227,     0,   572,   571,   163,   582,   591,   601,   603,   607,
   610,   613,   618,   621,   623,   625,   627,   629,   631,   635,
   574,   161,     0,    23,     0,    93,    97,    95,   120,   121,
   122,   123,   124,   125,   126,    25,    76,    80,     0,    82,
    81,     0,    85,     0,   398,   398,    83,     0,    84,   291,
     0,    76,   541,   542,   266,   539,    21,   266,   271,   398,
   386,   533,   398,   387,   533,   409,   414,   266,     0,     0,
   102,   266,   273,   261,   266,     0,   398,    78,    34,     0,
   435,   437,    37,    78,    86,    88,    87,    91,    89,    90,
   444,   418,     0,   266,   452,   419,   453,   565,   480,     0,
   460,   458,   461,     0,     0,   171,   523,     0,   572,   266,
   194,   196,   655,     0,     0,   181,   186,   185,   184,   183,
   182,   179,   180,   266,   266,   266,   174,   175,     0,   266,
   266,   266,   266,   266,   266,   266,   266,   266,   266,   266,
   266,   266,   266,   266,   266,   266,   266,   266,   266,   266,
   266,   266,   266,   266,   266,   266,   225,   632,   228,   484,
     0,   478,   101,   106,    99,   110,   667,    77,    92,    96,
   104,   285,   288,   284,     0,   289,   287,    27,   543,   266,
     0,   400,   398,   398,   399,   398,   398,   398,   417,   266,
   263,   276,     0,   271,    12,    31,    33,    78,    29,   667,
    79,   441,   445,   420,   421,   266,   454,   462,     0,   190,
     0,   531,   233,   654,   164,   266,     0,   169,     0,     0,
     0,     0,   636,   637,   638,   639,   640,   641,   642,   643,
   644,   645,   646,   201,   202,   203,   206,   205,   208,   209,
   211,   212,   213,   214,   216,   217,   219,   221,   223,   628,
   266,   630,   266,   477,   105,     0,   115,   116,   117,   118,
   119,   667,   107,   398,   110,     0,     0,   138,    98,   147,
   667,   136,   137,     0,    47,     0,     0,    55,    56,    66,
    64,   294,     0,   293,    53,    73,     0,    60,    63,     0,
   667,    65,   157,   271,   266,   398,     0,   266,   401,   389,
   398,   392,   398,   411,   274,   266,   667,    35,     0,   266,
   481,   266,     0,   651,   648,   199,   266,   170,   168,   266,
   266,     0,   573,   100,   110,    94,   113,   109,   114,   112,
   111,     0,   141,     0,     0,     0,     0,   135,     0,     0,
   150,   159,   667,   149,     0,     0,    63,     0,    69,     0,
     0,    58,    57,    59,     0,     0,     0,     0,     0,     0,
   266,   667,   158,     0,   256,   266,   403,   266,   266,   398,
   406,     0,   381,     0,   384,   275,   277,     0,    38,   266,
     0,   191,   189,   647,   532,     0,   172,   173,   633,   108,
   142,   139,   145,     0,   146,   143,   144,   148,     0,   153,
     0,     0,     0,     0,   266,     0,    75,    74,     0,    70,
     0,    49,    44,    45,    52,    63,    54,    67,     0,    71,
    72,     0,     0,   292,   266,   266,   272,   266,   266,     0,
   404,   266,   390,     0,   393,     0,    13,   482,   570,   171,
   266,   140,   154,   151,     0,   155,   156,   160,   286,    51,
    48,     0,     0,    68,    46,    61,   290,   258,   407,   398,
   402,   266,   382,   385,   634,   152,    62,    50,   405,   408,
     0,     0,     0
};

static const short yydefgoto[] = {  1191,
    84,    85,    86,    87,   133,   295,   296,    88,   636,   772,
   297,   798,   918,    89,   670,   920,   902,    91,  1002,  1132,
  1079,  1065,  1133,  1171,  1004,  1005,  1006,  1075,  1007,  1008,
  1136,  1010,  1129,   756,   803,   757,   804,   758,   805,   886,
   806,   761,   807,   887,   884,   885,   790,   763,   764,   982,
   983,   984,  1048,   985,   765,   766,    92,   257,   427,   258,
   559,    93,   989,  1113,  1114,   991,  1062,  1082,  1063,   173,
   174,   496,   175,   929,   176,   177,   396,   534,   178,   179,
   180,   181,   182,   183,   184,   185,   186,   187,   528,   188,
   530,   189,   529,   830,   190,   219,   466,   308,   415,    95,
   649,   778,   126,   577,    96,   291,   192,   255,   127,   128,
   901,   794,   913,    98,   767,   809,   994,   769,   770,   810,
  1013,   895,  1011,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   322,   416,   433,   112,   263,
   113,   782,  1154,   785,  1156,   652,  1092,   655,  1094,   114,
   904,   905,  1089,  1090,   115,   660,   570,   571,   814,   130,
   455,   123,   124,   117,   585,   586,   456,   457,   458,   672,
   591,   323,   820,   816,   475,   344,   220,   240,   221,   222,
   345,   926,  1101,   224,   632,   225,   226,   420,   227,   228,
   194,   401,   346,   342,   347,   460,   685,   348,   310,   609,
   349,   199,   350,   540,   780,  1020,   233,   556,   491,   400,
   201,   557,   558,   351,   202,   203,   352,   629,   595,   353,
   236,   354,   358,   688,   723,   881,   724,   207,   726,   727,
   728,   729,   730,   731,   732,   733,   734,   735,   736,   737,
   738,   739,   740,   971,  1161,   741,  1105,   355,   356,   209,
   357,   260,   309,   212,   120
};

static const short yypact[] = {  1990,
-32768,    42,  5205,-32768,  6333,-32768,   714,  2980,  3362,  3362,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   663,-32768,
-32768,-32768,-32768,  2181,-32768,-32768,-32768,   516,-32768,-32768,
    82,-32768,    39,-32768,-32768,-32768,    87,  6168,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  6168,  6168,
   113,   106,-32768,   510,-32768,-32768,   714,-32768,-32768,-32768,
-32768,-32768,-32768,    42,-32768,-32768,   144,-32768,   113,-32768,
-32768,-32768,  5205,-32768,   176,-32768,  5463,-32768,   223,   241,
   248,-32768,   275,   714,   292,   325,   929,-32768,  2557,  5463,
  5463,  5463,  5463,  5463,  5463,-32768,  5483,  5483,   378,-32768,
   395,   431,   443,   487,   519,   469,  4649,-32768,   570,   591,
-32768,   601,-32768,   739,  1269,-32768,-32768,-32768,   693,    36,
   375,   353,   426,   589,   521,   631,   581,    69,-32768,-32768,
   362,-32768,  3510,   600,   629,-32768,-32768,-32768,-32768,   717,
  3128,-32768,  4649,-32768,  3510,-32768,   495,  3510,-32768,-32768,
   695,   722,-32768,   730,-32768,  2747,   601,   740,   368,   705,
  3171,-32768,  3362,-32768,-32768,-32768,  5794,-32768,-32768,-32768,
-32768,   792,   809,-32768,-32768,  3362,  3510,-32768,-32768,   741,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   838,   849,-32768,-32768,  6058,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   863,   679,-32768,-32768,   714,
   714,    41,-32768,   516,-32768,-32768,-32768,-32768,   894,-32768,
-32768,   907,   920,   679,    39,-32768,   560,   925,-32768,   714,
-32768,   229,  5463,-32768,-32768,-32768,-32768,-32768,-32768,   932,
  5463,  5463,  5463,  1160,   946,-32768,-32768,-32768,   643,   319,
  5662,   509,   949,   965,-32768,-32768,-32768,-32768,-32768,-32768,
   955,  5463,-32768,-32768,  5463,   998,   999,  1001,  1007,  1008,
   469,   522,  1728,-32768,  4649,-32768,-32768,-32768,-32768,  1009,
-32768,-32768,  4649,-32768,  4649,-32768,-32768,-32768,  5216,  5463,
-32768,-32768,   194,  5463,  5463,  5463,  5463,  5463,  5463,  5463,
  5463,  5463,  5463,  5463,  5463,  5463,  5463,  5463,  5463,  5463,
  5463,  5463,  5463,  5463,  5463,  5463,  5463,  5463,  5463,  5463,
-32768,-32768,-32768,-32768,  5463,   508,-32768,-32768,  2367,-32768,
-32768,  1018,-32768,-32768,  1025,-32768,  5463,   442,  1017,  1005,
-32768,-32768,-32768,-32768,-32768,   113,  5794,-32768,-32768,  3362,
  2937,  1033,-32768,-32768,  5463,   410,  3613,  4730,   679,-32768,
   551,  6333,   957,  1013,  1028,  1029,  1030,  1029,   714,  1031,
   679,-32768,   679,-32768,-32768,-32768,   964,  1034,  1038,-32768,
   679,   560,-32768,   714,  1039,-32768,  1037,   714,    97,  1041,
-32768,   139,  1044,   193,  1044,  1048,-32768,-32768,-32768,-32768,
  5378,  1043,   622,-32768,   922,  5463,-32768,-32768,  1052,-32768,
-32768,-32768,-32768,-32768,-32768,  5463,-32768,  1051,-32768,  3613,
-32768,-32768,  1058,  1055,-32768,   409,-32768,   115,   714,   714,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   693,   693,    36,    36,   375,   375,
   375,   375,   353,   353,   426,   589,   521,  5463,  5463,  5463,
-32768,  5494,  5557,-32768,-32768,  4963,-32768,  3319,  3798,-32768,
-32768,  1063,   550,-32768,-32768,   679,-32768,-32768,  1064,  1072,
-32768,  1076,-32768,  4168,-32768,-32768,  3983,  4211,  1078,-32768,
  1080,-32768,-32768,  1084,  1086,-32768,  1087,  1089,-32768,   585,
-32768,  1083,-32768,-32768,-32768,   144,-32768,   374,-32768,-32768,
  5463,   596,   679,-32768,-32768,  1090,-32768,-32768,  1110,  6333,
-32768,-32768,-32768,-32768,  1092,-32768,  1160,-32768,-32768,  1091,
   461,   922,  5389,  1095,-32768,-32768,-32768,-32768,  1098,-32768,
-32768,  1101,-32768,  5463,-32768,-32768,-32768,-32768,   631,   609,
   581,  5463,-32768,  5463,-32768,-32768,-32768,  4314,  4649,  5463,
-32768,  5583,-32768,  5463,-32768,  1383,-32768,-32768,-32768,  4357,
  4460,-32768,  4503,-32768,  1078,-32768,  1102,-32768,-32768,-32768,
-32768,-32768,  1106,-32768,-32768,  1108,-32768,   714,-32768,   714,
  1059,  5126,-32768,-32768,  1112,-32768,  1107,-32768,   293,  1383,
-32768,   714,   468,  4649,  1115,-32768,-32768,    79,  1116,-32768,
  1113,    67,  1114,  1119,  1123,-32768,  5463,  5583,-32768,-32768,
-32768,-32768,  1121,  1122,-32768,-32768,   587,  5463,  5463,  5463,
  5463,  5463,  5463,  5463,  5483,  5483,  1124,   595,   624,   954,
  1323,   634,   754,   822,   649,   418,   853,  1125,  1111,  1097,
  1096,   250,  1127,-32768,    46,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   645,   718,-32768,   972,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  1383,-32768,  1068,-32768,
-32768,  1069,-32768,  1070,-32768,-32768,-32768,  1071,-32768,  1694,
  1074,  1383,-32768,-32768,  4606,-32768,-32768,-32768,-32768,  6255,
-32768,-32768,  6255,-32768,-32768,-32768,-32768,  5463,   936,  1146,
-32768,  5126,-32768,-32768,  5126,  1077,-32768,  1383,-32768,  1140,
-32768,-32768,-32768,  1383,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   516,  1144,-32768,   744,-32768,   922,-32768,-32768,  1147,
-32768,-32768,-32768,  1149,   714,-32768,-32768,   734,  1151,  5463,
-32768,-32768,  1153,   748,  1155,   751,   770,   780,   789,   795,
   810,   845,   857,  5463,  5409,  5463,   865,   875,   357,  5463,
  5463,  5463,  5463,  5463,  5463,  5463,  5463,  5463,  5463,  5463,
  5463,  5463,  5463,  5463,  5463,  5463,  5463,  5463,  5463,  5463,
  5463,  5463,  5463,  5463,  5463,  5463,  5463,-32768,  5463,-32768,
  1161,  1163,-32768,   996,  1145,   401,    57,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   620,-32768,-32768,-32768,-32768,  5126,
   688,-32768,   113,  4808,-32768,  6255,  4808,  6255,-32768,-32768,
-32768,-32768,   951,-32768,-32768,-32768,-32768,  1383,-32768,    39,
-32768,   104,-32768,-32768,-32768,  5436,-32768,-32768,   394,-32768,
  1169,  1078,-32768,-32768,   883,  5463,  1167,   892,   898,   142,
   714,   714,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   930,   945,   960,   476,   666,   141,   828,
   338,   415,   531,   698,   771,   781,    62,    53,    65,   631,
  5463,   581,  5583,-32768,   495,   972,-32768,-32768,-32768,-32768,
-32768,   756,-32768,  5926,   401,    72,    72,-32768,-32768,   128,
   803,-32768,-32768,   119,-32768,   692,   226,-32768,-32768,-32768,
-32768,-32768,  1172,-32768,  1014,-32768,   885,-32768,   306,  1175,
    39,-32768,   119,-32768,-32768,-32768,  1182,   450,-32768,-32768,
  4808,-32768,  4808,-32768,-32768,  3466,   818,-32768,  1126,   726,
-32768,-32768,   714,-32768,  1015,   967,-32768,   970,   982,-32768,
-32768,   990,-32768,-32768,   401,-32768,-32768,-32768,-32768,-32768,
-32768,   538,   128,    61,   714,   714,    72,-32768,   119,   119,
-32768,   133,   824,-32768,  1180,   991,   637,   226,   310,   165,
   692,-32768,-32768,-32768,   692,    26,   714,   714,  1181,   692,
-32768,    39,  1191,   862,-32768,   679,-32768,-32768,  1193,-32768,
  1194,  1198,-32768,  1199,-32768,-32768,-32768,  1132,-32768,   501,
  1197,-32768,-32768,-32768,-32768,  1200,   983,   984,-32768,-32768,
-32768,-32768,   128,  1202,   495,-32768,-32768,   128,   651,   133,
   404,   714,   714,   119,-32768,  1035,-32768,-32768,   692,-32768,
   637,  1187,-32768,   310,-32768,   310,-32768,-32768,  1204,-32768,
-32768,  1035,  1209,-32768,-32768,-32768,-32768,  5463,   450,  1218,
-32768,-32768,-32768,  1217,-32768,  1219,-32768,-32768,-32768,   985,
  5463,-32768,-32768,-32768,  1211,-32768,-32768,   133,-32768,-32768,
-32768,  1215,   165,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  5463,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  1241,  1244,-32768
};

static const short yypgoto[] = {-32768,
-32768,  1166,-32768,-32768,-32768,-32768,  -381,  -111,-32768,-32768,
   947,-32768,-32768,-32768,-32768,-32768,    43,-32768,-32768,   356,
-32768,-32768,    80,   122,   181,-32768,-32768,-32768,  -677,-32768,
  -851,-32768,-32768,  -658,  -740,-32768,-32768,-32768,  -577,-32768,
  -563,-32768,  -515,-32768,   285,-32768,-32768,   604,  -607,-32768,
   221,   282,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  -847,   148,-32768,  -966,-32768,   257,-32768,
  -611,   428,  1105,-32768,-32768,  -608,-32768,-32768,    31,  -349,
  -358,  -346,  -336,  -383,  -371,  -370,  -500,  -498,-32768,  -599,
-32768,  -110,-32768,-32768,  1004,   545,  -566,  -424,    16,-32768,
-32768,-32768,  -439,-32768,-32768,-32768,   267,  -256,   831,-32768,
  -859,  -750,-32768,-32768,-32768,  -499,-32768,-32768,-32768,  -488,
-32768,-32768,-32768,-32768,-32768,   505,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,    14,   708,-32768,   905,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1023,
  -585,  -525,-32768,   127,-32768,-32768,   617,   621,   463,    13,
  -378,  1156,-32768,     2,-32768,-32768,  -575,-32768,-32768,-32768,
   611,  -266,   959,-32768,  -458,   411,  1276,-32768,  1053,-32768,
  1012,-32768,-32768,-32768,-32768,  -167,-32768,-32768,-32768,-32768,
-32768,   312,  1328,   952,  1352,-32768,-32768,  1418,-32768,-32768,
  -332,-32768,  1201,   182,  -514,  -696,-32768,   798,-32768,-32768,
   895,  -193,  -478,    93,-32768,   110,    27,-32768,-32768,    38,
-32768,    58,-32768,-32768,   607,-32768,   323,  -580,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1466,-32768,-32768,
  1499,  -270,     0,   168,-32768
};


#define	YYLAST		6523


static const short yytable[] = {   118,
   550,   575,   118,   125,   525,   284,   118,   211,   211,   211,
   488,   434,   116,   111,   602,    94,   129,   526,   132,   527,
   710,   517,   518,   712,   447,   679,   307,   619,   515,   516,
   675,   621,   722,   417,   204,   519,   520,   521,   522,   990,
   449,   912,    90,  1009,   914,   205,   600,   552,   409,   523,
   524,   725,  1138,   413,  1027,   414,   259,   917,   759,   439,
   628,   608,   808,   921,   428,   206,  -580,   378,   379,   584,
  -580,   453,   760,  -624,   259,     2,   710,  -624,   641,   712,
   986,   388,  -622,   118,   986,  -626,  -622,  1112,   722,  -626,
   987,   823,  1119,  1120,   987,   986,   116,   111,   888,    94,
   256,   234,   234,   389,   471,   987,   824,   725,   453,   392,
   261,   262,     2,   898,   386,   387,   118,   395,   235,   235,
   762,   469,   262,   262,   393,   287,    90,  -398,   677,  -398,
  -266,   720,   118,   721,   300,   395,   768,  -398,  1052,  1053,
   783,   616,  1059,   118,  1067,  1069,   299,   771,   211,  1014,
   121,   122,  1060,  1054,  1084,  1055,   665,  1168,  1121,   395,
  1122,  -611,   395,   594,   288,  -611,   211,   119,  1039,   995,
   119,  1056,   378,   379,   135,   204,  1123,  1028,   681,   759,
   325,   326,   327,   328,   329,   330,   205,   720,  1068,   721,
   808,   278,   211,   760,   759,   449,   808,   907,   997,   302,
   211,   668,   211,   667,   211,   539,   206,   211,   760,  1118,
  1022,   606,  1139,   395,   817,   211,  1131,   596,  1134,   204,
   211,   499,   211,    77,    78,   134,   646,   204,    81,    82,
   205,   204,   404,   453,   204,   211,   211,   500,   205,    77,
   988,   762,   205,    77,   988,   205,   311,   171,   717,  1068,
   206,   119,   548,   413,    77,   988,   762,   768,   206,   997,
   718,   719,   206,   204,   312,   206,    97,   906,   771,    97,
   908,   313,   768,   714,   205,  1097,   118,   241,   242,   118,
   118,   118,   713,   771,   119,   715,  -398,  -398,  -398,   431,
   878,  -398,  -398,   118,   206,   716,   434,   801,   314,   118,
   301,    77,  1061,   975,   717,   879,   446,   664,   234,   316,
   808,   315,   488,   234,   307,   234,   718,   719,  1066,   195,
  1021,  1134,  1023,   473,  1093,   235,  1095,   -45,   234,   714,
   235,  1076,   235,  1077,   470,  1076,   394,  1077,   713,   395,
   684,   715,   317,   469,   211,   235,   679,    77,  1000,  1078,
    97,   716,   211,  1078,   211,   693,   817,   694,  -614,  1031,
   307,   710,  -614,   909,   712,   264,   265,   266,   267,   268,
   269,   270,   271,   722,   273,   307,   970,   276,  1019,   394,
   972,  1019,   395,    97,   941,   411,   380,   381,   395,   382,
   383,   259,   725,   289,   290,   292,   663,  1137,   211,   298,
   942,   335,  1143,   384,   385,   512,   513,   514,    77,  1000,
   336,  -398,  -398,  -398,   453,   321,  -398,  -398,  1032,   211,
   211,  1033,   331,   380,   381,   204,   211,   986,   118,   614,
  1164,   835,   547,   615,   551,  -615,   205,   987,   118,  -615,
   118,   560,   118,   547,   119,   470,   337,   436,   438,   440,
   118,  1172,   300,   118,   868,   869,   206,   118,   338,   411,
   324,   119,   395,   380,   381,   453,   469,   301,   870,   871,
   307,  1088,   720,  1115,   721,    77,    78,   134,   386,   387,
    81,    82,   321,     2,  -398,   677,  -398,   977,   978,   211,
   967,  -266,   307,   471,  -398,  1019,  -609,  1019,   118,   118,
  -609,     2,   339,   968,   397,   969,   605,   959,   960,   375,
   376,   377,   234,   234,   957,   958,   403,   979,   980,   405,
   425,   961,   962,   963,   964,  -449,   471,   486,   487,   235,
   235,   981,  -266,   340,   471,   965,   966,   211,   211,  -267,
  1115,   254,     2,    97,   432,   118,   435,   437,   422,   532,
   533,  -616,   191,   211,   547,  -616,   211,   211,   633,   389,
    97,   812,  1111,  1054,   204,  1055,   298,   341,  -398,   321,
   395,  -398,   547,  -398,   631,   205,   280,   281,   282,   380,
   381,  1056,   118,  -267,   300,   448,    77,   988,   472,   717,
   171,  -670,  -398,  -398,  -398,   206,   119,  -398,  -398,  1035,
   453,   718,   719,   673,   657,   658,   572,   395,   119,   321,
   119,   833,  -674,   402,   714,  -577,   992,   388,   301,  -577,
   666,   587,  -671,   713,   995,   592,   715,   211,   211,   395,
   692,   742,    77,    78,   134,   391,   716,    81,    82,   211,
   211,   602,   211,   996,  -576,  -266,  1147,   471,  -576,  1029,
    77,    78,   134,   997,  -600,    81,    82,   118,  -600,   118,
   468,  1130,  1076,   395,  1077,  -575,   617,   618,   118,  -575,
   390,   118,   118,   211,   815,  1163,  1121,   307,  1122,   473,
  1078,   404,   276,    77,    78,   134,  -608,   742,    81,    82,
  -608,   319,   398,   320,  1123,    97,  -676,   866,   867,   375,
   376,   377,   565,   812,   568,  1015,   574,    97,  1016,    97,
   537,  1046,     2,   119,   581,   996,  -673,   298,  -617,   933,
  1058,  -503,  -617,  1179,   590,   997,   375,   376,   377,   836,
   837,   838,   839,   840,   841,   399,   598,   191,   395,   472,
  1081,   604,   882,   406,   432,   191,   380,   381,  -676,   191,
   301,   471,   191,   407,   395,   489,  1098,  1190,   931,     2,
   408,  -672,   359,   492,   360,   493,  -398,  -266,   395,   471,
  1106,  -594,   935,   259,   211,  -594,  1045,     2,  -398,  -398,
  -398,   191,  -398,  -398,  -398,   361,   362,   861,   862,   863,
  -599,  -619,  1125,   903,  -599,  -619,   903,   412,   998,   999,
  -598,  -620,    77,  1000,  -598,  -620,  1001,   382,   383,  -597,
   418,  1145,    97,  -597,   118,  -596,   815,   382,   383,  -596,
   259,   384,   385,  1057,   118,   572,   647,   572,   419,   432,
  -595,   384,   385,   423,  -595,   259,   802,   555,  1016,   592,
   119,   259,   661,   662,  1124,  -676,  -676,   459,  -612,   298,
  -676,  -676,  -612,   864,   865,   462,   463,   464,   465,   378,
   379,    77,    78,   134,   424,  -592,    81,    82,   604,  -592,
   998,   999,   426,   432,    77,  1000,   459,  -593,  1001,  1146,
   430,  -593,  1016,   690,   691,  -589,   993,   459,   321,  -589,
   321,   954,   955,   956,  1012,  -590,    77,    78,   134,  -590,
   555,    81,    82,  -581,   498,   872,   873,  -581,    77,    78,
   134,   442,  -584,    81,    82,   779,  -584,   903,   614,   903,
   903,   903,  1038,   786,   444,   788,    77,    78,   134,   795,
   796,    81,    82,   924,   800,  1072,  1073,  1074,   590,   813,
   118,   118,   445,   191,   472,  -266,   318,   603,   450,   555,
  -604,   543,   303,   461,  -604,   910,   658,   150,   151,   152,
   153,   154,   155,   467,   321,  -605,  1036,   555,   644,  -605,
  1025,  1026,   742,   476,   156,   157,   158,   845,   478,   846,
  -606,  -398,   119,  1050,  -606,   993,   993,  -602,   284,   477,
  -585,  -602,   930,  1064,  -585,  1012,  1012,  -398,   159,  1049,
   847,   848,  -583,  -587,  -588,  -586,  -583,  -587,  -588,  -586,
   395,  1109,  1064,   274,   275,   480,   481,   118,   482,   193,
   223,   223,  1127,  1128,   483,   484,   541,   490,   545,   118,
  1091,  1100,   118,   563,   903,   542,   903,   307,   644,   696,
   168,   544,   560,   549,   900,   562,   564,  -266,   567,   573,
  1185,   644,   579,   993,   118,   118,   993,   589,  1064,  1064,
   580,   582,   593,   588,   395,   597,   601,  1012,   612,  1012,
  1012,   307,   607,   620,  1012,   610,   118,   118,   613,  1012,
   923,   813,   191,   604,   818,   118,   630,   634,   243,   244,
   245,   246,   247,   248,   249,   250,   251,   252,   635,   118,
   637,   645,   648,   651,   653,   659,   654,   656,  1040,  1041,
   669,    77,   304,   305,   671,   171,   674,   676,   682,   686,
   993,   118,   118,  1064,   687,   781,   777,   784,  1012,   272,
   745,   799,   819,   277,   825,   279,   876,   283,   797,   822,
   821,   465,   285,   826,   827,   831,   832,   844,   118,   875,
   877,   880,   293,   874,   294,   883,   889,   890,   891,   894,
   193,  1091,   897,   911,   919,   915,   459,   922,   459,  1017,
   934,   927,  1012,   928,   697,   932,  1024,  -248,   743,   936,
   974,   973,   171,   303,   976,   119,  1034,  1037,   150,   151,
   152,   153,   154,   155,  1070,  1071,   363,   119,  1080,  1087,
  1103,  1126,  1142,  1104,   193,   156,   157,   158,   200,   232,
   232,  1124,   193,  1149,  1099,  1152,   193,  1153,  1155,   193,
  1157,  1158,  1116,  1117,  1160,  1170,  1173,   223,  1162,   159,
  1174,   828,   223,  1176,   223,  1181,  1183,  1186,  1184,  1187,
  1192,   306,   834,  1193,  1140,  1141,   452,   223,   193,   253,
  1003,  1135,  1188,   119,   306,   306,   306,   306,   306,   306,
  1044,   333,   334,  1175,   791,  1110,  1051,   119,  1165,  1083,
   650,   168,   939,   576,   896,  1180,   789,   925,   787,   286,
   474,  1085,   811,   429,    97,   239,  1159,   611,   421,  1166,
  1167,   364,   485,   538,   829,  1043,   813,     0,  1102,     0,
     0,     0,     0,   432,     0,     0,  1107,  1108,     0,     0,
   441,     0,     0,   443,     0,     0,   119,     0,     0,     0,
     0,   451,     0,     0,   454,   365,   366,   367,   368,   369,
   370,   371,   372,   373,   374,   196,   229,   229,   479,     0,
     0,     0,    77,   304,   305,   850,   171,  1144,     0,   200,
     0,     0,    97,     0,  1148,  1150,     0,     0,     0,   197,
   230,   230,   497,     0,     0,     0,   813,   501,   502,   503,
   504,   505,   506,   507,   508,   509,   510,   511,     0,   851,
   852,   853,   854,   855,   856,   857,   858,   859,   860,     0,
   940,  1169,     0,   200,     0,     0,     0,     0,   531,     0,
     0,   200,     0,     0,     0,   200,     0,     0,   200,     0,
   193,  1177,  1178,     0,     0,    97,   232,   410,  1182,     0,
     0,   232,     0,   232,     0,   198,   231,   231,     0,     0,
     0,   223,   223,     0,     0,     0,   232,   200,   546,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   454,     0,
     0,     0,     0,   561,   745,   746,   747,   748,   566,     0,
   569,   749,   750,   751,   752,   753,   754,   755,   578,     0,
   465,     0,   583,   208,   237,   237,   196,     0,     0,   306,
   306,   306,   306,   306,   306,   306,   306,   306,   306,   306,
   306,   306,   306,   306,   306,     0,     0,     0,     0,     0,
   197,     0,     0,     0,     0,     0,   210,   238,   238,     0,
     0,     0,     0,     0,     0,  1042,     0,     0,     0,     0,
   196,     0,     0,     0,     0,     0,     0,     0,   196,   306,
     0,     0,   196,     0,     0,   196,     0,     0,     0,     0,
     0,     0,     0,   229,   197,     0,     0,     0,   229,   193,
   229,     0,   197,     0,     0,     0,   197,     0,   494,   197,
     0,     0,     0,   229,   196,     0,   198,   230,     0,     0,
     0,     0,   230,     0,   230,   306,     0,     0,     0,     0,
   306,     0,     0,     0,     0,     0,     0,   230,   197,     0,
   306,     0,     0,     0,     0,     0,     0,     0,     0,   200,
     0,     0,     0,     0,   454,     0,     0,     0,     0,     0,
   198,     0,     0,     0,   208,     0,     0,   689,   198,     0,
   232,   232,   198,   678,     0,   198,     0,     0,   683,     0,
     0,     0,   306,   231,   306,     0,   623,   625,   231,     0,
   231,     0,     0,     0,     0,     0,     0,   210,     0,     0,
     0,     0,     0,   231,   198,   561,     0,   744,   208,     0,
     0,     0,     0,     0,     0,   793,   208,     0,     0,     0,
   208,     0,     0,   208,     0,     0,     0,     0,     0,     0,
     0,   237,     0,     0,     0,   306,   237,     0,   237,     0,
     0,   210,     0,     0,     0,     0,     0,     0,     0,   210,
     0,   237,   208,   210,     0,     0,   210,   306,     0,     0,
     0,     0,     0,     0,   238,     0,     0,     0,     0,   238,
     0,   238,     0,     0,     0,     0,   196,     0,     0,     0,
     0,     0,   849,     0,   238,   210,   711,     0,   200,     0,
     0,     0,     0,     0,     0,     0,  -531,   229,   229,     0,
   197,   343,     0,     0,     0,     0,   150,   151,   152,   153,
   154,   155,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   230,   230,   156,   157,   158,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   892,   893,     0,
     0,     0,   711,     0,     0,   793,     0,   159,   793,     0,
     0,     0,     0,   306,   306,   306,   306,   306,   306,   842,
   843,     0,    20,    21,    22,    23,   198,    24,     0,   916,
     0,     0,    29,    30,     0,     0,    33,    34,     0,    36,
    37,    38,    39,     0,     0,     0,     0,   231,   231,   168,
     0,     0,     0,     0,    51,    52,     0,   937,   497,     0,
     0,     0,     0,   943,   944,   945,   946,   947,   948,   949,
   950,   951,   952,   953,   208,   196,     0,     0,     0,    76,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    80,
     0,     0,     0,     0,     0,   237,   237,     0,     0,   197,
     0,     0,   306,     0,     0,     0,     0,   210,     0,     0,
     0,     0,     0,   793,     0,     0,     0,     0,     0,     0,
    77,   304,   305,     0,   171,     0,     0,     0,   238,   238,
     0,     0,     0,     0,     0,  1018,     0,     0,     0,     0,
     0,     0,     0,     0,   306,     0,     0,     0,     0,     0,
     0,     0,     0,     0,  1030,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   198,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   306,   306,   306,   306,   306,
   306,   306,   306,   306,   306,   306,   306,   306,   306,   306,
   306,   306,     0,   306,     0,     0,     0,     0,     0,    -1,
     1,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   208,     0,     0,     0,     0,     0,     0,
     0,     0,     0,  -266,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     2,     0,     0,     0,     0,     0,   793,
     0,     0,     0,     0,     3,     0,   210,     0,  1086,     0,
   306,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,  -398,  -398,  -398,     0,
     4,     0,     0,     0,     0,     5,     6,     7,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   711,     0,     8,
     9,    10,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    11,    12,
    13,     0,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,  1151,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
    51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
    61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
    71,    72,    73,    74,    75,    76,     0,     0,     0,     0,
     0,     0,    77,    78,    79,    80,     0,    81,    82,    83,
    -2,     1,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,  1189,     0,  -266,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     2,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     3,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,  -398,  -398,  -398,
     0,     4,   306,     0,     0,     0,     5,     6,     7,     0,
     0,     0,     0,     0,     0,   306,     0,     0,     0,     0,
     8,     9,    10,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   306,     0,     0,    11,
    12,    13,     0,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,     0,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
    70,    71,    72,    73,    74,    75,    76,     0,     0,     0,
     0,     0,     0,    77,    78,    79,    80,   136,    81,    82,
    83,     0,   137,   138,   139,     0,   140,   141,   142,   143,
   144,   145,   146,   147,   148,  -531,   535,     0,     0,     0,
   149,     0,     0,     0,     0,   150,   151,   152,   153,   154,
   155,     0,     0,     0,     0,     0,     0,     0,  -266,  -266,
     0,     3,   156,   157,   158,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,  -398,  -398,  -398,   159,     4,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   161,   162,   163,   164,   165,   166,     0,     0,     0,     0,
     0,     0,     0,     0,   167,    11,    12,    13,   168,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,     0,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
    34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
    74,    75,    76,     0,     0,     0,     0,     0,     0,    77,
   169,   536,    80,   171,   172,    82,    83,   136,     0,     0,
     0,     0,   137,   138,   139,     0,   140,   141,   142,   143,
   144,   145,   146,   147,   148,  -531,     0,     0,     0,     0,
   149,     0,     0,     0,     0,   150,   151,   152,   153,   154,
   155,     0,     0,     0,     0,     0,     0,     0,  -266,  -266,
     0,     0,   156,   157,   158,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,  -266,  -266,  -266,   159,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   161,   162,   163,   164,   165,   166,     0,     0,     0,     0,
     0,     0,     0,     0,   167,  -266,  -266,  -266,   168,  -266,
  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,     0,
  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,
  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,
  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,
  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,
  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,
  -266,  -266,  -266,     0,     0,     0,     0,     0,     0,    77,
   169,   170,  -266,   171,   172,    82,  -266,   213,     0,     0,
     0,     0,   137,   138,   139,     0,     0,   214,   142,   143,
   144,   145,   146,   147,   215,  -531,  -535,     0,     0,     0,
   216,     0,     0,     0,     0,   150,   151,   152,   153,   154,
   155,     0,     0,     0,     0,     0,     0,     0,  -266,  -266,
     0,     0,   156,   157,   158,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,  -266,  -266,  -266,   159,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   161,   162,   163,   164,   165,   166,     0,     0,     0,     0,
     0,     0,     0,     0,   167,  -266,  -266,  -266,   168,  -266,
  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,     0,
  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,
  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,
  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,
  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,
  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,
  -266,  -266,  -266,     0,     0,     0,     0,     0,     0,    77,
   169,   170,  -266,   171,   217,   218,  -266,   213,     0,     0,
     0,     0,   137,   138,   139,     0,     0,   214,   142,   143,
   144,   145,   146,   147,   215,  -476,  -476,     0,     0,     0,
   216,  -476,     0,     0,     0,   150,   151,   152,   153,   154,
   155,     0,     0,     0,     0,     0,     0,     0,  -266,  -266,
   136,     0,   156,   157,   158,   137,   138,   139,     0,   140,
   141,   142,   143,   144,   145,   146,   147,   148,  -531,     0,
     0,     0,     0,   149,     0,     0,   159,     0,   150,   151,
   152,   153,   154,   155,     0,     0,     0,     0,     0,     0,
     0,  -266,  -266,     0,     0,   156,   157,   158,     0,  -476,
   161,   162,   163,   164,   165,   166,     0,     0,     0,     0,
     0,     0,     0,     0,   167,     0,     0,     0,   168,   159,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   160,   161,   162,   163,   164,   165,   166,     0,
     0,     0,     0,     0,     0,     0,     0,   167,     0,     0,
     0,   168,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    77,
   169,   170,     0,   171,   217,   218,     0,     0,   136,     0,
     0,     0,     0,   137,   138,   139,     0,   140,   141,   142,
   143,   144,   145,   146,   147,   148,  -531,     0,     0,     0,
     0,   149,     0,     0,     0,     0,   150,   151,   152,   153,
   154,   155,    77,   169,   170,     0,   171,   172,    82,  -266,
  -266,   213,     0,   156,   157,   158,   137,   138,   139,     0,
     0,   214,   142,   143,   144,   145,   146,   147,   215,  -531,
  -535,     0,     0,     0,   216,     0,     0,   159,     0,   150,
   151,   152,   153,   154,   155,     0,     0,     0,     0,     0,
     0,     0,  -266,  -266,     0,     0,   156,   157,   158,     0,
  -504,   161,   162,   163,   164,   165,   166,     0,     0,     0,
     0,     0,     0,     0,     0,   167,     0,     0,     0,   168,
   159,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,  -472,   161,   162,   163,   164,   165,   166,
     0,     0,     0,     0,     0,     0,     0,     0,   167,     0,
     0,     0,   168,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    77,   169,   170,     0,   171,   172,    82,     0,     0,   136,
     0,     0,     0,     0,   137,   138,   139,     0,   140,   141,
   142,   143,   144,   145,   146,   147,   148,  -531,   626,     0,
     0,     0,   149,     0,     0,     0,     0,   150,   151,   152,
   153,   154,   155,    77,   169,   170,     0,   171,   217,   218,
  -266,  -266,   213,     0,   156,   157,   158,   137,   138,   139,
     0,     0,   214,   142,   143,   144,   145,   146,   147,   215,
  -531,  -535,     0,     0,     0,   216,     0,     0,   159,     0,
   150,   151,   152,   153,   154,   155,     0,     0,     0,     0,
     0,     0,     0,  -266,  -266,     0,     0,   156,   157,   158,
     0,     0,   161,   162,   163,   164,   165,   166,     0,     0,
     0,     0,     0,     0,     0,     0,   167,     0,     0,     0,
   168,   159,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   161,   162,   163,   164,   165,
   166,     0,     0,     0,     0,     0,     0,     0,     0,   167,
     0,     0,     0,   168,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   792,  1096,     0,     0,     0,   303,
     0,     0,     0,     0,   150,   151,   152,   153,   154,   155,
     0,    77,   169,   170,     0,   171,   172,    82,     0,     0,
   136,   156,   157,   158,     0,   137,   138,   139,     0,   140,
   141,   142,   143,   144,   145,   146,   147,   148,  -531,     0,
     0,     0,     0,   149,     0,   159,     0,     0,   150,   151,
   152,   153,   154,   155,    77,   169,   170,     0,   171,   217,
   218,  -266,  -266,     0,     0,   156,   157,   158,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   168,     0,   159,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   161,   162,   163,   164,   165,   166,     0,
     0,     0,     0,     0,     0,     0,     0,   167,   137,   138,
   139,   168,   140,   141,   142,   143,   144,   145,   146,   147,
   215,  -531,   553,     0,     0,     0,   343,     0,     0,     0,
     0,   150,   151,   152,   153,   154,   155,     0,    77,   304,
   305,     0,   171,     0,  -266,  -266,     0,     3,   156,   157,
   158,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   159,     4,     0,     0,     0,     0,     0,     0,
     0,     0,    77,   169,   170,     0,   171,   172,    82,     0,
     0,     0,     0,     0,     0,     0,   161,   162,   163,   164,
   165,   166,     0,     0,     0,     0,     0,     0,     0,     0,
   554,    11,    12,    13,   168,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,     0,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,     0,
     0,     0,     0,     0,     0,    77,   169,   536,    80,   171,
   172,    82,    83,   137,   138,   139,     0,   140,   141,   142,
   143,   144,   145,   146,   147,   215,  -531,   627,     0,     0,
     0,   343,     0,     0,     0,     0,   150,   151,   152,   153,
   154,   155,     0,     0,     0,     0,     0,     0,     0,  -266,
  -266,     0,     3,   156,   157,   158,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   159,     4,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   161,   162,   163,   164,   165,   166,     0,     0,     0,
     0,     0,     0,     0,     0,   167,    11,    12,    13,   168,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
     0,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
    73,    74,    75,    76,     0,     0,     0,     0,     0,     0,
    77,   169,   536,    80,   171,   172,    82,    83,   137,   138,
   139,     0,   140,   141,   142,   143,   144,   145,   146,   147,
   215,  -531,   639,     0,     0,     0,   343,     0,     0,     0,
     0,   150,   151,   152,   153,   154,   155,     0,     0,     0,
     0,     0,     0,     0,  -266,  -266,     0,     3,   156,   157,
   158,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   159,     4,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   161,   162,   163,   164,
   165,   166,     0,     0,     0,     0,     0,     0,     0,     0,
   640,    11,    12,    13,   168,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,     0,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,     0,
     0,     0,     0,     0,     0,    77,   169,   536,    80,   171,
   172,    82,    83,   137,   138,   139,     0,   140,   141,   142,
   143,   144,   145,   146,   147,   215,  -531,   638,     0,     0,
     0,   343,     0,     0,     0,     0,   150,   151,   152,   153,
   154,   155,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   156,   157,   158,   137,   138,   139,     0,
   140,   141,   142,   143,   144,   145,   146,   147,   215,  -531,
   642,     0,     0,     0,   343,     0,     0,   159,     0,   150,
   151,   152,   153,   154,   155,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   156,   157,   158,     0,
     0,   161,   162,   163,   164,   165,   166,     0,     0,     0,
     0,     0,     0,     0,     0,   167,     0,     0,     0,   168,
   159,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   161,   162,   163,   164,   165,   166,
     0,     0,     0,     0,     0,     0,     0,     0,   643,   137,
   138,   139,   168,   140,   141,   142,   143,   144,   145,   146,
   147,   215,  -531,   695,     0,     0,     0,   343,     0,     0,
     0,     0,   150,   151,   152,   153,   154,   155,     0,     0,
    77,   169,   170,     0,   171,   172,    82,     0,     0,   156,
   157,   158,   137,   138,   139,     0,   140,   141,   142,   143,
   144,   145,   146,   147,   215,  -531,   773,     0,     0,     0,
   343,     0,     0,   159,     0,   150,   151,   152,   153,   154,
   155,     0,     0,    77,   169,   170,     0,   171,   172,    82,
     0,     0,   156,   157,   158,     0,     0,   161,   162,   163,
   164,   165,   166,     0,     0,     0,     0,     0,     0,     0,
     0,   167,     0,     0,     0,   168,   159,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   161,   162,   163,   164,   165,   166,     0,     0,     0,     0,
     0,     0,     0,     0,   167,   137,   138,   139,   168,   140,
   141,   142,   143,   144,   145,   146,   147,   215,  -531,   774,
     0,     0,     0,   343,     0,     0,     0,     0,   150,   151,
   152,   153,   154,   155,     0,     0,    77,   169,   170,     0,
   171,   172,    82,     0,     0,   156,   157,   158,   137,   138,
   139,     0,   140,   141,   142,   143,   144,   145,   146,   147,
   215,  -531,   776,     0,     0,     0,   343,     0,     0,   159,
     0,   150,   151,   152,   153,   154,   155,     0,     0,    77,
   169,   170,     0,   171,   172,    82,     0,     0,   156,   157,
   158,     0,     0,   161,   162,   163,   164,   165,   166,     0,
     0,     0,     0,     0,     0,     0,     0,   775,     0,     0,
     0,   168,   159,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   161,   162,   163,   164,
   165,   166,     0,     0,     0,     0,     0,     0,     0,     0,
   167,   137,   138,   139,   168,   140,   141,   142,   143,   144,
   145,   146,   147,   215,  -531,   899,     0,     0,     0,   343,
     0,     0,     0,     0,   150,   151,   152,   153,   154,   155,
     0,     0,    77,   169,   170,     0,   171,   172,    82,     0,
     0,   156,   157,   158,   137,   138,   139,     0,   140,   141,
   142,   143,   144,   145,   146,   147,   215,  -531,     0,     0,
     0,     0,   343,     0,     0,   159,     0,   150,   151,   152,
   153,   154,   155,     0,     0,    77,   169,   170,     0,   171,
   172,    82,     0,     0,   156,   157,   158,     0,     0,   161,
   162,   163,   164,   165,   166,     0,     0,     0,     0,     0,
     0,     0,     0,   167,     0,     0,     0,   168,   159,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   161,   162,   163,   164,   165,   166,  -132,     0,
     0,     0,     0,  -132,     0,     0,   167,     0,     0,     0,
   168,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     3,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    77,   169,
   170,     0,   171,   172,    82,     0,     0,     0,     0,     0,
     4,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,  -534,     0,     0,
     0,    77,   169,   170,     0,   171,   172,    82,    11,    12,
    13,     0,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,     0,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
    51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
    61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
    71,    72,    73,    74,    75,    76,     0,     0,     0,     0,
     0,     0,     0,     0,   131,    80,    11,    12,    13,    83,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
     0,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
    73,    74,    75,    76,  -674,     0,     0,     0,     0,     0,
     0,     0,   131,    80,     0,     0,     0,    83,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,  -676,
  -676,  -676,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,  -676,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,  -676,  -676,  -676,     0,  -676,  -676,  -676,  -676,  -676,
  -676,  -676,  -676,  -676,  -676,     0,  -676,  -676,  -676,  -676,
  -676,  -676,  -676,  -676,  -676,  -676,  -676,  -676,  -676,  -676,
  -676,  -676,  -676,  -676,  -676,  -676,  -676,  -676,  -676,  -676,
  -676,  -676,  -676,  -676,  -676,  -676,  -676,  -676,  -676,  -676,
  -676,  -676,  -676,  -676,  -676,  -676,  -676,  -676,  -676,  -676,
  -676,  -676,  -676,  -676,  -676,  -676,  -676,  -676,  -676,     0,
     0,     0,     0,     0,   792,     0,     0,     0,  -676,   303,
     0,     0,  -676,     0,   150,   151,   152,   153,   154,   155,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   156,   157,   158,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   159,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,  -266,     0,
     0,     0,     0,     0,     0,     0,     0,   168,     2,   303,
   495,     0,     0,     0,   150,   151,   152,   153,   154,   155,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   156,   157,   158,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   159,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    77,   304,
   305,     0,   171,    11,    12,    13,     0,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,   168,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,     0,     0,     0,     0,     0,     0,    77,    78,    79,
    80,     0,    81,    82,    83,     0,     0,     0,    77,   304,
   305,   303,   171,     0,   599,     0,   150,   151,   152,   153,
   154,   155,   303,     0,     0,   680,     0,   150,   151,   152,
   153,   154,   155,   156,   157,   158,     0,     0,     0,     0,
     0,     0,   303,   938,   156,   157,   158,   150,   151,   152,
   153,   154,   155,     0,     0,     0,     0,   159,     0,     0,
     0,     0,     0,     0,   156,   157,   158,     0,   159,   303,
  -248,     0,     0,     0,   150,   151,   152,   153,   154,   155,
     0,     0,     0,     0,     0,     0,     0,     0,   159,     0,
     0,   156,   157,   158,     0,     0,   303,     0,     0,   168,
     0,   150,   151,   152,   153,   154,   155,     0,     0,     0,
   168,     0,     0,     0,     0,   159,   332,     0,   156,   157,
   158,   150,   151,   152,   153,   154,   155,   622,     0,     0,
   168,     0,   150,   151,   152,   153,   154,   155,   156,   157,
   158,     0,   159,     0,     0,     0,     0,     0,     0,   156,
   157,   158,     0,     0,     0,     0,     0,   168,     0,     0,
     0,     0,   159,     0,     0,     0,     0,     0,     0,     0,
    77,   304,   305,   159,   171,     0,     0,     0,     0,     0,
     0,    77,   304,   305,   168,   171,     0,     0,     0,     0,
   624,     0,     0,     0,     0,   150,   151,   152,   153,   154,
   155,    77,   304,   305,   168,   171,     0,     0,     0,     0,
     0,     0,   156,   157,   158,   168,   698,     0,     0,     0,
     0,   699,   700,   701,   702,   703,   704,     0,    77,   304,
   305,     0,   171,     0,     0,     0,   159,     0,   156,   705,
   706,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    77,   304,   305,     0,   171,
     0,     0,   707,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    77,   304,   305,   168,   171,
     0,     0,     0,     0,     0,     0,    77,   304,   305,     0,
   171,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   168,     0,     0,     0,     0,     0,
     0,     0,     0,  -192,  -192,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    77,
   304,   305,     0,   171,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    77,   708,   709,     0,   171,
    11,    12,    13,     0,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,     0,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    73,    74,    75,    76,     3,     0,
     0,     0,     0,     0,     0,     0,   131,    80,     0,     0,
     0,    83,     0,     0,     0,     0,     0,     0,     0,     0,
  -398,  -398,  -398,     0,     4,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    11,    12,    13,     0,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,     0,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
     3,     0,     0,     0,     0,     0,     0,     0,   131,    80,
     0,     0,     0,    83,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     4,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    11,    12,    13,     0,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,     0,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
    65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
    75,    76,     3,     0,     0,     0,     0,     0,    77,  1047,
   131,    80,     0,     0,     0,    83,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     4,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    11,    12,    13,     0,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
     0,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
    73,    74,    75,    76,  -398,  -398,  -398,     0,     0,     0,
     0,     0,   131,    80,     0,     0,     0,    83,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    11,    12,    13,     0,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
     0,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
    73,    74,    75,    76,     8,     9,    10,     0,     0,     0,
     0,     0,   131,    80,     0,     0,     0,    83,     0,     0,
     0,     0,     0,    11,    12,    13,     0,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,     0,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,     0,     0,     0,     0,     0,     0,     0,     0,   131,
    80,    11,    12,    13,    83,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,     0,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,     0,
     0,     0,     0,     0,     0,     0,     0,   131,    80,     0,
     0,     0,    83
};

static const short yycheck[] = {     0,
   425,   441,     3,     2,   388,   117,     7,     8,     9,    10,
   343,   278,     0,     0,   473,     0,     3,   389,     5,   390,
   632,   380,   381,   632,   295,   601,   137,   528,   378,   379,
   597,   530,   632,   227,     8,   382,   383,   384,   385,   887,
   297,   792,     0,   895,   795,     8,   471,   426,   216,   386,
   387,   632,    27,   221,   914,   223,    18,   798,   636,    19,
   539,   486,   670,   804,   258,     8,    21,    32,    33,   451,
    25,     5,   636,    21,    18,    34,   688,    25,   557,   688,
    24,    29,    21,    84,    24,    21,    25,    27,   688,    25,
    34,    25,  1059,  1060,    34,    24,    84,    84,   757,    84,
    19,     9,    10,    39,    26,    34,   682,   688,     5,    41,
    24,    98,    34,   772,    53,    54,   117,    21,     9,    10,
   636,    25,   109,   110,    56,   124,    84,    24,    25,    26,
    18,   632,   133,   632,   133,    21,   636,    34,   986,   987,
   655,    27,    24,   144,   996,   997,   133,   636,   149,   900,
   109,   110,    34,    26,  1014,    28,   581,  1124,    26,    21,
    28,    21,    21,    25,    21,    25,   167,     0,    27,     5,
     3,    44,    32,    33,     7,   149,    44,   918,   603,   757,
   150,   151,   152,   153,   154,   155,   149,   688,    24,   688,
   798,    86,   193,   757,   772,   452,   804,   783,    34,    24,
   201,   583,   203,   582,   205,   399,   149,   208,   772,  1057,
   907,   478,   187,    21,   673,   216,  1068,    25,  1070,   193,
   221,    28,   223,   183,   184,   185,   559,   201,   188,   189,
   193,   205,   187,     5,   208,   236,   237,    44,   201,   183,
   184,   757,   205,   183,   184,   208,    24,   187,   632,    24,
   193,    84,   420,   421,   183,   184,   772,   757,   201,    34,
   632,   632,   205,   237,    24,   208,     0,   782,   757,     3,
   785,    24,   772,   632,   237,  1026,   277,    11,    12,   280,
   281,   282,   632,   772,   117,   632,   183,   184,   185,   277,
    41,   188,   189,   294,   237,   632,   563,     5,    24,   300,
   133,   183,   184,   884,   688,    56,   294,   578,   216,    18,
   918,   144,   645,   221,   425,   223,   688,   688,   996,     8,
   906,  1173,   908,   322,  1021,   216,  1023,    22,   236,   688,
   221,    26,   223,    28,   321,    26,    18,    28,   688,    21,
   607,   688,    18,    25,   345,   236,   922,   183,   184,    44,
    84,   688,   353,    44,   355,   622,   815,   624,    21,   926,
   471,   973,    25,   788,   973,    99,   100,   101,   102,   103,
   104,   105,   106,   973,   108,   486,   877,   111,   904,    18,
   879,   907,    21,   117,    28,    18,    49,    50,    21,    37,
    38,    18,   973,   127,   128,   129,    23,  1075,   399,   133,
    44,    24,  1080,    51,    52,   375,   376,   377,   183,   184,
    16,   183,   184,   185,     5,   149,   188,   189,    25,   420,
   421,    28,   156,    49,    50,   399,   427,    24,   429,    21,
    27,   698,   417,    25,    25,    21,   399,    34,   439,    25,
   441,   429,   443,   428,   277,   432,    16,   280,   281,   282,
   451,  1129,   451,   454,    37,    38,   399,   458,    16,    18,
   149,   294,    21,    49,    50,     5,    25,   300,    51,    52,
   581,    22,   973,  1054,   973,   183,   184,   185,    53,    54,
   188,   189,   216,    34,    24,    25,    26,    87,    88,   490,
   874,    24,   603,    26,    34,  1021,    21,  1023,   499,   500,
    25,    34,    16,   875,   193,   876,   476,   866,   867,    34,
    35,    36,   420,   421,   864,   865,   205,   117,   118,   208,
   254,   868,   869,   870,   871,    25,    26,     6,     7,   420,
   421,   131,    24,    15,    26,   872,   873,   538,   539,    24,
  1121,    26,    34,   277,   278,   546,   280,   281,   237,    42,
    43,    21,     8,   554,   539,    25,   557,   558,   546,    39,
   294,   673,    25,    26,   538,    28,   300,    99,    18,   303,
    21,    21,   557,    23,    25,   538,    67,    68,    69,    49,
    50,    44,   583,    24,   583,    26,   183,   184,   322,   973,
   187,    22,   183,   184,   185,   538,   429,   188,   189,   932,
     5,   973,   973,   590,    20,    21,   439,    21,   441,   343,
   443,    25,    22,   203,   973,    21,   887,    29,   451,    25,
    25,   454,    22,   973,     5,   458,   973,   628,   629,    21,
    22,   632,   183,   184,   185,    55,   973,   188,   189,   640,
   641,  1100,   643,    24,    21,    24,  1086,    26,    25,   920,
   183,   184,   185,    34,    21,   188,   189,   658,    25,   660,
    18,    25,    26,    21,    28,    21,   499,   500,   669,    25,
    40,   672,   673,   674,   673,    25,    26,   788,    28,   678,
    44,   187,   416,   183,   184,   185,    21,   688,   188,   189,
    25,   147,    93,   149,    44,   429,    34,    49,    50,    34,
    35,    36,   436,   815,   438,    18,   440,   441,    21,   443,
   399,   982,    34,   546,   448,    24,    22,   451,    21,   830,
   991,    93,    25,  1148,   458,    34,    34,    35,    36,   699,
   700,   701,   702,   703,   704,    19,   470,   193,    21,   473,
  1011,   475,    25,    22,   478,   201,    49,    50,    86,   205,
   583,    26,   208,    24,    21,   345,  1027,  1182,    25,    34,
   216,    22,    24,   353,    26,   355,    28,    24,    21,    26,
  1037,    21,    25,    18,   775,    25,    21,    34,   183,   184,
   185,   237,    44,   188,   189,    47,    48,    34,    35,    36,
    21,    21,  1063,   780,    25,    25,   783,    93,   179,   180,
    21,    21,   183,   184,    25,    25,   187,    37,    38,    21,
    19,  1082,   546,    25,   815,    21,   815,    37,    38,    25,
    18,    51,    52,    21,   825,   658,   560,   660,    20,   563,
    21,    51,    52,    93,    25,    18,   669,   427,    21,   672,
   673,    18,   576,   577,    21,   183,   184,   303,    21,   583,
   188,   189,    25,    32,    33,   311,   312,   313,   314,    32,
    33,   183,   184,   185,    27,    21,   188,   189,   602,    25,
   179,   180,    24,   607,   183,   184,   332,    21,   187,    18,
    18,    25,    21,   617,   618,    21,   887,   343,   622,    25,
   624,   861,   862,   863,   895,    21,   183,   184,   185,    25,
   490,   188,   189,    21,   360,    53,    54,    25,   183,   184,
   185,    18,    21,   188,   189,   649,    25,   904,    21,   906,
   907,   908,    25,   657,    18,   659,   183,   184,   185,   663,
   664,   188,   189,   190,   668,    51,    52,    53,   672,   673,
   941,   942,    23,   399,   678,    24,    18,    26,    24,   539,
    21,   407,    24,    22,    25,    20,    21,    29,    30,    31,
    32,    33,    34,    18,   698,    21,   936,   557,   558,    25,
    20,    21,   973,    25,    46,    47,    48,    24,    24,    26,
    21,    28,   815,   984,    25,   986,   987,    21,  1100,    25,
    21,    25,   825,   994,    25,   996,   997,    44,    70,   984,
    47,    48,    21,    21,    21,    21,    25,    25,    25,    25,
    21,    22,  1013,   109,   110,    18,    18,  1018,    18,     8,
     9,    10,    32,    33,    18,    18,     9,    19,    24,  1030,
  1018,  1030,  1033,    21,  1021,    11,  1023,  1148,   628,   629,
   112,    25,  1030,    11,   778,    89,    19,    19,    19,    19,
  1161,   641,    89,  1054,  1055,  1056,  1057,    21,  1059,  1060,
    27,    24,    22,    25,    21,    18,    24,  1068,    11,  1070,
  1071,  1182,    21,   529,  1075,    25,  1077,  1078,    24,  1080,
   814,   815,   538,   817,   674,  1086,    24,    24,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    27,  1100,
    25,    24,    23,    20,    19,    23,    20,    19,   941,   942,
    21,   183,   184,   185,     5,   187,    25,    27,    24,    22,
  1121,  1122,  1123,  1124,    24,    20,    25,    20,  1129,   107,
    72,    25,    18,   111,    21,   113,    40,   115,    27,    27,
    25,   597,   120,    25,    22,    25,    25,    24,  1149,    39,
    55,    25,   130,    29,   132,   184,    89,    89,    89,    89,
   149,  1149,    89,    18,    25,    89,   622,    24,   624,   903,
    18,    25,  1173,    25,   630,    25,   910,    18,   634,    25,
    18,    21,   187,    24,    40,  1018,    18,    21,    29,    30,
    31,    32,    33,    34,    23,   182,   174,  1030,    24,    18,
  1033,    22,    22,   189,   193,    46,    47,    48,     8,     9,
    10,    21,   201,    21,    89,    22,   205,    20,    20,   208,
    89,    25,  1055,  1056,    25,   191,    40,   216,    27,    70,
    27,   687,   221,    25,   223,    18,    20,    27,    20,    25,
     0,   137,   698,     0,  1077,  1078,   300,   236,   237,    84,
   895,  1071,  1173,  1086,   150,   151,   152,   153,   154,   155,
   976,   157,   158,  1142,   661,  1045,   985,  1100,  1121,  1013,
   563,   112,   845,   443,   770,  1149,   660,   815,   658,   124,
   322,  1015,   672,   261,  1018,    10,  1105,   490,   236,  1122,
  1123,    23,   341,   399,   688,   973,  1030,    -1,  1032,    -1,
    -1,    -1,    -1,  1037,    -1,    -1,  1040,  1041,    -1,    -1,
   288,    -1,    -1,   291,    -1,    -1,  1149,    -1,    -1,    -1,
    -1,   299,    -1,    -1,   302,    57,    58,    59,    60,    61,
    62,    63,    64,    65,    66,     8,     9,    10,   335,    -1,
    -1,    -1,   183,   184,   185,    23,   187,  1081,    -1,   149,
    -1,    -1,  1086,    -1,  1088,  1089,    -1,    -1,    -1,     8,
     9,    10,   359,    -1,    -1,    -1,  1100,   364,   365,   366,
   367,   368,   369,   370,   371,   372,   373,   374,    -1,    57,
    58,    59,    60,    61,    62,    63,    64,    65,    66,    -1,
   846,  1125,    -1,   193,    -1,    -1,    -1,    -1,   395,    -1,
    -1,   201,    -1,    -1,    -1,   205,    -1,    -1,   208,    -1,
   399,  1145,  1146,    -1,    -1,  1149,   216,   217,  1152,    -1,
    -1,   221,    -1,   223,    -1,     8,     9,    10,    -1,    -1,
    -1,   420,   421,    -1,    -1,    -1,   236,   237,   416,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   426,    -1,
    -1,    -1,    -1,   431,    72,    73,    74,    75,   436,    -1,
   438,    79,    80,    81,    82,    83,    84,    85,   446,    -1,
   926,    -1,   450,     8,     9,    10,   149,    -1,    -1,   375,
   376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
   386,   387,   388,   389,   390,    -1,    -1,    -1,    -1,    -1,
   149,    -1,    -1,    -1,    -1,    -1,     8,     9,    10,    -1,
    -1,    -1,    -1,    -1,    -1,   971,    -1,    -1,    -1,    -1,
   193,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   201,   425,
    -1,    -1,   205,    -1,    -1,   208,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   216,   193,    -1,    -1,    -1,   221,   538,
   223,    -1,   201,    -1,    -1,    -1,   205,    -1,   358,   208,
    -1,    -1,    -1,   236,   237,    -1,   149,   216,    -1,    -1,
    -1,    -1,   221,    -1,   223,   471,    -1,    -1,    -1,    -1,
   476,    -1,    -1,    -1,    -1,    -1,    -1,   236,   237,    -1,
   486,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   399,
    -1,    -1,    -1,    -1,   582,    -1,    -1,    -1,    -1,    -1,
   193,    -1,    -1,    -1,   149,    -1,    -1,   614,   201,    -1,
   420,   421,   205,   601,    -1,   208,    -1,    -1,   606,    -1,
    -1,    -1,   528,   216,   530,    -1,   532,   533,   221,    -1,
   223,    -1,    -1,    -1,    -1,    -1,    -1,   149,    -1,    -1,
    -1,    -1,    -1,   236,   237,   633,    -1,   635,   193,    -1,
    -1,    -1,    -1,    -1,    -1,   662,   201,    -1,    -1,    -1,
   205,    -1,    -1,   208,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   216,    -1,    -1,    -1,   581,   221,    -1,   223,    -1,
    -1,   193,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   201,
    -1,   236,   237,   205,    -1,    -1,   208,   603,    -1,    -1,
    -1,    -1,    -1,    -1,   216,    -1,    -1,    -1,    -1,   221,
    -1,   223,    -1,    -1,    -1,    -1,   399,    -1,    -1,    -1,
    -1,    -1,   710,    -1,   236,   237,   632,    -1,   538,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    19,   420,   421,    -1,
   399,    24,    -1,    -1,    -1,    -1,    29,    30,    31,    32,
    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   420,   421,    46,    47,    48,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   765,   766,    -1,
    -1,    -1,   688,    -1,    -1,   792,    -1,    70,   795,    -1,
    -1,    -1,    -1,   699,   700,   701,   702,   703,   704,   705,
   706,    -1,   119,   120,   121,   122,   399,   124,    -1,   797,
    -1,    -1,   129,   130,    -1,    -1,   133,   134,    -1,   136,
   137,   138,   139,    -1,    -1,    -1,    -1,   420,   421,   112,
    -1,    -1,    -1,    -1,   151,   152,    -1,   844,   845,    -1,
    -1,    -1,    -1,   850,   851,   852,   853,   854,   855,   856,
   857,   858,   859,   860,   399,   538,    -1,    -1,    -1,   176,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   186,
    -1,    -1,    -1,    -1,    -1,   420,   421,    -1,    -1,   538,
    -1,    -1,   788,    -1,    -1,    -1,    -1,   399,    -1,    -1,
    -1,    -1,    -1,   900,    -1,    -1,    -1,    -1,    -1,    -1,
   183,   184,   185,    -1,   187,    -1,    -1,    -1,   420,   421,
    -1,    -1,    -1,    -1,    -1,   903,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   830,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   922,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   538,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   861,   862,   863,   864,   865,
   866,   867,   868,   869,   870,   871,   872,   873,   874,   875,
   876,   877,    -1,   879,    -1,    -1,    -1,    -1,    -1,     0,
     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   538,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,  1026,
    -1,    -1,    -1,    -1,    45,    -1,   538,    -1,  1016,    -1,
   936,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,
    71,    -1,    -1,    -1,    -1,    76,    77,    78,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   973,    -1,    90,
    91,    92,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,   110,
   111,    -1,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,  1090,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
   161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
   171,   172,   173,   174,   175,   176,    -1,    -1,    -1,    -1,
    -1,    -1,   183,   184,   185,   186,    -1,   188,   189,   190,
     0,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,  1180,    -1,    24,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    45,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,
    -1,    71,  1148,    -1,    -1,    -1,    76,    77,    78,    -1,
    -1,    -1,    -1,    -1,    -1,  1161,    -1,    -1,    -1,    -1,
    90,    91,    92,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,  1182,    -1,    -1,   109,
   110,   111,    -1,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,    -1,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
   150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
   160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
   170,   171,   172,   173,   174,   175,   176,    -1,    -1,    -1,
    -1,    -1,    -1,   183,   184,   185,   186,     1,   188,   189,
   190,    -1,     6,     7,     8,    -1,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
    24,    -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,
    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,
    -1,    45,    46,    47,    48,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    67,    68,    69,    70,    71,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    94,    95,    96,    97,    98,    99,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,    -1,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
   154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
   164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
   174,   175,   176,    -1,    -1,    -1,    -1,    -1,    -1,   183,
   184,   185,   186,   187,   188,   189,   190,     1,    -1,    -1,
    -1,    -1,     6,     7,     8,    -1,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    -1,    -1,    -1,    -1,
    24,    -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,
    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,
    -1,    -1,    46,    47,    48,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    67,    68,    69,    70,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    94,    95,    96,    97,    98,    99,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,    -1,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
   154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
   164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
   174,   175,   176,    -1,    -1,    -1,    -1,    -1,    -1,   183,
   184,   185,   186,   187,   188,   189,   190,     1,    -1,    -1,
    -1,    -1,     6,     7,     8,    -1,    -1,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
    24,    -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,
    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,
    -1,    -1,    46,    47,    48,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    67,    68,    69,    70,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    94,    95,    96,    97,    98,    99,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,    -1,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
   154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
   164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
   174,   175,   176,    -1,    -1,    -1,    -1,    -1,    -1,   183,
   184,   185,   186,   187,   188,   189,   190,     1,    -1,    -1,
    -1,    -1,     6,     7,     8,    -1,    -1,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
    24,    25,    -1,    -1,    -1,    29,    30,    31,    32,    33,
    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,
     1,    -1,    46,    47,    48,     6,     7,     8,    -1,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    -1,
    -1,    -1,    -1,    24,    -1,    -1,    70,    -1,    29,    30,
    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    42,    43,    -1,    -1,    46,    47,    48,    -1,    93,
    94,    95,    96,    97,    98,    99,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,   112,    70,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    93,    94,    95,    96,    97,    98,    99,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,
    -1,   112,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   183,
   184,   185,    -1,   187,   188,   189,    -1,    -1,     1,    -1,
    -1,    -1,    -1,     6,     7,     8,    -1,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    -1,    -1,    -1,
    -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,    32,
    33,    34,   183,   184,   185,    -1,   187,   188,   189,    42,
    43,     1,    -1,    46,    47,    48,     6,     7,     8,    -1,
    -1,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    -1,    -1,    -1,    24,    -1,    -1,    70,    -1,    29,
    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    42,    43,    -1,    -1,    46,    47,    48,    -1,
    93,    94,    95,    96,    97,    98,    99,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,   112,
    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    93,    94,    95,    96,    97,    98,    99,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,    -1,
    -1,    -1,   112,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   183,   184,   185,    -1,   187,   188,   189,    -1,    -1,     1,
    -1,    -1,    -1,    -1,     6,     7,     8,    -1,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    -1,
    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,
    32,    33,    34,   183,   184,   185,    -1,   187,   188,   189,
    42,    43,     1,    -1,    46,    47,    48,     6,     7,     8,
    -1,    -1,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    -1,    -1,    -1,    24,    -1,    -1,    70,    -1,
    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    42,    43,    -1,    -1,    46,    47,    48,
    -1,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,
   112,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    94,    95,    96,    97,    98,
    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,
    -1,    -1,    -1,   112,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    19,    20,    -1,    -1,    -1,    24,
    -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,
    -1,   183,   184,   185,    -1,   187,   188,   189,    -1,    -1,
     1,    46,    47,    48,    -1,     6,     7,     8,    -1,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    -1,
    -1,    -1,    -1,    24,    -1,    70,    -1,    -1,    29,    30,
    31,    32,    33,    34,   183,   184,   185,    -1,   187,   188,
   189,    42,    43,    -1,    -1,    46,    47,    48,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,    -1,    70,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    94,    95,    96,    97,    98,    99,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,     6,     7,
     8,   112,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    -1,    -1,    -1,    24,    -1,    -1,    -1,
    -1,    29,    30,    31,    32,    33,    34,    -1,   183,   184,
   185,    -1,   187,    -1,    42,    43,    -1,    45,    46,    47,
    48,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    70,    71,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   183,   184,   185,    -1,   187,   188,   189,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    94,    95,    96,    97,
    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,    -1,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
   158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
   168,   169,   170,   171,   172,   173,   174,   175,   176,    -1,
    -1,    -1,    -1,    -1,    -1,   183,   184,   185,   186,   187,
   188,   189,   190,     6,     7,     8,    -1,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    -1,    -1,
    -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,    32,
    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
    43,    -1,    45,    46,    47,    48,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
    -1,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
   163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
   173,   174,   175,   176,    -1,    -1,    -1,    -1,    -1,    -1,
   183,   184,   185,   186,   187,   188,   189,   190,     6,     7,
     8,    -1,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    -1,    -1,    -1,    24,    -1,    -1,    -1,
    -1,    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    42,    43,    -1,    45,    46,    47,
    48,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    70,    71,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    94,    95,    96,    97,
    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,    -1,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
   158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
   168,   169,   170,   171,   172,   173,   174,   175,   176,    -1,
    -1,    -1,    -1,    -1,    -1,   183,   184,   185,   186,   187,
   188,   189,   190,     6,     7,     8,    -1,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    -1,    -1,
    -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,    32,
    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    46,    47,    48,     6,     7,     8,    -1,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    -1,    -1,    -1,    24,    -1,    -1,    70,    -1,    29,
    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    46,    47,    48,    -1,
    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,   112,
    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    94,    95,    96,    97,    98,    99,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,     6,
     7,     8,   112,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    -1,    -1,    -1,    24,    -1,    -1,
    -1,    -1,    29,    30,    31,    32,    33,    34,    -1,    -1,
   183,   184,   185,    -1,   187,   188,   189,    -1,    -1,    46,
    47,    48,     6,     7,     8,    -1,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
    24,    -1,    -1,    70,    -1,    29,    30,    31,    32,    33,
    34,    -1,    -1,   183,   184,   185,    -1,   187,   188,   189,
    -1,    -1,    46,    47,    48,    -1,    -1,    94,    95,    96,
    97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   108,    -1,    -1,    -1,   112,    70,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    94,    95,    96,    97,    98,    99,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   108,     6,     7,     8,   112,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,
    31,    32,    33,    34,    -1,    -1,   183,   184,   185,    -1,
   187,   188,   189,    -1,    -1,    46,    47,    48,     6,     7,
     8,    -1,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    -1,    -1,    -1,    24,    -1,    -1,    70,
    -1,    29,    30,    31,    32,    33,    34,    -1,    -1,   183,
   184,   185,    -1,   187,   188,   189,    -1,    -1,    46,    47,
    48,    -1,    -1,    94,    95,    96,    97,    98,    99,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,
    -1,   112,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    94,    95,    96,    97,
    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   108,     6,     7,     8,   112,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    24,
    -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,
    -1,    -1,   183,   184,   185,    -1,   187,   188,   189,    -1,
    -1,    46,    47,    48,     6,     7,     8,    -1,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    -1,    -1,
    -1,    -1,    24,    -1,    -1,    70,    -1,    29,    30,    31,
    32,    33,    34,    -1,    -1,   183,   184,   185,    -1,   187,
   188,   189,    -1,    -1,    46,    47,    48,    -1,    -1,    94,
    95,    96,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   108,    -1,    -1,    -1,   112,    70,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    94,    95,    96,    97,    98,    99,    19,    -1,
    -1,    -1,    -1,    24,    -1,    -1,   108,    -1,    -1,    -1,
   112,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    45,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   183,   184,
   185,    -1,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,
    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,    -1,    -1,
    -1,   183,   184,   185,    -1,   187,   188,   189,   109,   110,
   111,    -1,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,    -1,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
   161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
   171,   172,   173,   174,   175,   176,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   185,   186,   109,   110,   111,   190,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
    -1,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
   163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
   173,   174,   175,   176,    22,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   185,   186,    -1,    -1,    -1,   190,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
    68,    69,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   109,   110,   111,    -1,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,    -1,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
   158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
   168,   169,   170,   171,   172,   173,   174,   175,   176,    -1,
    -1,    -1,    -1,    -1,    19,    -1,    -1,    -1,   186,    24,
    -1,    -1,   190,    -1,    29,    30,    31,    32,    33,    34,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    46,    47,    48,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    70,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    24,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,    34,    24,
    25,    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    46,    47,    48,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    70,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   183,   184,
   185,    -1,   187,   109,   110,   111,    -1,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   112,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
   156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
   166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
   176,    -1,    -1,    -1,    -1,    -1,    -1,   183,   184,   185,
   186,    -1,   188,   189,   190,    -1,    -1,    -1,   183,   184,
   185,    24,   187,    -1,    27,    -1,    29,    30,    31,    32,
    33,    34,    24,    -1,    -1,    27,    -1,    29,    30,    31,
    32,    33,    34,    46,    47,    48,    -1,    -1,    -1,    -1,
    -1,    -1,    24,    25,    46,    47,    48,    29,    30,    31,
    32,    33,    34,    -1,    -1,    -1,    -1,    70,    -1,    -1,
    -1,    -1,    -1,    -1,    46,    47,    48,    -1,    70,    24,
    25,    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    -1,
    -1,    46,    47,    48,    -1,    -1,    24,    -1,    -1,   112,
    -1,    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,
   112,    -1,    -1,    -1,    -1,    70,    24,    -1,    46,    47,
    48,    29,    30,    31,    32,    33,    34,    24,    -1,    -1,
   112,    -1,    29,    30,    31,    32,    33,    34,    46,    47,
    48,    -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,    46,
    47,    48,    -1,    -1,    -1,    -1,    -1,   112,    -1,    -1,
    -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   183,   184,   185,    70,   187,    -1,    -1,    -1,    -1,    -1,
    -1,   183,   184,   185,   112,   187,    -1,    -1,    -1,    -1,
    24,    -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,
    34,   183,   184,   185,   112,   187,    -1,    -1,    -1,    -1,
    -1,    -1,    46,    47,    48,   112,    24,    -1,    -1,    -1,
    -1,    29,    30,    31,    32,    33,    34,    -1,   183,   184,
   185,    -1,   187,    -1,    -1,    -1,    70,    -1,    46,    47,
    48,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   183,   184,   185,    -1,   187,
    -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   183,   184,   185,   112,   187,
    -1,    -1,    -1,    -1,    -1,    -1,   183,   184,   185,    -1,
   187,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   112,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    42,    43,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   183,
   184,   185,    -1,   187,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   183,   184,   185,    -1,   187,
   109,   110,   111,    -1,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,    -1,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
   159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
   169,   170,   171,   172,   173,   174,   175,   176,    45,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   185,   186,    -1,    -1,
    -1,   190,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    67,    68,    69,    -1,    71,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   109,   110,   111,    -1,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,    -1,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,   186,
    -1,    -1,    -1,   190,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    71,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   109,   110,   111,    -1,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,    -1,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
   155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
   165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
   175,   176,    45,    -1,    -1,    -1,    -1,    -1,   183,   184,
   185,   186,    -1,    -1,    -1,   190,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   109,   110,   111,    -1,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
    -1,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
   163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
   173,   174,   175,   176,    67,    68,    69,    -1,    -1,    -1,
    -1,    -1,   185,   186,    -1,    -1,    -1,   190,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   109,   110,   111,    -1,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
    -1,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
   163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
   173,   174,   175,   176,    90,    91,    92,    -1,    -1,    -1,
    -1,    -1,   185,   186,    -1,    -1,    -1,   190,    -1,    -1,
    -1,    -1,    -1,   109,   110,   111,    -1,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,    -1,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
   156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
   166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
   176,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,
   186,   109,   110,   111,   190,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,    -1,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
   158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
   168,   169,   170,   171,   172,   173,   174,   175,   176,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,   186,    -1,
    -1,    -1,   190
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */

/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif



/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 3:
{ context_checkGlobalScope (); ;
    break;}
case 4:
{ context_checkGlobalScope (); ;
    break;}
case 5:
{ uentry_clearDecl (); ;
    break;}
case 6:
{ uentry_clearDecl (); ;
    break;}
case 7:
{ uentry_clearDecl (); ;
    break;}
case 8:
{ uentry_clearDecl (); ;
    break;}
case 9:
{ uentry_clearDecl (); ;
    break;}
case 10:
{ uentry_checkDecl (); exprNode_free (yyvsp[0].expr); ;
    break;}
case 11:
{ uentry_clearDecl (); ;
    break;}
case 12:
{ checkConstant (yyvsp[-6].qtyp, yyvsp[-4].ntyp); ;
    break;}
case 13:
{ checkValueConstant (yyvsp[-9].qtyp, yyvsp[-7].ntyp, yyvsp[-3].expr) ; ;
    break;}
case 14:
{ context_enterFunctionHeader (); ;
    break;}
case 15:
{ 
     declareStaticFunction (yyvsp[-2].ntyp); context_quietExitFunction (); 
     context_exitFunctionHeader (); 
   ;
    break;}
case 16:
{ 
     qtype qint = qtype_create (ctype_int);
     yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, qint);
     qtype_free (qint);
   ;
    break;}
case 17:
{ yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, yyvsp[-2].qtyp); ;
    break;}
case 19:
{ yyval.ntyp = yyvsp[0].ntyp; qtype_adjustPointers (yyvsp[-1].count, idDecl_getTyp (yyval.ntyp)); ;
    break;}
case 20:
{ yyval.ntyp = idDecl_create (yyvsp[0].cname, qtype_unknown ()); ;
    break;}
case 21:
{ yyval.ntyp = idDecl_expectFunction (yyvsp[-2].ntyp); ;
    break;}
case 22:
{ yyval.ntyp = idDecl_replaceCtype (yyvsp[-2].ntyp, ctype_makeArray (idDecl_getCtype (yyvsp[-2].ntyp))); ;
    break;}
case 23:
{
     exprNode_findValue(yyvsp[-2].expr);
     if (exprNode_hasValue (yyvsp[-2].expr)) 
       {
	 yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ctype_makeFixedArray (idDecl_getCtype (yyvsp[-5].ntyp), exprNode_getLongValue (yyvsp[-2].expr)));
       } 
     else
       {
	 yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ctype_makeArray (idDecl_getCtype (yyvsp[-5].ntyp))); 
       }
   ;
    break;}
case 24:
{ setCurrentParams (uentryList_missingParams); ;
    break;}
case 25:
{ /* need to support globals and modifies here! */
     ctype ct = ctype_makeFunction (idDecl_getCtype (yyvsp[-5].ntyp), 
				    uentryList_makeMissingParams ());
     
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ct);
     idDecl_addClauses (yyval.ntyp, yyvsp[0].funcclauselist);
     context_popLoc ();
     /*drl 7/25/01 added*/
     setImplictfcnConstraints();
   ;
    break;}
case 26:
{ setCurrentParams (yyvsp[-1].entrylist); ;
    break;}
case 27:
{ setImplictfcnConstraints ();
     clearCurrentParams ();
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-6].ntyp, ctype_makeFunction (idDecl_getCtype (yyvsp[-6].ntyp), yyvsp[-3].entrylist));
     idDecl_addClauses (yyval.ntyp, yyvsp[0].funcclauselist);
     context_popLoc (); 
   ;
    break;}
case 28:
{ yyval.ntyp = idDecl_create (yyvsp[0].cname, qtype_unknown ()); ;
    break;}
case 29:
{ yyval.ntyp = idDecl_expectFunction (yyvsp[-2].ntyp); ;
    break;}
case 30:
{ yyval.ntyp = idDecl_replaceCtype (yyvsp[-2].ntyp, ctype_makeArray (idDecl_getCtype (yyvsp[-2].ntyp))); ;
    break;}
case 31:
{ 
     int value;

     if (exprNode_hasValue (yyvsp[-2].expr) 
	 && multiVal_isInt (exprNode_getValue (yyvsp[-2].expr)))
       {
	 value = (int) multiVal_forceInt (exprNode_getValue (yyvsp[-2].expr));
       }
     else
       {
	 value = 0;
       }

     yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ctype_makeFixedArray (idDecl_getCtype (yyvsp[-5].ntyp), value));
   ;
    break;}
case 32:
{ setCurrentParams (uentryList_missingParams); ;
    break;}
case 33:
{
     ctype ct = ctype_makeFunction (idDecl_getCtype (yyvsp[-5].ntyp), 
				    uentryList_makeMissingParams ());
     
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ct);
     idDecl_addClauses (yyval.ntyp, yyvsp[0].funcclauselist);
     context_popLoc (); 
   ;
    break;}
case 34:
{ setCurrentParams (yyvsp[-1].entrylist); ;
    break;}
case 35:
{ 
     clearCurrentParams ();
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-6].ntyp, ctype_makeFunction (idDecl_getCtype (yyvsp[-6].ntyp), yyvsp[-3].entrylist));
     idDecl_addClauses (yyval.ntyp, yyvsp[0].funcclauselist);
     context_popLoc (); 
   ;
    break;}
case 36:
{ setCurrentParams (yyvsp[-1].entrylist); ;
    break;}
case 37:
{ clearCurrentParams (); ;
    break;}
case 38:
{ declareCIter (yyvsp[-8].cname, yyvsp[-6].entrylist); ;
    break;}
case 39:
{ exprNode_checkMacroBody (yyvsp[-1].expr); ;
    break;}
case 40:
{ exprNode_checkIterBody (yyvsp[-1].expr); ;
    break;}
case 41:
{ exprNode_checkIterEnd (yyvsp[-1].expr); ;
    break;}
case 42:
{ exprChecks_checkEmptyMacroBody (); ;
    break;}
case 43:
{ clabstract_declareFunction (yyvsp[0].ntyp); ;
    break;}
case 44:
{ yyval.msconstraint = metaStateConstraint_create (yyvsp[-2].msspec, yyvsp[0].msexpr); ;
    break;}
case 45:
{ cscanner_expectingMetaStateName (); ;
    break;}
case 46:
{ cscanner_clearExpectingMetaStateName ();
      yyval.msspec = metaStateSpecifier_create (yyvsp[-3].sr, yyvsp[0].msinfo); ;
    break;}
case 47:
{ cscanner_expectingMetaStateName (); ;
    break;}
case 48:
{ cscanner_clearExpectingMetaStateName ();
      yyval.msspec = metaStateSpecifier_createElipsis (yyvsp[0].msinfo); ;
    break;}
case 49:
{ yyval.msexpr = metaStateExpression_create (yyvsp[0].msspec); ;
    break;}
case 50:
{ yyval.msexpr = metaStateExpression_createMerge (yyvsp[-2].msspec, yyvsp[0].msexpr); ;
    break;}
case 52:
{ yyval.conL = constraintList_add (yyvsp[0].conL, yyvsp[-2].con); ;
    break;}
case 53:
{ yyval.conL = constraintList_single (yyvsp[0].con); ;
    break;}
case 54:
{
 yyval.con = makeConstraintParse3 (yyvsp[-2].conE, yyvsp[-1].tok, yyvsp[0].conE);
 DPRINTF(("Done BufConstraint1\n")); ;
    break;}
case 61:
{yyval.conE = constraintExpr_parseMakeUnaryOp (yyvsp[-3].tok, yyvsp[-1].conE);  DPRINTF( ("Got BufConstraintExpr UNary Op ") ); ;
    break;}
case 62:
{
   DPRINTF( ("Got BufConstraintExpr BINary Op ") );
   yyval.conE = constraintExpr_parseMakeBinaryOp (yyvsp[-3].conE, yyvsp[-2].tok, yyvsp[-1].conE); ;
    break;}
case 63:
{ yyval.conE =  constraintExpr_makeTermsRef (yyvsp[0].sr);;
    break;}
case 64:
{ yyval.conE = constraintExpr_makeIntLiteral (exprNode_getLongValue (yyvsp[0].expr)); ;
    break;}
case 65:
{ /*@-onlytrans@*/ yyval.sr = checkbufferConstraintClausesId (yyvsp[0].entry); /*@=onlytrans@*/ /*@i523@*/ ;
    break;}
case 66:
{ yyval.sr = fixStateClausesId (yyvsp[0].cname); ;
    break;}
case 67:
{ yyval.sr = sRef_makeAnyArrayFetch (yyvsp[-2].sr); ;
    break;}
case 68:
{
    /*
    char *t; int c; 
    t =  cstring_toCharsSafe (exprNode_unparse($3)); 
    c = atoi( t );
    */
    yyval.sr = sRef_makeArrayFetchKnown (yyvsp[-3].sr, exprNode_getLongValue (yyvsp[-1].expr));
  ;
    break;}
case 69:
{ yyval.sr = sRef_constructPointer (yyvsp[0].sr); ;
    break;}
case 70:
{ yyval.sr = yyvsp[-1].sr; ;
    break;}
case 71:
{ cstring_markOwned (yyvsp[0].cname); yyval.sr = sRef_buildField (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 72:
{ cstring_markOwned (yyvsp[0].cname); yyval.sr = sRef_makeArrow (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 76:
{ yyval.funcclauselist = functionClauseList_new (); ;
    break;}
case 77:
{ yyval.funcclauselist = functionClauseList_prepend (yyvsp[0].funcclauselist, yyvsp[-1].funcclause); ;
    break;}
case 78:
{ yyval.funcclauselist = functionClauseList_new (); ;
    break;}
case 79:
{ yyval.funcclauselist = functionClauseList_prepend (yyvsp[0].funcclauselist, yyvsp[-1].funcclause); ;
    break;}
case 80:
{ yyval.funcclause = functionClause_createGlobals (yyvsp[0].globsclause); ;
    break;}
case 81:
{ yyval.funcclause = functionClause_createModifies (yyvsp[0].modsclause); ;
    break;}
case 82:
{ yyval.funcclause = functionClause_createModifies (yyvsp[0].modsclause); ;
    break;}
case 83:
{ yyval.funcclause = functionClause_createState (yyvsp[0].stateclause); ;
    break;}
case 84:
{ yyval.funcclause = yyvsp[0].funcclause; ;
    break;}
case 85:
{ yyval.funcclause = functionClause_createWarn (yyvsp[0].warnclause); ;
    break;}
case 86:
{ yyval.funcclause = functionClause_createGlobals (yyvsp[0].globsclause); ;
    break;}
case 87:
{ yyval.funcclause = functionClause_createModifies (yyvsp[0].modsclause); ;
    break;}
case 88:
{ yyval.funcclause = functionClause_createModifies (yyvsp[0].modsclause); ;
    break;}
case 89:
{ yyval.funcclause = functionClause_createState (yyvsp[0].stateclause); ;
    break;}
case 90:
{ yyval.funcclause = yyvsp[0].funcclause; ;
    break;}
case 91:
{ yyval.funcclause = functionClause_createWarn (yyvsp[0].warnclause); ;
    break;}
case 92:
{ yyval.globsclause = yyvsp[-1].globsclause; ;
    break;}
case 93:
{ setProcessingGlobalsList (); ;
    break;}
case 94:
{ 
     unsetProcessingGlobals (); 
     yyval.globsclause = globalsClause_create (yyvsp[-3].tok, yyvsp[-1].globset); 
   ;
    break;}
case 95:
{ yyval.modsclause = modifiesClause_createNoMods (yyvsp[0].tok); ;
    break;}
case 96:
{ yyval.modsclause = yyvsp[-1].modsclause; ;
    break;}
case 97:
{
     context_setProtectVars (); enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;
    break;}
case 98:
{ 
     exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
     yyval.modsclause = modifiesClause_create (yyvsp[-2].tok, yyvsp[0].srset);
   ;
    break;}
case 99:
{ yyval.flagspec = flagSpec_createPlain (yyvsp[0].cname); ;
    break;}
case 100:
{ yyval.flagspec = flagSpec_createOr (yyvsp[-2].cname, yyvsp[0].flagspec); ;
    break;}
case 103:
{ yyval.warnclause = warnClause_undefined; ;
    break;}
case 104:
{ yyval.warnclause = yyvsp[-1].warnclause; ;
    break;}
case 105:
{      
     llassert (exprNode_knownStringValue (yyvsp[0].expr));
     yyval.warnclause = warnClause_create (yyvsp[-2].tok, yyvsp[-1].flagspec, cstring_copy (multiVal_forceString (exprNode_getValue (yyvsp[0].expr)))); 
     exprNode_free (yyvsp[0].expr);
   ;
    break;}
case 106:
{ yyval.warnclause = warnClause_create (yyvsp[-1].tok, yyvsp[0].flagspec, cstring_undefined); ;
    break;}
case 107:
{ yyval.globset = globSet_single (yyvsp[0].sr); ;
    break;}
case 108:
{ yyval.globset = globSet_insert (yyvsp[-2].globset, yyvsp[0].sr); ;
    break;}
case 109:
{ yyval.sr = clabstract_createGlobal (yyvsp[0].sr, yyvsp[-1].tquallist); ;
    break;}
case 110:
{ yyval.tquallist = qualList_undefined; ;
    break;}
case 111:
{ yyval.tquallist = qualList_add (yyvsp[0].tquallist, yyvsp[-1].typequal); ;
    break;}
case 112:
{ yyval.sr = uentry_getSref (yyvsp[0].entry); ;
    break;}
case 113:
{ yyval.sr = clabstract_unrecognizedGlobal (yyvsp[0].cname); ;
    break;}
case 114:
{ yyval.sr = clabstract_checkGlobal (yyvsp[0].expr); ;
    break;}
case 115:
{ yyval.typequal = qual_createUndef (); ;
    break;}
case 116:
{ yyval.typequal = qual_createKilled (); ;
    break;}
case 117:
{ yyval.typequal = qual_createOut (); ;
    break;}
case 118:
{ yyval.typequal = qual_createIn (); ;
    break;}
case 119:
{ yyval.typequal = qual_createPartial (); ;
    break;}
case 127:
{ 
     qtype qint = qtype_create (ctype_int);
     yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, qint);
     qtype_free (qint);
   ;
    break;}
case 128:
{ yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, yyvsp[-2].qtyp); ;
    break;}
case 129:
{ checkDoneParams (); context_enterInnerContext (); ;
    break;}
case 130:
{  
     exprNode_checkFunctionBody (yyvsp[0].expr); yyval.expr = yyvsp[0].expr; 
     context_exitInner (yyvsp[0].expr); 
   ;
    break;}
case 131:
{ context_enterOldStyleScope (); ;
    break;}
case 132:
{ oldStyleDoneParams (); context_enterInnerContext (); ;
    break;}
case 133:
{
     exprNode_checkFunctionBody (yyvsp[0].expr); 
     yyval.expr = yyvsp[0].expr; /* oldstyle */ 
     context_exitInner (yyvsp[0].expr);
   ;
    break;}
case 134:
{ 
     context_setFunctionDefined (exprNode_loc (yyvsp[0].expr)); 
     exprNode_checkFunction (context_getHeader (),  yyvsp[0].expr); 
     /* DRL 8 8 2000 */
     
     context_exitFunction ();
   ;
    break;}
case 135:
{ yyval.srset = yyvsp[-1].srset; ;
    break;}
case 136:
{ yyval.srset = sRefSet_new (); ;
    break;}
case 137:
{ yyval.sr = uentry_getSref (yyvsp[0].entry); checkModifiesId (yyvsp[0].entry); ;
    break;}
case 138:
{ yyval.sr = fixModifiesId (yyvsp[0].cname); ;
    break;}
case 139:
{ yyval.sr = modListArrayFetch (yyvsp[-2].sr, sRef_undefined); ;
    break;}
case 140:
{ yyval.sr = modListArrayFetch (yyvsp[-3].sr, yyvsp[-1].sr); ;
    break;}
case 141:
{ yyval.sr = modListPointer (yyvsp[0].sr); ;
    break;}
case 142:
{ yyval.sr = yyvsp[-1].sr; ;
    break;}
case 143:
{ yyval.sr = modListFieldAccess (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 144:
{ yyval.sr = modListArrowAccess (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 145:
{ yyval.sr = yyvsp[0].sr; ;
    break;}
case 146:
{ yyval.sr = sRef_makeUnknown (); /* sRef_makeConstant ($1); ? */ ;
    break;}
case 147:
{ yyval.srset = sRefSet_single (yyvsp[0].sr); ;
    break;}
case 148:
{ yyval.srset = sRefSet_insert (yyvsp[-2].srset, yyvsp[0].sr); ;
    break;}
case 149:
{ yyval.sr = checkStateClausesId (yyvsp[0].entry); ;
    break;}
case 150:
{ yyval.sr = fixStateClausesId (yyvsp[0].cname); ;
    break;}
case 151:
{ yyval.sr = sRef_makeAnyArrayFetch (yyvsp[-2].sr); ;
    break;}
case 152:
{ yyval.sr = sRef_makeAnyArrayFetch (yyvsp[-3].sr); ;
    break;}
case 153:
{ yyval.sr = sRef_constructPointer (yyvsp[0].sr); ;
    break;}
case 154:
{ yyval.sr = yyvsp[-1].sr; ;
    break;}
case 155:
{ cstring_markOwned (yyvsp[0].cname);
					    yyval.sr = sRef_buildField (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 156:
{ cstring_markOwned (yyvsp[0].cname);
                                            yyval.sr = sRef_makeArrow (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 157:
{ yyval.srset = sRefSet_undefined ;
    break;}
case 159:
{ if (sRef_isValid (yyvsp[0].sr)) { yyval.srset = sRefSet_single (yyvsp[0].sr); } 
      else { yyval.srset = sRefSet_undefined; } 
    ;
    break;}
case 160:
{ if (sRef_isValid (yyvsp[0].sr))
	{
	  yyval.srset = sRefSet_insert (yyvsp[-2].srset, yyvsp[0].sr); 
	}
      else
	{
	  yyval.srset = yyvsp[-2].srset;
	}
    ;
    break;}
case 161:
{ yyval.expr = exprNode_fromIdentifier (yyvsp[0].entry); ;
    break;}
case 162:
{ yyval.expr = exprNode_fromUIO (yyvsp[0].cname); ;
    break;}
case 164:
{ yyval.expr = exprNode_addParens (yyvsp[-2].tok, yyvsp[-1].expr); ;
    break;}
case 165:
{ yyval.expr = exprNode_fromIdentifier (coerceId (yyvsp[0].cname)); ;
    break;}
case 166:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 168:
{ yyval.expr = exprNode_arrayFetch (yyvsp[-3].expr, yyvsp[-1].expr); ;
    break;}
case 169:
{ yyval.expr = exprNode_functionCall (yyvsp[-2].expr, exprNodeList_new ()); ;
    break;}
case 170:
{ yyval.expr = exprNode_functionCall (yyvsp[-3].expr, yyvsp[-1].exprlist); ;
    break;}
case 171:
{ yyval.expr = exprNode_vaArg (yyvsp[-5].tok, yyvsp[-3].expr, yyvsp[-1].qtyp); ;
    break;}
case 172:
{ yyval.expr = exprNode_fieldAccess (yyvsp[-4].expr, yyvsp[-2].tok, yyvsp[-1].cname); ;
    break;}
case 173:
{ yyval.expr = exprNode_arrowAccess (yyvsp[-4].expr, yyvsp[-2].tok, yyvsp[-1].cname); ;
    break;}
case 174:
{ yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 175:
{ yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 176:
{ yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 177:
{ yyval.exprlist = exprNodeList_push (yyvsp[-2].exprlist, yyvsp[0].expr); ;
    break;}
case 179:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 180:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 181:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 182:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 183:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 184:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 185:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 186:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 187:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 188:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 189:
{ yyval.cstringlist = cstringList_add (yyvsp[-2].cstringlist, yyvsp[0].cname); ;
    break;}
case 190:
{ yyval.cstringlist = cstringList_single (yyvsp[0].cname); ;
    break;}
case 191:
{ yyval.expr = exprNode_offsetof (yyvsp[-5].qtyp, yyvsp[-2].cstringlist); ;
    break;}
case 192:
{ context_setProtectVars (); ;
    break;}
case 193:
{ context_sizeofReleaseVars (); yyval.expr = yyvsp[0].expr; ;
    break;}
case 194:
{ yyval.expr = exprNode_sizeofType (yyvsp[-1].qtyp); ;
    break;}
case 195:
{ yyval.expr = exprNode_sizeofExpr (yyvsp[0].expr); ;
    break;}
case 196:
{ yyval.expr = exprNode_alignofType (yyvsp[-1].qtyp); ;
    break;}
case 197:
{ yyval.expr = exprNode_alignofExpr (yyvsp[0].expr); ;
    break;}
case 199:
{ yyval.expr = exprNode_cast (yyvsp[-3].tok, yyvsp[0].expr, yyvsp[-2].qtyp); ;
    break;}
case 201:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 202:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 203:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 205:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 206:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 208:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 209:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 211:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 212:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 213:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 214:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 216:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 217:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 219:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 221:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 223:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 225:
{ exprNode_produceGuards (yyvsp[-1].expr); 
     context_enterAndClause (yyvsp[-1].expr); 
   ;
    break;}
case 226:
{ 
     yyval.expr = exprNode_op (yyvsp[-3].expr, yyvsp[0].expr, yyvsp[-2].tok); 
     context_exitAndClause (yyval.expr, yyvsp[0].expr);
   ;
    break;}
case 228:
{ 
     exprNode_produceGuards (yyvsp[-1].expr);
     context_enterOrClause (yyvsp[-1].expr); 
   ;
    break;}
case 229:
{ 
     yyval.expr = exprNode_op (yyvsp[-3].expr, yyvsp[0].expr, yyvsp[-2].tok); 
     context_exitOrClause (yyval.expr, yyvsp[0].expr);
   ;
    break;}
case 231:
{ exprNode_produceGuards (yyvsp[-1].expr); context_enterTrueClause (yyvsp[-1].expr); ;
    break;}
case 232:
{ context_enterFalseClause (yyvsp[-4].expr); ;
    break;}
case 233:
{ yyval.expr = exprNode_cond (yyvsp[-6].expr, yyvsp[-3].expr, yyvsp[0].expr); context_exitClause (yyvsp[-6].expr, yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 235:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 236:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 237:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 238:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 239:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 240:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 241:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 242:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 243:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 244:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 245:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 247:
{ yyval.expr = exprNode_comma (yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 248:
{ yyval.expr = exprNode_undefined; ;
    break;}
case 251:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 252:
{ doVaDcl (); yyval.expr = exprNode_makeError (); ;
    break;}
case 253:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 254:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 255:
{
     setProcessingVars (yyvsp[-3].qtyp); 
     processNamedDecl (yyvsp[-1].ntyp); 
   ;
    break;}
case 256:
{ 
     unsetProcessingVars (); 
     yyval.expr = exprNode_makeEmptyInitialization (yyvsp[-6].ntyp); 
     DPRINTF (("Empty initialization: %s", exprNode_unparse (yyval.expr)));
   ;
    break;}
case 257:
{ setProcessingVars (yyvsp[-4].qtyp); processNamedDecl (yyvsp[-2].ntyp); ;
    break;}
case 258:
{ yyval.expr = exprNode_concat (yyvsp[-2].expr, exprNode_makeInitialization (yyvsp[-8].ntyp, yyvsp[-3].expr)); 
     unsetProcessingVars ();
   ;
    break;}
case 259:
{ 
     processNamedDecl (yyvsp[-1].ntyp); 
     yyval.expr = exprNode_makeEmptyInitialization (yyvsp[-1].ntyp);
   ;
    break;}
case 260:
{ processNamedDecl (yyvsp[-2].ntyp); ;
    break;}
case 261:
{ yyval.expr = exprNode_makeInitialization (yyvsp[-5].ntyp, yyvsp[0].expr); ;
    break;}
case 262:
{ setProcessingTypedef (yyvsp[0].qtyp); ;
    break;}
case 263:
{ clabstract_declareType (yyvsp[-3].exprlist, yyvsp[-1].warnclause); ;
    break;}
case 264:
{ /* in the ANSI grammar, semantics unclear */ ;
    break;}
case 265:
{ /* in the ANSI grammar, semantics unclear */ ;
    break;}
case 266:
{ g_expectingTypeName = TRUE; ;
    break;}
case 267:
{ g_expectingTypeName = TRUE; context_pushLoc (); ;
    break;}
case 268:
{ yyval.exprlist = yyvsp[-1].exprlist; ;
    break;}
case 269:
{ yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 270:
{ yyval.exprlist = exprNodeList_push (yyvsp[-3].exprlist, yyvsp[0].expr); ;
    break;}
case 271:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 272:
{ yyval.expr = exprNode_concat (yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 274:
{ yyval.expr = exprNode_makeInitBlock (yyvsp[-2].tok, yyvsp[-1].exprlist); ;
    break;}
case 275:
{ yyval.expr = exprNode_makeInitBlock (yyvsp[-3].tok, yyvsp[-2].exprlist); ;
    break;}
case 276:
{ yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 277:
{ yyval.exprlist = exprNodeList_push (yyvsp[-2].exprlist, yyvsp[0].expr); ;
    break;}
case 278:
{ setStorageClass (SCEXTERN); yyval.typequal = qual_createExtern (); ;
    break;}
case 279:
{ yyval.typequal = qual_createInline (); ;
    break;}
case 280:
{ setStorageClass (SCSTATIC); yyval.typequal = qual_createStatic (); ;
    break;}
case 281:
{ yyval.typequal = qual_createAuto (); ;
    break;}
case 282:
{ yyval.typequal = qual_createRegister (); ;
    break;}
case 283:
{ yyval.typequal = qual_createNullTerminated (); ;
    break;}
case 284:
{ yyval.stateclause = yyvsp[-1].stateclause; ;
    break;}
case 285:
{
     context_setProtectVars (); 
     enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;
    break;}
case 286:
{ 
     exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
     yyval.stateclause = stateClause_createPlain (yyvsp[-5].tok, yyvsp[-2].srset);
   ;
    break;}
case 287:
{ yyval.funcclause = yyvsp[-1].funcclause; ;
    break;}
case 288:
{ yyval.tok = yyvsp[-1].tok; context_enterFunctionHeader (); ;
    break;}
case 289:
{
     context_exitFunctionHeader ();
     context_setProtectVars (); 
     enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;
    break;}
case 290:
{ 
     exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
     yyval.funcclause = functionClause_createState (stateClause_create (yyvsp[-5].tok, yyvsp[-4].typequal, yyvsp[-2].srset));
   ;
    break;}
case 291:
{
     context_setProtectVars (); 
     enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;
    break;}
case 292:
{
     context_exitFunctionHeader ();
     exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
     DPRINTF (("done optGlobBufConstraintsAux\n"));

     if (lltok_isEnsures (yyvsp[-4].tok)) 
       {
	 yyval.funcclause = functionClause_createEnsures (yyvsp[-2].fcnconstraint);
       }
     else if (lltok_isRequires (yyvsp[-4].tok))
       {
	 yyval.funcclause = functionClause_createRequires (yyvsp[-2].fcnconstraint);
       }
     else
       {
	 BADBRANCH;
       }

     DPRINTF (("FunctionclauseS: %s", functionClause_unparse (yyval.funcclause)));
   ;
    break;}
case 293:
{ yyval.fcnconstraint = functionConstraint_createBufferConstraint (yyvsp[0].conL); ;
    break;}
case 294:
{ yyval.fcnconstraint = functionConstraint_createMetaStateConstraint (yyvsp[0].msconstraint); DPRINTF (("Made constraint: %s", functionConstraint_unparse (yyval.fcnconstraint))); ;
    break;}
case 295:
{ yyval.typequal = qual_createExits (); ;
    break;}
case 296:
{ yyval.typequal = qual_createMayExit (); ;
    break;}
case 297:
{ yyval.typequal = qual_createTrueExit (); ;
    break;}
case 298:
{ yyval.typequal = qual_createFalseExit (); ;
    break;}
case 299:
{ yyval.typequal = qual_createNeverExit (); ;
    break;}
case 300:
{ yyval.typequal = qual_createChecked (); ;
    break;}
case 301:
{ yyval.typequal = qual_createCheckMod (); ;
    break;}
case 302:
{ yyval.typequal = qual_createUnchecked (); ;
    break;}
case 303:
{ yyval.typequal = qual_createCheckedStrict (); ;
    break;}
case 304:
{ yyval.typequal = qual_createOwned (); ;
    break;}
case 305:
{ yyval.typequal = qual_createDependent (); ;
    break;}
case 306:
{ yyval.typequal = qual_createYield (); ;
    break;}
case 307:
{ yyval.typequal = qual_createTemp (); ;
    break;}
case 308:
{ yyval.typequal = qual_createOnly (); ;
    break;}
case 309:
{ yyval.typequal = qual_createKeep (); ;
    break;}
case 310:
{ yyval.typequal = qual_createKept (); ;
    break;}
case 311:
{ yyval.typequal = qual_createShared (); ;
    break;}
case 312:
{ yyval.typequal = qual_createUnique (); ;
    break;}
case 313:
{ yyval.typequal = qual_createNull (); ;
    break;}
case 314:
{ yyval.typequal = qual_createIsNull (); ;
    break;}
case 315:
{ yyval.typequal = qual_createRelNull (); ;
    break;}
case 316:
{ yyval.typequal = qual_createNotNull (); ;
    break;}
case 317:
{ yyval.typequal = qual_createExposed (); ;
    break;}
case 318:
{ yyval.typequal = qual_createObserver (); ;
    break;}
case 319:
{ yyval.typequal = qual_createNullTerminated (); ;
    break;}
case 320:
{ yyval.typequal = qual_createMetaState (yyvsp[0].annotation); ;
    break;}
case 321:
{ yyval.typequal = qual_createReturned (); ;
    break;}
case 322:
{ yyval.typequal = qual_createSef (); ;
    break;}
case 323:
{ yyval.typequal = qual_createUnused (); ;
    break;}
case 324:
{ yyval.typequal = qual_createExternal (); ;
    break;}
case 325:
{ yyval.typequal = qual_createTrueNull (); ;
    break;}
case 326:
{ yyval.typequal = qual_createFalseNull (); ;
    break;}
case 327:
{ yyval.typequal = qual_createAbstract (); ;
    break;}
case 328:
{ yyval.typequal = qual_createConcrete (); ;
    break;}
case 329:
{ yyval.typequal = qual_createMutable (); ;
    break;}
case 330:
{ yyval.typequal = qual_createImmutable (); ;
    break;}
case 331:
{ yyval.typequal = qual_createRefCounted (); ;
    break;}
case 332:
{ yyval.typequal = qual_createRefs (); ;
    break;}
case 333:
{ yyval.typequal = qual_createKillRef (); ;
    break;}
case 334:
{ yyval.typequal = qual_createRelDef (); ;
    break;}
case 335:
{ yyval.typequal = qual_createNewRef (); ;
    break;}
case 336:
{ yyval.typequal = qual_createTempRef (); ;
    break;}
case 337:
{ yyval.typequal = qual_createShort (); ;
    break;}
case 338:
{ yyval.typequal = qual_createLong (); ;
    break;}
case 339:
{ yyval.typequal = qual_createSigned (); ;
    break;}
case 340:
{ yyval.typequal = qual_createUnsigned (); ;
    break;}
case 341:
{ yyval.typequal = qual_createOut (); ;
    break;}
case 342:
{ yyval.typequal = qual_createIn (); ;
    break;}
case 343:
{ yyval.typequal = qual_createPartial (); ;
    break;}
case 344:
{ yyval.typequal = qual_createSpecial (); ;
    break;}
case 345:
{ yyval.typequal = qual_createConst (); ;
    break;}
case 346:
{ yyval.typequal = qual_createVolatile (); ;
    break;}
case 347:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 348:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 349:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 350:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 351:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 352:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 353:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 354:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 355:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 362:
{ yyval.ctyp = ctype_unknown; ;
    break;}
case 363:
{ yyval.ctyp = ctype_anyintegral; ;
    break;}
case 364:
{ yyval.ctyp = ctype_unsignedintegral; ;
    break;}
case 365:
{ yyval.ctyp = ctype_signedintegral; ;
    break;}
case 369:
{ yyval.ctyp = ctype_fromQual (yyvsp[-1].typequal); ;
    break;}
case 370:
{ yyval.qtyp = qtype_resolve (yyvsp[-1].qtyp); ;
    break;}
case 371:
{ yyval.qtyp = yyvsp[0].qtyp; ;
    break;}
case 372:
{ yyval.qtyp = qtype_mergeAlt (yyvsp[-3].qtyp, yyvsp[-1].qtyp); ;
    break;}
case 374:
{ yyval.qtyp = qtype_mergeAlt (yyvsp[-2].qtyp, yyvsp[0].qtyp); ;
    break;}
case 375:
{ yyval.qtyp = qtype_addQual (yyvsp[0].qtyp, yyvsp[-1].typequal); ;
    break;}
case 376:
{ yyval.qtyp = qtype_addQual (yyvsp[0].qtyp, yyvsp[-1].typequal); ;
    break;}
case 377:
{ yyval.qtyp = qtype_combine (yyvsp[0].qtyp, yyvsp[-1].ctyp); ;
    break;}
case 378:
{ yyval.qtyp = qtype_unknown (); ;
    break;}
case 379:
{ yyval.qtyp = yyvsp[0].qtyp; ;
    break;}
case 380:
{ sRef_setGlobalScopeSafe (); ;
    break;}
case 381:
{ sRef_clearGlobalScopeSafe (); ;
    break;}
case 382:
{ yyval.ctyp = declareStruct (yyvsp[-8].cname, yyvsp[-3].flist); ;
    break;}
case 383:
{ sRef_setGlobalScopeSafe (); ;
    break;}
case 384:
{ sRef_clearGlobalScopeSafe (); ;
    break;}
case 385:
{ yyval.ctyp = declareUnion (yyvsp[-8].cname, yyvsp[-3].flist); ;
    break;}
case 386:
{ yyval.ctyp = declareStruct (yyvsp[-3].cname, uentryList_new ()); ;
    break;}
case 387:
{ yyval.ctyp = declareUnion (yyvsp[-3].cname, uentryList_new ()); ;
    break;}
case 388:
{ sRef_setGlobalScopeSafe (); ;
    break;}
case 389:
{ sRef_clearGlobalScopeSafe (); ;
    break;}
case 390:
{ yyval.ctyp = declareUnnamedStruct (yyvsp[-3].flist); ;
    break;}
case 391:
{ sRef_setGlobalScopeSafe (); ;
    break;}
case 392:
{ sRef_clearGlobalScopeSafe (); ;
    break;}
case 393:
{ yyval.ctyp = declareUnnamedUnion (yyvsp[-3].flist); ;
    break;}
case 394:
{ yyval.ctyp = ctype_createUnnamedStruct (uentryList_new ()); ;
    break;}
case 395:
{ yyval.ctyp = ctype_createUnnamedUnion (uentryList_new ()); ;
    break;}
case 396:
{ yyval.ctyp = handleStruct (yyvsp[-1].cname); ;
    break;}
case 397:
{ yyval.ctyp = handleUnion (yyvsp[-1].cname); ;
    break;}
case 398:
{ g_expectingTypeName = FALSE; ;
    break;}
case 400:
{ yyval.flist = uentryList_undefined; /* bogus! */ ;
    break;}
case 401:
{ yyval.flist = uentryList_mergeFields (yyvsp[-1].flist, yyvsp[0].flist); ;
    break;}
case 402:
{ yyval.flist = fixUentryList (yyvsp[-2].ntyplist, yyvsp[-4].qtyp); ;
    break;}
case 403:
{ yyval.flist = fixUnnamedDecl (yyvsp[-2].qtyp); ;
    break;}
case 404:
{ yyval.ntyplist = idDeclList_singleton (yyvsp[-1].ntyp); ;
    break;}
case 405:
{ yyval.ntyplist = idDeclList_add (yyvsp[-3].ntyplist, yyvsp[-1].ntyp); ;
    break;}
case 406:
{ yyval.ntyp = yyvsp[0].ntyp; ;
    break;}
case 407:
{ yyval.ntyp = idDecl_undefined; ;
    break;}
case 408:
{ yyval.ntyp = yyvsp[-3].ntyp; ;
    break;}
case 409:
{ yyval.ctyp = declareUnnamedEnum (yyvsp[-2].enumnamelist); ;
    break;}
case 410:
{ context_pushLoc (); ;
    break;}
case 411:
{ context_popLoc (); yyval.ctyp = declareEnum (yyvsp[-5].cname, yyvsp[-2].enumnamelist); ;
    break;}
case 412:
{ yyval.ctyp = handleEnum (yyvsp[-1].cname); ;
    break;}
case 413:
{ yyval.enumnamelist = enumNameList_single (yyvsp[0].cname); ;
    break;}
case 414:
{ yyval.enumnamelist = enumNameList_push (yyvsp[-2].enumnamelist, yyvsp[0].cname); ;
    break;}
case 416:
{ uentry ue = uentry_makeEnumConstant (yyvsp[0].cname, ctype_unknown);
     usymtab_supGlobalEntry (ue);
     yyval.cname = yyvsp[0].cname;
   ;
    break;}
case 417:
{ uentry ue = uentry_makeEnumInitializedConstant (yyvsp[-3].cname, ctype_unknown, yyvsp[0].expr);
     usymtab_supGlobalEntry (ue);
     yyval.cname = yyvsp[-3].cname; 
   ;
    break;}
case 419:
{ yyval.ntyp = idDecl_create (cstring_undefined, qtype_create (yyvsp[0].ctyp)); ;
    break;}
case 420:
{ 
     qtype qt = qtype_unknown ();

     qtype_adjustPointers (yyvsp[-1].count, qt);
     yyval.ntyp = idDecl_create (cstring_copy (LastIdentifier ()), qt);
   ;
    break;}
case 421:
{ yyval.ntyp = yyvsp[0].ntyp; qtype_adjustPointers (yyvsp[-1].count, idDecl_getTyp (yyval.ntyp)); ;
    break;}
case 423:
{ yyval.ntyp = yyvsp[0].ntyp; qtype_adjustPointers (yyvsp[-1].count, idDecl_getTyp (yyval.ntyp)); ;
    break;}
case 424:
{ yyval.entrylist = handleParamTypeList (yyvsp[0].entrylist); ;
    break;}
case 425:
{ yyval.entrylist = handleParamIdList (yyvsp[0].entrylist); ;
    break;}
case 426:
{ /* ignored for now */; ;
    break;}
case 427:
{ ; ;
    break;}
case 428:
{ ; ;
    break;}
case 429:
{ ; ;
    break;}
case 430:
{ yyval.count = 1; ;
    break;}
case 431:
{ yyval.count = 1; ;
    break;}
case 432:
{ yyval.count = 1 + yyvsp[0].count; ;
    break;}
case 433:
{ yyval.count = 1 + yyvsp[0].count; ;
    break;}
case 435:
{ yyval.entrylist = uentryList_add (yyvsp[-2].entrylist, uentry_makeElipsisMarker ()); ;
    break;}
case 436:
{ yyval.entrylist = uentryList_single (uentry_makeVariableLoc (yyvsp[0].cname, ctype_int)); ;
    break;}
case 437:
{ yyval.entrylist = uentryList_add (yyvsp[-2].entrylist, uentry_makeVariableLoc (yyvsp[0].cname, ctype_int)); ;
    break;}
case 438:
{ yyval.entrylist = uentryList_single (uentry_makeElipsisMarker ()); ;
    break;}
case 440:
{ yyval.entrylist = uentryList_add (yyvsp[-2].entrylist, uentry_makeElipsisMarker ()); ;
    break;}
case 441:
{ storeLoc (); ;
    break;}
case 442:
{ yyval.entrylist = uentryList_single (yyvsp[0].oentry); ;
    break;}
case 443:
{ storeLoc (); ;
    break;}
case 444:
{ yyval.entrylist = uentryList_add (yyvsp[-3].entrylist, yyvsp[0].oentry); ;
    break;}
case 445:
{ 
     if (isFlipOldStyle ()) 
       { 
	 llparseerror (cstring_makeLiteral ("Inconsistent function parameter syntax (mixing old and new style declaration)")); 
       }
     else 
       { 
	 setNewStyle (); 
       }
     yyval.oentry = makeCurrentParam (idDecl_fixParamBase (yyvsp[-1].ntyp, yyvsp[-2].qtyp)); 
   ;
    break;}
case 446:
{ 
     idDecl tparam = idDecl_create (yyvsp[0].cname, qtype_unknown ());

     if (isNewStyle ()) 
       {
	 llparseerror (message ("Inconsistent function parameter syntax: %q",
				idDecl_unparse (tparam))); 
       }

     setFlipOldStyle ();
     yyval.oentry = makeCurrentParam (tparam);
     idDecl_free (tparam);
   ;
    break;}
case 448:
{ yyval.qtyp = qtype_newBase (yyvsp[-1].qtyp, yyvsp[0].ctyp); ;
    break;}
case 449:
{ yyval.ctyp = ctype_adjustPointers (yyvsp[0].count, ctype_unknown); ;
    break;}
case 451:
{ yyval.ctyp = ctype_adjustPointers (yyvsp[-1].count, yyvsp[0].ctyp); ;
    break;}
case 452:
{ yyval.ctyp = ctype_unknown; ;
    break;}
case 454:
{ yyval.ctyp = ctype_expectFunction (yyvsp[-1].ctyp); ;
    break;}
case 455:
{ yyval.ctyp = ctype_makeArray (ctype_unknown); ;
    break;}
case 456:
{ yyval.ctyp = ctype_makeFixedArray (ctype_unknown, exprNode_getLongValue (yyvsp[-1].expr)); ;
    break;}
case 457:
{ yyval.ctyp = ctype_makeArray (yyvsp[-2].ctyp); ;
    break;}
case 458:
{ yyval.ctyp = ctype_makeFixedArray (yyvsp[-3].ctyp, exprNode_getLongValue (yyvsp[-1].expr)); ;
    break;}
case 459:
{ yyval.ctyp = ctype_makeFunction (ctype_unknown, uentryList_makeMissingParams ()); ;
    break;}
case 460:
{ yyval.ctyp = ctype_makeParamsFunction (ctype_unknown, yyvsp[-1].entrylist); ;
    break;}
case 461:
{ yyval.ctyp = ctype_makeFunction (yyvsp[-3].ctyp, uentryList_makeMissingParams ()); ;
    break;}
case 462:
{ yyval.ctyp = ctype_makeParamsFunction (yyvsp[-4].ctyp, yyvsp[-1].entrylist); ;
    break;}
case 472:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 475:
{ yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 476:
{ yyval.expr = exprNode_while (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 477:
{ yyval.expr = exprNode_doWhile (yyvsp[-5].expr, yyvsp[-2].expr); ;
    break;}
case 478:
{ yyval.expr = exprNode_doWhile (yyvsp[-4].expr, yyvsp[-1].expr); ;
    break;}
case 479:
{ yyval.expr = exprNode_for (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 480:
{ context_setProtectVars (); ;
    break;}
case 481:
{ context_sizeofReleaseVars (); ;
    break;}
case 482:
{ yyval.expr = exprNode_forPred (yyvsp[-7].expr, yyvsp[-5].expr, yyvsp[-2].expr); 
     context_enterForClause (yyvsp[-5].expr); ;
    break;}
case 483:
{ setProcessingIterVars (yyvsp[-2].entry); ;
    break;}
case 484:
{ yyval.expr = exprNode_iterStart (yyvsp[-5].entry, yyvsp[-1].exprlist); ;
    break;}
case 485:
{ yyval.expr = exprNode_createId (yyvsp[0].entry); ;
    break;}
case 489:
{ yyval.expr = yyvsp[-1].expr; DPRINTF (("def stmt: %s", exprNode_unparse (yyval.expr))); ;
    break;}
case 497:
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 498:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 499:
{ exprNode_checkIfPred (yyvsp[0].expr); ;
    break;}
case 500:
{ /* don't: context_exitTrueClause ($1, $2); */
     yyval.expr = exprNode_if (yyvsp[-2].expr, yyvsp[0].expr); 
   ;
    break;}
case 501:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 502:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 513:
{ yyval.expr = exprNode_addParens (yyvsp[-2].tok, yyvsp[-1].expr); ;
    break;}
case 515:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 516:
{ yyval.expr = exprNode_labelMarker (yyvsp[-1].cname); ;
    break;}
case 517:
{ yyval.expr = exprNode_notReached (yyvsp[0].expr); ;
    break;}
case 518:
{ ; ;
    break;}
case 519:
{ ; ;
    break;}
case 520:
{ context_enterCaseClause (yyvsp[0].expr); ;
    break;}
case 521:
{ yyval.expr = exprNode_caseMarker (yyvsp[-2].expr, FALSE); ;
    break;}
case 522:
{ context_enterCaseClause (yyvsp[0].expr); ;
    break;}
case 523:
{ yyval.expr = exprNode_caseMarker (yyvsp[-2].expr, TRUE); ;
    break;}
case 524:
{ context_enterCaseClause (exprNode_undefined); ;
    break;}
case 525:
{ yyval.expr = exprNode_defaultMarker (yyvsp[-2].tok, FALSE); ;
    break;}
case 526:
{ context_enterCaseClause (exprNode_undefined); ;
    break;}
case 527:
{ yyval.expr = exprNode_defaultMarker (yyvsp[-2].tok, TRUE); ;
    break;}
case 528:
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 529:
{ yyval.expr = yyvsp[0].expr; context_exitInner (yyvsp[0].expr); ;
    break;}
case 530:
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 531:
{ context_enterInnerContext (); ;
    break;}
case 532:
{ context_exitInnerPlain (); ;
    break;}
case 533:
{ context_enterStructInnerContext (); ;
    break;}
case 534:
{ context_exitStructInnerContext (); ;
    break;}
case 535:
{ context_exitInnerSafe (); ;
    break;}
case 536:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 537:
{ yyval.expr = exprNode_notReached (exprNode_createTok (yyvsp[0].tok)); ;
    break;}
case 538:
{ yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 539:
{ yyval.expr = exprNode_notReached (exprNode_updateLocation (yyvsp[-2].expr, lltok_getLoc (yyvsp[0].tok))); ;
    break;}
case 540:
{ yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 541:
{ yyval.expr = exprNode_notReached (exprNode_updateLocation (yyvsp[-2].expr, lltok_getLoc (yyvsp[0].tok))); ;
    break;}
case 542:
{ yyval.expr = exprNode_updateLocation (exprNode_concat (yyvsp[-2].expr, yyvsp[-1].expr), lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 543:
{ yyval.expr = exprNode_notReached (exprNode_updateLocation (exprNode_concat (yyvsp[-3].expr, yyvsp[-2].expr), 
							lltok_getLoc (yyvsp[-1].tok))); 
   ;
    break;}
case 544:
{ yyval.expr = exprNode_makeBlock (yyvsp[0].expr); ;
    break;}
case 545:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 546:
{ yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 547:
{ yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 548:
{ yyval.expr = exprNode_updateLocation (exprNode_concat (yyvsp[-2].expr, yyvsp[-1].expr), lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 550:
{ yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 551:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 552:
{ yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 553:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 554:
{ yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 555:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 556:
{ yyval.expr = exprNode_statement (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 557:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 558:
{ yyval.expr = exprNode_statement (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 559:
{ yyval.expr = exprNode_checkExpr (yyvsp[0].expr); ;
    break;}
case 560:
{ 
     exprNode_produceGuards (yyvsp[-1].expr); context_enterTrueClause (yyvsp[-1].expr); 
     exprNode_checkIfPred (yyvsp[-1].expr);
     yyval.expr = yyvsp[-1].expr;
   ;
    break;}
case 561:
{ 
     context_exitTrueClause (yyvsp[-1].expr, yyvsp[0].expr);
     yyval.expr = exprNode_if (yyvsp[-1].expr, yyvsp[0].expr); 
   ;
    break;}
case 562:
{ context_enterFalseClause (yyvsp[-2].expr); ;
    break;}
case 563:
{
     context_exitClause (yyvsp[-4].expr, yyvsp[-3].expr, yyvsp[0].expr);
     yyval.expr = exprNode_ifelse (yyvsp[-4].expr, yyvsp[-3].expr, yyvsp[0].expr); 
   ;
    break;}
case 564:
{ context_enterSwitch (yyvsp[0].expr); ;
    break;}
case 565:
{ yyval.expr = exprNode_switch (yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 566:
{ yyval.expr = exprNode_whilePred (yyvsp[-1].expr); context_enterWhileClause (yyvsp[-1].expr); ;
    break;}
case 567:
{ yyval.expr = exprNode_whilePred(yyvsp[-1].expr); ;
    break;}
case 568:
{ context_enterIterClause (); ;
    break;}
case 569:
{ setProcessingIterVars (yyvsp[-3].entry); ;
    break;}
case 570:
{ 
     yyval.expr = exprNode_iter (yyvsp[-9].entry, yyvsp[-4].exprlist, yyvsp[-2].expr, yyvsp[-1].entry); 

   ;
    break;}
case 571:
{ yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 572:
{ nextIterParam (); ;
    break;}
case 573:
{ yyval.exprlist = exprNodeList_push (yyvsp[-3].exprlist, yyvsp[0].expr); ;
    break;}
case 574:
{ yyval.expr = exprNode_iterExpr (yyvsp[0].expr); ;
    break;}
case 575:
{ yyval.expr = exprNode_iterId (yyvsp[0].entry); ;
    break;}
case 576:
{ uentry ue = coerceIterId (yyvsp[0].cname);

		      if (uentry_isValid (ue)) 
			{
			  yyval.expr = exprNode_iterId (ue);
			}
		      else
			{
			  yyval.expr = exprNode_iterNewId (cstring_copy (LastIdentifier ()));
			}
		    ;
    break;}
case 577:
{ yyval.expr = exprNode_iterNewId (yyvsp[0].cname); ;
    break;}
case 579:
{ yyval.expr = exprNode_combineLiterals (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 581:
{ yyval.expr = exprNode_addParens (yyvsp[-2].tok, yyvsp[-1].expr); ;
    break;}
case 583:
{ yyval.expr = exprNode_arrayFetch (yyvsp[-3].expr, yyvsp[-1].expr); ;
    break;}
case 584:
{ yyval.expr = exprNode_functionCall (yyvsp[-2].expr, exprNodeList_new ()); ;
    break;}
case 585:
{ yyval.expr = exprNode_functionCall (yyvsp[-3].expr, yyvsp[-1].exprlist); ;
    break;}
case 586:
{ yyval.expr = exprNode_vaArg (yyvsp[-5].tok, yyvsp[-3].expr, yyvsp[-1].qtyp); ;
    break;}
case 587:
{ yyval.expr = exprNode_fieldAccess (yyvsp[-4].expr, yyvsp[-2].tok, yyvsp[-1].cname); ;
    break;}
case 588:
{ yyval.expr = exprNode_arrowAccess (yyvsp[-4].expr, yyvsp[-2].tok, yyvsp[-1].cname); ;
    break;}
case 589:
{ yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 590:
{ yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 592:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 593:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 594:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 595:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 596:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 597:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 598:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 599:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 600:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 602:
{ yyval.expr = exprNode_cast (yyvsp[-3].tok, yyvsp[0].expr, yyvsp[-2].qtyp); ;
    break;}
case 604:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 605:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 606:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 608:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 609:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 611:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 612:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 614:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 615:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 616:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 617:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 619:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 620:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 622:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 624:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 626:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 628:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 630:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 632:
{ context_enterTrueClause (yyvsp[-1].expr); ;
    break;}
case 633:
{ context_enterFalseClause (yyvsp[-4].expr); ;
    break;}
case 634:
{ yyval.expr = exprNode_cond (yyvsp[-6].expr, yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 636:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 637:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 638:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 639:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 640:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 641:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 642:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 643:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 644:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 645:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 646:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 647:
{ yyval.entry = yyvsp[0].entry; ;
    break;}
case 648:
{ yyval.entry = uentry_undefined; ;
    break;}
case 649:
{ context_enterDoWhileClause (); yyval.tok = yyvsp[0].tok; ;
    break;}
case 650:
{ yyval.expr = exprNode_while (yyvsp[-1].expr, yyvsp[0].expr); context_exitWhileClause (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 651:
{ yyval.expr = exprNode_statement (exprNode_doWhile (yyvsp[-5].expr, yyvsp[-2].expr), yyvsp[0].tok); ;
    break;}
case 652:
{ yyval.expr = exprNode_for (yyvsp[-1].expr, yyvsp[0].expr); context_exitForClause (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 653:
{ yyval.expr = exprNode_while (yyvsp[-1].expr, yyvsp[0].expr); context_exitWhileClause (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 654:
{ yyval.expr = exprNode_statement (exprNode_doWhile (yyvsp[-5].expr, yyvsp[-2].expr), yyvsp[0].tok); ;
    break;}
case 655:
{ yyval.expr = exprNode_doWhile (yyvsp[-4].expr, yyvsp[-1].expr); ;
    break;}
case 656:
{ yyval.expr = exprNode_for (yyvsp[-1].expr, yyvsp[0].expr); context_exitForClause (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 657:
{ yyval.expr = exprNode_goto (yyvsp[-1].cname); ;
    break;}
case 658:
{ yyval.expr = exprNode_continue (yyvsp[-1].tok, BADTOK); ;
    break;}
case 659:
{ yyval.expr = exprNode_continue (yyvsp[-2].tok, QINNERCONTINUE); ;
    break;}
case 660:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, BADTOK); ;
    break;}
case 661:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, QSWITCHBREAK); ;
    break;}
case 662:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, QLOOPBREAK); ;
    break;}
case 663:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, QINNERBREAK); ;
    break;}
case 664:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, QSAFEBREAK); ;
    break;}
case 665:
{ yyval.expr = exprNode_nullReturn (yyvsp[-1].tok); ;
    break;}
case 666:
{ yyval.expr = exprNode_return (yyvsp[-1].expr); ;
    break;}
case 668:
{ ; ;
    break;}
case 671:
{ yyval.cname = uentry_getName (yyvsp[0].entry); ;
    break;}
case 672:
{ yyval.cname = uentry_getName (yyvsp[0].entry); ;
    break;}
case 673:
{ yyval.cname = uentry_getName (yyvsp[0].entry); ;
    break;}
case 674:
{ yyval.cname = yyvsp[0].cname; ;
    break;}
case 676:
{ yyval.ctyp = ctype_unknown; ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */


  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}


/*@-redecl@*/ /*@-namechecks@*/
extern char *yytext;
/*@=redecl@*/ /*@=namechecks@*/

# include "bison.reset"

void yyerror (/*@unused@*/ char *s) 
{
  static bool givehint = FALSE;

  if (context_inIterDef ())
    {
      llerror (FLG_SYNTAX, message ("Iter syntax not parseable: %s", 
				    context_inFunctionName ()));
    }
  else if (context_inIterEnd ())
    {
      llerror (FLG_SYNTAX, message ("Iter finalizer syntax not parseable: %s", 
				    context_inFunctionName ()));
    }
  else if (context_inMacro ())
    {
      llerror (FLG_SYNTAX, message ("Macro syntax not parseable: %s", 
				    context_inFunctionName ()));
      
      if (context_inUnknownMacro ())
	{
	  if (!givehint)
	    {
	      llhint (cstring_makeLiteral 
		     ("Precede macro definition with /*@notfunction@*/ "
		      "to suppress checking and force expansion"));
	      givehint = TRUE;
	    }
	}

      swallowMacro ();
      context_exitAllClausesQuiet ();
    }
  else
    {
      llparseerror (cstring_undefined);
    }
}












/*
** Resets all flags in bison.head
*/


/*@=allmacros@*/
/*@=boolint@*/
/*@=charint@*/
/*@=macroparams@*/
/*@=macroundef@*/
/*@=unreachable@*/
/*@=macrospec@*/
/*@=varuse@*/
/*@=ignorequals@*/
/*@=macrostmt@*/
/*@=noeffect@*/
/*@=shadow@*/
/*@=exitarg@*/
/*@=macroredef@*/
/*@=uniondef@*/
/*@=compdef@*/
/*@=matchfields@*/
/*@=exportlocal@*/
/*@=evalorderuncon@*/
/*@=exportheader@*/
/*@=typeuse@*/
/*@=redecl@*/
/*@=redef@*/
/*@=noparams@*/
/*@=ansireserved@*/
/*@=fielduse@*/
/*@=ifblock@*/
/*@=elseifcomplete@*/
/*@=whileblock@*/
/*@=forblock@*/
/*@=branchstate@*/
/*@=readonlytrans@*/
/*@=namechecks@*/
/*@=usedef@*/
/*@=systemunrecog@*/
/*@=dependenttrans@*/
/*@=unqualifiedtrans@*/
/*@=declundef@*/


/*drl added 11/27/2001*/
/*@=bounds@*/
