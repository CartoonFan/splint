/*
** Inserted at beginning of c files generated by bison
** REMEMBER:  Change bison.reset too.
*/

/*@-allmacros@*/
/*@+boolint@*/
/*@+charint@*/
/*@-macroparams@*/
/*@-macroundef@*/
/*@-unreachable@*/
/*@-macrospec@*/
/*@-varuse@*/
/*@+ignorequals@*/
/*@-macrostmt@*/
/*@-noeffect@*/
/*@-shadow@*/
/*@-exitarg@*/
/*@-macroredef@*/
/*@-uniondef@*/
/*@-compdef@*/
/*@-matchfields@*/
/*@-exportlocal@*/
/*@-evalorderuncon@*/
/*@-exportheader@*/
/*@-typeuse@*/
/*@-redecl@*/
/*@-redef@*/
/*@-noparams@*/
/*@-ansireserved@*/
/*@-fielduse@*/
/*@-ifblock@*/
/*@-elseifcomplete@*/
/*@-whileblock@*/
/*@-forblock@*/
/*@-branchstate@*/
/*@-readonlytrans@*/
/*@-namechecks@*/
/*@-usedef@*/
/*@-systemunrecog@*/
/*@-dependenttrans@*/
/*@-unqualifiedtrans@*/
/*@-nullassign@*/
/*@-nullpass@*/
/*@-nullptrarith*/
/*@-usereleased@*/
/*@-declundef@*/

/*drl added 11/27/2001*/
/*@-bounds@*/
/* < end of bison.head > */


/*  A Bison parser, made from cgrammar.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	BADTOK	257
#define	SKIPTOK	258
#define	CTOK_ELIPSIS	259
#define	CASE	260
#define	DEFAULT	261
#define	CIF	262
#define	CELSE	263
#define	SWITCH	264
#define	WHILE	265
#define	DO	266
#define	CFOR	267
#define	GOTO	268
#define	CONTINUE	269
#define	BREAK	270
#define	RETURN	271
#define	TSEMI	272
#define	TLBRACE	273
#define	TRBRACE	274
#define	TCOMMA	275
#define	TCOLON	276
#define	TASSIGN	277
#define	TLPAREN	278
#define	TRPAREN	279
#define	TLSQBR	280
#define	TRSQBR	281
#define	TDOT	282
#define	TAMPERSAND	283
#define	TEXCL	284
#define	TTILDE	285
#define	TMINUS	286
#define	TPLUS	287
#define	TMULT	288
#define	TDIV	289
#define	TPERCENT	290
#define	TLT	291
#define	TGT	292
#define	TCIRC	293
#define	TBAR	294
#define	TQUEST	295
#define	CSIZEOF	296
#define	CALIGNOF	297
#define	CTYPEOF	298
#define	ARROW_OP	299
#define	CTYPEDEF	300
#define	COFFSETOF	301
#define	INC_OP	302
#define	DEC_OP	303
#define	LEFT_OP	304
#define	RIGHT_OP	305
#define	LE_OP	306
#define	GE_OP	307
#define	EQ_OP	308
#define	NE_OP	309
#define	AND_OP	310
#define	OR_OP	311
#define	MUL_ASSIGN	312
#define	DIV_ASSIGN	313
#define	MOD_ASSIGN	314
#define	ADD_ASSIGN	315
#define	SUB_ASSIGN	316
#define	LEFT_ASSIGN	317
#define	RIGHT_ASSIGN	318
#define	AND_ASSIGN	319
#define	XOR_ASSIGN	320
#define	OR_ASSIGN	321
#define	CSTRUCT	322
#define	CUNION	323
#define	CENUM	324
#define	VA_ARG	325
#define	VA_DCL	326
#define	QWARN	327
#define	QGLOBALS	328
#define	QMODIFIES	329
#define	QNOMODS	330
#define	QCONSTANT	331
#define	QFUNCTION	332
#define	QITER	333
#define	QDEFINES	334
#define	QUSES	335
#define	QALLOCATES	336
#define	QSETS	337
#define	QRELEASES	338
#define	QPRECLAUSE	339
#define	QPOSTCLAUSE	340
#define	QINVARIANT	341
#define	QALT	342
#define	QUNDEF	343
#define	QKILLED	344
#define	QENDMACRO	345
#define	LLMACRO	346
#define	LLMACROITER	347
#define	LLMACROEND	348
#define	TENDMACRO	349
#define	QSWITCHBREAK	350
#define	QLOOPBREAK	351
#define	QINNERBREAK	352
#define	QSAFEBREAK	353
#define	QINNERCONTINUE	354
#define	QFALLTHROUGH	355
#define	QLINTNOTREACHED	356
#define	QLINTFALLTHROUGH	357
#define	QLINTFALLTHRU	358
#define	QARGSUSED	359
#define	QPRINTFLIKE	360
#define	QLINTPRINTFLIKE	361
#define	QSCANFLIKE	362
#define	QMESSAGELIKE	363
#define	QNOTREACHED	364
#define	QCONST	365
#define	QVOLATILE	366
#define	QINLINE	367
#define	QEXTENSION	368
#define	QEXTERN	369
#define	QSTATIC	370
#define	QAUTO	371
#define	QREGISTER	372
#define	QOUT	373
#define	QIN	374
#define	QYIELD	375
#define	QONLY	376
#define	QTEMP	377
#define	QSHARED	378
#define	QREF	379
#define	QUNIQUE	380
#define	QCHECKED	381
#define	QUNCHECKED	382
#define	QCHECKEDSTRICT	383
#define	QCHECKMOD	384
#define	QKEEP	385
#define	QKEPT	386
#define	QPARTIAL	387
#define	QSPECIAL	388
#define	QOWNED	389
#define	QDEPENDENT	390
#define	QRETURNED	391
#define	QEXPOSED	392
#define	QNULL	393
#define	QOBSERVER	394
#define	QISNULL	395
#define	QEXITS	396
#define	QMAYEXIT	397
#define	QNEVEREXIT	398
#define	QTRUEEXIT	399
#define	QFALSEEXIT	400
#define	QLONG	401
#define	QSIGNED	402
#define	QUNSIGNED	403
#define	QSHORT	404
#define	QUNUSED	405
#define	QSEF	406
#define	QNOTNULL	407
#define	QRELNULL	408
#define	QABSTRACT	409
#define	QCONCRETE	410
#define	QMUTABLE	411
#define	QIMMUTABLE	412
#define	QTRUENULL	413
#define	QFALSENULL	414
#define	QEXTERNAL	415
#define	QREFCOUNTED	416
#define	QREFS	417
#define	QNEWREF	418
#define	QTEMPREF	419
#define	QKILLREF	420
#define	QRELDEF	421
#define	CGCHAR	422
#define	CBOOL	423
#define	CINT	424
#define	CGFLOAT	425
#define	CDOUBLE	426
#define	CVOID	427
#define	QANYTYPE	428
#define	QINTEGRALTYPE	429
#define	QUNSIGNEDINTEGRALTYPE	430
#define	QSIGNEDINTEGRALTYPE	431
#define	QNULLTERMINATED	432
#define	QSETBUFFERSIZE	433
#define	QSETSTRINGLENGTH	434
#define	QMAXSET	435
#define	QMAXREAD	436
#define	QTESTINRANGE	437
#define	TCAND	438
#define	IDENTIFIER	439
#define	NEW_IDENTIFIER	440
#define	TYPE_NAME_OR_ID	441
#define	CANNOTATION	442
#define	CCONSTANT	443
#define	ITER_NAME	444
#define	ITER_ENDNAME	445
#define	TYPE_NAME	446
#define	METASTATE_NAME	447


/*
**
** cgrammar.y
**
** Yacc/Bison grammar for extended ANSI C used by Splint.
**
** original grammar by Nate Osgood ---
**    hacrat@catfish.lcs.mit.edu Mon Jun 14 13:06:32 1993
**
** changes for Splint --- handle typedef names correctly
** fix struct/union parsing bug (empty struct is accepted)
** add productions to handle macros --- require
** error correction --- main source of conflicts in grammar.
** need to process initializations sequentially, L->R
**
** production names are cryptic, so more productions fit on one line
**
** conflicts:  87 shift/reduce, 18 reduce/reduce
** most of these are due to handling macros
** a few are due to handling type expressions
*/

/*@=allmacros@*/

extern int yylex ();
extern void swallowMacro (void);
extern void yyerror (char *);

# include "splintMacros.nf"
# include "basic.h"
# include "cscanner.h"
# include "cgrammar.h"
# include "exprChecks.h"

/*@-allmacros@*/
/*@-matchfields@*/

# define SHOWCSYM FALSE

/*
** This is necessary, or else when the bison-generated code #include's malloc.h,
** there will be a parse error.
**
** Unfortunately, it means the error checking on malloc, etc. is lost for allocations
** in bison-generated files under Win32.
*/

# ifdef WIN32
# undef malloc
# undef calloc
# undef realloc
# endif


typedef union
{
  lltok tok;
  int count;
  qual typequal;
  qualList tquallist;
  ctype ctyp;
  /*@dependent@*/ sRef sr;
  /*@only@*/ sRef osr;

  /*@only@*/ functionClauseList funcclauselist;
  /*@only@*/ functionClause funcclause;  
  /*@only@*/ flagSpec flagspec;
  /*@only@*/ globalsClause globsclause;
  /*@only@*/ modifiesClause modsclause;
  /*@only@*/ warnClause warnclause;
  /*@only@*/ stateClause stateclause;

  /*@only@*/ functionConstraint fcnconstraint; 

  /*@only@*/ metaStateConstraint msconstraint;
  /*@only@*/ metaStateSpecifier msspec;
  /*@only@*/ metaStateExpression msexpr;
  /*@observer@*/ metaStateInfo msinfo;

  /*@only@*/ sRefList srlist;
  /*@only@*/ globSet globset;
  /*@only@*/ qtype qtyp;
  /*@only@*/ cstring cname;
  /*@observer@*/ annotationInfo annotation;
  /*@only@*/ idDecl ntyp;
  /*@only@*/ idDeclList ntyplist;
  /*@only@*/ uentryList flist;
  /*@owned@*/ uentryList entrylist;
  /*@observer@*/ /*@dependent@*/ uentry entry;
  /*@only@*/ uentry oentry;
  /*@only@*/ exprNode expr;
  /*@only@*/ enumNameList enumnamelist;
  /*@only@*/ exprNodeList exprlist;
  /*@only@*/ sRefSet srset; 
  /*@only@*/ cstringList cstringlist;

  /*drl
    added 1/19/2001
  */
  constraint con;
  constraintList conL;
  constraintExpr conE;
  /* drl */  
} YYSTYPE;
#ifndef YYDEBUG
#define YYDEBUG 1
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1233
#define	YYFLAG		-32768
#define	YYNTBASE	194

#define YYTRANSLATE(x) ((unsigned)(x) <= 447 ? yytranslate[x] : 459)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
   177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
   187,   188,   189,   190,   191,   192,   193
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     1,     3,     5,     8,    11,    13,    15,    17,    19,
    21,    23,    25,    34,    46,    47,    53,    55,    59,    61,
    64,    66,    73,    77,    84,    85,    92,    93,   101,   103,
   110,   114,   121,   122,   129,   130,   138,   139,   140,   151,
   155,   159,   163,   166,   168,   172,   173,   178,   179,   184,
   186,   190,   192,   194,   196,   200,   202,   206,   208,   210,
   212,   214,   216,   218,   223,   229,   231,   233,   235,   237,
   241,   246,   249,   253,   257,   261,   263,   265,   267,   268,
   271,   272,   275,   277,   279,   281,   283,   285,   287,   289,
   291,   293,   295,   297,   299,   302,   303,   308,   310,   313,
   314,   318,   320,   324,   326,   328,   329,   332,   336,   339,
   341,   345,   348,   349,   352,   354,   356,   358,   360,   362,
   364,   366,   368,   370,   372,   374,   376,   378,   380,   382,
   384,   388,   389,   393,   394,   395,   400,   403,   406,   408,
   410,   412,   416,   421,   424,   428,   432,   436,   438,   440,
   442,   446,   448,   450,   454,   459,   462,   466,   470,   474,
   475,   477,   479,   483,   485,   487,   489,   493,   495,   497,
   498,   503,   505,   510,   514,   519,   526,   532,   538,   541,
   544,   552,   554,   558,   560,   563,   566,   569,   572,   575,
   578,   581,   584,   586,   588,   592,   594,   604,   605,   609,
   614,   617,   622,   625,   627,   632,   634,   638,   642,   646,
   648,   652,   656,   658,   662,   666,   668,   672,   676,   680,
   684,   686,   690,   694,   696,   700,   702,   706,   708,   712,
   714,   715,   720,   722,   723,   728,   730,   731,   732,   740,
   742,   746,   750,   754,   758,   762,   766,   770,   774,   778,
   782,   786,   788,   792,   793,   795,   797,   799,   801,   803,
   807,   808,   818,   819,   831,   834,   835,   842,   843,   852,
   857,   862,   863,   864,   867,   869,   874,   875,   880,   882,
   886,   891,   894,   897,   900,   902,   905,   909,   912,   914,
   918,   920,   922,   924,   926,   928,   931,   932,   939,   942,
   945,   946,   953,   954,   960,   962,   964,   966,   968,   970,
   972,   974,   976,   978,   980,   982,   984,   986,   988,   990,
   992,   994,   996,   998,  1000,  1002,  1004,  1006,  1008,  1010,
  1012,  1014,  1016,  1018,  1020,  1022,  1024,  1026,  1028,  1030,
  1032,  1034,  1036,  1038,  1040,  1042,  1044,  1046,  1048,  1050,
  1052,  1054,  1056,  1058,  1060,  1062,  1064,  1067,  1070,  1073,
  1076,  1079,  1082,  1085,  1088,  1091,  1094,  1097,  1100,  1103,
  1106,  1109,  1112,  1115,  1118,  1121,  1124,  1127,  1130,  1133,
  1136,  1139,  1143,  1145,  1150,  1152,  1156,  1159,  1162,  1165,
  1166,  1168,  1169,  1170,  1171,  1184,  1185,  1186,  1198,  1205,
  1212,  1213,  1214,  1225,  1226,  1227,  1238,  1244,  1250,  1255,
  1260,  1261,  1263,  1265,  1268,  1274,  1278,  1281,  1286,  1288,
  1292,  1297,  1304,  1305,  1314,  1319,  1321,  1325,  1328,  1330,
  1335,  1337,  1339,  1342,  1345,  1347,  1350,  1352,  1355,  1357,
  1359,  1361,  1364,  1366,  1369,  1372,  1376,  1378,  1382,  1384,
  1388,  1390,  1392,  1396,  1397,  1400,  1401,  1406,  1411,  1413,
  1415,  1418,  1420,  1422,  1425,  1426,  1428,  1434,  1437,  1441,
  1445,  1450,  1454,  1459,  1464,  1470,  1472,  1474,  1476,  1478,
  1480,  1482,  1484,  1486,  1488,  1490,  1492,  1494,  1497,  1500,
  1508,  1515,  1518,  1519,  1520,  1531,  1532,  1539,  1541,  1543,
  1545,  1547,  1550,  1552,  1554,  1556,  1558,  1560,  1562,  1564,
  1568,  1570,  1571,  1575,  1578,  1581,  1583,  1585,  1587,  1589,
  1591,  1593,  1595,  1597,  1599,  1601,  1605,  1607,  1609,  1612,
  1615,  1616,  1619,  1620,  1625,  1626,  1633,  1634,  1638,  1639,
  1645,  1649,  1652,  1656,  1657,  1658,  1659,  1660,  1661,  1663,
  1666,  1669,  1673,  1676,  1680,  1684,  1689,  1692,  1695,  1699,
  1703,  1708,  1710,  1713,  1715,  1718,  1720,  1724,  1726,  1731,
  1733,  1736,  1738,  1741,  1743,  1746,  1748,  1753,  1756,  1757,
  1763,  1764,  1771,  1776,  1781,  1782,  1783,  1794,  1796,  1797,
  1802,  1804,  1806,  1808,  1810,  1812,  1815,  1817,  1821,  1823,
  1828,  1832,  1837,  1844,  1850,  1856,  1859,  1862,  1864,  1867,
  1870,  1873,  1876,  1879,  1882,  1885,  1888,  1890,  1892,  1897,
  1899,  1903,  1907,  1911,  1913,  1917,  1921,  1923,  1927,  1931,
  1933,  1937,  1941,  1945,  1949,  1951,  1955,  1959,  1961,  1965,
  1967,  1971,  1973,  1977,  1979,  1983,  1985,  1989,  1991,  1992,
  1993,  2001,  2003,  2007,  2011,  2015,  2019,  2023,  2027,  2031,
  2035,  2039,  2043,  2047,  2049,  2050,  2052,  2055,  2063,  2066,
  2069,  2077,  2084,  2087,  2091,  2094,  2098,  2101,  2105,  2109,
  2113,  2117,  2120,  2124,  2125,  2127,  2128,  2130,  2132,  2134,
  2136,  2138,  2140,  2142,  2144,  2146,  2151
};

static const short yyrhs[] = {    -1,
   195,     0,   196,     0,   195,   196,     0,   257,   454,     0,
   197,     0,   198,     0,   208,     0,   211,     0,   295,     0,
    18,     0,     1,     0,    77,   336,   350,   360,   350,   454,
   303,    91,     0,    77,   336,   350,   360,   350,    23,   303,
   308,   307,   454,    91,     0,     0,    78,   199,   200,   454,
    91,     0,   201,     0,   336,   350,   201,     0,   205,     0,
   364,   205,     0,   457,     0,   303,    24,   350,   360,   303,
    25,     0,   202,    26,    27,     0,   202,    26,   303,   294,
    27,   350,     0,     0,   202,   304,    24,    25,   203,   229,
     0,     0,   202,   304,    24,   361,    25,   204,   229,     0,
   457,     0,   303,    24,   350,   201,   303,    25,     0,   205,
    26,    27,     0,   205,    26,   303,   294,    27,   350,     0,
     0,   205,   304,    24,    25,   206,   230,     0,     0,   205,
   304,    24,   361,    25,   207,   230,     0,     0,     0,    79,
   457,    24,   361,    25,   209,   230,   210,   454,    91,     0,
    92,   391,    95,     0,    93,   377,    95,     0,    94,   378,
    95,     0,    92,    95,     0,   252,     0,   214,    23,   217,
     0,     0,   226,   215,    22,   218,     0,     0,     5,   216,
    22,   218,     0,   214,     0,   214,    40,   217,     0,   193,
     0,   184,     0,    56,     0,   221,   219,   220,     0,   221,
     0,   224,   223,   224,     0,   181,     0,   182,     0,    53,
     0,    52,     0,    54,     0,   225,     0,   227,    24,   224,
    25,     0,    24,   224,   228,   224,    25,     0,   226,     0,
   189,     0,   456,     0,   186,     0,   226,    26,    27,     0,
   226,    26,   189,    27,     0,    34,   226,     0,    24,   226,
    25,     0,   226,    28,   457,     0,   226,    45,   457,     0,
   222,     0,    33,     0,    32,     0,     0,   231,   229,     0,
     0,   232,   230,     0,   233,     0,   237,     0,   236,     0,
   314,     0,   317,     0,   243,     0,   234,     0,   238,     0,
   236,     0,   315,     0,   319,     0,   244,     0,   234,    91,
     0,     0,    74,   235,   245,   454,     0,    76,     0,   238,
    91,     0,     0,    75,   239,   258,     0,   241,     0,   241,
    40,   240,     0,   186,     0,   243,     0,     0,   244,    91,
     0,    73,   240,   430,     0,    73,   240,     0,   246,     0,
   245,    21,   246,     0,   247,   248,     0,     0,   249,   247,
     0,   456,     0,   186,     0,   295,     0,    89,     0,    90,
     0,   119,     0,   120,     0,   133,     0,    80,     0,    81,
     0,    82,     0,    83,     0,    84,     0,    85,     0,    86,
     0,   360,     0,   336,   350,   360,     0,     0,    19,   254,
   408,     0,     0,     0,   255,   412,   256,   401,     0,   212,
   253,     0,   261,   454,     0,   454,     0,   456,     0,   186,
     0,   259,    26,    27,     0,   259,    26,   260,    27,     0,
    34,   259,     0,    24,   259,    25,     0,   259,    28,   457,
     0,   259,    45,   457,     0,   259,     0,   430,     0,   259,
     0,   261,    21,   259,     0,   456,     0,   186,     0,   262,
    26,    27,     0,   262,    26,   260,    27,     0,    34,   262,
     0,    24,   262,    25,     0,   262,    28,   457,     0,   262,
    45,   457,     0,     0,   264,     0,   262,     0,   264,    21,
   262,     0,   456,     0,   186,     0,   430,     0,    24,   292,
    25,     0,   187,     0,   114,     0,     0,    24,   266,   401,
    25,     0,   265,     0,   267,    26,   292,    27,     0,   267,
    24,    25,     0,   267,    24,   268,    25,     0,    71,    24,
   291,    21,   372,    25,     0,   267,   350,    28,   457,   303,
     0,   267,   350,    45,   457,   303,     0,   267,    48,     0,
   267,    49,     0,    24,   372,    25,    19,   413,   455,    20,
     0,   291,     0,   268,    21,   291,     0,   267,     0,    48,
   269,     0,    49,   269,     0,    29,   275,     0,    34,   275,
     0,    33,   275,     0,    32,   275,     0,    31,   275,     0,
    30,   275,     0,   272,     0,   271,     0,   270,    28,   457,
     0,   457,     0,    47,   303,    24,   372,   350,    21,   270,
    25,   303,     0,     0,   303,   273,   274,     0,    42,    24,
   372,    25,     0,    42,   269,     0,    43,    24,   372,    25,
     0,    43,   269,     0,   269,     0,    24,   372,    25,   275,
     0,   275,     0,   276,    34,   275,     0,   276,    35,   275,
     0,   276,    36,   275,     0,   276,     0,   277,    33,   276,
     0,   277,    32,   276,     0,   277,     0,   278,    50,   277,
     0,   278,    51,   277,     0,   278,     0,   279,    37,   278,
     0,   279,    38,   278,     0,   279,    52,   278,     0,   279,
    53,   278,     0,   279,     0,   280,    54,   279,     0,   280,
    55,   279,     0,   280,     0,   281,    29,   280,     0,   281,
     0,   282,    39,   281,     0,   282,     0,   283,    40,   282,
     0,   283,     0,     0,   284,    56,   285,   283,     0,   284,
     0,     0,   286,    57,   287,   284,     0,   286,     0,     0,
     0,   286,    41,   289,   292,    22,   290,   288,     0,   288,
     0,   269,    23,   291,     0,   269,    58,   291,     0,   269,
    59,   291,     0,   269,    60,   291,     0,   269,    61,   291,
     0,   269,    62,   291,     0,   269,    63,   291,     0,   269,
    64,   291,     0,   269,    65,   291,     0,   269,    66,   291,
     0,   269,    67,   291,     0,   291,     0,   292,    21,   291,
     0,     0,   292,     0,   288,     0,   296,     0,    72,     0,
   301,     0,   336,   303,    18,     0,     0,   336,   350,   360,
   350,   297,   303,   307,    18,   303,     0,     0,   336,   350,
   360,   350,    23,   298,   303,   308,   307,    18,   303,     0,
   360,   350,     0,     0,   360,   350,    23,   300,   303,   308,
     0,     0,    46,   336,   302,   350,   305,   303,   242,    18,
     0,    46,   336,   303,    18,     0,    46,   305,   303,    18,
     0,     0,     0,   306,   303,     0,   299,     0,   305,    21,
   350,   299,     0,     0,   307,    21,   350,   299,     0,   291,
     0,    19,   312,    20,     0,    19,   312,    21,    20,     0,
   309,   308,     0,   310,    23,     0,   457,    22,     0,   311,
     0,   310,   311,     0,    26,   294,    27,     0,    28,   457,
     0,   308,     0,   312,    21,   308,     0,   115,     0,   113,
     0,   116,     0,   117,     0,   118,     0,   315,    91,     0,
     0,   250,   350,   316,   264,   454,   303,     0,   319,    91,
     0,   251,   350,     0,     0,   318,   325,   320,   263,   454,
   303,     0,     0,   318,   321,   322,   454,   303,     0,   220,
     0,   213,     0,   142,     0,   143,     0,   145,     0,   146,
     0,   144,     0,   127,     0,   130,     0,   128,     0,   129,
     0,   135,     0,   136,     0,   121,     0,   123,     0,   122,
     0,   131,     0,   132,     0,   124,     0,   126,     0,   139,
     0,   141,     0,   154,     0,   153,     0,   138,     0,   140,
     0,   178,     0,   188,     0,   137,     0,   152,     0,   151,
     0,   161,     0,   159,     0,   160,     0,   155,     0,   156,
     0,   157,     0,   158,     0,   162,     0,   163,     0,   166,
     0,   167,     0,   164,     0,   165,     0,   150,     0,   147,
     0,   148,     0,   149,     0,   119,     0,   120,     0,   133,
     0,   134,     0,   111,   303,     0,   112,   303,     0,   332,
   303,     0,   325,   303,     0,   323,   303,     0,   326,   303,
     0,   324,   303,     0,   328,   303,     0,   327,   303,     0,
   329,   303,     0,   330,   303,     0,   168,   350,     0,   170,
   350,     0,   169,   350,     0,   171,   350,     0,   172,   350,
     0,   173,   350,     0,   174,   350,     0,   175,   350,     0,
   176,   350,     0,   177,   350,     0,   458,   350,     0,   341,
   350,     0,   355,   350,     0,   331,   350,     0,   303,   336,
   303,     0,   338,     0,   338,    88,   337,    91,     0,   372,
     0,   372,    21,   337,     0,   313,   339,     0,   333,   339,
     0,   334,   339,     0,     0,   336,     0,     0,     0,     0,
   350,    68,   457,   303,    19,   342,   405,   351,   406,   343,
    20,   340,     0,     0,     0,   350,    69,   457,   303,    19,
   344,   405,   351,   406,   345,    20,     0,   350,    68,   457,
   303,    19,    20,     0,   350,    69,   457,   303,    19,    20,
     0,     0,     0,   350,    68,   303,    19,   346,   405,   351,
   406,   347,    20,     0,     0,     0,   350,    69,   303,    19,
   348,   405,   351,   406,   349,    20,     0,   350,    68,   303,
    19,    20,     0,   350,    69,   303,    19,    20,     0,   350,
    68,   457,   350,     0,   350,    69,   457,   350,     0,     0,
   352,     0,   211,     0,   351,   352,     0,   336,   350,   353,
   303,    18,     0,   336,   303,    18,     0,   354,   350,     0,
   353,    21,   354,   350,     0,   360,     0,    22,   303,   294,
     0,   360,    22,   303,   294,     0,   350,    70,    19,   357,
    20,   303,     0,     0,   350,    70,   457,    19,   356,   357,
    20,   303,     0,   350,    70,   457,   303,     0,   358,     0,
   357,    21,   358,     0,   357,    21,     0,   457,     0,   457,
    23,   303,   294,     0,   202,     0,   374,     0,   364,   192,
     0,   364,   359,     0,   202,     0,   364,   202,     0,   367,
     0,   350,   365,     0,   111,     0,   112,     0,   362,     0,
   363,   362,     0,    34,     0,    34,   363,     0,    34,   364,
     0,    34,   363,   364,     0,   366,     0,   366,    21,     5,
     0,   457,     0,   366,    21,   457,     0,     5,     0,   368,
     0,   368,    21,     5,     0,     0,   369,   371,     0,     0,
   368,    21,   370,   371,     0,   303,   336,   359,   303,     0,
   457,     0,   335,     0,   335,   373,     0,   364,     0,   375,
     0,   364,   375,     0,     0,   375,     0,   303,    24,   350,
   373,    25,     0,    26,    27,     0,    26,   294,    27,     0,
   375,    26,    27,     0,   375,    26,   294,    27,     0,   303,
    24,    25,     0,   303,    24,   367,    25,     0,   375,   303,
    24,    25,     0,   375,   303,    24,   367,    25,     0,   393,
     0,   395,     0,   398,     0,   401,     0,   416,     0,   419,
     0,   451,     0,   424,     0,   453,     0,   379,     0,   377,
     0,   386,     0,   379,   386,     0,   423,   379,     0,   450,
   392,    11,    24,   292,    25,    18,     0,   450,   392,    11,
    24,   292,    25,     0,   381,   386,     0,     0,     0,    13,
    24,   293,    18,   293,    18,   382,   293,   383,    25,     0,
     0,   190,   403,    24,   385,   427,    25,     0,   191,     0,
   393,     0,   395,     0,   398,     0,   389,   412,     0,   389,
     0,   390,     0,   416,     0,   387,     0,   380,     0,   384,
     0,   453,     0,    24,   386,    25,     0,     1,     0,     0,
   418,   388,   386,     0,   403,    19,     0,   407,    20,     0,
   392,     0,   411,     0,   393,     0,   395,     0,   398,     0,
   402,     0,   417,     0,   419,     0,   424,     0,   452,     0,
    24,   392,    25,     0,   453,     0,     1,     0,   457,    22,
     0,   110,   376,     0,     0,   101,   394,     0,     0,     6,
   294,   396,    22,     0,     0,   101,   394,     6,   294,   397,
    22,     0,     0,     7,   399,    22,     0,     0,   101,   394,
     7,   400,    22,     0,    24,   401,    25,     0,   403,   409,
     0,   403,   410,   404,     0,     0,     0,     0,     0,     0,
    20,     0,   110,    20,     0,   415,    20,     0,   415,   110,
    20,     0,   412,    20,     0,   412,   110,    20,     0,   412,
   415,    20,     0,   412,   415,   110,    20,     0,    19,   408,
     0,    19,    20,     0,    19,   411,    20,     0,    19,   412,
    20,     0,    19,   412,   415,    20,     0,   392,     0,   411,
   392,     0,   295,     0,   412,   295,     0,   414,     0,   413,
    21,   414,     0,   291,     0,    19,   413,   455,    20,     0,
   376,     0,   415,   376,     0,    18,     0,   292,    18,     0,
    18,     0,   292,    18,     0,   292,     0,     8,    24,   292,
    25,     0,   418,   376,     0,     0,   418,   376,     9,   420,
   376,     0,     0,    10,    24,   292,   421,    25,   376,     0,
    11,    24,   292,    25,     0,    11,    24,   292,    25,     0,
     0,     0,   190,   425,   403,    24,   426,   427,    25,   401,
   449,   404,     0,   429,     0,     0,   427,   428,    21,   429,
     0,   448,     0,   456,     0,   187,     0,   186,     0,   189,
     0,   430,   189,     0,   430,     0,    24,   292,    25,     0,
   431,     0,   267,    26,   292,    27,     0,   267,    24,    25,
     0,   267,    24,   268,    25,     0,    71,    24,   291,    21,
   372,    25,     0,   267,   350,    28,   457,   303,     0,   267,
   350,    45,   457,   303,     0,   267,    48,     0,   267,    49,
     0,   432,     0,    48,   269,     0,    49,   269,     0,    29,
   275,     0,    34,   275,     0,    33,   275,     0,    32,   275,
     0,    31,   275,     0,    30,   275,     0,   272,     0,   433,
     0,    24,   372,    25,   275,     0,   434,     0,   276,    34,
   275,     0,   276,    35,   275,     0,   276,    36,   275,     0,
   435,     0,   277,    33,   276,     0,   277,    32,   276,     0,
   436,     0,   278,    50,   277,     0,   278,    51,   277,     0,
   437,     0,   279,    37,   278,     0,   279,    38,   278,     0,
   279,    52,   278,     0,   279,    53,   278,     0,   438,     0,
   280,    54,   279,     0,   280,    55,   279,     0,   439,     0,
   281,    29,   280,     0,   440,     0,   282,    39,   281,     0,
   441,     0,   283,    40,   282,     0,   442,     0,   284,    56,
   283,     0,   443,     0,   286,    57,   284,     0,   444,     0,
     0,     0,   286,    41,   446,   292,    22,   447,   288,     0,
   445,     0,   269,    23,   291,     0,   269,    58,   291,     0,
   269,    59,   291,     0,   269,    60,   291,     0,   269,    61,
   291,     0,   269,    62,   291,     0,   269,    63,   291,     0,
   269,    64,   291,     0,   269,    65,   291,     0,   269,    66,
   291,     0,   269,    67,   291,     0,   191,     0,     0,    12,
     0,   422,   376,     0,   450,   376,    11,    24,   292,    25,
    18,     0,   381,   376,     0,   422,   392,     0,   450,   392,
    11,    24,   292,    25,    18,     0,   450,   392,    11,    24,
   292,    25,     0,   381,   392,     0,    14,   457,    18,     0,
    15,    18,     0,   100,    15,    18,     0,    16,    18,     0,
    96,    16,    18,     0,    97,    16,    18,     0,    98,    16,
    18,     0,    99,    16,    18,     0,    17,    18,     0,    17,
   292,    18,     0,     0,    18,     0,     0,    21,     0,   185,
     0,   186,     0,   190,     0,   191,     0,   456,     0,   187,
     0,   192,     0,   187,     0,    44,    24,   292,    25,     0,
    44,    24,   372,    25,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   325,   326,   329,   330,   333,   334,   335,   336,   337,   338,
   339,   340,   343,   345,   349,   349,   356,   362,   366,   367,
   371,   372,   374,   376,   391,   394,   404,   407,   415,   416,
   418,   420,   436,   439,   447,   450,   458,   460,   460,   464,
   465,   466,   467,   470,   473,   477,   477,   480,   480,   485,
   486,   489,   494,   495,   498,   499,   502,   507,   508,   511,
   512,   513,   516,   517,   518,   523,   524,   527,   529,   531,
   533,   542,   544,   546,   548,   564,   568,   569,   576,   577,
   585,   587,   591,   592,   593,   594,   595,   596,   599,   600,
   601,   602,   603,   604,   607,   610,   611,   618,   621,   624,
   630,   638,   640,   644,   647,   648,   651,   654,   660,   664,
   665,   668,   671,   672,   675,   676,   677,   680,   681,   682,
   683,   684,   687,   688,   689,   690,   691,   694,   695,   698,
   704,   708,   710,   714,   715,   717,   724,   734,   735,   738,
   739,   740,   741,   742,   743,   744,   745,   749,   750,   754,
   755,   758,   760,   762,   763,   764,   765,   766,   768,   772,
   773,   776,   780,   792,   793,   794,   795,   796,   797,   798,
   799,   803,   804,   805,   806,   807,   808,   809,   810,   811,
   812,   816,   817,   820,   821,   822,   823,   824,   825,   826,
   827,   828,   829,   830,   833,   834,   837,   841,   842,   845,
   846,   847,   848,   851,   852,   856,   857,   858,   859,   862,
   863,   864,   867,   868,   869,   872,   873,   874,   875,   876,
   879,   880,   881,   884,   885,   888,   889,   893,   894,   897,
   898,   903,   909,   910,   916,   922,   923,   923,   925,   928,
   929,   930,   931,   932,   933,   934,   935,   936,   937,   938,
   939,   942,   943,   946,   947,   950,   955,   956,   957,   960,
   974,   979,   985,   987,   993,   998,   998,  1002,  1003,  1005,
  1006,  1009,  1012,  1015,  1018,  1019,  1022,  1023,  1026,  1027,
  1028,  1029,  1036,  1037,  1041,  1042,  1045,  1046,  1049,  1051,
  1060,  1061,  1062,  1063,  1064,  1067,  1070,  1076,  1085,  1088,
  1091,  1098,  1105,  1111,  1136,  1137,  1140,  1141,  1142,  1143,
  1144,  1147,  1148,  1149,  1150,  1153,  1154,  1155,  1156,  1157,
  1158,  1159,  1160,  1161,  1162,  1163,  1164,  1165,  1166,  1167,
  1168,  1169,  1173,  1174,  1177,  1178,  1181,  1182,  1185,  1186,
  1187,  1188,  1191,  1192,  1193,  1194,  1195,  1196,  1199,  1200,
  1201,  1202,  1205,  1206,  1207,  1208,  1211,  1212,  1213,  1214,
  1215,  1216,  1217,  1218,  1219,  1220,  1221,  1228,  1229,  1230,
  1231,  1232,  1233,  1234,  1235,  1236,  1237,  1238,  1239,  1240,
  1241,  1244,  1248,  1249,  1253,  1254,  1258,  1259,  1260,  1263,
  1264,  1268,  1275,  1277,  1279,  1280,  1282,  1284,  1285,  1287,
  1289,  1291,  1293,  1294,  1295,  1298,  1299,  1301,  1303,  1304,
  1307,  1310,  1311,  1312,  1315,  1317,  1321,  1323,  1327,  1328,
  1329,  1333,  1335,  1335,  1337,  1340,  1342,  1344,  1347,  1352,
  1359,  1360,  1361,  1368,  1372,  1373,  1377,  1378,  1381,  1382,
  1385,  1386,  1389,  1390,  1391,  1392,  1395,  1396,  1399,  1400,
  1403,  1404,  1405,  1408,  1408,  1409,  1410,  1413,  1425,  1441,
  1442,  1445,  1446,  1447,  1450,  1451,  1454,  1456,  1457,  1459,
  1460,  1462,  1464,  1466,  1468,  1474,  1475,  1476,  1477,  1478,
  1479,  1480,  1481,  1482,  1486,  1489,  1492,  1493,  1497,  1499,
  1501,  1503,  1507,  1508,  1510,  1514,  1516,  1518,  1521,  1522,
  1523,  1524,  1525,  1526,  1527,  1528,  1529,  1530,  1531,  1532,
  1533,  1536,  1537,  1542,  1545,  1548,  1549,  1552,  1553,  1554,
  1555,  1556,  1557,  1558,  1559,  1560,  1561,  1562,  1565,  1566,
  1573,  1574,  1580,  1581,  1582,  1583,  1586,  1587,  1588,  1589,
  1592,  1593,  1597,  1600,  1603,  1606,  1609,  1612,  1615,  1616,
  1617,  1618,  1620,  1621,  1623,  1625,  1631,  1635,  1637,  1639,
  1641,  1645,  1646,  1649,  1650,  1653,  1654,  1657,  1658,  1661,
  1662,  1665,  1666,  1669,  1670,  1671,  1674,  1687,  1692,  1693,
  1697,  1698,  1701,  1706,  1709,  1710,  1711,  1719,  1720,  1720,
  1724,  1725,  1726,  1737,  1744,  1745,  1748,  1749,  1752,  1753,
  1754,  1755,  1756,  1758,  1759,  1760,  1761,  1764,  1765,  1766,
  1767,  1768,  1769,  1770,  1771,  1772,  1773,  1776,  1777,  1780,
  1781,  1782,  1783,  1786,  1787,  1788,  1791,  1792,  1793,  1796,
  1797,  1798,  1799,  1800,  1803,  1804,  1805,  1808,  1809,  1812,
  1813,  1817,  1818,  1821,  1822,  1825,  1826,  1829,  1830,  1831,
  1832,  1835,  1836,  1837,  1838,  1839,  1840,  1841,  1842,  1843,
  1844,  1845,  1846,  1849,  1850,  1853,  1856,  1858,  1860,  1864,
  1865,  1867,  1869,  1872,  1873,  1874,  1876,  1877,  1878,  1879,
  1880,  1881,  1882,  1885,  1886,  1889,  1890,  1893,  1896,  1897,
  1898,  1899,  1900,  1903,  1904,  1905,  1906
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","BADTOK",
"SKIPTOK","CTOK_ELIPSIS","CASE","DEFAULT","CIF","CELSE","SWITCH","WHILE","DO",
"CFOR","GOTO","CONTINUE","BREAK","RETURN","TSEMI","TLBRACE","TRBRACE","TCOMMA",
"TCOLON","TASSIGN","TLPAREN","TRPAREN","TLSQBR","TRSQBR","TDOT","TAMPERSAND",
"TEXCL","TTILDE","TMINUS","TPLUS","TMULT","TDIV","TPERCENT","TLT","TGT","TCIRC",
"TBAR","TQUEST","CSIZEOF","CALIGNOF","CTYPEOF","ARROW_OP","CTYPEDEF","COFFSETOF",
"INC_OP","DEC_OP","LEFT_OP","RIGHT_OP","LE_OP","GE_OP","EQ_OP","NE_OP","AND_OP",
"OR_OP","MUL_ASSIGN","DIV_ASSIGN","MOD_ASSIGN","ADD_ASSIGN","SUB_ASSIGN","LEFT_ASSIGN",
"RIGHT_ASSIGN","AND_ASSIGN","XOR_ASSIGN","OR_ASSIGN","CSTRUCT","CUNION","CENUM",
"VA_ARG","VA_DCL","QWARN","QGLOBALS","QMODIFIES","QNOMODS","QCONSTANT","QFUNCTION",
"QITER","QDEFINES","QUSES","QALLOCATES","QSETS","QRELEASES","QPRECLAUSE","QPOSTCLAUSE",
"QINVARIANT","QALT","QUNDEF","QKILLED","QENDMACRO","LLMACRO","LLMACROITER","LLMACROEND",
"TENDMACRO","QSWITCHBREAK","QLOOPBREAK","QINNERBREAK","QSAFEBREAK","QINNERCONTINUE",
"QFALLTHROUGH","QLINTNOTREACHED","QLINTFALLTHROUGH","QLINTFALLTHRU","QARGSUSED",
"QPRINTFLIKE","QLINTPRINTFLIKE","QSCANFLIKE","QMESSAGELIKE","QNOTREACHED","QCONST",
"QVOLATILE","QINLINE","QEXTENSION","QEXTERN","QSTATIC","QAUTO","QREGISTER","QOUT",
"QIN","QYIELD","QONLY","QTEMP","QSHARED","QREF","QUNIQUE","QCHECKED","QUNCHECKED",
"QCHECKEDSTRICT","QCHECKMOD","QKEEP","QKEPT","QPARTIAL","QSPECIAL","QOWNED",
"QDEPENDENT","QRETURNED","QEXPOSED","QNULL","QOBSERVER","QISNULL","QEXITS","QMAYEXIT",
"QNEVEREXIT","QTRUEEXIT","QFALSEEXIT","QLONG","QSIGNED","QUNSIGNED","QSHORT",
"QUNUSED","QSEF","QNOTNULL","QRELNULL","QABSTRACT","QCONCRETE","QMUTABLE","QIMMUTABLE",
"QTRUENULL","QFALSENULL","QEXTERNAL","QREFCOUNTED","QREFS","QNEWREF","QTEMPREF",
"QKILLREF","QRELDEF","CGCHAR","CBOOL","CINT","CGFLOAT","CDOUBLE","CVOID","QANYTYPE",
"QINTEGRALTYPE","QUNSIGNEDINTEGRALTYPE","QSIGNEDINTEGRALTYPE","QNULLTERMINATED",
"QSETBUFFERSIZE","QSETSTRINGLENGTH","QMAXSET","QMAXREAD","QTESTINRANGE","TCAND",
"IDENTIFIER","NEW_IDENTIFIER","TYPE_NAME_OR_ID","CANNOTATION","CCONSTANT","ITER_NAME",
"ITER_ENDNAME","TYPE_NAME","METASTATE_NAME","file","externalDefs","externalDef",
"constantDecl","fcnDecl","@1","plainFcn","plainNamedDecl","namedDeclBase","@2",
"@3","plainNamedDeclBase","@4","@5","iterDecl","@6","@7","macroDef","fcnDefHdr",
"metaStateConstraint","metaStateSpecifier","@8","@9","metaStateExpression","metaStateName",
"constraintSeperator","BufConstraintList","BufConstraint","bufferModifier","relationalOp",
"BufConstraintExpr","BufConstraintTerm","BufConstraintSrefExpr","BufUnaryOp",
"BufBinaryOp","functionClauses","functionClausesPlain","functionClause","functionClausePlain",
"globalsClause","globalsClausePlain","@10","nomodsClause","modifiesClause","modifiesClausePlain",
"@11","flagSpec","flagId","optWarnClause","warnClause","warnClausePlain","globIdList",
"globIdListExpr","optGlobQuals","globId","globQual","stateTag","conditionTag",
"fcnDefHdrAux","fcnBody","@12","@13","@14","fcnDef","locModifies","modListExpr",
"mExpr","modList","specClauseListExpr","optSpecClauseList","specClauseList",
"primaryExpr","@15","postfixExpr","argumentExprList","unaryExpr","fieldDesignator",
"offsetofExpr","sizeofExpr","@16","sizeofExprAux","castExpr","timesExpr","plusExpr",
"shiftExpr","relationalExpr","equalityExpr","bitandExpr","xorExpr","bitorExpr",
"andExpr","@17","orExpr","@18","conditionalExpr","@19","@20","assignExpr","expr",
"optExpr","constantExpr","initializer","instanceDecl","@21","@22","namedInitializer",
"@23","typeDecl","@24","IsType","PushType","namedInitializerList","namedInitializerListAux",
"optDeclarators","init","designation","designatorList","designator","initList",
"storageSpecifier","stateClause","stateClausePlain","@25","conditionClause",
"startConditionClause","conditionClausePlain","@26","@27","functionConstraint",
"exitsQualifier","checkQualifier","stateQualifier","paramQualifier","visibilityQualifier",
"returnQualifier","typedefQualifier","refcountQualifier","typeModifier","definedQualifier",
"typeQualifier","typeSpecifier","completeType","completeTypeSpecifier","altType",
"completeTypeSpecifierAux","optCompleteType","optStructInvariant","suSpc","@28",
"@29","@30","@31","@32","@33","@34","@35","NotType","structDeclList","structDecl",
"structNamedDeclList","structNamedDecl","enumSpc","@36","enumeratorList","enumerator",
"optNamedDecl","namedDecl","genericParamList","innerMods","innerModsList","pointers",
"paramIdList","idList","paramTypeList","paramList","@37","@38","paramDecl","typeExpression",
"abstractDecl","optAbstractDeclBase","abstractDeclBase","stmt","iterBody","endBody",
"iterDefStmtList","iterDefIterationStmt","forPred","@39","@40","partialIterStmt",
"@41","iterDefStmt","iterSelectionStmt","@42","openScope","closeScope","macroBody",
"stmtErr","labeledStmt","optExtraFallThroughs","caseStmt","@43","@44","defaultStmt",
"@45","@46","compoundStmt","compoundStmtErr","CreateInnerScope","DeleteInnerScope",
"CreateStructInnerScope","DeleteStructInnerScope","DeleteInnerScopeSafe","compoundStmtRest",
"compoundStmtAux","compoundStmtAuxErr","stmtListErr","initializerList","typeInitializerList",
"typeInitializer","stmtList","expressionStmt","expressionStmtErr","ifPred","selectionStmt",
"@47","@48","whilePred","iterWhilePred","iterStmt","@49","@50","iterArgList",
"@51","iterArgExpr","cconstantExpr","primaryIterExpr","postfixIterExpr","unaryIterExpr",
"castIterExpr","timesIterExpr","plusIterExpr","shiftIterExpr","relationalIterExpr",
"equalityIterExpr","bitandIterExpr","xorIterExpr","bitorIterExpr","andIterExpr",
"orIterExpr","conditionalIterExpr","@52","@53","assignIterExpr","endIter","doHeader",
"iterationStmt","iterationStmtErr","jumpStmt","optSemi","optComma","id","newId",
"typeName", NULL
};
#endif

static const short yyr1[] = {     0,
   194,   194,   195,   195,   196,   196,   196,   196,   196,   196,
   196,   196,   197,   197,   199,   198,   200,   200,   201,   201,
   202,   202,   202,   202,   203,   202,   204,   202,   205,   205,
   205,   205,   206,   205,   207,   205,   209,   210,   208,   211,
   211,   211,   211,   212,   213,   215,   214,   216,   214,   217,
   217,   218,   219,   219,   220,   220,   221,   222,   222,   223,
   223,   223,   224,   224,   224,   225,   225,   226,   226,   226,
   226,   226,   226,   226,   226,   227,   228,   228,   229,   229,
   230,   230,   231,   231,   231,   231,   231,   231,   232,   232,
   232,   232,   232,   232,   233,   235,   234,   236,   237,   239,
   238,   240,   240,   241,   242,   242,   243,   244,   244,   245,
   245,   246,   247,   247,   248,   248,   248,   249,   249,   249,
   249,   249,   250,   250,   250,   250,   250,   251,   251,   252,
   252,   254,   253,   255,   256,   253,   257,   258,   258,   259,
   259,   259,   259,   259,   259,   259,   259,   260,   260,   261,
   261,   262,   262,   262,   262,   262,   262,   262,   262,   263,
   263,   264,   264,   265,   265,   265,   265,   265,   265,   266,
   265,   267,   267,   267,   267,   267,   267,   267,   267,   267,
   267,   268,   268,   269,   269,   269,   269,   269,   269,   269,
   269,   269,   269,   269,   270,   270,   271,   273,   272,   274,
   274,   274,   274,   275,   275,   276,   276,   276,   276,   277,
   277,   277,   278,   278,   278,   279,   279,   279,   279,   279,
   280,   280,   280,   281,   281,   282,   282,   283,   283,   284,
   285,   284,   286,   287,   286,   288,   289,   290,   288,   291,
   291,   291,   291,   291,   291,   291,   291,   291,   291,   291,
   291,   292,   292,   293,   293,   294,   295,   295,   295,   296,
   297,   296,   298,   296,   299,   300,   299,   302,   301,   301,
   301,   303,   304,   305,   306,   306,   307,   307,   308,   308,
   308,   308,   309,   309,   310,   310,   311,   311,   312,   312,
   313,   313,   313,   313,   313,   314,   316,   315,   317,   318,
   320,   319,   321,   319,   322,   322,   323,   323,   323,   323,
   323,   324,   324,   324,   324,   325,   325,   325,   325,   325,
   325,   325,   325,   325,   325,   325,   325,   325,   325,   325,
   325,   325,   326,   326,   327,   327,   328,   328,   329,   329,
   329,   329,   330,   330,   330,   330,   330,   330,   331,   331,
   331,   331,   332,   332,   332,   332,   333,   333,   333,   333,
   333,   333,   333,   333,   333,   333,   333,   334,   334,   334,
   334,   334,   334,   334,   334,   334,   334,   334,   334,   334,
   334,   335,   336,   336,   337,   337,   338,   338,   338,   339,
   339,   340,   342,   343,   341,   344,   345,   341,   341,   341,
   346,   347,   341,   348,   349,   341,   341,   341,   341,   341,
   350,   351,   351,   351,   352,   352,   353,   353,   354,   354,
   354,   355,   356,   355,   355,   357,   357,   357,   358,   358,
   359,   359,   359,   359,   360,   360,   361,   361,   362,   362,
   363,   363,   364,   364,   364,   364,   365,   365,   366,   366,
   367,   367,   367,   369,   368,   370,   368,   371,   371,   372,
   372,   373,   373,   373,   374,   374,   375,   375,   375,   375,
   375,   375,   375,   375,   375,   376,   376,   376,   376,   376,
   376,   376,   376,   376,   377,   378,   379,   379,   380,   380,
   380,   380,   382,   383,   381,   385,   384,   384,   386,   386,
   386,   386,   386,   386,   386,   386,   386,   386,   386,   386,
   386,   388,   387,   389,   390,   391,   391,   392,   392,   392,
   392,   392,   392,   392,   392,   392,   392,   392,   393,   393,
   394,   394,   396,   395,   397,   395,   399,   398,   400,   398,
   401,   401,   402,   403,   404,   405,   406,   407,   408,   408,
   408,   408,   408,   408,   408,   408,   409,   410,   410,   410,
   410,   411,   411,   412,   412,   413,   413,   414,   414,   415,
   415,   416,   416,   417,   417,   417,   418,   419,   420,   419,
   421,   419,   422,   423,   425,   426,   424,   427,   428,   427,
   429,   429,   429,   429,   430,   430,   431,   431,   432,   432,
   432,   432,   432,   432,   432,   432,   432,   433,   433,   433,
   433,   433,   433,   433,   433,   433,   433,   434,   434,   435,
   435,   435,   435,   436,   436,   436,   437,   437,   437,   438,
   438,   438,   438,   438,   439,   439,   439,   440,   440,   441,
   441,   442,   442,   443,   443,   444,   444,   445,   446,   447,
   445,   448,   448,   448,   448,   448,   448,   448,   448,   448,
   448,   448,   448,   449,   449,   450,   451,   451,   451,   452,
   452,   452,   452,   453,   453,   453,   453,   453,   453,   453,
   453,   453,   453,   454,   454,   455,   455,   456,   457,   457,
   457,   457,   457,   458,   458,   458,   458
};

static const short yyr2[] = {     0,
     0,     1,     1,     2,     2,     1,     1,     1,     1,     1,
     1,     1,     8,    11,     0,     5,     1,     3,     1,     2,
     1,     6,     3,     6,     0,     6,     0,     7,     1,     6,
     3,     6,     0,     6,     0,     7,     0,     0,    10,     3,
     3,     3,     2,     1,     3,     0,     4,     0,     4,     1,
     3,     1,     1,     1,     3,     1,     3,     1,     1,     1,
     1,     1,     1,     4,     5,     1,     1,     1,     1,     3,
     4,     2,     3,     3,     3,     1,     1,     1,     0,     2,
     0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     2,     0,     4,     1,     2,     0,
     3,     1,     3,     1,     1,     0,     2,     3,     2,     1,
     3,     2,     0,     2,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     3,     0,     3,     0,     0,     4,     2,     2,     1,     1,
     1,     3,     4,     2,     3,     3,     3,     1,     1,     1,
     3,     1,     1,     3,     4,     2,     3,     3,     3,     0,
     1,     1,     3,     1,     1,     1,     3,     1,     1,     0,
     4,     1,     4,     3,     4,     6,     5,     5,     2,     2,
     7,     1,     3,     1,     2,     2,     2,     2,     2,     2,
     2,     2,     1,     1,     3,     1,     9,     0,     3,     4,
     2,     4,     2,     1,     4,     1,     3,     3,     3,     1,
     3,     3,     1,     3,     3,     1,     3,     3,     3,     3,
     1,     3,     3,     1,     3,     1,     3,     1,     3,     1,
     0,     4,     1,     0,     4,     1,     0,     0,     7,     1,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     1,     3,     0,     1,     1,     1,     1,     1,     3,
     0,     9,     0,    11,     2,     0,     6,     0,     8,     4,
     4,     0,     0,     2,     1,     4,     0,     4,     1,     3,
     4,     2,     2,     2,     1,     2,     3,     2,     1,     3,
     1,     1,     1,     1,     1,     2,     0,     6,     2,     2,
     0,     6,     0,     5,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     3,     1,     4,     1,     3,     2,     2,     2,     0,
     1,     0,     0,     0,    12,     0,     0,    11,     6,     6,
     0,     0,    10,     0,     0,    10,     5,     5,     4,     4,
     0,     1,     1,     2,     5,     3,     2,     4,     1,     3,
     4,     6,     0,     8,     4,     1,     3,     2,     1,     4,
     1,     1,     2,     2,     1,     2,     1,     2,     1,     1,
     1,     2,     1,     2,     2,     3,     1,     3,     1,     3,
     1,     1,     3,     0,     2,     0,     4,     4,     1,     1,
     2,     1,     1,     2,     0,     1,     5,     2,     3,     3,
     4,     3,     4,     4,     5,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     2,     2,     7,
     6,     2,     0,     0,    10,     0,     6,     1,     1,     1,
     1,     2,     1,     1,     1,     1,     1,     1,     1,     3,
     1,     0,     3,     2,     2,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     3,     1,     1,     2,     2,
     0,     2,     0,     4,     0,     6,     0,     3,     0,     5,
     3,     2,     3,     0,     0,     0,     0,     0,     1,     2,
     2,     3,     2,     3,     3,     4,     2,     2,     3,     3,
     4,     1,     2,     1,     2,     1,     3,     1,     4,     1,
     2,     1,     2,     1,     2,     1,     4,     2,     0,     5,
     0,     6,     4,     4,     0,     0,    10,     1,     0,     4,
     1,     1,     1,     1,     1,     2,     1,     3,     1,     4,
     3,     4,     6,     5,     5,     2,     2,     1,     2,     2,
     2,     2,     2,     2,     2,     2,     1,     1,     4,     1,
     3,     3,     3,     1,     3,     3,     1,     3,     3,     1,
     3,     3,     3,     3,     1,     3,     3,     1,     3,     1,
     3,     1,     3,     1,     3,     1,     3,     1,     0,     0,
     7,     1,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     1,     0,     1,     2,     7,     2,     2,
     7,     6,     2,     3,     2,     3,     2,     3,     3,     3,
     3,     2,     3,     0,     1,     0,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     4,     4
};

static const short yydefact[] = {     0,
    12,    11,   443,     0,   411,   258,   411,    15,     0,     0,
     0,     0,   272,   272,   292,   291,   293,   294,   295,   353,
   354,   318,   320,   319,   323,   324,   312,   314,   315,   313,
   321,   322,   355,   356,   316,   317,   333,   329,   325,   330,
   326,   307,   308,   311,   309,   310,   350,   351,   352,   349,
   335,   334,   328,   327,   339,   340,   341,   342,   337,   338,
   336,   343,   344,   347,   348,   345,   346,   411,   411,   411,
   411,   411,   411,   411,   411,   411,   411,   331,   688,   689,
   693,   332,   690,   691,   694,     0,     3,     6,     7,   435,
     8,     9,   134,    44,   684,    10,   257,   259,     0,   390,
   272,   272,   272,   272,   272,   272,   272,   272,   411,   272,
   390,   390,   411,   383,   411,     0,   411,   130,   272,   692,
    21,   411,   439,   440,   441,   444,   445,   272,   275,   272,
   272,   268,   411,   695,   411,   411,   693,     0,   528,   272,
   537,     0,     0,     0,   666,     0,     0,     0,     0,   272,
   574,     0,   272,   272,   272,   272,   272,   272,   272,   272,
   272,     0,    43,     0,     0,     0,     0,     0,   531,   272,
   169,   165,   168,   595,   585,   172,   184,   204,   194,   193,
   206,   210,   213,   216,   221,   224,   226,   228,   230,   233,
   236,   240,   252,   576,   198,     0,     0,   562,   518,   519,
   520,   521,     0,     0,   522,   272,   523,     0,   524,   166,
     0,   525,   527,   164,     0,   511,     0,   572,     0,   544,
   498,     0,     0,     0,   507,     0,   508,   487,   506,   503,
   504,   499,   500,   501,     0,     0,   505,   512,     0,     0,
   509,   486,     0,   357,   358,   368,   370,   369,   371,   372,
   373,   374,   375,   376,   377,     4,   272,     0,   132,   137,
   411,   685,     5,   411,   391,   387,   361,   363,   360,   362,
   365,   364,   366,   367,   381,   359,   388,   389,     0,   272,
   272,   379,   272,   272,     0,   380,   436,   378,   442,   446,
   272,   165,   168,     0,   411,   460,     0,   164,   411,     0,
   274,   411,     0,   265,   272,   684,    17,    19,     0,   411,
   272,    29,   454,   204,   256,   533,     0,   272,   272,   272,
   272,     0,   675,   677,   682,     0,   544,     0,     0,     0,
   187,   192,   191,   190,   189,   188,     0,   272,   185,   186,
   272,     0,     0,     0,     0,     0,   531,     0,   272,   530,
   272,   476,   477,   478,   479,     0,   480,   481,   272,   483,
   272,   482,   484,   544,   272,   272,   179,   180,     0,   272,
   272,   272,   272,   272,   272,   272,   272,   272,   272,   272,
   272,   272,   272,   272,   272,   272,   272,   272,   272,   272,
   272,   272,   272,   272,   272,   272,   231,   237,   234,   575,
   272,     0,   673,    40,     0,   545,   563,   578,   670,   596,
     0,   529,   272,     0,     0,     0,   573,    41,   488,   492,
   564,   411,   502,   514,   515,     0,     0,     0,    42,    23,
   272,   454,   411,   411,   272,   260,   131,   411,     0,   385,
     0,   411,     0,   411,     0,   272,     0,   696,   272,   272,
     0,   462,   461,   463,   697,   272,   271,   272,   270,   266,
   411,     0,   272,     0,   411,   272,    20,   451,     0,     0,
   437,   452,   272,     0,   538,     0,   581,     0,   255,     0,
   674,   683,   544,     0,   167,   272,   526,   272,     0,     0,
   678,   679,   680,   681,   676,   532,   272,   539,     0,   669,
   411,   542,   667,     0,     0,   174,     0,   182,     0,     0,
     0,   241,   242,   243,   244,   245,   246,   247,   248,   249,
   250,   251,   207,   208,   209,   212,   211,   214,   215,   217,
   218,   219,   220,   222,   223,   225,   227,   229,   272,   272,
   272,   253,   272,   272,   199,   558,   695,   562,     0,   411,
   543,   579,     0,     0,   510,   496,   272,   565,   513,     0,
     0,    25,     0,   549,   272,   570,   133,   411,   272,   544,
   272,   261,   384,   272,   401,     0,   409,   404,     0,   410,
     0,   426,   429,   423,   425,   382,   468,     0,   454,   464,
   272,     0,   276,   272,   272,   684,    16,    31,   272,   454,
   272,    18,   438,   447,   449,    37,   456,   411,   455,   459,
   534,   577,     0,   583,   272,   171,   272,   205,   411,     0,
   272,   535,     0,   541,   557,     0,   586,   272,   175,   173,
   272,   272,   232,     0,   235,   272,   201,   272,   203,   559,
   560,   272,   272,   272,   584,   272,   411,   272,   411,    79,
    27,   550,   553,   272,   272,   551,   272,   571,   136,     0,
   263,   272,   386,   407,   546,   393,   408,   546,   396,   272,
   428,   272,     0,   469,   472,   272,     0,   470,     0,   454,
   106,   272,   272,   272,     0,    33,     0,   272,     0,    81,
   453,   272,   465,   272,     0,   272,   568,   686,   566,     0,
     0,     0,   540,   272,   272,   183,   177,   178,   238,     0,
     0,   561,   580,     0,   272,   272,   272,   272,   272,   272,
   272,   272,   272,     0,   165,   168,   184,   204,   193,   210,
   213,   216,   221,   224,   226,   228,   230,   233,     0,   589,
   588,   166,   599,   608,   618,   620,   624,   627,   630,   635,
   638,   640,   642,   644,   646,   648,   652,   591,   164,     0,
    24,     0,    96,   100,    98,   123,   124,   125,   126,   127,
   128,   129,    26,    79,    83,     0,    85,    84,     0,    88,
     0,   411,   411,    86,     0,    87,   303,     0,    79,   554,
   555,   272,   552,    22,   272,   277,   411,   399,   546,   411,
   400,   546,   422,   427,   272,     0,     0,   473,   471,   474,
     0,     0,   105,   272,   272,     0,   279,   267,   272,     0,
   285,     0,   272,     0,   411,    81,    35,     0,   448,   450,
    38,    81,    89,    91,    90,    94,    92,    93,   457,   431,
     0,   272,   465,   432,   466,   582,   493,   686,   272,     0,
     0,   176,   536,     0,   589,   272,   200,   202,   672,     0,
     0,   187,   192,   191,   190,   189,   188,   185,   186,   272,
   272,   272,   179,   180,     0,   272,   272,   272,   272,   272,
   272,   272,   272,   272,   272,   272,   272,   272,   272,   272,
   272,   272,   272,   272,   272,   272,   272,   272,   272,   272,
   272,   272,   231,   649,   234,   497,     0,   491,   104,   109,
   102,   113,   684,    80,    95,    99,   107,   297,   300,   296,
     0,   301,   299,    28,   556,   272,     0,   413,   411,   411,
   412,   411,   411,   411,   430,   272,   467,   475,   269,   289,
     0,     0,   288,   282,   283,   286,   284,   277,    13,    32,
    34,    81,    30,   684,    82,   454,   458,   433,   434,   272,
     0,   567,   181,     0,   196,     0,   544,   239,   671,   167,
   272,     0,   174,     0,     0,     0,     0,   653,   654,   655,
   656,   657,   658,   659,   660,   661,   662,   663,   207,   208,
   209,   212,   211,   214,   215,   217,   218,   219,   220,   222,
   223,   225,   227,   229,   645,   272,   647,   272,   490,   108,
     0,   118,   119,   120,   121,   122,   684,   110,   411,   113,
     0,     0,   141,   101,   150,   684,   139,   140,     0,    48,
     0,     0,    58,    59,    69,    67,   306,     0,   305,    56,
    76,     0,    63,    66,     0,   684,    68,   160,   277,   272,
   411,     0,   272,   414,   402,   411,   405,   411,   424,   280,
   272,   287,   684,    36,     0,   272,   494,   569,   272,     0,
   668,   665,   205,   272,   175,   173,   272,   272,     0,   590,
   103,   113,    97,   116,   112,   117,   115,   114,     0,   144,
     0,     0,     0,     0,   138,     0,     0,   153,   162,   684,
   152,     0,     0,    66,     0,    72,     0,    54,    53,     0,
    61,    60,    62,     0,     0,     0,     0,     0,     0,   272,
   684,   161,     0,   262,   272,   416,   272,   272,   411,   419,
     0,   394,     0,   397,   281,   290,     0,    39,   272,     0,
   197,   195,   664,   545,     0,   177,   178,   650,   111,   145,
   142,   148,     0,   149,   146,   147,   151,     0,   156,     0,
     0,     0,     0,   272,     0,    78,    77,     0,    73,     0,
    50,    45,    46,    55,    66,    57,    70,     0,    74,    75,
     0,     0,   304,   272,   272,   278,   272,   272,     0,   417,
   272,   403,     0,   406,     0,    14,   495,   587,   176,   272,
   143,   157,   154,     0,   158,   159,   163,   298,    52,    49,
     0,     0,    71,    47,    64,   302,   264,   420,   411,   415,
   272,   392,   398,   651,   155,    65,    51,   418,   421,   395,
     0,     0,     0
};

static const short yydefgoto[] = {  1231,
    86,    87,    88,    89,   136,   306,   307,    90,   650,   789,
   308,   826,   952,    91,   690,   954,   928,    93,  1037,  1171,
  1118,  1102,  1172,  1210,  1110,  1039,  1040,  1041,  1114,  1042,
  1043,  1175,  1045,  1168,   773,   831,   774,   832,   775,   833,
   912,   834,   778,   835,   913,   910,   911,   812,   780,   781,
  1017,  1018,  1019,  1085,  1020,   782,   783,    94,   260,   433,
   261,   570,    95,  1024,  1152,  1153,  1026,  1099,  1121,  1100,
   176,   327,   177,   507,   178,   964,   179,   180,   402,   545,
   181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
   539,   191,   541,   192,   540,   856,   193,   222,   480,   316,
   421,    97,   662,   795,   129,   595,    98,   302,   195,   258,
   130,   131,   927,   818,   819,   820,   821,   941,   100,   784,
   837,  1029,   786,   787,   838,  1048,   921,  1046,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   296,   422,   439,   114,   266,  1230,   115,   799,  1193,   802,
  1195,   665,  1131,   668,  1133,   116,   930,   931,  1128,  1129,
   117,   673,   581,   582,   842,   133,   470,   125,   126,   119,
   603,   604,   471,   472,   473,   692,   609,   329,   807,   844,
   454,   350,   223,   243,   224,   225,   351,   960,  1140,   227,
   646,   228,   229,   426,   230,   231,   197,   407,   352,   348,
   353,   474,   702,   354,   317,   623,   355,   202,   356,   551,
   797,  1055,   236,   567,   502,   406,   204,   568,   698,   699,
   569,   357,   205,   206,   358,   643,   613,   359,   239,   360,
   364,   705,   740,   907,   741,   210,   743,   744,   745,   746,
   747,   748,   749,   750,   751,   752,   753,   754,   755,   756,
   757,  1006,  1200,   758,  1144,   361,   362,   212,   363,   263,
   850,   298,   215,   122
};

static const short yypact[] = {  2126,
-32768,-32768,    46,    55,  5187,-32768,  6479,-32768,   810,  3178,
  3478,  3478,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   694,-32768,-32768,-32768,-32768,  2309,-32768,-32768,-32768,   272,
-32768,-32768,   109,-32768,   126,-32768,-32768,-32768,   141,  6074,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  6074,  6074,   161,   102,-32768,   187,-32768,-32768,   810,-32768,
-32768,-32768,-32768,-32768,-32768,    46,-32768,  5488,-32768,   182,
-32768,   161,-32768,-32768,-32768,  5187,-32768,   253,-32768,  5488,
-32768,   265,   285,   301,-32768,   322,   810,   335,   347,   754,
-32768,  2689,  5488,  5488,  5488,  5488,  5488,  5488,-32768,  5534,
  5534,   351,-32768,   375,   385,   394,   402,   409,   329,  4680,
-32768,   441,   449,-32768,   478,-32768,   555,  1166,-32768,-32768,
-32768,   770,   183,   563,    69,   570,   476,   486,   472,   500,
    72,-32768,-32768,   464,-32768,  3523,   497,   507,-32768,-32768,
-32768,-32768,   557,  3223,-32768,  4680,-32768,  3523,-32768,   444,
  3523,-32768,-32768,   587,   647,-32768,   650,-32768,  2881,   478,
   685,   481,   592,  3328,-32768,  3478,-32768,-32768,-32768,  5804,
-32768,-32768,-32768,-32768,   696,   701,-32768,-32768,  3478,  3523,
-32768,-32768,   646,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   752,   744,-32768,-32768,
  6344,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   763,   454,
-32768,-32768,   810,   810,   420,-32768,   272,-32768,-32768,-32768,
  1167,-32768,-32768,   266,  5669,   294,   764,-32768,-32768,   777,
-32768,-32768,   809,   806,   454,   126,-32768,   307,   814,-32768,
   810,-32768,    78,-32768,-32768,-32768,   833,  5488,  5488,  5488,
  3429,   855,-32768,-32768,-32768,   506,   840,   443,   858,   867,
-32768,-32768,-32768,-32768,-32768,-32768,   870,  1167,-32768,-32768,
  5488,   889,   891,   916,   924,   926,   329,   644,  4586,-32768,
  4680,-32768,-32768,-32768,-32768,   947,-32768,-32768,  4680,-32768,
  4680,-32768,-32768,-32768,  5356,  5488,-32768,-32768,    50,  5488,
  5488,  5488,  5488,  5488,  5488,  5488,  5488,  5488,  5488,  5488,
  5488,  5488,  5488,  5488,  5488,  5488,  5488,  5488,  5488,  5488,
  5488,  5488,  5488,  5488,  5488,  5488,-32768,-32768,-32768,-32768,
  5488,   658,-32768,-32768,  2497,-32768,-32768,  1029,-32768,-32768,
   987,-32768,  5488,   733,  1005,   969,-32768,-32768,-32768,-32768,
-32768,   161,  5804,-32768,-32768,  3478,  2037,  1036,-32768,-32768,
  5488,   157,  3628,  4763,   454,-32768,   434,  6479,   945,  1028,
  1035,  1043,  1050,  1043,   810,  1055,   342,-32768,-32768,  5367,
  1051,   417,-32768,   688,-32768,   454,-32768,   454,-32768,-32768,
-32768,   994,  1053,  1063,-32768,   454,   307,-32768,   810,  1064,
-32768,  1067,   810,  1068,-32768,   355,  1074,   404,  1074,  1083,
-32768,-32768,   840,  1077,-32768,  5087,-32768,-32768,  1078,  1085,
-32768,-32768,-32768,-32768,-32768,-32768,  5488,-32768,  1079,-32768,
  3628,-32768,-32768,  1097,  1099,-32768,   471,-32768,    89,   810,
   810,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   770,   770,   183,   183,   563,
   563,   563,   563,    69,    69,   570,   476,   486,  5488,  5488,
  5488,-32768,  5546,  5579,-32768,-32768,  3073,-32768,  3373,  3815,
-32768,-32768,  1102,   473,-32768,-32768,   454,-32768,-32768,  1103,
  1082,-32768,  1105,-32768,  4189,-32768,-32768,  4002,  4233,   840,
-32768,  1089,-32768,-32768,  1108,  1117,-32768,  1118,  1121,-32768,
   741,-32768,  1114,-32768,-32768,-32768,-32768,  1125,   363,   688,
  5401,  1124,-32768,   182,-32768,    52,-32768,-32768,  5488,   559,
   454,-32768,-32768,  1120,-32768,-32768,  1151,  6479,-32768,-32768,
-32768,-32768,  1140,-32768,  3429,-32768,  5108,-32768,-32768,  1147,
-32768,-32768,  1145,-32768,-32768,  1146,-32768,  5488,-32768,-32768,
-32768,-32768,   472,   791,   500,  1167,-32768,  1167,-32768,-32768,
-32768,  4338,  4680,  5488,-32768,  5590,-32768,  5488,-32768,  1350,
-32768,-32768,-32768,  4382,  4487,-32768,  4531,-32768,-32768,  1144,
-32768,-32768,-32768,-32768,-32768,  1152,-32768,-32768,  1154,-32768,
   810,-32768,   810,-32768,-32768,   108,  1155,-32768,  1149,    62,
  1104,  1789,-32768,-32768,  1157,-32768,  1168,-32768,   290,  1350,
-32768,   810,   968,  4680,  1161,  5108,-32768,  1173,-32768,  1182,
  1179,  1160,-32768,  5488,  5590,-32768,-32768,-32768,-32768,  1180,
  1181,-32768,-32768,   545,  1167,  5488,  5488,  5488,  5488,  5488,
  5488,  5534,  5534,  1183,   609,   635,   923,  1486,   665,   970,
   984,   905,   756,   935,  1184,  1169,  1170,  1153,    74,  1186,
-32768,    41,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   699,   714,
-32768,  1032,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  1350,-32768,  1128,-32768,-32768,  1129,-32768,
  1130,-32768,-32768,-32768,  1131,-32768,  1975,  1143,  1350,-32768,
-32768,  4636,-32768,-32768,-32768,-32768,  6209,-32768,-32768,  6209,
-32768,-32768,-32768,-32768,  5488,  1021,  1210,-32768,-32768,-32768,
  1211,  1219,-32768,  1789,  5488,   810,-32768,-32768,  1789,   653,
-32768,  1217,  1789,  1150,-32768,  1350,-32768,  1218,-32768,-32768,
-32768,  1350,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   272,
  1221,-32768,   773,-32768,   688,-32768,-32768,  1173,  1710,  1222,
   810,-32768,-32768,   727,  1223,  5488,  1147,  1147,  1231,   735,
  1225,   799,   801,   820,   831,   841,   846,   851,   868,  5488,
  5412,  5488,   878,   897,   221,  5488,  5488,  5488,  5488,  5488,
  5488,  5488,  5488,  5488,  5488,  5488,  5488,  5488,  5488,  5488,
  5488,  5488,  5488,  5488,  5488,  5488,  5488,  5488,  5488,  5488,
  5488,  5488,  5488,-32768,  5488,-32768,  1230,  1234,-32768,  1065,
  1213,   529,   359,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   218,-32768,-32768,-32768,-32768,  1789,   537,-32768,   161,  4922,
-32768,  6209,  4922,  6209,-32768,-32768,-32768,-32768,-32768,-32768,
  1025,  1232,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  1350,-32768,   126,-32768,   512,-32768,-32768,-32768,  5460,
  1237,-32768,-32768,   505,-32768,  1242,   840,-32768,-32768,   903,
  5087,  1241,   908,   910,   156,   810,   810,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   948,   966,
   982,   861,   902,   929,   949,   428,   602,   659,   819,   738,
   853,   105,   411,   315,   472,  5488,   500,  5590,-32768,   444,
  1032,-32768,-32768,-32768,-32768,-32768,   556,-32768,  5939,   529,
   321,   321,-32768,-32768,   515,   640,-32768,-32768,   362,-32768,
   588,   450,-32768,-32768,-32768,-32768,-32768,  1240,-32768,   -17,
-32768,  1004,-32768,    63,  1244,   126,-32768,   362,-32768,-32768,
-32768,  1246,   400,-32768,-32768,  4922,-32768,  4922,-32768,-32768,
  1315,-32768,   883,-32768,  1175,   886,-32768,-32768,-32768,   810,
-32768,  1080,   990,-32768,   993,  1002,-32768,-32768,  1030,-32768,
-32768,   529,-32768,-32768,-32768,-32768,-32768,-32768,   386,   515,
   661,   810,   810,   321,-32768,   362,   362,-32768,   678,   898,
-32768,  1247,  1027,   490,   450,   712,   193,-32768,-32768,   588,
-32768,-32768,-32768,   588,    24,   810,   810,  1248,   588,-32768,
   126,  1251,   957,-32768,   454,-32768,-32768,  1252,-32768,  1254,
  1257,-32768,  1258,-32768,-32768,-32768,  1189,-32768,   546,  1249,
-32768,-32768,-32768,-32768,  1262,  1003,  1012,-32768,-32768,-32768,
-32768,   515,  1256,   444,-32768,-32768,   515,   638,   678,   794,
   810,   810,   362,-32768,  1095,-32768,-32768,   588,-32768,   490,
  1261,-32768,   712,-32768,   712,-32768,-32768,  1264,-32768,-32768,
  1095,  1269,-32768,-32768,-32768,-32768,  5488,   400,  1271,-32768,
-32768,-32768,  1278,-32768,  1282,-32768,-32768,-32768,  1014,  5488,
-32768,-32768,-32768,  1277,-32768,-32768,   678,-32768,-32768,-32768,
  1280,   193,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  5488,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  1306,  1308,-32768
};

static const short yypgoto[] = {-32768,
-32768,  1227,-32768,-32768,-32768,-32768,  -414,  -113,-32768,-32768,
   998,-32768,-32768,-32768,-32768,-32768,    65,-32768,-32768,   395,
-32768,-32768,   103,   136,-32768,   208,-32768,-32768,-32768,  -987,
-32768,  -893,-32768,-32768,  -634,  -750,-32768,-32768,-32768,  -538,
-32768,  -536,-32768,  -477,-32768,   309,-32768,-32768,   641,  -648,
-32768,   239,   305,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  -873,   166,-32768,  -943,-32768,   281,
-32768,-32768,  -624,   460,   989,-32768,-32768,  -588,-32768,-32768,
  -122,  -371,  -370,  -343,  -336,  -379,  -388,  -376,  -513,  -511,
-32768,  -585,-32768,  -137,-32768,-32768,  1087,  1379,  -586,  -423,
    25,-32768,-32768,-32768,  -455,-32768,-32768,-32768,   729,  -270,
   874,-32768,  -885,  -746,-32768,-32768,   513,-32768,-32768,-32768,
  -418,-32768,-32768,-32768,  -417,-32768,-32768,-32768,-32768,-32768,
   549,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   188,   766,-32768,   953,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,    28,  -763,  -524,-32768,   149,
-32768,-32768,   669,   667,   508,     2,  -382,  1229,-32768,    20,
-32768,-32768,  -571,-32768,-32768,-32768,   666,  -107,  1061,-32768,
  -448,  -152,  1347,-32768,  1127,-32768,   706,-32768,-32768,-32768,
-32768,  -155,-32768,-32768,-32768,-32768,-32768,    14,  1071,  1022,
  1088,-32768,-32768,  1437,-32768,-32768,  -308,-32768,    82,   243,
  -613,  -810,-32768,   887,-32768,-32768,   985,  -177,   697,   543,
  -478,   113,-32768,   189,    33,-32768,-32768,    39,-32768,   162,
-32768,-32768,   689,-32768,   387,  -587,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  1443,-32768,-32768,  1527,  -246,
   548,     0,   442,-32768
};


#define	YYLAST		6671


static const short yytable[] = {   120,
   593,   118,   315,   590,   120,   287,   537,   561,   120,   214,
   214,   214,   526,   527,   536,   528,   529,   677,   484,   538,
   297,   727,   127,   198,    96,   633,   588,  1044,   695,   635,
   331,   332,   333,   334,   335,   336,   933,   464,  1108,  1025,
   499,   836,   207,  1103,   530,   531,   532,   533,   208,   563,
  1177,   602,   423,   408,   800,   534,   535,   729,   742,   462,
   739,  -597,  1063,   415,    92,  -597,   468,   940,   419,   262,
   420,   642,   944,   622,   683,   951,   948,   510,   128,     3,
   727,   955,   468,   434,   -46,   120,   810,   118,  1115,   655,
  1116,   203,   235,   235,   511,   246,   247,   248,   249,   250,
   251,   252,   253,   254,   255,   388,   389,  1117,   811,   401,
    96,   776,   398,   777,   904,   630,   729,   742,   120,   739,
   390,   391,  1057,   237,   237,  -639,  1176,   259,   399,  -639,
   905,  1182,   737,   450,   738,   120,   275,  1104,  1106,   914,
   280,     3,   282,   262,   286,   290,   120,  1089,  1090,   288,
    92,   214,  1158,  1159,   924,   311,   123,   124,   392,   393,
   304,   468,   305,  1123,   264,   330,  1109,   679,  1056,   214,
  1058,   209,   779,   440,   499,   685,   401,   836,  -272,  1049,
  1211,   562,  1076,   836,   207,   932,   688,   113,   934,   281,
   208,   737,   132,   738,   135,   214,   464,  1030,   500,   238,
   238,  1064,   299,   214,   369,   214,   503,   214,   504,   403,
   214,  1170,  1178,  1173,   384,   385,  1105,   687,   214,  1207,
  1157,   409,  1030,   214,   411,   214,  1032,   550,   207,   410,
   489,   785,   788,   203,   208,   776,   207,   777,   214,   214,
   207,  1031,   208,   207,   845,  1132,   208,  1134,   976,   208,
   776,  1032,   777,   428,   283,   284,   285,   735,   523,   524,
   525,   659,  -411,  -411,  -411,   977,   734,  -411,  -411,   736,
   559,   419,   207,   113,   730,   731,   313,   203,   208,   120,
   566,   437,   120,   120,   120,   203,   401,   265,   318,   203,
   448,   435,   203,   315,   829,  -273,   779,   257,   265,   265,
   235,   416,   732,   836,   120,   235,   461,   235,   319,   733,
   120,   779,   315,   209,  1136,   452,   735,  -272,  1173,   450,
   235,   203,  1010,   310,   320,   734,   456,     3,   736,   458,
  -273,   237,   463,   730,   731,  -643,   237,   466,   237,  -643,
   469,  -411,  -411,  -411,  1021,   321,  -411,  -411,   566,   684,
   214,   237,   323,   395,  1022,   785,   788,   209,   214,   315,
   214,   732,   401,   618,   324,   209,   485,   468,   733,   209,
   785,   788,   209,  1067,   341,   401,   262,    79,  1035,   612,
   619,   935,  1021,   727,   677,  1096,  -411,   675,  -411,  1005,
   342,   942,  1022,  1007,   845,  1097,  -411,   566,  1033,  1034,
   343,   209,    79,  1035,   214,  1054,  1036,   238,  1054,   344,
  1150,  1091,   238,  1092,   238,   566,   658,   345,   548,   729,
   742,  1127,   739,   346,   401,   214,   214,   238,   614,   347,
  1093,  -641,   214,     3,   120,  -641,   571,   207,   445,   394,
  -272,   121,   450,   208,   120,   505,   121,   558,  -631,   557,
   138,  -411,  -631,   315,  -411,   120,  -411,   120,   558,   469,
   400,   315,  -689,   401,   572,   120,   440,   485,   120,   577,
  -693,   580,   120,  1105,    79,    80,   137,   386,   387,    83,
    84,   400,   449,  1032,   401,   311,   203,     3,   596,   658,
   713,   628,   601,   401,   737,   629,   738,   645,   417,  -690,
   214,   401,   658,  1154,   394,    79,  1023,   235,   235,   120,
   120,   396,  1003,   701,  1169,  1115,   468,  1116,   992,   993,
  1002,   994,   995,   482,   395,  1004,   401,   121,   710,  1069,
   711,  1054,  1070,  1054,  1117,  -411,   675,  -411,   237,   237,
  1091,   846,  1092,    79,  1023,  -411,    79,  1098,   214,   214,
   996,   997,   998,   999,  1050,   397,   120,  1051,   647,  1093,
   121,  1000,  1001,   468,   214,   401,   209,   214,   214,   859,
  -462,   450,  1154,   262,   558,   405,  1082,   312,   365,   840,
   366,   207,  -411,   686,    79,    80,   137,   208,   322,    83,
    84,   404,   558,   862,   863,   864,   865,   866,   867,  -411,
   120,  -516,   367,   368,    79,    80,   137,   861,  -692,    83,
    84,  1031,   386,   387,   238,   238,   676,  1012,  1013,   735,
   311,  1032,  -632,   392,   393,   449,  -632,   469,   734,  -594,
   203,   736,   410,  -594,    79,  1035,   730,   731,    79,    80,
   137,   214,   214,    83,    84,   759,   700,  1014,  1015,   497,
   498,   386,   387,   214,   214,  -593,   214,   262,  1072,  -593,
  1094,  1016,  1202,  1160,   732,  1161,  1027,   315,   412,  1186,
   120,   733,   120,   413,   572,   945,   761,   315,   815,  -633,
   816,   214,  1162,  -633,  1021,  -617,   418,  1151,   120,  -617,
   590,   120,   120,   214,  1022,   452,  -411,  -411,  -411,   543,
   544,  -411,  -411,  1160,   759,  1161,  -691,  1065,   386,   387,
   209,  -272,   843,   591,   424,   196,   226,   226,   968,  -592,
   425,   121,  1162,  -592,   442,   444,   446,  -695,    99,   840,
    79,    80,   137,    99,   401,    83,    84,  1115,   908,  1116,
   429,   244,   245,  -411,  -411,  -411,   121,   401,  -411,  -411,
   417,   966,   312,   401,   875,   401,  1117,   485,  -636,   970,
   670,   671,  -636,  1218,   989,   990,   991,   432,  1033,  1034,
  1083,   325,    79,  1035,   388,   389,  1036,   291,   430,  1095,
   436,  -695,   153,   154,   155,   156,   157,   158,   455,   390,
   391,   214,   894,   895,   457,   693,  -272,  1229,   450,  1120,
   159,   160,   161,   381,   382,   383,     3,   896,   897,   918,
   919,   401,   709,   214,    99,   120,  1137,  1021,   214,  -611,
  1203,  -616,   214,  -611,   162,  -616,   459,  1022,   460,   267,
   268,   269,   270,   271,   272,   273,   274,   465,   276,  -634,
  -615,   279,   120,  -634,  -615,    79,  1023,    99,  1073,   174,
   120,  -614,   950,  1164,   475,  -614,   295,   196,   300,   301,
   303,  -613,   843,   483,   309,  -613,  -612,   171,   386,   387,
  -612,  -609,   481,  -637,  1184,  -609,   121,  -637,  -695,  -695,
   295,  -626,   486,  -695,  -695,  -626,   583,   337,  -610,   388,
   389,   487,  -610,   488,   381,   382,   383,   121,  -606,   121,
   262,   196,  -606,  1051,   390,   391,   491,   312,   492,   196,
   605,   450,  1028,   196,   610,   262,   196,  -607,  1163,     3,
  1047,  -607,  -625,  -598,   226,   214,  -625,  -598,  -601,   226,
   628,   226,  -601,   493,  1075,   381,   382,   383,    79,   292,
   293,   494,   174,   495,   226,   196,   871,   295,   872,  -628,
  -411,   631,   632,  -628,   892,   893,  1053,    79,    80,   137,
   384,   385,    83,    84,   958,   501,  1145,  -411,  -621,  -629,
   873,   874,  -621,  -629,  1185,   120,   120,  1051,    79,  1023,
   384,   385,   174,  1066,   929,   431,  -622,   929,   898,   899,
  -622,  -272,   556,   450,    79,    80,   137,   553,   121,    83,
    84,     3,  -623,   887,   888,   889,  -623,   759,    99,   438,
  -619,   441,   443,  -602,  -619,   890,   891,  -602,  1087,   295,
  1028,  1028,  -600,  -604,   451,   287,  -600,  -604,  1101,   555,
  1047,  1047,  -605,    99,  -603,   573,  -605,   552,  -603,   309,
   936,   671,   312,  1086,  1060,  1061,   560,  1101,   574,   315,
   401,  1148,   120,   575,  1130,  1111,  1112,  1113,  1166,  1167,
   214,  -272,  1224,   277,   278,   120,   295,   571,   578,   120,
    79,    80,   137,   584,   589,    83,    84,   295,  1125,   598,
   199,   232,   232,   315,   597,  1139,   600,   607,   606,   611,
  1028,   120,   120,  1028,   401,  1101,  1101,   200,   233,   233,
   615,   616,   620,   624,  1047,   621,  1047,   626,   649,  1047,
   196,   661,   583,  1047,   583,   120,   120,   929,  1047,   929,
   929,   929,   627,   822,   120,   644,   648,   664,   314,   651,
   830,   226,   226,   610,   121,   666,   672,   667,   120,   669,
   689,   314,   314,   314,   314,   314,   314,   680,   339,   340,
   279,   674,    79,    80,   137,   691,  1190,    83,    84,  1028,
   120,   120,  1101,    99,   694,   617,   703,  1047,   794,   704,
   576,   798,   579,   801,   585,   809,   762,   586,   847,   808,
   451,   853,   592,   825,    99,  -170,    99,   120,   370,  1130,
   291,   599,   827,   849,   309,   153,   154,   155,   156,   157,
   158,   608,   851,   852,   857,   858,   870,   901,   903,   902,
   906,  1047,   900,   159,   160,   161,   438,   909,   915,   916,
   917,   920,   199,   371,   372,   373,   374,   375,   376,   377,
   378,   379,   380,   923,   937,   938,   939,   162,   947,   200,
   949,   963,   953,   929,   956,   929,  1228,   967,   969,   971,
  1008,  1009,  1011,   174,   196,   822,  1068,   943,  1062,  1071,
   822,  1074,  1107,  1126,   822,  1138,   199,  1119,  1165,  1181,
  1143,  1163,  1188,  1197,   199,  1191,  1192,  1194,   199,  1196,
   171,   199,  1201,   200,   121,    99,  1199,  1209,  1220,   232,
  1213,   200,   965,  1215,   232,   200,   232,  1222,   200,   660,
  1212,  1223,   438,  1225,  1226,  1232,   233,  1233,   467,   232,
   199,   233,   256,   233,  1227,  1038,  1214,  1174,   592,  1081,
  1149,   813,   681,   682,  1088,  1204,   233,   200,  1122,   309,
   974,   594,   946,   814,  1135,   922,  1219,   804,   291,   663,
   815,   806,   816,   153,   154,   155,   156,   157,   158,   438,
   959,    79,   292,   293,   289,   174,   453,   839,   242,   707,
   708,   159,   160,   161,   295,   427,   295,   822,   496,   314,
   314,   314,   314,   314,   314,   314,   314,   314,   314,   314,
   314,   314,   314,   314,   314,   162,  1198,   625,   194,   549,
   796,   962,   848,   855,  1080,   961,     0,     0,   803,     0,
   805,     0,     0,     0,   451,     0,     0,     0,     0,     0,
     0,   823,   824,     0,     0,     0,   828,  1077,  1078,   314,
   608,   841,   762,   763,   764,   765,     0,   490,   171,   766,
   767,   768,   769,   770,   771,   772,     0,     0,   314,     0,
     0,     0,     0,   295,     0,     0,   201,   234,   234,     0,
     0,   508,   211,   240,   240,     0,   512,   513,   514,   515,
   516,   517,   518,   519,   520,   521,   522,     0,     0,     0,
     0,     0,     0,     0,   314,   199,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   314,     0,   542,     0,     0,
     0,     0,   200,     0,   121,     0,   232,   232,     0,    79,
   172,   173,   822,   174,    83,    84,   294,   121,   876,     0,
     0,  1142,     0,   233,   233,     0,     0,     0,     0,     0,
     0,     0,     0,   926,     0,     0,     0,   314,   326,   314,
   328,   637,   639,  1155,  1156,     0,   213,   241,   241,     0,
     0,     0,     0,   877,   878,   879,   880,   881,   882,   883,
   884,   885,   886,     0,     0,     0,     0,  1179,  1180,     0,
     0,     0,     0,     0,     0,     0,   121,     0,     0,     0,
   957,   841,     0,   592,   194,     0,     0,     0,     0,   314,
   121,     0,   194,     0,     0,     0,   194,   314,   201,   194,
     0,     0,     0,     0,   211,     0,     0,   414,     0,     0,
     0,     0,  1205,  1206,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   194,   199,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   121,
     0,     0,   201,     0,   728,     0,   200,     0,   211,     0,
   201,     0,     0,     0,   201,     0,   211,   201,     0,     0,
   211,     0,     0,   211,     0,   234,     0,  1052,     0,     0,
   234,   240,   234,     0,  1059,     0,   240,     0,   240,   447,
     0,     0,     0,     0,     0,   234,   201,     0,   213,     0,
     0,   240,   211,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   728,     0,     0,   476,   477,   478,   479,
     0,     0,     0,   697,   314,   314,   314,   314,   314,   314,
   868,   869,     0,     0,   706,     0,   447,     0,     0,     0,
     0,     0,   213,     0,     0,     0,     0,   447,   696,  -687,
   213,     0,     0,   291,   213,     0,     0,   213,   153,   154,
   155,   156,   157,   158,   509,   241,     0,     0,     0,     0,
   241,     0,   241,     0,     0,     0,   159,   160,   161,     0,
     0,     0,     0,     0,     0,   241,   213,     0,   817,     0,
     0,     0,     0,     0,     0,     0,     0,     0,  1124,     0,
   162,    99,   697,   194,     0,     0,     0,     0,     0,     0,
     0,   554,     0,   314,   841,     0,     0,  1141,     0,     0,
     0,     0,   438,   314,     0,  1146,  1147,   814,     0,     0,
     0,     0,   291,     0,   815,     0,   816,   153,   154,   155,
   156,   157,   158,   171,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   159,   160,   161,     0,     0,
     0,   201,     0,     0,   314,     0,     0,   211,  1183,     0,
     0,     0,     0,    99,     0,  1187,  1189,     0,     0,   162,
     0,     0,   234,   234,     0,     0,     0,   841,   240,   240,
     0,     0,     0,     0,     0,   314,   314,   314,   314,   314,
   314,   314,   314,   314,   314,   314,   314,   314,   314,   314,
   314,   314,  1208,   314,    79,   292,   293,     0,   174,     0,
   817,     0,   171,     0,     0,   817,     0,     0,     0,   817,
     0,     0,  1216,  1217,     0,     0,    99,     0,   634,  1221,
     0,     0,     0,     0,     0,     0,     0,   194,     0,     0,
     0,   213,     0,     0,     0,   697,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   241,   241,     0,     0,   972,   508,     0,   314,
     0,     0,   978,   979,   980,   981,   982,   983,   984,   985,
   986,   987,   988,    79,   172,   173,     0,   174,    83,    84,
     0,     0,     0,     0,     0,   201,     0,     0,     0,     0,
     0,   211,     0,   479,     0,     0,   728,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   817,     0,   447,     0,   447,     0,     0,     0,
     0,     0,   714,     0,     0,     0,   760,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   216,     0,     0,
     0,     0,   140,   141,   142,     0,     0,   217,   145,   146,
   147,   148,   149,   150,   218,  -489,  -489,     0,     0,     0,
   219,  -489,     0,     0,     0,   153,   154,   155,   156,   157,
   158,     0,     0,     0,     0,   213,     0,     0,  -272,  -272,
     0,     0,   854,   159,   160,   161,     0,     0,     0,     0,
     0,     0,     0,   860,     0,    22,    23,    24,    25,     0,
    26,     0,     0,     0,     0,    31,    32,   162,     0,    35,
    36,     0,    38,    39,    40,    41,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    -1,     1,    53,    54,     0,
     0,  -489,   164,   165,   166,   167,   168,   169,     0,     0,
     0,     0,     0,     2,     0,     0,   170,   817,     0,  -272,
   171,     0,    78,     0,     0,     0,     0,     0,     0,     3,
     0,     0,    82,     0,     0,     0,     0,     0,     0,     4,
     0,     5,     0,     0,     0,   314,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   314,     0,
     0,     0,     0,  -411,  -411,  -411,     0,     6,     0,     0,
     0,     0,     7,     8,     9,     0,     0,     0,     0,   314,
     0,     0,     0,     0,     0,     0,     0,    10,    11,    12,
     0,    79,   172,   173,     0,   174,   220,   221,     0,     0,
     0,     0,     0,     0,     0,     0,    13,    14,    15,     0,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
   975,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
    65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
    75,    76,    77,    78,     0,     0,     0,     0,    -2,     1,
    79,    80,    81,    82,     0,    83,    84,    85,     0,     0,
     0,     0,     0,     0,     0,     0,     2,     0,     0,     0,
     0,     0,  -272,     0,     0,     0,     0,     0,   479,     0,
     0,     0,     3,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     4,     0,     5,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,  -411,  -411,  -411,     0,
     6,     0,     0,     0,  1079,     7,     8,     9,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    10,    11,    12,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    13,
    14,    15,     0,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,     0,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
    62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    78,     0,     0,     0,
     0,     0,     0,    79,    80,    81,    82,   139,    83,    84,
    85,     0,   140,   141,   142,     0,   143,   144,   145,   146,
   147,   148,   149,   150,   151,  -544,   546,     0,     0,     0,
   152,     0,     0,     0,     0,   153,   154,   155,   156,   157,
   158,     0,     0,     0,     0,     0,     0,     0,  -272,  -272,
     4,     0,     5,   159,   160,   161,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,  -411,  -411,  -411,   162,     6,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   164,   165,   166,   167,   168,   169,     0,     0,
     0,     0,     0,     0,     0,     0,   170,    13,    14,    15,
   171,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,     0,    26,    27,    28,    29,    30,    31,    32,    33,
    34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
    74,    75,    76,    77,    78,     0,     0,     0,     0,     0,
     0,    79,   172,   547,    82,   174,   175,    84,    85,   139,
     0,     0,     0,     0,   140,   141,   142,     0,   143,   144,
   145,   146,   147,   148,   149,   150,   151,  -170,     0,     0,
     0,     0,   152,     0,     0,     0,     0,   153,   154,   155,
   156,   157,   158,     0,     0,     0,     0,     0,     0,     0,
  -272,  -272,  -272,     0,     0,   159,   160,   161,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,  -272,  -272,  -272,   162,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   164,   165,   166,   167,   168,   169,
     0,     0,     0,     0,     0,     0,     0,     0,   170,  -272,
  -272,  -272,   171,  -272,  -272,  -272,  -272,  -272,  -272,  -272,
  -272,  -272,  -272,     0,  -272,  -272,  -272,  -272,  -272,  -272,
  -272,  -272,  -272,  -272,  -272,  -272,  -272,  -272,  -272,  -272,
  -272,  -272,  -272,  -272,  -272,  -272,  -272,  -272,  -272,  -272,
  -272,  -272,  -272,  -272,  -272,  -272,  -272,  -272,  -272,  -272,
  -272,  -272,  -272,  -272,  -272,  -272,  -272,  -272,  -272,  -272,
  -272,  -272,  -272,  -272,  -272,  -272,  -272,     0,     0,     0,
     0,     0,     0,    79,   172,   173,  -272,   174,   175,    84,
  -272,   216,     0,     0,     0,     0,   140,   141,   142,     0,
     0,   217,   145,   146,   147,   148,   149,   150,   218,  -170,
  -548,     0,     0,     0,   219,     0,     0,     0,     0,   153,
   154,   155,   156,   157,   158,     0,     0,     0,     0,     0,
     0,     0,  -272,  -272,  -272,     0,     0,   159,   160,   161,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,  -272,  -272,
  -272,   162,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   164,   165,   166,   167,
   168,   169,     0,     0,     0,     0,     0,     0,     0,     0,
   170,  -272,  -272,  -272,   171,  -272,  -272,  -272,  -272,  -272,
  -272,  -272,  -272,  -272,  -272,     0,  -272,  -272,  -272,  -272,
  -272,  -272,  -272,  -272,  -272,  -272,  -272,  -272,  -272,  -272,
  -272,  -272,  -272,  -272,  -272,  -272,  -272,  -272,  -272,  -272,
  -272,  -272,  -272,  -272,  -272,  -272,  -272,  -272,  -272,  -272,
  -272,  -272,  -272,  -272,  -272,  -272,  -272,  -272,  -272,  -272,
  -272,  -272,  -272,  -272,  -272,  -272,  -272,  -272,  -272,     0,
     0,     0,     0,     0,     0,    79,   172,   173,  -272,   174,
   220,   221,  -272,  -168,     0,     0,     0,     0,  -168,  -168,
  -168,     0,  -168,  -168,  -168,  -168,  -168,  -168,  -168,  -168,
  -168,  -168,  -168,  -168,  -693,  -168,  -168,     0,  -168,     0,
  -168,  -168,  -168,  -168,  -168,  -168,  -168,  -168,  -168,  -168,
  -168,  -168,  -168,  -168,  -168,  -168,     0,  -168,     0,  -168,
  -168,  -168,  -168,  -168,  -168,  -168,  -168,  -168,  -168,  -168,
  -168,  -168,  -168,  -168,  -168,  -168,  -168,  -168,  -168,  -168,
     0,     0,     0,  -168,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,  -168,  -168,
  -168,  -168,  -168,  -168,     0,     0,     0,     0,   139,     0,
     0,     0,  -168,   140,   141,   142,  -168,   143,   144,   145,
   146,   147,   148,   149,   150,   151,  -544,     0,     0,     0,
     0,   152,     0,     0,     0,     0,   153,   154,   155,   156,
   157,   158,     0,     0,     0,     0,     0,     0,     0,  -272,
  -272,     0,     0,   139,   159,   160,   161,     0,   140,   141,
   142,     0,   143,   144,   145,   146,   147,   148,   149,   150,
   151,  -544,     0,     0,     0,     0,   152,     0,   162,     0,
     0,   153,   154,   155,   156,   157,   158,  -168,  -168,  -168,
     0,  -168,  -168,  -168,  -272,  -272,     0,     0,     0,   159,
   160,   161,   163,   164,   165,   166,   167,   168,   169,     0,
     0,     0,     0,     0,     0,     0,     0,   170,     0,     0,
     0,   171,     0,   162,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,  -517,   164,   165,
   166,   167,   168,   169,     0,     0,     0,     0,   216,     0,
     0,     0,   170,   140,   141,   142,   171,     0,   217,   145,
   146,   147,   148,   149,   150,   218,  -544,  -548,     0,     0,
     0,   219,     0,     0,     0,     0,   153,   154,   155,   156,
   157,   158,    79,   172,   173,     0,   174,   175,    84,  -272,
  -272,     0,     0,   139,   159,   160,   161,     0,   140,   141,
   142,     0,   143,   144,   145,   146,   147,   148,   149,   150,
   151,  -544,   640,     0,     0,     0,   152,     0,   162,     0,
     0,   153,   154,   155,   156,   157,   158,    79,   172,   173,
     0,   174,   175,    84,  -272,  -272,     0,     0,     0,   159,
   160,   161,  -485,   164,   165,   166,   167,   168,   169,     0,
     0,     0,     0,     0,     0,     0,     0,   170,     0,     0,
     0,   171,     0,   162,     0,     0,  -254,     0,     0,     0,
     0,     0,   291,     0,     0,     0,     0,   153,   154,   155,
   156,   157,   158,     0,     0,     0,     0,     0,   164,   165,
   166,   167,   168,   169,     0,   159,   160,   161,   216,     0,
     0,     0,   170,   140,   141,   142,   171,     0,   217,   145,
   146,   147,   148,   149,   150,   218,  -544,  -548,     0,   162,
     0,   219,     0,     0,     0,     0,   153,   154,   155,   156,
   157,   158,    79,   172,   173,     0,   174,   220,   221,  -272,
  -272,     0,     0,   139,   159,   160,   161,     0,   140,   141,
   142,     0,   143,   144,   145,   146,   147,   148,   149,   150,
   151,  -544,   171,     0,     0,     0,   152,     0,   162,     0,
     0,   153,   154,   155,   156,   157,   158,    79,   172,   173,
     0,   174,   175,    84,  -272,  -272,     0,     0,     0,   159,
   160,   161,     0,   164,   165,   166,   167,   168,   169,     0,
     0,     0,     0,     0,     0,     0,     0,   170,     0,     0,
     0,   171,     0,   162,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    79,   292,   293,     0,   174,   164,   165,
   166,   167,   168,   169,     0,     0,     0,     0,     0,     0,
     0,     0,   170,   140,   141,   142,   171,   143,   144,   145,
   146,   147,   148,   149,   150,   218,  -544,   564,     0,     0,
     0,   349,     0,     0,     0,     0,   153,   154,   155,   156,
   157,   158,    79,   172,   173,     0,   174,   220,   221,  -272,
  -272,     4,     0,     5,   159,   160,   161,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   162,     6,
     0,     0,     0,     0,     0,     0,     0,    79,   172,   173,
     0,   174,   175,    84,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   164,   165,   166,   167,   168,   169,     0,
     0,     0,     0,     0,     0,     0,     0,   565,    13,    14,
    15,   171,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,     0,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
    73,    74,    75,    76,    77,    78,     0,     0,     0,     0,
     0,     0,    79,   172,   547,    82,   174,   175,    84,    85,
   140,   141,   142,     0,   143,   144,   145,   146,   147,   148,
   149,   150,   218,  -544,   641,     0,     0,     0,   349,     0,
     0,     0,     0,   153,   154,   155,   156,   157,   158,     0,
     0,     0,     0,     0,     0,     0,  -272,  -272,     4,     0,
     5,   159,   160,   161,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   162,     6,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   164,   165,   166,   167,   168,   169,     0,     0,     0,     0,
     0,     0,     0,     0,   170,    13,    14,    15,   171,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,     0,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,     0,     0,     0,     0,     0,     0,    79,
   172,   547,    82,   174,   175,    84,    85,   140,   141,   142,
     0,   143,   144,   145,   146,   147,   148,   149,   150,   218,
  -544,   653,     0,     0,     0,   349,     0,     0,     0,     0,
   153,   154,   155,   156,   157,   158,     0,     0,     0,     0,
     0,     0,     0,  -272,  -272,     4,     0,     5,   159,   160,
   161,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   162,     6,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   164,   165,   166,
   167,   168,   169,     0,     0,     0,     0,     0,     0,     0,
     0,   654,    13,    14,    15,   171,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,     0,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
     0,     0,     0,     0,     0,     0,    79,   172,   547,    82,
   174,   175,    84,    85,   140,   141,   142,     0,   143,   144,
   145,   146,   147,   148,   149,   150,   218,  -544,   652,     0,
     0,     0,   349,     0,     0,     0,     0,   153,   154,   155,
   156,   157,   158,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   159,   160,   161,   140,   141,
   142,     0,   143,   144,   145,   146,   147,   148,   149,   150,
   218,  -544,   656,     0,     0,     0,   349,     0,     0,   162,
     0,   153,   154,   155,   156,   157,   158,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   159,
   160,   161,     0,     0,   164,   165,   166,   167,   168,   169,
     0,     0,     0,     0,     0,     0,     0,     0,   170,     0,
     0,     0,   171,   162,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   164,   165,
   166,   167,   168,   169,     0,     0,     0,     0,     0,     0,
     0,     0,   657,   140,   141,   142,   171,   143,   144,   145,
   146,   147,   148,   149,   150,   218,  -544,   712,     0,     0,
     0,   349,     0,     0,     0,     0,   153,   154,   155,   156,
   157,   158,     0,    79,   172,   173,     0,   174,   175,    84,
     0,     0,     0,     0,   159,   160,   161,   140,   141,   142,
     0,   143,   144,   145,   146,   147,   148,   149,   150,   218,
  -544,   790,     0,     0,     0,   349,     0,     0,   162,     0,
   153,   154,   155,   156,   157,   158,     0,    79,   172,   173,
     0,   174,   175,    84,     0,     0,     0,     0,   159,   160,
   161,     0,     0,   164,   165,   166,   167,   168,   169,     0,
     0,     0,     0,     0,     0,     0,     0,   170,     0,     0,
     0,   171,   162,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   164,   165,   166,
   167,   168,   169,     0,     0,     0,     0,     0,     0,     0,
     0,   170,   140,   141,   142,   171,   143,   144,   145,   146,
   147,   148,   149,   150,   218,  -544,   791,     0,     0,     0,
   349,     0,     0,     0,     0,   153,   154,   155,   156,   157,
   158,     0,    79,   172,   173,     0,   174,   175,    84,     0,
     0,     0,     0,   159,   160,   161,   140,   141,   142,     0,
   143,   144,   145,   146,   147,   148,   149,   150,   218,  -544,
   793,     0,     0,     0,   349,     0,     0,   162,     0,   153,
   154,   155,   156,   157,   158,     0,    79,   172,   173,     0,
   174,   175,    84,     0,     0,     0,     0,   159,   160,   161,
     0,     0,   164,   165,   166,   167,   168,   169,     0,     0,
     0,     0,     0,     0,     0,     0,   792,     0,     0,     0,
   171,   162,     0,     0,  -170,     0,     0,     0,     0,   349,
     0,     0,     0,     0,   153,   154,   155,   156,   157,   158,
     0,     0,     0,     0,     0,     0,   164,   165,   166,   167,
   168,   169,   159,   160,   161,     0,     0,     0,     0,     0,
   170,   140,   141,   142,   171,   143,   144,   145,   146,   147,
   148,   149,   150,   218,  -544,   925,   162,     0,     0,   349,
     0,     0,     0,     0,   153,   154,   155,   156,   157,   158,
     0,    79,   172,   173,     0,   174,   175,    84,     0,     0,
     0,     0,   159,   160,   161,   140,   141,   142,     0,   143,
   144,   145,   146,   147,   148,   149,   150,   218,  -544,   171,
     0,     0,     0,   349,     0,     0,   162,     0,   153,   154,
   155,   156,   157,   158,     0,    79,   172,   173,     0,   174,
   175,    84,     0,     0,     0,     0,   159,   160,   161,     0,
     0,   164,   165,   166,   167,   168,   169,     0,     0,     0,
     0,     0,     0,     0,     0,   170,     0,     0,     0,   171,
   162,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    79,   292,   293,     0,   174,   164,   165,   166,   167,   168,
   169,  -135,     0,     0,     0,     0,  -135,     0,     0,   170,
     0,     0,     0,   171,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     4,     0,     5,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    79,   172,   173,     0,   174,   175,    84,     0,     0,     0,
     0,     0,     0,     0,     6,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    79,   172,   173,     0,   174,   175,
    84,     0,     0,    13,    14,    15,     0,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,     0,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,  -547,     0,     0,     0,     0,     0,     0,     0,   134,
    82,     0,     0,     0,    85,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     4,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    13,    14,    15,     0,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,     0,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
     0,     0,     0,     0,     0,   617,     0,     0,   134,    82,
   291,     0,     0,    85,     0,   153,   154,   155,   156,   157,
   158,     0,     0,     0,     0,     0,   696,     0,     0,     0,
     0,   291,     0,   159,   160,   161,   153,   154,   155,   156,
   157,   158,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   159,   160,   161,   162,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   162,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   171,     0,     0,     0,     0,     0,     0,     0,     0,     0,
  -272,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     3,   171,     0,     0,     0,     0,     0,     0,     0,     0,
     4,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    79,   292,   293,     0,   174,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    79,   292,   293,     0,   174,    13,    14,    15,
     0,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,     0,    26,    27,    28,    29,    30,    31,    32,    33,
    34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
    74,    75,    76,    77,    78,     0,     0,     0,     0,     0,
     0,    79,    80,    81,    82,     0,    83,    84,    85,   291,
   506,     0,     0,     0,   153,   154,   155,   156,   157,   158,
   291,     0,     0,   587,     0,   153,   154,   155,   156,   157,
   158,     0,   159,   160,   161,     0,     0,     0,     0,     0,
     0,     0,     0,   159,   160,   161,     0,     0,     0,     0,
     0,     0,     0,     0,   291,     0,   162,   678,     0,   153,
   154,   155,   156,   157,   158,   291,   973,   162,     0,     0,
   153,   154,   155,   156,   157,   158,     0,   159,   160,   161,
     0,     0,     0,     0,     0,     0,     0,     0,   159,   160,
   161,     0,     0,     0,     0,     0,     0,     0,     0,   171,
     0,   162,     0,     0,     0,     0,     0,     0,     0,     0,
   171,     0,   162,   291,  -254,     0,     0,     0,   153,   154,
   155,   156,   157,   158,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   159,   160,   161,     0,
     0,   291,     0,     0,   171,     0,   153,   154,   155,   156,
   157,   158,     0,     0,     0,   171,     0,     0,     0,     0,
   162,     0,     0,     0,   159,   160,   161,     0,     0,     0,
    79,   292,   293,     0,   174,     0,     0,     0,     0,     0,
     0,    79,   292,   293,     0,   174,     0,   338,   162,     0,
     0,     0,   153,   154,   155,   156,   157,   158,     0,   636,
     0,     0,     0,   171,   153,   154,   155,   156,   157,   158,
   159,   160,   161,     0,     0,    79,   292,   293,     0,   174,
     0,     0,   159,   160,   161,     0,    79,   292,   293,     0,
   174,   171,   638,     0,   162,     0,     0,   153,   154,   155,
   156,   157,   158,   715,     0,     0,   162,     0,   716,   717,
   718,   719,   720,   721,     0,   159,   160,   161,     0,     0,
     0,     0,     0,     0,     0,     0,   159,   722,   723,     0,
     0,     0,     0,     0,    79,   292,   293,   171,   174,   162,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   171,
   724,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    79,   292,   293,     0,   174,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   171,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   171,     0,     0,     0,     0,     0,     0,
  -198,  -198,     4,     0,     0,     0,     0,     0,    79,   292,
   293,     0,   174,     0,     0,     0,     0,     0,     0,     0,
    79,   292,   293,     0,   174,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    79,   292,   293,     0,   174,     0,     0,
     0,     0,     0,     0,    79,   725,   726,     0,   174,    13,
    14,    15,     0,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,     0,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
    62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    78,     4,     0,     5,
     0,     0,     0,     0,     0,   134,    82,     0,     0,     0,
    85,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,  -411,  -411,  -411,     0,     6,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    13,    14,    15,     0,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,     0,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,     4,     0,     5,     0,     0,     0,     0,     0,
   134,    82,     0,     0,     0,    85,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     6,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    13,
    14,    15,     0,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,     0,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
    62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    78,     4,     0,     0,
     0,     0,     0,    79,  1084,   134,    82,     0,     0,     0,
    85,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,  -411,  -411,  -411,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    13,    14,    15,     0,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,     0,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,     4,     0,     0,     0,     0,     0,     0,     0,
   134,    82,     0,     0,     0,    85,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    10,    11,    12,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    13,
    14,    15,     0,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,     0,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
    62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    78,     4,     0,     5,
     0,     0,     0,     0,     0,   134,    82,     0,     0,     0,
    85,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     6,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    13,    14,    15,     0,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,     0,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,     4,     0,     0,     0,     0,     0,     0,     0,
   134,    82,     0,     0,     0,    85,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    13,
    14,    15,     0,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,     0,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
    62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    78,     0,     0,     0,
     0,     0,     0,     0,     0,   134,    82,     0,     0,     0,
    85
};

static const short yycheck[] = {     0,
   456,     0,   140,   452,     5,   119,   395,   431,     9,    10,
    11,    12,   384,   385,   394,   386,   387,   589,   327,   396,
   128,   646,     3,    10,     0,   539,   450,   921,   615,   541,
   153,   154,   155,   156,   157,   158,   800,   308,    56,   913,
   349,   690,    10,  1031,   388,   389,   390,   391,    10,   432,
    27,   466,   230,   206,   668,   392,   393,   646,   646,   306,
   646,    21,   948,   219,     0,    25,     5,   814,   224,    18,
   226,   550,   819,   497,    23,   826,   823,    28,    24,    34,
   705,   832,     5,   261,    22,    86,    25,    86,    26,   568,
    28,    10,    11,    12,    45,    68,    69,    70,    71,    72,
    73,    74,    75,    76,    77,    37,    38,    45,   680,    21,
    86,   650,    41,   650,    41,    27,   705,   705,   119,   705,
    52,    53,   933,    11,    12,    21,  1114,    19,    57,    25,
    57,  1119,   646,    26,   646,   136,   109,  1031,  1032,   774,
   113,    34,   115,    18,   117,   126,   147,  1021,  1022,   122,
    86,   152,  1096,  1097,   789,   136,   111,   112,    54,    55,
   133,     5,   135,  1049,    24,   152,   184,   591,   932,   170,
   934,    10,   650,   281,   483,   599,    21,   826,    18,   926,
  1168,    25,    27,   832,   152,   799,   601,     0,   802,    88,
   152,   705,     5,   705,     7,   196,   467,     5,   351,    11,
    12,   952,    21,   204,   177,   206,   359,   208,   361,   196,
   211,  1105,   189,  1107,    32,    33,    24,   600,   219,  1163,
  1094,   208,     5,   224,   211,   226,    34,   405,   196,   189,
   338,   650,   650,   152,   196,   774,   204,   774,   239,   240,
   208,    24,   204,   211,   693,  1056,   208,  1058,    28,   211,
   789,    34,   789,   240,    68,    69,    70,   646,   381,   382,
   383,   570,   185,   186,   187,    45,   646,   190,   191,   646,
   426,   427,   240,    86,   646,   646,    24,   196,   240,   280,
   433,   280,   283,   284,   285,   204,    21,   100,    24,   208,
    25,   264,   211,   431,     5,    24,   774,    26,   111,   112,
   219,   220,   646,   952,   305,   224,   305,   226,    24,   646,
   311,   789,   450,   152,  1061,   296,   705,    24,  1212,    26,
   239,   240,   910,   136,    24,   705,   299,    34,   705,   302,
    24,   219,    26,   705,   705,    21,   224,   310,   226,    25,
   313,   185,   186,   187,    24,    24,   190,   191,   501,   596,
   351,   239,    18,    39,    34,   774,   774,   196,   359,   497,
   361,   705,    21,   486,    18,   204,    25,     5,   705,   208,
   789,   789,   211,   960,    24,    21,    18,   185,   186,    25,
   488,   805,    24,  1008,   956,    24,    24,    25,    26,   903,
    16,   815,    34,   905,   843,    34,    34,   550,   181,   182,
    16,   240,   185,   186,   405,   930,   189,   219,   933,    16,
    25,    26,   224,    28,   226,   568,   569,    16,   405,  1008,
  1008,    22,  1008,    15,    21,   426,   427,   239,    25,   101,
    45,    21,   433,    34,   435,    25,   435,   405,    19,    29,
    24,     0,    26,   405,   445,   364,     5,   423,    21,   422,
     9,    18,    25,   591,    21,   456,    23,   458,   434,   432,
    18,   599,    22,    21,   437,   466,   574,    25,   469,   442,
    22,   444,   473,    24,   185,   186,   187,    50,    51,   190,
   191,    18,   295,    34,    21,   466,   405,    34,   461,   642,
   643,    21,   465,    21,  1008,    25,  1008,    25,    18,    22,
   501,    21,   655,  1091,    29,   185,   186,   426,   427,   510,
   511,    40,   901,   621,    25,    26,     5,    28,   890,   891,
   900,   892,   893,    18,    39,   902,    21,    86,   636,    25,
   638,  1056,    28,  1058,    45,    24,    25,    26,   426,   427,
    26,   694,    28,   185,   186,    34,   185,   186,   549,   550,
   894,   895,   896,   897,    18,    56,   557,    21,   557,    45,
   119,   898,   899,     5,   565,    21,   405,   568,   569,    25,
    25,    26,  1160,    18,   550,    19,    21,   136,    24,   693,
    26,   549,    28,    25,   185,   186,   187,   549,   147,   190,
   191,    95,   568,   716,   717,   718,   719,   720,   721,    45,
   601,    95,    48,    49,   185,   186,   187,   715,    22,   190,
   191,    24,    50,    51,   426,   427,   589,    89,    90,  1008,
   601,    34,    21,    54,    55,   438,    25,   600,  1008,    21,
   549,  1008,   189,    25,   185,   186,  1008,  1008,   185,   186,
   187,   642,   643,   190,   191,   646,   619,   119,   120,     6,
     7,    50,    51,   654,   655,    21,   657,    18,   967,    25,
    21,   133,    25,    26,  1008,    28,   913,   805,    22,  1125,
   671,  1008,   673,    24,   647,    23,   649,   815,    26,    21,
    28,   682,    45,    25,    24,    21,    95,    27,   689,    25,
  1139,   692,   693,   694,    34,   676,   185,   186,   187,    42,
    43,   190,   191,    26,   705,    28,    22,   954,    50,    51,
   549,    24,   693,    26,    19,    10,    11,    12,   856,    21,
    20,   280,    45,    25,   283,   284,   285,    34,     0,   843,
   185,   186,   187,     5,    21,   190,   191,    26,    25,    28,
    95,    13,    14,   185,   186,   187,   305,    21,   190,   191,
    18,    25,   311,    21,   727,    21,    45,    25,    21,    25,
    20,    21,    25,  1187,   887,   888,   889,    24,   181,   182,
  1017,    18,   185,   186,    37,    38,   189,    24,    27,  1026,
    18,    88,    29,    30,    31,    32,    33,    34,    25,    52,
    53,   792,    37,    38,    18,   608,    24,  1221,    26,  1046,
    47,    48,    49,    34,    35,    36,    34,    52,    53,   782,
   783,    21,    22,   814,    86,   816,  1063,    24,   819,    21,
    27,    21,   823,    25,    71,    25,    18,    34,    23,   101,
   102,   103,   104,   105,   106,   107,   108,    24,   110,    21,
    21,   113,   843,    25,    25,   185,   186,   119,   971,   189,
   851,    21,   825,  1100,    22,    25,   128,   152,   130,   131,
   132,    21,   843,    24,   136,    25,    21,   114,    50,    51,
    25,    21,    18,    21,  1121,    25,   435,    25,   185,   186,
   152,    21,    25,   190,   191,    25,   445,   159,    21,    37,
    38,    25,    25,    24,    34,    35,    36,   456,    21,   458,
    18,   196,    25,    21,    52,    53,    18,   466,    18,   204,
   469,    26,   913,   208,   473,    18,   211,    21,    21,    34,
   921,    25,    21,    21,   219,   926,    25,    25,    21,   224,
    21,   226,    25,    18,    25,    34,    35,    36,   185,   186,
   187,    18,   189,    18,   239,   240,    24,   219,    26,    21,
    28,   510,   511,    25,    50,    51,   929,   185,   186,   187,
    32,    33,   190,   191,   192,    19,  1074,    45,    21,    21,
    48,    49,    25,    25,    18,   976,   977,    21,   185,   186,
    32,    33,   189,   956,   797,   257,    21,   800,    54,    55,
    25,    24,    24,    26,   185,   186,   187,    11,   557,   190,
   191,    34,    21,    34,    35,    36,    25,  1008,   280,   281,
    21,   283,   284,    21,    25,    32,    33,    25,  1019,   291,
  1021,  1022,    21,    21,   296,  1139,    25,    25,  1029,    25,
  1031,  1032,    21,   305,    21,    91,    25,     9,    25,   311,
    20,    21,   601,  1019,    20,    21,    11,  1048,    21,  1187,
    21,    22,  1053,    19,  1053,    52,    53,    54,    32,    33,
  1061,    19,  1200,   111,   112,  1066,   338,  1066,    19,  1070,
   185,   186,   187,    19,    24,   190,   191,   349,  1051,    27,
    10,    11,    12,  1221,    91,  1066,    24,    21,    25,    22,
  1091,  1092,  1093,  1094,    21,  1096,  1097,    10,    11,    12,
    18,    25,    25,    25,  1105,    21,  1107,    11,    27,  1110,
   405,    23,   671,  1114,   673,  1116,  1117,   930,  1119,   932,
   933,   934,    24,   682,  1125,    24,    24,    20,   140,    25,
   689,   426,   427,   692,   693,    19,    23,    20,  1139,    19,
    21,   153,   154,   155,   156,   157,   158,    24,   160,   161,
   422,    27,   185,   186,   187,     5,  1129,   190,   191,  1160,
  1161,  1162,  1163,   435,    25,    19,    22,  1168,    25,    24,
   442,    20,   444,    20,   446,    27,    73,   449,    18,    25,
   452,    22,   454,    27,   456,    19,   458,  1188,    23,  1188,
    24,   463,    25,    21,   466,    29,    30,    31,    32,    33,
    34,   473,    21,    25,    25,    25,    24,    39,    56,    40,
    25,  1212,    29,    47,    48,    49,   488,   186,    91,    91,
    91,    91,   152,    58,    59,    60,    61,    62,    63,    64,
    65,    66,    67,    91,    25,    25,    18,    71,    22,   152,
    91,    20,    25,  1056,    24,  1058,  1219,    25,    18,    25,
    21,    18,    40,   189,   549,   814,    20,   816,    27,    18,
   819,    21,    23,    18,   823,    91,   196,    24,    22,    22,
   191,    21,    21,    25,   204,    22,    20,    20,   208,    91,
   114,   211,    27,   196,   843,   557,    25,   193,    18,   219,
    27,   204,   851,    25,   224,   208,   226,    20,   211,   571,
    40,    20,   574,    27,    25,     0,   219,     0,   311,   239,
   240,   224,    86,   226,  1212,   921,  1181,  1110,   590,  1011,
  1082,   681,   594,   595,  1020,  1160,   239,   240,  1048,   601,
   871,   458,   820,    19,    20,   787,  1188,   671,    24,   574,
    26,   673,    28,    29,    30,    31,    32,    33,    34,   621,
   843,   185,   186,   187,   126,   189,   296,   692,    12,   631,
   632,    47,    48,    49,   636,   239,   638,   926,   347,   381,
   382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
   392,   393,   394,   395,   396,    71,  1144,   501,    10,   405,
   662,   849,   696,   705,  1008,   848,    -1,    -1,   670,    -1,
   672,    -1,    -1,    -1,   676,    -1,    -1,    -1,    -1,    -1,
    -1,   683,   684,    -1,    -1,    -1,   688,   976,   977,   431,
   692,   693,    73,    74,    75,    76,    -1,   341,   114,    80,
    81,    82,    83,    84,    85,    86,    -1,    -1,   450,    -1,
    -1,    -1,    -1,   715,    -1,    -1,    10,    11,    12,    -1,
    -1,   365,    10,    11,    12,    -1,   370,   371,   372,   373,
   374,   375,   376,   377,   378,   379,   380,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   486,   405,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   497,    -1,   401,    -1,    -1,
    -1,    -1,   405,    -1,  1053,    -1,   426,   427,    -1,   185,
   186,   187,  1061,   189,   190,   191,   128,  1066,    23,    -1,
    -1,  1070,    -1,   426,   427,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   795,    -1,    -1,    -1,   539,   150,   541,
   152,   543,   544,  1092,  1093,    -1,    10,    11,    12,    -1,
    -1,    -1,    -1,    58,    59,    60,    61,    62,    63,    64,
    65,    66,    67,    -1,    -1,    -1,    -1,  1116,  1117,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,  1125,    -1,    -1,    -1,
   842,   843,    -1,   845,   196,    -1,    -1,    -1,    -1,   591,
  1139,    -1,   204,    -1,    -1,    -1,   208,   599,   152,   211,
    -1,    -1,    -1,    -1,   152,    -1,    -1,   219,    -1,    -1,
    -1,    -1,  1161,  1162,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   240,   549,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1188,
    -1,    -1,   196,    -1,   646,    -1,   549,    -1,   196,    -1,
   204,    -1,    -1,    -1,   208,    -1,   204,   211,    -1,    -1,
   208,    -1,    -1,   211,    -1,   219,    -1,   929,    -1,    -1,
   224,   219,   226,    -1,   936,    -1,   224,    -1,   226,   291,
    -1,    -1,    -1,    -1,    -1,   239,   240,    -1,   152,    -1,
    -1,   239,   240,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   705,    -1,    -1,   318,   319,   320,   321,
    -1,    -1,    -1,   617,   716,   717,   718,   719,   720,   721,
   722,   723,    -1,    -1,   628,    -1,   338,    -1,    -1,    -1,
    -1,    -1,   196,    -1,    -1,    -1,    -1,   349,    19,    20,
   204,    -1,    -1,    24,   208,    -1,    -1,   211,    29,    30,
    31,    32,    33,    34,   366,   219,    -1,    -1,    -1,    -1,
   224,    -1,   226,    -1,    -1,    -1,    47,    48,    49,    -1,
    -1,    -1,    -1,    -1,    -1,   239,   240,    -1,   682,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1050,    -1,
    71,  1053,   696,   405,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   413,    -1,   805,  1066,    -1,    -1,  1069,    -1,    -1,
    -1,    -1,  1074,   815,    -1,  1077,  1078,    19,    -1,    -1,
    -1,    -1,    24,    -1,    26,    -1,    28,    29,    30,    31,
    32,    33,    34,   114,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    47,    48,    49,    -1,    -1,
    -1,   405,    -1,    -1,   856,    -1,    -1,   405,  1120,    -1,
    -1,    -1,    -1,  1125,    -1,  1127,  1128,    -1,    -1,    71,
    -1,    -1,   426,   427,    -1,    -1,    -1,  1139,   426,   427,
    -1,    -1,    -1,    -1,    -1,   887,   888,   889,   890,   891,
   892,   893,   894,   895,   896,   897,   898,   899,   900,   901,
   902,   903,  1164,   905,   185,   186,   187,    -1,   189,    -1,
   814,    -1,   114,    -1,    -1,   819,    -1,    -1,    -1,   823,
    -1,    -1,  1184,  1185,    -1,    -1,  1188,    -1,   540,  1191,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   549,    -1,    -1,
    -1,   405,    -1,    -1,    -1,   849,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   426,   427,    -1,    -1,   870,   871,    -1,   971,
    -1,    -1,   876,   877,   878,   879,   880,   881,   882,   883,
   884,   885,   886,   185,   186,   187,    -1,   189,   190,   191,
    -1,    -1,    -1,    -1,    -1,   549,    -1,    -1,    -1,    -1,
    -1,   549,    -1,   615,    -1,    -1,  1008,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   926,    -1,   636,    -1,   638,    -1,    -1,    -1,
    -1,    -1,   644,    -1,    -1,    -1,   648,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,
    -1,    -1,     6,     7,     8,    -1,    -1,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
    24,    25,    -1,    -1,    -1,    29,    30,    31,    32,    33,
    34,    -1,    -1,    -1,    -1,   549,    -1,    -1,    42,    43,
    -1,    -1,   704,    47,    48,    49,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   715,    -1,   121,   122,   123,   124,    -1,
   126,    -1,    -1,    -1,    -1,   131,   132,    71,    -1,   135,
   136,    -1,   138,   139,   140,   141,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,     0,     1,   153,   154,    -1,
    -1,    95,    96,    97,    98,    99,   100,   101,    -1,    -1,
    -1,    -1,    -1,    18,    -1,    -1,   110,  1061,    -1,    24,
   114,    -1,   178,    -1,    -1,    -1,    -1,    -1,    -1,    34,
    -1,    -1,   188,    -1,    -1,    -1,    -1,    -1,    -1,    44,
    -1,    46,    -1,    -1,    -1,  1187,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1200,    -1,
    -1,    -1,    -1,    68,    69,    70,    -1,    72,    -1,    -1,
    -1,    -1,    77,    78,    79,    -1,    -1,    -1,    -1,  1221,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    92,    93,    94,
    -1,   185,   186,   187,    -1,   189,   190,   191,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,    -1,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   872,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
   155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
   165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
   175,   176,   177,   178,    -1,    -1,    -1,    -1,     0,     1,
   185,   186,   187,   188,    -1,   190,   191,   192,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    18,    -1,    -1,    -1,
    -1,    -1,    24,    -1,    -1,    -1,    -1,    -1,   960,    -1,
    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    44,    -1,    46,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    70,    -1,
    72,    -1,    -1,    -1,  1006,    77,    78,    79,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    92,    93,    94,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,
   112,   113,    -1,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,    -1,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
   152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
   162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
   172,   173,   174,   175,   176,   177,   178,    -1,    -1,    -1,
    -1,    -1,    -1,   185,   186,   187,   188,     1,   190,   191,
   192,    -1,     6,     7,     8,    -1,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
    24,    -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,
    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,
    44,    -1,    46,    47,    48,    49,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    68,    69,    70,    71,    72,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    96,    97,    98,    99,   100,   101,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,    -1,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
   154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
   164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
   174,   175,   176,   177,   178,    -1,    -1,    -1,    -1,    -1,
    -1,   185,   186,   187,   188,   189,   190,   191,   192,     1,
    -1,    -1,    -1,    -1,     6,     7,     8,    -1,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    -1,    -1,
    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,
    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    42,    43,    44,    -1,    -1,    47,    48,    49,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    70,    71,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    96,    97,    98,    99,   100,   101,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,    -1,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
   152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
   162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
   172,   173,   174,   175,   176,   177,   178,    -1,    -1,    -1,
    -1,    -1,    -1,   185,   186,   187,   188,   189,   190,   191,
   192,     1,    -1,    -1,    -1,    -1,     6,     7,     8,    -1,
    -1,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,
    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    42,    43,    44,    -1,    -1,    47,    48,    49,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,
    70,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    96,    97,    98,    99,
   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,    -1,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
   150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
   160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
   170,   171,   172,   173,   174,   175,   176,   177,   178,    -1,
    -1,    -1,    -1,    -1,    -1,   185,   186,   187,   188,   189,
   190,   191,   192,     1,    -1,    -1,    -1,    -1,     6,     7,
     8,    -1,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    -1,    26,    -1,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    -1,    45,    -1,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
    -1,    -1,    -1,    71,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    96,    97,
    98,    99,   100,   101,    -1,    -1,    -1,    -1,     1,    -1,
    -1,    -1,   110,     6,     7,     8,   114,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    -1,    -1,    -1,
    -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,    32,
    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
    43,    -1,    -1,     1,    47,    48,    49,    -1,     6,     7,
     8,    -1,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    -1,    -1,    -1,    -1,    24,    -1,    71,    -1,
    -1,    29,    30,    31,    32,    33,    34,   185,   186,   187,
    -1,   189,   190,   191,    42,    43,    -1,    -1,    -1,    47,
    48,    49,    95,    96,    97,    98,    99,   100,   101,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,    -1,    -1,
    -1,   114,    -1,    71,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    95,    96,    97,
    98,    99,   100,   101,    -1,    -1,    -1,    -1,     1,    -1,
    -1,    -1,   110,     6,     7,     8,   114,    -1,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    -1,    -1,
    -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,    32,
    33,    34,   185,   186,   187,    -1,   189,   190,   191,    42,
    43,    -1,    -1,     1,    47,    48,    49,    -1,     6,     7,
     8,    -1,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    -1,    -1,    -1,    24,    -1,    71,    -1,
    -1,    29,    30,    31,    32,    33,    34,   185,   186,   187,
    -1,   189,   190,   191,    42,    43,    -1,    -1,    -1,    47,
    48,    49,    95,    96,    97,    98,    99,   100,   101,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,    -1,    -1,
    -1,   114,    -1,    71,    -1,    -1,    18,    -1,    -1,    -1,
    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,
    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    96,    97,
    98,    99,   100,   101,    -1,    47,    48,    49,     1,    -1,
    -1,    -1,   110,     6,     7,     8,   114,    -1,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    -1,    71,
    -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,    32,
    33,    34,   185,   186,   187,    -1,   189,   190,   191,    42,
    43,    -1,    -1,     1,    47,    48,    49,    -1,     6,     7,
     8,    -1,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,   114,    -1,    -1,    -1,    24,    -1,    71,    -1,
    -1,    29,    30,    31,    32,    33,    34,   185,   186,   187,
    -1,   189,   190,   191,    42,    43,    -1,    -1,    -1,    47,
    48,    49,    -1,    96,    97,    98,    99,   100,   101,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,    -1,    -1,
    -1,   114,    -1,    71,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   185,   186,   187,    -1,   189,    96,    97,
    98,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   110,     6,     7,     8,   114,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    -1,    -1,
    -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,    32,
    33,    34,   185,   186,   187,    -1,   189,   190,   191,    42,
    43,    44,    -1,    46,    47,    48,    49,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,    72,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,   186,   187,
    -1,   189,   190,   191,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    96,    97,    98,    99,   100,   101,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,    -1,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
   163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
   173,   174,   175,   176,   177,   178,    -1,    -1,    -1,    -1,
    -1,    -1,   185,   186,   187,   188,   189,   190,   191,   192,
     6,     7,     8,    -1,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    -1,    -1,    -1,    24,    -1,
    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,
    46,    47,    48,    49,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    71,    72,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    96,    97,    98,    99,   100,   101,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,    -1,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
   156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
   166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
   176,   177,   178,    -1,    -1,    -1,    -1,    -1,    -1,   185,
   186,   187,   188,   189,   190,   191,   192,     6,     7,     8,
    -1,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,
    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    71,    72,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    96,    97,    98,
    99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,    -1,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
   159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
   169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
    -1,    -1,    -1,    -1,    -1,    -1,   185,   186,   187,   188,
   189,   190,   191,   192,     6,     7,     8,    -1,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    -1,
    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,
    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    47,    48,    49,     6,     7,
     8,    -1,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    -1,    -1,    -1,    24,    -1,    -1,    71,
    -1,    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    47,
    48,    49,    -1,    -1,    96,    97,    98,    99,   100,   101,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,    -1,
    -1,    -1,   114,    71,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    96,    97,
    98,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   110,     6,     7,     8,   114,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    -1,    -1,
    -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,    32,
    33,    34,    -1,   185,   186,   187,    -1,   189,   190,   191,
    -1,    -1,    -1,    -1,    47,    48,    49,     6,     7,     8,
    -1,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    -1,    -1,    -1,    24,    -1,    -1,    71,    -1,
    29,    30,    31,    32,    33,    34,    -1,   185,   186,   187,
    -1,   189,   190,   191,    -1,    -1,    -1,    -1,    47,    48,
    49,    -1,    -1,    96,    97,    98,    99,   100,   101,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,    -1,    -1,
    -1,   114,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    96,    97,    98,
    99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   110,     6,     7,     8,   114,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
    24,    -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,
    34,    -1,   185,   186,   187,    -1,   189,   190,   191,    -1,
    -1,    -1,    -1,    47,    48,    49,     6,     7,     8,    -1,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    -1,    -1,    -1,    24,    -1,    -1,    71,    -1,    29,
    30,    31,    32,    33,    34,    -1,   185,   186,   187,    -1,
   189,   190,   191,    -1,    -1,    -1,    -1,    47,    48,    49,
    -1,    -1,    96,    97,    98,    99,   100,   101,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   110,    -1,    -1,    -1,
   114,    71,    -1,    -1,    19,    -1,    -1,    -1,    -1,    24,
    -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,
    -1,    -1,    -1,    -1,    -1,    -1,    96,    97,    98,    99,
   100,   101,    47,    48,    49,    -1,    -1,    -1,    -1,    -1,
   110,     6,     7,     8,   114,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    71,    -1,    -1,    24,
    -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,
    -1,   185,   186,   187,    -1,   189,   190,   191,    -1,    -1,
    -1,    -1,    47,    48,    49,     6,     7,     8,    -1,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,   114,
    -1,    -1,    -1,    24,    -1,    -1,    71,    -1,    29,    30,
    31,    32,    33,    34,    -1,   185,   186,   187,    -1,   189,
   190,   191,    -1,    -1,    -1,    -1,    47,    48,    49,    -1,
    -1,    96,    97,    98,    99,   100,   101,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   110,    -1,    -1,    -1,   114,
    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   185,   186,   187,    -1,   189,    96,    97,    98,    99,   100,
   101,    19,    -1,    -1,    -1,    -1,    24,    -1,    -1,   110,
    -1,    -1,    -1,   114,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    44,    -1,    46,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   185,   186,   187,    -1,   189,   190,   191,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    72,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   185,   186,   187,    -1,   189,   190,
   191,    -1,    -1,   111,   112,   113,    -1,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,    -1,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
   158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
   168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
   178,    20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   187,
   188,    -1,    -1,    -1,   192,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    44,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   111,   112,   113,    -1,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,    -1,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
   159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
   169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
    -1,    -1,    -1,    -1,    -1,    19,    -1,    -1,   187,   188,
    24,    -1,    -1,   192,    -1,    29,    30,    31,    32,    33,
    34,    -1,    -1,    -1,    -1,    -1,    19,    -1,    -1,    -1,
    -1,    24,    -1,    47,    48,    49,    29,    30,    31,    32,
    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    47,    48,    49,    71,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   114,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    24,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    34,   114,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   185,   186,   187,    -1,   189,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   185,   186,   187,    -1,   189,   111,   112,   113,
    -1,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,    -1,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
   154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
   164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
   174,   175,   176,   177,   178,    -1,    -1,    -1,    -1,    -1,
    -1,   185,   186,   187,   188,    -1,   190,   191,   192,    24,
    25,    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,
    24,    -1,    -1,    27,    -1,    29,    30,    31,    32,    33,
    34,    -1,    47,    48,    49,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    47,    48,    49,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    24,    -1,    71,    27,    -1,    29,
    30,    31,    32,    33,    34,    24,    25,    71,    -1,    -1,
    29,    30,    31,    32,    33,    34,    -1,    47,    48,    49,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    47,    48,
    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   114,
    -1,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   114,    -1,    71,    24,    25,    -1,    -1,    -1,    29,    30,
    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    47,    48,    49,    -1,
    -1,    24,    -1,    -1,   114,    -1,    29,    30,    31,    32,
    33,    34,    -1,    -1,    -1,   114,    -1,    -1,    -1,    -1,
    71,    -1,    -1,    -1,    47,    48,    49,    -1,    -1,    -1,
   185,   186,   187,    -1,   189,    -1,    -1,    -1,    -1,    -1,
    -1,   185,   186,   187,    -1,   189,    -1,    24,    71,    -1,
    -1,    -1,    29,    30,    31,    32,    33,    34,    -1,    24,
    -1,    -1,    -1,   114,    29,    30,    31,    32,    33,    34,
    47,    48,    49,    -1,    -1,   185,   186,   187,    -1,   189,
    -1,    -1,    47,    48,    49,    -1,   185,   186,   187,    -1,
   189,   114,    24,    -1,    71,    -1,    -1,    29,    30,    31,
    32,    33,    34,    24,    -1,    -1,    71,    -1,    29,    30,
    31,    32,    33,    34,    -1,    47,    48,    49,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    47,    48,    49,    -1,
    -1,    -1,    -1,    -1,   185,   186,   187,   114,   189,    71,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   114,
    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   185,   186,   187,    -1,   189,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   114,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   114,    -1,    -1,    -1,    -1,    -1,    -1,
    42,    43,    44,    -1,    -1,    -1,    -1,    -1,   185,   186,
   187,    -1,   189,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   185,   186,   187,    -1,   189,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   185,   186,   187,    -1,   189,    -1,    -1,
    -1,    -1,    -1,    -1,   185,   186,   187,    -1,   189,   111,
   112,   113,    -1,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,    -1,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
   152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
   162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
   172,   173,   174,   175,   176,   177,   178,    44,    -1,    46,
    -1,    -1,    -1,    -1,    -1,   187,   188,    -1,    -1,    -1,
   192,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    68,    69,    70,    -1,    72,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   111,   112,   113,    -1,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,    -1,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
   177,   178,    44,    -1,    46,    -1,    -1,    -1,    -1,    -1,
   187,   188,    -1,    -1,    -1,   192,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,
   112,   113,    -1,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,    -1,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
   152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
   162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
   172,   173,   174,   175,   176,   177,   178,    44,    -1,    -1,
    -1,    -1,    -1,   185,   186,   187,   188,    -1,    -1,    -1,
   192,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    68,    69,    70,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   111,   112,   113,    -1,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,    -1,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
   177,   178,    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   187,   188,    -1,    -1,    -1,   192,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    92,    93,    94,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,
   112,   113,    -1,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,    -1,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
   152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
   162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
   172,   173,   174,   175,   176,   177,   178,    44,    -1,    46,
    -1,    -1,    -1,    -1,    -1,   187,   188,    -1,    -1,    -1,
   192,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    72,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   111,   112,   113,    -1,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,    -1,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
   177,   178,    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   187,   188,    -1,    -1,    -1,   192,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,
   112,   113,    -1,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,    -1,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
   152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
   162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
   172,   173,   174,   175,   176,   177,   178,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   187,   188,    -1,    -1,    -1,
   192
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */

/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif



/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 3:
{ context_checkGlobalScope (); ;
    break;}
case 4:
{ context_checkGlobalScope (); ;
    break;}
case 5:
{ uentry_clearDecl (); ;
    break;}
case 6:
{ uentry_clearDecl (); ;
    break;}
case 7:
{ uentry_clearDecl (); ;
    break;}
case 8:
{ uentry_clearDecl (); ;
    break;}
case 9:
{ uentry_clearDecl (); ;
    break;}
case 10:
{ uentry_checkDecl (); exprNode_free (yyvsp[0].expr); ;
    break;}
case 11:
{ uentry_clearDecl (); /* evans 2002-02-08: okay to have a null statement */ ;
    break;}
case 12:
{ uentry_clearDecl (); ;
    break;}
case 13:
{ checkConstant (yyvsp[-6].qtyp, yyvsp[-4].ntyp); ;
    break;}
case 14:
{ checkValueConstant (yyvsp[-9].qtyp, yyvsp[-7].ntyp, yyvsp[-3].expr) ; ;
    break;}
case 15:
{ context_enterFunctionHeader (); ;
    break;}
case 16:
{ 
     declareStaticFunction (yyvsp[-2].ntyp); context_quietExitFunction (); 
     context_exitFunctionHeader (); 
   ;
    break;}
case 17:
{ 
     qtype qint = qtype_create (ctype_int);
     yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, qint);
     qtype_free (qint);
   ;
    break;}
case 18:
{ yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, yyvsp[-2].qtyp); ;
    break;}
case 20:
{ yyval.ntyp = yyvsp[0].ntyp; qtype_adjustPointers (yyvsp[-1].count, idDecl_getTyp (yyval.ntyp)); ;
    break;}
case 21:
{ yyval.ntyp = idDecl_create (yyvsp[0].cname, qtype_unknown ()); ;
    break;}
case 22:
{ yyval.ntyp = idDecl_expectFunction (yyvsp[-2].ntyp); ;
    break;}
case 23:
{ yyval.ntyp = idDecl_replaceCtype (yyvsp[-2].ntyp, ctype_makeInnerArray (idDecl_getCtype (yyvsp[-2].ntyp))); ;
    break;}
case 24:
{
     exprNode_findValue (yyvsp[-2].expr);
     idDecl_notExpectingFunction (yyvsp[-5].ntyp);

     if (exprNode_hasValue (yyvsp[-2].expr)) 
       {
	 yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ctype_makeInnerFixedArray (idDecl_getCtype (yyvsp[-5].ntyp), 
								  exprNode_getLongValue (yyvsp[-2].expr)));
       } 
     else
       {
	 yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ctype_makeInnerArray (idDecl_getCtype (yyvsp[-5].ntyp))); 
       }
   ;
    break;}
case 25:
{ setCurrentParams (uentryList_missingParams); ;
    break;}
case 26:
{ /* need to support globals and modifies here! */
     ctype ct = ctype_makeFunction (idDecl_getCtype (yyvsp[-5].ntyp), 
				    uentryList_makeMissingParams ());
     
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ct);
     idDecl_addClauses (yyval.ntyp, yyvsp[0].funcclauselist);
     context_popLoc ();
     /*drl 7/25/01 added*/
     setImplictfcnConstraints();
   ;
    break;}
case 27:
{ setCurrentParams (yyvsp[-1].entrylist); ;
    break;}
case 28:
{ setImplictfcnConstraints ();
     clearCurrentParams ();
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-6].ntyp, ctype_makeFunction (idDecl_getCtype (yyvsp[-6].ntyp), yyvsp[-3].entrylist));
     idDecl_addClauses (yyval.ntyp, yyvsp[0].funcclauselist);
     context_popLoc (); 
   ;
    break;}
case 29:
{ yyval.ntyp = idDecl_create (yyvsp[0].cname, qtype_unknown ()); ;
    break;}
case 30:
{ yyval.ntyp = idDecl_expectFunction (yyvsp[-2].ntyp); ;
    break;}
case 31:
{ yyval.ntyp = idDecl_replaceCtype (yyvsp[-2].ntyp, ctype_makeInnerArray (idDecl_getCtype (yyvsp[-2].ntyp))); ;
    break;}
case 32:
{ 
     int value;

     if (exprNode_hasValue (yyvsp[-2].expr) 
	 && multiVal_isInt (exprNode_getValue (yyvsp[-2].expr)))
       {
	 value = (int) multiVal_forceInt (exprNode_getValue (yyvsp[-2].expr));
       }
     else
       {
	 value = 0;
       }

     yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ctype_makeInnerFixedArray (idDecl_getCtype (yyvsp[-5].ntyp), value));
   ;
    break;}
case 33:
{ setCurrentParams (uentryList_missingParams); ;
    break;}
case 34:
{
     ctype ct = ctype_makeFunction (idDecl_getCtype (yyvsp[-5].ntyp), 
				    uentryList_makeMissingParams ());
     
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ct);
     idDecl_addClauses (yyval.ntyp, yyvsp[0].funcclauselist);
     context_popLoc (); 
   ;
    break;}
case 35:
{ setCurrentParams (yyvsp[-1].entrylist); ;
    break;}
case 36:
{ 
     clearCurrentParams ();
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-6].ntyp, ctype_makeFunction (idDecl_getCtype (yyvsp[-6].ntyp), yyvsp[-3].entrylist));
     idDecl_addClauses (yyval.ntyp, yyvsp[0].funcclauselist);
     context_popLoc (); 
   ;
    break;}
case 37:
{ setCurrentParams (yyvsp[-1].entrylist); ;
    break;}
case 38:
{ clearCurrentParams (); ;
    break;}
case 39:
{ declareCIter (yyvsp[-8].cname, yyvsp[-6].entrylist); ;
    break;}
case 40:
{ exprNode_checkMacroBody (yyvsp[-1].expr); ;
    break;}
case 41:
{ exprNode_checkIterBody (yyvsp[-1].expr); ;
    break;}
case 42:
{ exprNode_checkIterEnd (yyvsp[-1].expr); ;
    break;}
case 43:
{ exprChecks_checkEmptyMacroBody (); ;
    break;}
case 44:
{ clabstract_declareFunction (yyvsp[0].ntyp); ;
    break;}
case 45:
{ yyval.msconstraint = metaStateConstraint_create (yyvsp[-2].msspec, yyvsp[0].msexpr); ;
    break;}
case 46:
{ cscanner_expectingMetaStateName (); ;
    break;}
case 47:
{ cscanner_clearExpectingMetaStateName ();
      yyval.msspec = metaStateSpecifier_create (yyvsp[-3].sr, yyvsp[0].msinfo); ;
    break;}
case 48:
{ cscanner_expectingMetaStateName (); ;
    break;}
case 49:
{ cscanner_clearExpectingMetaStateName ();
      yyval.msspec = metaStateSpecifier_createElipsis (yyvsp[0].msinfo); ;
    break;}
case 50:
{ yyval.msexpr = metaStateExpression_create (yyvsp[0].msspec); ;
    break;}
case 51:
{ yyval.msexpr = metaStateExpression_createMerge (yyvsp[-2].msspec, yyvsp[0].msexpr); ;
    break;}
case 55:
{ yyval.conL = constraintList_add (yyvsp[0].conL, yyvsp[-2].con); ;
    break;}
case 56:
{ yyval.conL = constraintList_single (yyvsp[0].con); ;
    break;}
case 57:
{
 yyval.con = makeConstraintParse3 (yyvsp[-2].conE, yyvsp[-1].tok, yyvsp[0].conE);
 DPRINTF(("Done BufConstraint1\n")); ;
    break;}
case 64:
{yyval.conE = constraintExpr_parseMakeUnaryOp (yyvsp[-3].tok, yyvsp[-1].conE);  DPRINTF( ("Got BufConstraintExpr UNary Op ") ); ;
    break;}
case 65:
{
   DPRINTF( ("Got BufConstraintExpr BINary Op ") );
   yyval.conE = constraintExpr_parseMakeBinaryOp (yyvsp[-3].conE, yyvsp[-2].tok, yyvsp[-1].conE); ;
    break;}
case 66:
{ yyval.conE =  constraintExpr_makeTermsRef (yyvsp[0].sr);;
    break;}
case 67:
{ yyval.conE = constraintExpr_makeIntLiteral (exprNode_getLongValue (yyvsp[0].expr)); ;
    break;}
case 68:
{ /*@-onlytrans@*/ yyval.sr = checkbufferConstraintClausesId (yyvsp[0].entry); /*@=onlytrans@*/ /*@i523@*/ ;
    break;}
case 69:
{ yyval.sr = fixStateClausesId (yyvsp[0].cname); ;
    break;}
case 70:
{ yyval.sr = sRef_makeAnyArrayFetch (yyvsp[-2].sr); ;
    break;}
case 71:
{
    /*
    char *t; int c; 
    t =  cstring_toCharsSafe (exprNode_unparse($3)); 
    c = atoi( t );
    */
    yyval.sr = sRef_makeArrayFetchKnown (yyvsp[-3].sr, exprNode_getLongValue (yyvsp[-1].expr));
  ;
    break;}
case 72:
{ yyval.sr = sRef_constructPointer (yyvsp[0].sr); ;
    break;}
case 73:
{ yyval.sr = yyvsp[-1].sr; ;
    break;}
case 74:
{ cstring_markOwned (yyvsp[0].cname); yyval.sr = sRef_buildField (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 75:
{ cstring_markOwned (yyvsp[0].cname); yyval.sr = sRef_makeArrow (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 79:
{ yyval.funcclauselist = functionClauseList_new (); ;
    break;}
case 80:
{ yyval.funcclauselist = functionClauseList_prepend (yyvsp[0].funcclauselist, yyvsp[-1].funcclause); ;
    break;}
case 81:
{ yyval.funcclauselist = functionClauseList_new (); ;
    break;}
case 82:
{ yyval.funcclauselist = functionClauseList_prepend (yyvsp[0].funcclauselist, yyvsp[-1].funcclause); ;
    break;}
case 83:
{ yyval.funcclause = functionClause_createGlobals (yyvsp[0].globsclause); ;
    break;}
case 84:
{ yyval.funcclause = functionClause_createModifies (yyvsp[0].modsclause); ;
    break;}
case 85:
{ yyval.funcclause = functionClause_createModifies (yyvsp[0].modsclause); ;
    break;}
case 86:
{ yyval.funcclause = functionClause_createState (yyvsp[0].stateclause); ;
    break;}
case 87:
{ yyval.funcclause = yyvsp[0].funcclause; ;
    break;}
case 88:
{ yyval.funcclause = functionClause_createWarn (yyvsp[0].warnclause); ;
    break;}
case 89:
{ yyval.funcclause = functionClause_createGlobals (yyvsp[0].globsclause); ;
    break;}
case 90:
{ yyval.funcclause = functionClause_createModifies (yyvsp[0].modsclause); ;
    break;}
case 91:
{ yyval.funcclause = functionClause_createModifies (yyvsp[0].modsclause); ;
    break;}
case 92:
{ yyval.funcclause = functionClause_createState (yyvsp[0].stateclause); ;
    break;}
case 93:
{ yyval.funcclause = yyvsp[0].funcclause; ;
    break;}
case 94:
{ yyval.funcclause = functionClause_createWarn (yyvsp[0].warnclause); ;
    break;}
case 95:
{ yyval.globsclause = yyvsp[-1].globsclause; ;
    break;}
case 96:
{ setProcessingGlobalsList (); ;
    break;}
case 97:
{ 
     unsetProcessingGlobals (); 
     yyval.globsclause = globalsClause_create (yyvsp[-3].tok, yyvsp[-1].globset); 
   ;
    break;}
case 98:
{ yyval.modsclause = modifiesClause_createNoMods (yyvsp[0].tok); ;
    break;}
case 99:
{ yyval.modsclause = yyvsp[-1].modsclause; ;
    break;}
case 100:
{
     context_setProtectVars (); enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;
    break;}
case 101:
{ 
     exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
     yyval.modsclause = modifiesClause_create (yyvsp[-2].tok, yyvsp[0].srset);
   ;
    break;}
case 102:
{ yyval.flagspec = flagSpec_createPlain (yyvsp[0].cname); ;
    break;}
case 103:
{ yyval.flagspec = flagSpec_createOr (yyvsp[-2].cname, yyvsp[0].flagspec); ;
    break;}
case 106:
{ yyval.warnclause = warnClause_undefined; ;
    break;}
case 107:
{ yyval.warnclause = yyvsp[-1].warnclause; ;
    break;}
case 108:
{      
     llassert (exprNode_knownStringValue (yyvsp[0].expr));
     yyval.warnclause = warnClause_create (yyvsp[-2].tok, yyvsp[-1].flagspec, cstring_copy (multiVal_forceString (exprNode_getValue (yyvsp[0].expr)))); 
     exprNode_free (yyvsp[0].expr);
   ;
    break;}
case 109:
{ yyval.warnclause = warnClause_create (yyvsp[-1].tok, yyvsp[0].flagspec, cstring_undefined); ;
    break;}
case 110:
{ yyval.globset = globSet_single (yyvsp[0].sr); ;
    break;}
case 111:
{ yyval.globset = globSet_insert (yyvsp[-2].globset, yyvsp[0].sr); ;
    break;}
case 112:
{ yyval.sr = clabstract_createGlobal (yyvsp[0].sr, yyvsp[-1].tquallist); ;
    break;}
case 113:
{ yyval.tquallist = qualList_undefined; ;
    break;}
case 114:
{ yyval.tquallist = qualList_add (yyvsp[0].tquallist, yyvsp[-1].typequal); ;
    break;}
case 115:
{ yyval.sr = uentry_getSref (yyvsp[0].entry); ;
    break;}
case 116:
{ yyval.sr = clabstract_unrecognizedGlobal (yyvsp[0].cname); ;
    break;}
case 117:
{ yyval.sr = clabstract_checkGlobal (yyvsp[0].expr); ;
    break;}
case 118:
{ yyval.typequal = qual_createUndef (); ;
    break;}
case 119:
{ yyval.typequal = qual_createKilled (); ;
    break;}
case 120:
{ yyval.typequal = qual_createOut (); ;
    break;}
case 121:
{ yyval.typequal = qual_createIn (); ;
    break;}
case 122:
{ yyval.typequal = qual_createPartial (); ;
    break;}
case 130:
{ 
     qtype qint = qtype_create (ctype_int);
     yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, qint);
     qtype_free (qint);
   ;
    break;}
case 131:
{ yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, yyvsp[-2].qtyp); ;
    break;}
case 132:
{ checkDoneParams (); context_enterInnerContext (); ;
    break;}
case 133:
{  
     exprNode_checkFunctionBody (yyvsp[0].expr); yyval.expr = yyvsp[0].expr; 
     context_exitInner (yyvsp[0].expr); 
   ;
    break;}
case 134:
{ context_enterOldStyleScope (); ;
    break;}
case 135:
{ oldStyleDoneParams (); context_enterInnerContext (); ;
    break;}
case 136:
{
     exprNode_checkFunctionBody (yyvsp[0].expr); 
     yyval.expr = yyvsp[0].expr; /* oldstyle */ 
     context_exitInner (yyvsp[0].expr);
   ;
    break;}
case 137:
{ 
     context_setFunctionDefined (exprNode_loc (yyvsp[0].expr)); 
     exprNode_checkFunction (context_getHeader (),  yyvsp[0].expr); 
     /* DRL 8 8 2000 */
     
     context_exitFunction ();
   ;
    break;}
case 138:
{ yyval.srset = yyvsp[-1].srset; ;
    break;}
case 139:
{ yyval.srset = sRefSet_new (); ;
    break;}
case 140:
{ yyval.sr = uentry_getSref (yyvsp[0].entry); checkModifiesId (yyvsp[0].entry); ;
    break;}
case 141:
{ yyval.sr = fixModifiesId (yyvsp[0].cname); ;
    break;}
case 142:
{ yyval.sr = modListArrayFetch (yyvsp[-2].sr, sRef_undefined); ;
    break;}
case 143:
{ yyval.sr = modListArrayFetch (yyvsp[-3].sr, yyvsp[-1].sr); ;
    break;}
case 144:
{ yyval.sr = modListPointer (yyvsp[0].sr); ;
    break;}
case 145:
{ yyval.sr = yyvsp[-1].sr; ;
    break;}
case 146:
{ yyval.sr = modListFieldAccess (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 147:
{ yyval.sr = modListArrowAccess (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 148:
{ yyval.sr = yyvsp[0].sr; ;
    break;}
case 149:
{ yyval.sr = sRef_makeUnknown (); /* sRef_makeConstant ($1); ? */ ;
    break;}
case 150:
{ yyval.srset = sRefSet_single (yyvsp[0].sr); ;
    break;}
case 151:
{ yyval.srset = sRefSet_insert (yyvsp[-2].srset, yyvsp[0].sr); ;
    break;}
case 152:
{ yyval.sr = checkStateClausesId (yyvsp[0].entry); ;
    break;}
case 153:
{ yyval.sr = fixStateClausesId (yyvsp[0].cname); ;
    break;}
case 154:
{ yyval.sr = sRef_makeAnyArrayFetch (yyvsp[-2].sr); ;
    break;}
case 155:
{ yyval.sr = sRef_makeAnyArrayFetch (yyvsp[-3].sr); ;
    break;}
case 156:
{ yyval.sr = sRef_constructPointer (yyvsp[0].sr); ;
    break;}
case 157:
{ yyval.sr = yyvsp[-1].sr; ;
    break;}
case 158:
{ cstring_markOwned (yyvsp[0].cname);
					    yyval.sr = sRef_buildField (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 159:
{ cstring_markOwned (yyvsp[0].cname);
                                            yyval.sr = sRef_makeArrow (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 160:
{ yyval.srset = sRefSet_undefined ;
    break;}
case 162:
{ if (sRef_isValid (yyvsp[0].sr)) { yyval.srset = sRefSet_single (yyvsp[0].sr); } 
      else { yyval.srset = sRefSet_undefined; } 
    ;
    break;}
case 163:
{ if (sRef_isValid (yyvsp[0].sr))
	{
	  yyval.srset = sRefSet_insert (yyvsp[-2].srset, yyvsp[0].sr); 
	}
      else
	{
	  yyval.srset = yyvsp[-2].srset;
	}
    ;
    break;}
case 164:
{ yyval.expr = exprNode_fromIdentifier (yyvsp[0].entry); ;
    break;}
case 165:
{ yyval.expr = exprNode_fromUIO (yyvsp[0].cname); ;
    break;}
case 167:
{ yyval.expr = exprNode_addParens (yyvsp[-2].tok, yyvsp[-1].expr); ;
    break;}
case 168:
{ yyval.expr = exprNode_fromIdentifier (coerceId (yyvsp[0].cname)); ;
    break;}
case 169:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 170:
{ exprChecks_inCompoundStatementExpression (); ;
    break;}
case 171:
{ exprChecks_leaveCompoundStatementExpression (); yyval.expr = exprNode_compoundStatementExpression (yyvsp[-3].tok, yyvsp[-1].expr); ;
    break;}
case 173:
{ yyval.expr = exprNode_arrayFetch (yyvsp[-3].expr, yyvsp[-1].expr); ;
    break;}
case 174:
{ yyval.expr = exprNode_functionCall (yyvsp[-2].expr, exprNodeList_new ()); ;
    break;}
case 175:
{ yyval.expr = exprNode_functionCall (yyvsp[-3].expr, yyvsp[-1].exprlist); ;
    break;}
case 176:
{ yyval.expr = exprNode_vaArg (yyvsp[-5].tok, yyvsp[-3].expr, yyvsp[-1].qtyp); ;
    break;}
case 177:
{ yyval.expr = exprNode_fieldAccess (yyvsp[-4].expr, yyvsp[-2].tok, yyvsp[-1].cname); ;
    break;}
case 178:
{ yyval.expr = exprNode_arrowAccess (yyvsp[-4].expr, yyvsp[-2].tok, yyvsp[-1].cname); ;
    break;}
case 179:
{ yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 180:
{ yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 181:
{ /* added for C99 */ yyval.expr = exprNode_undefined; /*@i87 no checking */ ;
    break;}
case 182:
{ yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 183:
{ yyval.exprlist = exprNodeList_push (yyvsp[-2].exprlist, yyvsp[0].expr); ;
    break;}
case 185:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 186:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 187:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 188:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 189:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 190:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 191:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 192:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 193:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 194:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 195:
{ yyval.cstringlist = cstringList_add (yyvsp[-2].cstringlist, yyvsp[0].cname); ;
    break;}
case 196:
{ yyval.cstringlist = cstringList_single (yyvsp[0].cname); ;
    break;}
case 197:
{ yyval.expr = exprNode_offsetof (yyvsp[-5].qtyp, yyvsp[-2].cstringlist); ;
    break;}
case 198:
{ context_setProtectVars (); ;
    break;}
case 199:
{ context_sizeofReleaseVars (); yyval.expr = yyvsp[0].expr; ;
    break;}
case 200:
{ yyval.expr = exprNode_sizeofType (yyvsp[-1].qtyp); ;
    break;}
case 201:
{ yyval.expr = exprNode_sizeofExpr (yyvsp[0].expr); ;
    break;}
case 202:
{ yyval.expr = exprNode_alignofType (yyvsp[-1].qtyp); ;
    break;}
case 203:
{ yyval.expr = exprNode_alignofExpr (yyvsp[0].expr); ;
    break;}
case 205:
{ yyval.expr = exprNode_cast (yyvsp[-3].tok, yyvsp[0].expr, yyvsp[-2].qtyp); ;
    break;}
case 207:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 208:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 209:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 211:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 212:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 214:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 215:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 217:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 218:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 219:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 220:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 222:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 223:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 225:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 227:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 229:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 231:
{ exprNode_produceGuards (yyvsp[-1].expr); 
     context_enterAndClause (yyvsp[-1].expr); 
   ;
    break;}
case 232:
{ 
     yyval.expr = exprNode_op (yyvsp[-3].expr, yyvsp[0].expr, yyvsp[-2].tok); 
     context_exitAndClause (yyval.expr, yyvsp[0].expr);
   ;
    break;}
case 234:
{ 
     exprNode_produceGuards (yyvsp[-1].expr);
     context_enterOrClause (yyvsp[-1].expr); 
   ;
    break;}
case 235:
{ 
     yyval.expr = exprNode_op (yyvsp[-3].expr, yyvsp[0].expr, yyvsp[-2].tok); 
     context_exitOrClause (yyval.expr, yyvsp[0].expr);
   ;
    break;}
case 237:
{ exprNode_produceGuards (yyvsp[-1].expr); context_enterTrueClause (yyvsp[-1].expr); ;
    break;}
case 238:
{ context_enterFalseClause (yyvsp[-4].expr); ;
    break;}
case 239:
{ yyval.expr = exprNode_cond (yyvsp[-6].expr, yyvsp[-3].expr, yyvsp[0].expr); context_exitClause (yyvsp[-6].expr, yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 241:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 242:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 243:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 244:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 245:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 246:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 247:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 248:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 249:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 250:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 251:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 253:
{ yyval.expr = exprNode_comma (yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 254:
{ yyval.expr = exprNode_undefined; ;
    break;}
case 257:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 258:
{ doVaDcl (); yyval.expr = exprNode_makeError (); ;
    break;}
case 259:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 260:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 261:
{
     setProcessingVars (yyvsp[-3].qtyp); 
     processNamedDecl (yyvsp[-1].ntyp); 
   ;
    break;}
case 262:
{ 
     unsetProcessingVars (); 
     yyval.expr = exprNode_makeEmptyInitialization (yyvsp[-6].ntyp); 
     DPRINTF (("Empty initialization: %s", exprNode_unparse (yyval.expr)));
   ;
    break;}
case 263:
{ setProcessingVars (yyvsp[-4].qtyp); processNamedDecl (yyvsp[-2].ntyp); ;
    break;}
case 264:
{ yyval.expr = exprNode_concat (yyvsp[-2].expr, exprNode_makeInitialization (yyvsp[-8].ntyp, yyvsp[-3].expr)); 
     unsetProcessingVars ();
   ;
    break;}
case 265:
{ 
     processNamedDecl (yyvsp[-1].ntyp); 
     yyval.expr = exprNode_makeEmptyInitialization (yyvsp[-1].ntyp);
   ;
    break;}
case 266:
{ processNamedDecl (yyvsp[-2].ntyp); ;
    break;}
case 267:
{ yyval.expr = exprNode_makeInitialization (yyvsp[-5].ntyp, yyvsp[0].expr); ;
    break;}
case 268:
{ setProcessingTypedef (yyvsp[0].qtyp); ;
    break;}
case 269:
{ clabstract_declareType (yyvsp[-3].exprlist, yyvsp[-1].warnclause); ;
    break;}
case 270:
{ /* in the ANSI grammar, semantics unclear */ ;
    break;}
case 271:
{ /* in the ANSI grammar, semantics unclear */ ;
    break;}
case 272:
{ g_expectingTypeName = TRUE; ;
    break;}
case 273:
{ g_expectingTypeName = TRUE; context_pushLoc (); ;
    break;}
case 274:
{ yyval.exprlist = yyvsp[-1].exprlist; ;
    break;}
case 275:
{ yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 276:
{ yyval.exprlist = exprNodeList_push (yyvsp[-3].exprlist, yyvsp[0].expr); ;
    break;}
case 277:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 278:
{ yyval.expr = exprNode_concat (yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 280:
{ yyval.expr = exprNode_makeInitBlock (yyvsp[-2].tok, yyvsp[-1].exprlist); ;
    break;}
case 281:
{ yyval.expr = exprNode_makeInitBlock (yyvsp[-3].tok, yyvsp[-2].exprlist); ;
    break;}
case 282:
{ yyval.expr = exprNode_undefined; ;
    break;}
case 283:
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 284:
{ yyval.expr = exprNode_undefined; 
                                     /* gcc extension, obsolete since 2.5 */ ;
    break;}
case 285:
{ yyval.expr = exprNode_undefined; ;
    break;}
case 286:
{ yyval.expr = exprNode_undefined; ;
    break;}
case 287:
{ yyval.expr = exprNode_undefined; ;
    break;}
case 288:
{ yyval.expr = exprNode_undefined; ;
    break;}
case 289:
{ yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 290:
{ yyval.exprlist = exprNodeList_push (yyvsp[-2].exprlist, yyvsp[0].expr); ;
    break;}
case 291:
{ setStorageClass (SCEXTERN); yyval.typequal = qual_createExtern (); ;
    break;}
case 292:
{ yyval.typequal = qual_createInline (); ;
    break;}
case 293:
{ setStorageClass (SCSTATIC); yyval.typequal = qual_createStatic (); ;
    break;}
case 294:
{ yyval.typequal = qual_createAuto (); ;
    break;}
case 295:
{ yyval.typequal = qual_createRegister (); ;
    break;}
case 296:
{ yyval.stateclause = yyvsp[-1].stateclause; ;
    break;}
case 297:
{
     context_setProtectVars (); 
     enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;
    break;}
case 298:
{ 
     exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
     yyval.stateclause = stateClause_createPlain (yyvsp[-5].tok, yyvsp[-2].srset);
   ;
    break;}
case 299:
{ yyval.funcclause = yyvsp[-1].funcclause; ;
    break;}
case 300:
{ yyval.tok = yyvsp[-1].tok; context_enterFunctionHeader (); ;
    break;}
case 301:
{
     context_exitFunctionHeader ();
     context_setProtectVars (); 
     enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;
    break;}
case 302:
{ 
     exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
     yyval.funcclause = functionClause_createState (stateClause_create (yyvsp[-5].tok, yyvsp[-4].typequal, yyvsp[-2].srset));
   ;
    break;}
case 303:
{
     context_setProtectVars (); 
     enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;
    break;}
case 304:
{
     context_exitFunctionHeader ();
     exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
     DPRINTF (("done optGlobBufConstraintsAux\n"));

     if (lltok_isEnsures (yyvsp[-4].tok)) 
       {
	 yyval.funcclause = functionClause_createEnsures (yyvsp[-2].fcnconstraint);
       }
     else if (lltok_isRequires (yyvsp[-4].tok))
       {
	 yyval.funcclause = functionClause_createRequires (yyvsp[-2].fcnconstraint);
       }
     else
       {
	 BADBRANCH;
       }

     DPRINTF (("FunctionclauseS: %s", functionClause_unparse (yyval.funcclause)));
   ;
    break;}
case 305:
{ yyval.fcnconstraint = functionConstraint_createBufferConstraint (yyvsp[0].conL); ;
    break;}
case 306:
{ yyval.fcnconstraint = functionConstraint_createMetaStateConstraint (yyvsp[0].msconstraint); DPRINTF (("Made constraint: %s", functionConstraint_unparse (yyval.fcnconstraint))); ;
    break;}
case 307:
{ yyval.typequal = qual_createExits (); ;
    break;}
case 308:
{ yyval.typequal = qual_createMayExit (); ;
    break;}
case 309:
{ yyval.typequal = qual_createTrueExit (); ;
    break;}
case 310:
{ yyval.typequal = qual_createFalseExit (); ;
    break;}
case 311:
{ yyval.typequal = qual_createNeverExit (); ;
    break;}
case 312:
{ yyval.typequal = qual_createChecked (); ;
    break;}
case 313:
{ yyval.typequal = qual_createCheckMod (); ;
    break;}
case 314:
{ yyval.typequal = qual_createUnchecked (); ;
    break;}
case 315:
{ yyval.typequal = qual_createCheckedStrict (); ;
    break;}
case 316:
{ yyval.typequal = qual_createOwned (); ;
    break;}
case 317:
{ yyval.typequal = qual_createDependent (); ;
    break;}
case 318:
{ yyval.typequal = qual_createYield (); ;
    break;}
case 319:
{ yyval.typequal = qual_createTemp (); ;
    break;}
case 320:
{ yyval.typequal = qual_createOnly (); ;
    break;}
case 321:
{ yyval.typequal = qual_createKeep (); ;
    break;}
case 322:
{ yyval.typequal = qual_createKept (); ;
    break;}
case 323:
{ yyval.typequal = qual_createShared (); ;
    break;}
case 324:
{ yyval.typequal = qual_createUnique (); ;
    break;}
case 325:
{ yyval.typequal = qual_createNull (); ;
    break;}
case 326:
{ yyval.typequal = qual_createIsNull (); ;
    break;}
case 327:
{ yyval.typequal = qual_createRelNull (); ;
    break;}
case 328:
{ yyval.typequal = qual_createNotNull (); ;
    break;}
case 329:
{ yyval.typequal = qual_createExposed (); ;
    break;}
case 330:
{ yyval.typequal = qual_createObserver (); ;
    break;}
case 331:
{ yyval.typequal = qual_createNullTerminated (); ;
    break;}
case 332:
{ yyval.typequal = qual_createMetaState (yyvsp[0].annotation); ;
    break;}
case 333:
{ yyval.typequal = qual_createReturned (); ;
    break;}
case 334:
{ yyval.typequal = qual_createSef (); ;
    break;}
case 335:
{ yyval.typequal = qual_createUnused (); ;
    break;}
case 336:
{ yyval.typequal = qual_createExternal (); ;
    break;}
case 337:
{ yyval.typequal = qual_createTrueNull (); ;
    break;}
case 338:
{ yyval.typequal = qual_createFalseNull (); ;
    break;}
case 339:
{ yyval.typequal = qual_createAbstract (); ;
    break;}
case 340:
{ yyval.typequal = qual_createConcrete (); ;
    break;}
case 341:
{ yyval.typequal = qual_createMutable (); ;
    break;}
case 342:
{ yyval.typequal = qual_createImmutable (); ;
    break;}
case 343:
{ yyval.typequal = qual_createRefCounted (); ;
    break;}
case 344:
{ yyval.typequal = qual_createRefs (); ;
    break;}
case 345:
{ yyval.typequal = qual_createKillRef (); ;
    break;}
case 346:
{ yyval.typequal = qual_createRelDef (); ;
    break;}
case 347:
{ yyval.typequal = qual_createNewRef (); ;
    break;}
case 348:
{ yyval.typequal = qual_createTempRef (); ;
    break;}
case 349:
{ yyval.typequal = qual_createShort (); ;
    break;}
case 350:
{ yyval.typequal = qual_createLong (); ;
    break;}
case 351:
{ yyval.typequal = qual_createSigned (); ;
    break;}
case 352:
{ yyval.typequal = qual_createUnsigned (); ;
    break;}
case 353:
{ yyval.typequal = qual_createOut (); ;
    break;}
case 354:
{ yyval.typequal = qual_createIn (); ;
    break;}
case 355:
{ yyval.typequal = qual_createPartial (); ;
    break;}
case 356:
{ yyval.typequal = qual_createSpecial (); ;
    break;}
case 357:
{ yyval.typequal = qual_createConst (); ;
    break;}
case 358:
{ yyval.typequal = qual_createVolatile (); ;
    break;}
case 359:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 360:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 361:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 362:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 363:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 364:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 365:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 366:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 367:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 374:
{ yyval.ctyp = ctype_unknown; ;
    break;}
case 375:
{ yyval.ctyp = ctype_anyintegral; ;
    break;}
case 376:
{ yyval.ctyp = ctype_unsignedintegral; ;
    break;}
case 377:
{ yyval.ctyp = ctype_signedintegral; ;
    break;}
case 381:
{ yyval.ctyp = ctype_fromQual (yyvsp[-1].typequal); ;
    break;}
case 382:
{ yyval.qtyp = qtype_resolve (yyvsp[-1].qtyp); ;
    break;}
case 383:
{ yyval.qtyp = yyvsp[0].qtyp; ;
    break;}
case 384:
{ yyval.qtyp = qtype_mergeAlt (yyvsp[-3].qtyp, yyvsp[-1].qtyp); ;
    break;}
case 386:
{ yyval.qtyp = qtype_mergeAlt (yyvsp[-2].qtyp, yyvsp[0].qtyp); ;
    break;}
case 387:
{ yyval.qtyp = qtype_addQual (yyvsp[0].qtyp, yyvsp[-1].typequal); ;
    break;}
case 388:
{ yyval.qtyp = qtype_addQual (yyvsp[0].qtyp, yyvsp[-1].typequal); ;
    break;}
case 389:
{ yyval.qtyp = qtype_combine (yyvsp[0].qtyp, yyvsp[-1].ctyp); ;
    break;}
case 390:
{ yyval.qtyp = qtype_unknown (); ;
    break;}
case 391:
{ yyval.qtyp = yyvsp[0].qtyp; ;
    break;}
case 392:
{ yyval.conL = constraintList_undefined; ;
    break;}
case 393:
{ sRef_setGlobalScopeSafe (); ;
    break;}
case 394:
{ sRef_clearGlobalScopeSafe (); ;
    break;}
case 395:
{ {ctype ct; ct = declareStruct (yyvsp[-9].cname, yyvsp[-4].flist); /* setGlobalStructInfo(ct, $12);*/ yyval.ctyp = ct;} ;
    break;}
case 396:
{ sRef_setGlobalScopeSafe (); ;
    break;}
case 397:
{ sRef_clearGlobalScopeSafe (); ;
    break;}
case 398:
{ yyval.ctyp = declareUnion (yyvsp[-8].cname, yyvsp[-3].flist); ;
    break;}
case 399:
{ yyval.ctyp = declareStruct (yyvsp[-3].cname, uentryList_new ()); ;
    break;}
case 400:
{ yyval.ctyp = declareUnion (yyvsp[-3].cname, uentryList_new ()); ;
    break;}
case 401:
{ sRef_setGlobalScopeSafe (); ;
    break;}
case 402:
{ sRef_clearGlobalScopeSafe (); ;
    break;}
case 403:
{ yyval.ctyp = declareUnnamedStruct (yyvsp[-3].flist); ;
    break;}
case 404:
{ sRef_setGlobalScopeSafe (); ;
    break;}
case 405:
{ sRef_clearGlobalScopeSafe (); ;
    break;}
case 406:
{ yyval.ctyp = declareUnnamedUnion (yyvsp[-3].flist); ;
    break;}
case 407:
{ yyval.ctyp = ctype_createUnnamedStruct (uentryList_new ()); ;
    break;}
case 408:
{ yyval.ctyp = ctype_createUnnamedUnion (uentryList_new ()); ;
    break;}
case 409:
{ yyval.ctyp = handleStruct (yyvsp[-1].cname); ;
    break;}
case 410:
{ yyval.ctyp = handleUnion (yyvsp[-1].cname); ;
    break;}
case 411:
{ g_expectingTypeName = FALSE; ;
    break;}
case 413:
{ yyval.flist = uentryList_undefined; /* bogus! */ ;
    break;}
case 414:
{ yyval.flist = uentryList_mergeFields (yyvsp[-1].flist, yyvsp[0].flist); ;
    break;}
case 415:
{ yyval.flist = fixUentryList (yyvsp[-2].ntyplist, yyvsp[-4].qtyp); ;
    break;}
case 416:
{ yyval.flist = fixUnnamedDecl (yyvsp[-2].qtyp); ;
    break;}
case 417:
{ yyval.ntyplist = idDeclList_singleton (yyvsp[-1].ntyp); ;
    break;}
case 418:
{ yyval.ntyplist = idDeclList_add (yyvsp[-3].ntyplist, yyvsp[-1].ntyp); ;
    break;}
case 419:
{ yyval.ntyp = yyvsp[0].ntyp; ;
    break;}
case 420:
{ yyval.ntyp = idDecl_undefined; ;
    break;}
case 421:
{ yyval.ntyp = yyvsp[-3].ntyp; ;
    break;}
case 422:
{ yyval.ctyp = declareUnnamedEnum (yyvsp[-2].enumnamelist); ;
    break;}
case 423:
{ context_pushLoc (); ;
    break;}
case 424:
{ context_popLoc (); yyval.ctyp = declareEnum (yyvsp[-5].cname, yyvsp[-2].enumnamelist); ;
    break;}
case 425:
{ yyval.ctyp = handleEnum (yyvsp[-1].cname); ;
    break;}
case 426:
{ yyval.enumnamelist = enumNameList_single (yyvsp[0].cname); ;
    break;}
case 427:
{ yyval.enumnamelist = enumNameList_push (yyvsp[-2].enumnamelist, yyvsp[0].cname); ;
    break;}
case 429:
{ uentry ue = uentry_makeEnumConstant (yyvsp[0].cname, ctype_unknown);
     usymtab_supGlobalEntry (ue);
     yyval.cname = yyvsp[0].cname;
   ;
    break;}
case 430:
{ uentry ue = uentry_makeEnumInitializedConstant (yyvsp[-3].cname, ctype_unknown, yyvsp[0].expr);
     usymtab_supGlobalEntry (ue);
     yyval.cname = yyvsp[-3].cname; 
   ;
    break;}
case 432:
{ yyval.ntyp = idDecl_create (cstring_undefined, qtype_create (yyvsp[0].ctyp)); ;
    break;}
case 433:
{ 
     qtype qt = qtype_unknown ();

     qtype_adjustPointers (yyvsp[-1].count, qt);
     yyval.ntyp = idDecl_create (cstring_copy (LastIdentifier ()), qt);
   ;
    break;}
case 434:
{ yyval.ntyp = yyvsp[0].ntyp; qtype_adjustPointers (yyvsp[-1].count, idDecl_getTyp (yyval.ntyp)); ;
    break;}
case 436:
{ yyval.ntyp = yyvsp[0].ntyp; qtype_adjustPointers (yyvsp[-1].count, idDecl_getTyp (yyval.ntyp)); ;
    break;}
case 437:
{ yyval.entrylist = handleParamTypeList (yyvsp[0].entrylist); ;
    break;}
case 438:
{ yyval.entrylist = handleParamIdList (yyvsp[0].entrylist); ;
    break;}
case 439:
{ /* ignored for now */; ;
    break;}
case 440:
{ ; ;
    break;}
case 441:
{ ; ;
    break;}
case 442:
{ ; ;
    break;}
case 443:
{ yyval.count = 1; ;
    break;}
case 444:
{ yyval.count = 1; ;
    break;}
case 445:
{ yyval.count = 1 + yyvsp[0].count; ;
    break;}
case 446:
{ yyval.count = 1 + yyvsp[0].count; ;
    break;}
case 448:
{ yyval.entrylist = uentryList_add (yyvsp[-2].entrylist, uentry_makeElipsisMarker ()); ;
    break;}
case 449:
{ yyval.entrylist = uentryList_single (uentry_makeVariableLoc (yyvsp[0].cname, ctype_int)); ;
    break;}
case 450:
{ yyval.entrylist = uentryList_add (yyvsp[-2].entrylist, uentry_makeVariableLoc (yyvsp[0].cname, ctype_int)); ;
    break;}
case 451:
{ yyval.entrylist = uentryList_single (uentry_makeElipsisMarker ()); ;
    break;}
case 453:
{ yyval.entrylist = uentryList_add (yyvsp[-2].entrylist, uentry_makeElipsisMarker ()); ;
    break;}
case 454:
{ storeLoc (); ;
    break;}
case 455:
{ yyval.entrylist = uentryList_single (yyvsp[0].oentry); ;
    break;}
case 456:
{ storeLoc (); ;
    break;}
case 457:
{ yyval.entrylist = uentryList_add (yyvsp[-3].entrylist, yyvsp[0].oentry); ;
    break;}
case 458:
{ 
     if (isFlipOldStyle ()) 
       { 
	 llparseerror (cstring_makeLiteral ("Inconsistent function parameter syntax (mixing old and new style declaration)")); 
       }
     else 
       { 
	 setNewStyle (); 
       }
     yyval.oentry = makeCurrentParam (idDecl_fixParamBase (yyvsp[-1].ntyp, yyvsp[-2].qtyp)); 
   ;
    break;}
case 459:
{ 
     idDecl tparam = idDecl_create (yyvsp[0].cname, qtype_unknown ());

     if (isNewStyle ()) 
       {
	 llparseerror (message ("Inconsistent function parameter syntax: %q",
				idDecl_unparse (tparam))); 
       }

     setFlipOldStyle ();
     yyval.oentry = makeCurrentParam (tparam);
     idDecl_free (tparam);
   ;
    break;}
case 461:
{ yyval.qtyp = qtype_newBase (yyvsp[-1].qtyp, yyvsp[0].ctyp); ;
    break;}
case 462:
{ yyval.ctyp = ctype_adjustPointers (yyvsp[0].count, ctype_unknown); ;
    break;}
case 464:
{ yyval.ctyp = ctype_adjustPointers (yyvsp[-1].count, yyvsp[0].ctyp); ;
    break;}
case 465:
{ yyval.ctyp = ctype_unknown; ;
    break;}
case 467:
{ yyval.ctyp = ctype_expectFunction (yyvsp[-1].ctyp); ;
    break;}
case 468:
{ yyval.ctyp = ctype_makeArray (ctype_unknown); ;
    break;}
case 469:
{ yyval.ctyp = ctype_makeFixedArray (ctype_unknown, exprNode_getLongValue (yyvsp[-1].expr)); ;
    break;}
case 470:
{ yyval.ctyp = ctype_makeInnerArray (yyvsp[-2].ctyp); ;
    break;}
case 471:
{ yyval.ctyp = ctype_makeInnerFixedArray (yyvsp[-3].ctyp, exprNode_getLongValue (yyvsp[-1].expr)); ;
    break;}
case 472:
{ yyval.ctyp = ctype_makeFunction (ctype_unknown, uentryList_makeMissingParams ()); ;
    break;}
case 473:
{ yyval.ctyp = ctype_makeParamsFunction (ctype_unknown, yyvsp[-1].entrylist); ;
    break;}
case 474:
{ yyval.ctyp = ctype_makeFunction (yyvsp[-3].ctyp, uentryList_makeMissingParams ()); ;
    break;}
case 475:
{ yyval.ctyp = ctype_makeParamsFunction (yyvsp[-4].ctyp, yyvsp[-1].entrylist); ;
    break;}
case 485:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 488:
{ yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 489:
{ yyval.expr = exprNode_while (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 490:
{ yyval.expr = exprNode_doWhile (yyvsp[-5].expr, yyvsp[-2].expr); ;
    break;}
case 491:
{ yyval.expr = exprNode_doWhile (yyvsp[-4].expr, yyvsp[-1].expr); ;
    break;}
case 492:
{ yyval.expr = exprNode_for (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 493:
{ context_setProtectVars (); ;
    break;}
case 494:
{ context_sizeofReleaseVars (); ;
    break;}
case 495:
{ yyval.expr = exprNode_forPred (yyvsp[-7].expr, yyvsp[-5].expr, yyvsp[-2].expr); 
     context_enterForClause (yyvsp[-5].expr); ;
    break;}
case 496:
{ setProcessingIterVars (yyvsp[-2].entry); ;
    break;}
case 497:
{ yyval.expr = exprNode_iterStart (yyvsp[-5].entry, yyvsp[-1].exprlist); ;
    break;}
case 498:
{ yyval.expr = exprNode_createId (yyvsp[0].entry); ;
    break;}
case 502:
{ yyval.expr = yyvsp[-1].expr; DPRINTF (("def stmt: %s", exprNode_unparse (yyval.expr))); ;
    break;}
case 510:
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 511:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 512:
{ exprNode_checkIfPred (yyvsp[0].expr); ;
    break;}
case 513:
{ /* don't: context_exitTrueClause ($1, $2); */
     yyval.expr = exprNode_if (yyvsp[-2].expr, yyvsp[0].expr); 
   ;
    break;}
case 514:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 515:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 526:
{ yyval.expr = exprNode_addParens (yyvsp[-2].tok, yyvsp[-1].expr); ;
    break;}
case 528:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 529:
{ yyval.expr = exprNode_labelMarker (yyvsp[-1].cname); ;
    break;}
case 530:
{ yyval.expr = exprNode_notReached (yyvsp[0].expr); ;
    break;}
case 531:
{ ; ;
    break;}
case 532:
{ ; ;
    break;}
case 533:
{ context_enterCaseClause (yyvsp[0].expr); ;
    break;}
case 534:
{ yyval.expr = exprNode_caseMarker (yyvsp[-2].expr, FALSE); ;
    break;}
case 535:
{ context_enterCaseClause (yyvsp[0].expr); ;
    break;}
case 536:
{ yyval.expr = exprNode_caseMarker (yyvsp[-2].expr, TRUE); ;
    break;}
case 537:
{ context_enterCaseClause (exprNode_undefined); ;
    break;}
case 538:
{ yyval.expr = exprNode_defaultMarker (yyvsp[-2].tok, FALSE); ;
    break;}
case 539:
{ context_enterCaseClause (exprNode_undefined); ;
    break;}
case 540:
{ yyval.expr = exprNode_defaultMarker (yyvsp[-2].tok, TRUE); ;
    break;}
case 541:
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 542:
{ yyval.expr = yyvsp[0].expr; context_exitInner (yyvsp[0].expr); ;
    break;}
case 543:
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 544:
{ context_enterInnerContext (); ;
    break;}
case 545:
{ context_exitInnerPlain (); ;
    break;}
case 546:
{ context_enterStructInnerContext (); ;
    break;}
case 547:
{ context_exitStructInnerContext (); ;
    break;}
case 548:
{ context_exitInnerSafe (); ;
    break;}
case 549:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 550:
{ yyval.expr = exprNode_notReached (exprNode_createTok (yyvsp[0].tok)); ;
    break;}
case 551:
{ yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 552:
{ yyval.expr = exprNode_notReached (exprNode_updateLocation (yyvsp[-2].expr, lltok_getLoc (yyvsp[0].tok))); ;
    break;}
case 553:
{ yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 554:
{ yyval.expr = exprNode_notReached (exprNode_updateLocation (yyvsp[-2].expr, lltok_getLoc (yyvsp[0].tok))); ;
    break;}
case 555:
{ yyval.expr = exprNode_updateLocation (exprNode_concat (yyvsp[-2].expr, yyvsp[-1].expr), lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 556:
{ yyval.expr = exprNode_notReached (exprNode_updateLocation (exprNode_concat (yyvsp[-3].expr, yyvsp[-2].expr), 
							lltok_getLoc (yyvsp[-1].tok))); 
   ;
    break;}
case 557:
{ yyval.expr = exprNode_makeBlock (yyvsp[0].expr); ;
    break;}
case 558:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 559:
{ yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 560:
{ yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 561:
{ yyval.expr = exprNode_updateLocation (exprNode_concat (yyvsp[-2].expr, yyvsp[-1].expr), lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 563:
{ yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 564:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 565:
{ yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 566:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 567:
{ yyval.expr = exprNode_concat (yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 568:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 569:
{ yyval.expr = yyvsp[-2].expr; ;
    break;}
case 570:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 571:
{ yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 572:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 573:
{ yyval.expr = exprNode_statement (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 574:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 575:
{ yyval.expr = exprNode_statement (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 576:
{ yyval.expr = exprNode_checkExpr (yyvsp[0].expr); ;
    break;}
case 577:
{ 
     exprNode_produceGuards (yyvsp[-1].expr); context_enterTrueClause (yyvsp[-1].expr); 
     exprNode_checkIfPred (yyvsp[-1].expr);
     yyval.expr = yyvsp[-1].expr;
   ;
    break;}
case 578:
{ 
     context_exitTrueClause (yyvsp[-1].expr, yyvsp[0].expr);
     yyval.expr = exprNode_if (yyvsp[-1].expr, yyvsp[0].expr); 
   ;
    break;}
case 579:
{ context_enterFalseClause (yyvsp[-2].expr); ;
    break;}
case 580:
{
     context_exitClause (yyvsp[-4].expr, yyvsp[-3].expr, yyvsp[0].expr);
     yyval.expr = exprNode_ifelse (yyvsp[-4].expr, yyvsp[-3].expr, yyvsp[0].expr); 
   ;
    break;}
case 581:
{ context_enterSwitch (yyvsp[0].expr); ;
    break;}
case 582:
{ yyval.expr = exprNode_switch (yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 583:
{ yyval.expr = exprNode_whilePred (yyvsp[-1].expr); context_enterWhileClause (yyvsp[-1].expr); ;
    break;}
case 584:
{ yyval.expr = exprNode_whilePred(yyvsp[-1].expr); ;
    break;}
case 585:
{ context_enterIterClause (); ;
    break;}
case 586:
{ setProcessingIterVars (yyvsp[-3].entry); ;
    break;}
case 587:
{ 
     yyval.expr = exprNode_iter (yyvsp[-9].entry, yyvsp[-4].exprlist, yyvsp[-2].expr, yyvsp[-1].entry); 

   ;
    break;}
case 588:
{ yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 589:
{ nextIterParam (); ;
    break;}
case 590:
{ yyval.exprlist = exprNodeList_push (yyvsp[-3].exprlist, yyvsp[0].expr); ;
    break;}
case 591:
{ yyval.expr = exprNode_iterExpr (yyvsp[0].expr); ;
    break;}
case 592:
{ yyval.expr = exprNode_iterId (yyvsp[0].entry); ;
    break;}
case 593:
{ uentry ue = coerceIterId (yyvsp[0].cname);

		      if (uentry_isValid (ue)) 
			{
			  yyval.expr = exprNode_iterId (ue);
			}
		      else
			{
			  yyval.expr = exprNode_iterNewId (cstring_copy (LastIdentifier ()));
			}
		    ;
    break;}
case 594:
{ yyval.expr = exprNode_iterNewId (yyvsp[0].cname); ;
    break;}
case 596:
{ yyval.expr = exprNode_combineLiterals (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 598:
{ yyval.expr = exprNode_addParens (yyvsp[-2].tok, yyvsp[-1].expr); ;
    break;}
case 600:
{ yyval.expr = exprNode_arrayFetch (yyvsp[-3].expr, yyvsp[-1].expr); ;
    break;}
case 601:
{ yyval.expr = exprNode_functionCall (yyvsp[-2].expr, exprNodeList_new ()); ;
    break;}
case 602:
{ yyval.expr = exprNode_functionCall (yyvsp[-3].expr, yyvsp[-1].exprlist); ;
    break;}
case 603:
{ yyval.expr = exprNode_vaArg (yyvsp[-5].tok, yyvsp[-3].expr, yyvsp[-1].qtyp); ;
    break;}
case 604:
{ yyval.expr = exprNode_fieldAccess (yyvsp[-4].expr, yyvsp[-2].tok, yyvsp[-1].cname); ;
    break;}
case 605:
{ yyval.expr = exprNode_arrowAccess (yyvsp[-4].expr, yyvsp[-2].tok, yyvsp[-1].cname); ;
    break;}
case 606:
{ yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 607:
{ yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 609:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 610:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 611:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 612:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 613:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 614:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 615:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 616:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 617:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 619:
{ yyval.expr = exprNode_cast (yyvsp[-3].tok, yyvsp[0].expr, yyvsp[-2].qtyp); ;
    break;}
case 621:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 622:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 623:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 625:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 626:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 628:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 629:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 631:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 632:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 633:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 634:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 636:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 637:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 639:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 641:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 643:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 645:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 647:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 649:
{ context_enterTrueClause (yyvsp[-1].expr); ;
    break;}
case 650:
{ context_enterFalseClause (yyvsp[-4].expr); ;
    break;}
case 651:
{ yyval.expr = exprNode_cond (yyvsp[-6].expr, yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 653:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 654:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 655:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 656:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 657:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 658:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 659:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 660:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 661:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 662:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 663:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 664:
{ yyval.entry = yyvsp[0].entry; ;
    break;}
case 665:
{ yyval.entry = uentry_undefined; ;
    break;}
case 666:
{ context_enterDoWhileClause (); yyval.tok = yyvsp[0].tok; ;
    break;}
case 667:
{ yyval.expr = exprNode_while (yyvsp[-1].expr, yyvsp[0].expr); context_exitWhileClause (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 668:
{ yyval.expr = exprNode_statement (exprNode_doWhile (yyvsp[-5].expr, yyvsp[-2].expr), yyvsp[0].tok); ;
    break;}
case 669:
{ yyval.expr = exprNode_for (yyvsp[-1].expr, yyvsp[0].expr); context_exitForClause (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 670:
{ yyval.expr = exprNode_while (yyvsp[-1].expr, yyvsp[0].expr); context_exitWhileClause (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 671:
{ yyval.expr = exprNode_statement (exprNode_doWhile (yyvsp[-5].expr, yyvsp[-2].expr), yyvsp[0].tok); ;
    break;}
case 672:
{ yyval.expr = exprNode_doWhile (yyvsp[-4].expr, yyvsp[-1].expr); ;
    break;}
case 673:
{ yyval.expr = exprNode_for (yyvsp[-1].expr, yyvsp[0].expr); context_exitForClause (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 674:
{ yyval.expr = exprNode_goto (yyvsp[-1].cname); ;
    break;}
case 675:
{ yyval.expr = exprNode_continue (yyvsp[-1].tok, BADTOK); ;
    break;}
case 676:
{ yyval.expr = exprNode_continue (yyvsp[-2].tok, QINNERCONTINUE); ;
    break;}
case 677:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, BADTOK); ;
    break;}
case 678:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, QSWITCHBREAK); ;
    break;}
case 679:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, QLOOPBREAK); ;
    break;}
case 680:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, QINNERBREAK); ;
    break;}
case 681:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, QSAFEBREAK); ;
    break;}
case 682:
{ yyval.expr = exprNode_nullReturn (yyvsp[-1].tok); ;
    break;}
case 683:
{ yyval.expr = exprNode_return (yyvsp[-1].expr); ;
    break;}
case 685:
{ ; ;
    break;}
case 687:
{ ; ;
    break;}
case 690:
{ yyval.cname = uentry_getName (yyvsp[0].entry); ;
    break;}
case 691:
{ yyval.cname = uentry_getName (yyvsp[0].entry); ;
    break;}
case 692:
{ yyval.cname = uentry_getName (yyvsp[0].entry); ;
    break;}
case 693:
{ yyval.cname = yyvsp[0].cname; ;
    break;}
case 695:
{ yyval.ctyp = ctype_unknown; ;
    break;}
case 696:
{ yyval.ctyp = exprNode_getType (yyvsp[-1].expr); exprNode_free (yyvsp[-1].expr); ;
    break;}
case 697:
{ yyval.ctyp = qtype_getType (yyvsp[-1].qtyp); ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */


  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}


/*@-redecl@*/ /*@-namechecks@*/
extern char *yytext;
/*@=redecl@*/ /*@=namechecks@*/

# include "bison.reset"

void yyerror (/*@unused@*/ char *s) 
{
  static bool givehint = FALSE;

  if (context_inIterDef ())
    {
      llerror (FLG_SYNTAX, message ("Iter syntax not parseable: %s", 
				    context_inFunctionName ()));
    }
  else if (context_inIterEnd ())
    {
      llerror (FLG_SYNTAX, message ("Iter finalizer syntax not parseable: %s", 
				    context_inFunctionName ()));
    }
  else if (context_inMacro ())
    {
      llerror (FLG_SYNTAX, message ("Macro syntax not parseable: %s", 
				    context_inFunctionName ()));
      
      if (context_inUnknownMacro ())
	{
	  if (!givehint)
	    {
	      llhint (cstring_makeLiteral 
		     ("Precede macro definition with /*@notfunction@*/ "
		      "to suppress checking and force expansion"));
	      givehint = TRUE;
	    }
	}

      swallowMacro ();
      context_exitAllClausesQuiet ();
    }
  else
    {
      llparseerror (cstring_undefined);
    }
}












/*
** Resets all flags in bison.head
*/


/*@=allmacros@*/
/*@=boolint@*/
/*@=charint@*/
/*@=macroparams@*/
/*@=macroundef@*/
/*@=unreachable@*/
/*@=macrospec@*/
/*@=varuse@*/
/*@=ignorequals@*/
/*@=macrostmt@*/
/*@=noeffect@*/
/*@=shadow@*/
/*@=exitarg@*/
/*@=macroredef@*/
/*@=uniondef@*/
/*@=compdef@*/
/*@=matchfields@*/
/*@=exportlocal@*/
/*@=evalorderuncon@*/
/*@=exportheader@*/
/*@=typeuse@*/
/*@=redecl@*/
/*@=redef@*/
/*@=noparams@*/
/*@=ansireserved@*/
/*@=fielduse@*/
/*@=ifblock@*/
/*@=elseifcomplete@*/
/*@=whileblock@*/
/*@=forblock@*/
/*@=branchstate@*/
/*@=readonlytrans@*/
/*@=namechecks@*/
/*@=usedef@*/
/*@=systemunrecog@*/
/*@=dependenttrans@*/
/*@=unqualifiedtrans@*/
/*@=declundef@*/


/*drl added 11/27/2001*/
/*@=bounds@*/
