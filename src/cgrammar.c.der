/*
** Inserted at beginning of c files generated by bison
** REMEMBER:  Change bison.reset too.
*/

/*@-allmacros@*/
/*@+boolint@*/
/*@+charint@*/
/*@-macroparams@*/
/*@-macroundef@*/
/*@-unreachable@*/
/*@-macrospec@*/
/*@-varuse@*/
/*@+ignorequals@*/
/*@-macrostmt@*/
/*@-noeffect@*/
/*@-shadow@*/
/*@-exitarg@*/
/*@-macroredef@*/
/*@-uniondef@*/
/*@-compdef@*/
/*@-matchfields@*/
/*@-exportlocal@*/
/*@-evalorderuncon@*/
/*@-exportheader@*/
/*@-typeuse@*/
/*@-redecl@*/
/*@-redef@*/
/*@-noparams@*/
/*@-ansireserved@*/
/*@-fielduse@*/
/*@-ifblock@*/
/*@-elseifcomplete@*/
/*@-whileblock@*/
/*@-forblock@*/
/*@-branchstate@*/
/*@-readonlytrans@*/
/*@-namechecks@*/
/*@-usedef@*/
/*@-systemunrecog@*/
/*@-dependenttrans@*/
/*@-unqualifiedtrans@*/
/*@-nullassign@*/
/*@-nullpass@*/
/*@-nullptrarith*/
/*@-usereleased@*/
/*@-declundef@*/

/*drl added 11/27/2001*/
/*@-bounds@*/

/*drl added 12/11/2002*/
/*@-type@*/

/* < end of bison.head > */

/* A Bison parser, made from cgrammar.y
   by GNU bison 1.35.  */

#define YYBISON 1  /* Identify Bison output.  */

# define	BADTOK	257
# define	SKIPTOK	258
# define	CTOK_ELIPSIS	259
# define	CASE	260
# define	DEFAULT	261
# define	CIF	262
# define	CELSE	263
# define	SWITCH	264
# define	WHILE	265
# define	DO	266
# define	CFOR	267
# define	GOTO	268
# define	CONTINUE	269
# define	BREAK	270
# define	RETURN	271
# define	TSEMI	272
# define	TLBRACE	273
# define	TRBRACE	274
# define	TCOMMA	275
# define	TCOLON	276
# define	TASSIGN	277
# define	TLPAREN	278
# define	TRPAREN	279
# define	TLSQBR	280
# define	TRSQBR	281
# define	TDOT	282
# define	TAMPERSAND	283
# define	TEXCL	284
# define	TTILDE	285
# define	TMINUS	286
# define	TPLUS	287
# define	TMULT	288
# define	TDIV	289
# define	TPERCENT	290
# define	TLT	291
# define	TGT	292
# define	TCIRC	293
# define	TBAR	294
# define	TQUEST	295
# define	CSIZEOF	296
# define	CALIGNOF	297
# define	CTYPEOF	298
# define	ARROW_OP	299
# define	CTYPEDEF	300
# define	COFFSETOF	301
# define	INC_OP	302
# define	DEC_OP	303
# define	LEFT_OP	304
# define	RIGHT_OP	305
# define	LE_OP	306
# define	GE_OP	307
# define	EQ_OP	308
# define	NE_OP	309
# define	AND_OP	310
# define	OR_OP	311
# define	MUL_ASSIGN	312
# define	DIV_ASSIGN	313
# define	MOD_ASSIGN	314
# define	ADD_ASSIGN	315
# define	SUB_ASSIGN	316
# define	LEFT_ASSIGN	317
# define	RIGHT_ASSIGN	318
# define	AND_ASSIGN	319
# define	XOR_ASSIGN	320
# define	OR_ASSIGN	321
# define	CSTRUCT	322
# define	CUNION	323
# define	CENUM	324
# define	VA_ARG	325
# define	VA_DCL	326
# define	QWARN	327
# define	QGLOBALS	328
# define	QMODIFIES	329
# define	QNOMODS	330
# define	QCONSTANT	331
# define	QFUNCTION	332
# define	QITER	333
# define	QDEFINES	334
# define	QUSES	335
# define	QALLOCATES	336
# define	QSETS	337
# define	QRELEASES	338
# define	QPRECLAUSE	339
# define	QPOSTCLAUSE	340
# define	QINVARIANT	341
# define	QALT	342
# define	QUNDEF	343
# define	QKILLED	344
# define	QENDMACRO	345
# define	LLMACRO	346
# define	LLMACROITER	347
# define	LLMACROEND	348
# define	TENDMACRO	349
# define	QSWITCHBREAK	350
# define	QLOOPBREAK	351
# define	QINNERBREAK	352
# define	QSAFEBREAK	353
# define	QINNERCONTINUE	354
# define	QFALLTHROUGH	355
# define	QLINTNOTREACHED	356
# define	QLINTFALLTHROUGH	357
# define	QLINTFALLTHRU	358
# define	QARGSUSED	359
# define	QPRINTFLIKE	360
# define	QLINTPRINTFLIKE	361
# define	QSCANFLIKE	362
# define	QMESSAGELIKE	363
# define	QNOTREACHED	364
# define	QCONST	365
# define	QRESTRICT	366
# define	QVOLATILE	367
# define	QINLINE	368
# define	QEXTENSION	369
# define	QEXTERN	370
# define	QSTATIC	371
# define	QAUTO	372
# define	QREGISTER	373
# define	QOUT	374
# define	QIN	375
# define	QYIELD	376
# define	QONLY	377
# define	QTEMP	378
# define	QSHARED	379
# define	QREF	380
# define	QUNIQUE	381
# define	QCHECKED	382
# define	QUNCHECKED	383
# define	QCHECKEDSTRICT	384
# define	QCHECKMOD	385
# define	QKEEP	386
# define	QKEPT	387
# define	QPARTIAL	388
# define	QSPECIAL	389
# define	QOWNED	390
# define	QDEPENDENT	391
# define	QRETURNED	392
# define	QEXPOSED	393
# define	QNULL	394
# define	QOBSERVER	395
# define	QISNULL	396
# define	QEXITS	397
# define	QMAYEXIT	398
# define	QNEVEREXIT	399
# define	QTRUEEXIT	400
# define	QFALSEEXIT	401
# define	QLONG	402
# define	QSIGNED	403
# define	QUNSIGNED	404
# define	QSHORT	405
# define	QUNUSED	406
# define	QSEF	407
# define	QNOTNULL	408
# define	QRELNULL	409
# define	QABSTRACT	410
# define	QCONCRETE	411
# define	QMUTABLE	412
# define	QIMMUTABLE	413
# define	QTRUENULL	414
# define	QFALSENULL	415
# define	QEXTERNAL	416
# define	QREFCOUNTED	417
# define	QREFS	418
# define	QNEWREF	419
# define	QTEMPREF	420
# define	QKILLREF	421
# define	QRELDEF	422
# define	CGCHAR	423
# define	CBOOL	424
# define	CINT	425
# define	CGFLOAT	426
# define	CDOUBLE	427
# define	CVOID	428
# define	QANYTYPE	429
# define	QINTEGRALTYPE	430
# define	QUNSIGNEDINTEGRALTYPE	431
# define	QSIGNEDINTEGRALTYPE	432
# define	QNULLTERMINATED	433
# define	QSETBUFFERSIZE	434
# define	QSETSTRINGLENGTH	435
# define	QMAXSET	436
# define	QMAXREAD	437
# define	QTESTINRANGE	438
# define	TCAND	439
# define	IDENTIFIER	440
# define	NEW_IDENTIFIER	441
# define	TYPE_NAME_OR_ID	442
# define	CANNOTATION	443
# define	CCONSTANT	444
# define	ITER_NAME	445
# define	ITER_ENDNAME	446
# define	TYPE_NAME	447
# define	METASTATE_NAME	448


/*
**
** cgrammar.y
**
** Yacc/Bison grammar for extended ANSI C used by Splint.
**
** original grammar by Nate Osgood ---
**    hacrat@catfish.lcs.mit.edu Mon Jun 14 13:06:32 1993
**
** changes for Splint --- handle typedef names correctly
** fix struct/union parsing bug (empty struct is accepted)
** add productions to handle macros --- require
** error correction --- main source of conflicts in grammar.
** need to process initializations sequentially, L->R
**
** production names are cryptic, so more productions fit on one line
**
** conflicts:  87 shift/reduce, 18 reduce/reduce
** most of these are due to handling macros
** a few are due to handling type expressions
*/

/*@=allmacros@*/

extern int yylex ();
extern void yyerror (char *);

# include "splintMacros.nf"
# include "basic.h"
# include "cscanner.h"
# include "cgrammar.h"
# include "exprChecks.h"

/*@-allmacros@*/
/*@-matchfields@*/

# define SHOWCSYM FALSE

/*
** This is necessary, or else when the bison-generated code #include's malloc.h,
** there will be a parse error.
**
** Unfortunately, it means the error checking on malloc, etc. is lost for allocations
** in bison-generated files under Win32.
*/

# ifdef WIN32
# undef malloc
# undef calloc
# undef realloc
# endif


#ifndef cgrammar_YYSTYPE
typedef union
{
  lltok tok;
  int count;
  qual typequal;
  qualList tquallist;
  ctype ctyp;
  /*@dependent@*/ sRef sr;
  /*@only@*/ sRef osr;

  /*@only@*/ functionClauseList funcclauselist;
  /*@only@*/ functionClause funcclause;  
  /*@only@*/ flagSpec flagspec;
  /*@only@*/ globalsClause globsclause;
  /*@only@*/ modifiesClause modsclause;
  /*@only@*/ warnClause warnclause;
  /*@only@*/ stateClause stateclause;
  /*@only@*/ pointers pointers;
  /*@only@*/ functionConstraint fcnconstraint; 

  /*@only@*/ metaStateConstraint msconstraint;
  /*@only@*/ metaStateSpecifier msspec;
  /*@only@*/ metaStateExpression msexpr;
  /*@observer@*/ metaStateInfo msinfo;

  /*@only@*/ sRefList srlist;
  /*@only@*/ globSet globset;
  /*@only@*/ qtype qtyp;
  /*@only@*/ cstring cname;
  /*@observer@*/ annotationInfo annotation;
  /*@only@*/ idDecl ntyp;
  /*@only@*/ idDeclList ntyplist;
  /*@only@*/ uentryList flist;
  /*@owned@*/ uentryList entrylist;
  /*@observer@*/ /*@dependent@*/ uentry entry;
  /*@only@*/ uentry oentry;
  /*@only@*/ exprNode expr;
  /*@only@*/ enumNameList enumnamelist;
  /*@only@*/ exprNodeList exprlist;
  /*@only@*/ sRefSet srset; 
  /*@only@*/ cstringList cstringlist;

  /*drl
    added 1/19/2001
  */
  constraint con;
  constraintList conL;
  constraintExpr conE;
  /* drl */  
} yystype;
# define cgrammar_YYSTYPE yystype
# define cgrammar_YYSTYPE_IS_TRIVIAL 1
#endif
#ifndef YYDEBUG
# define YYDEBUG 1
#endif



#define	YYFINAL		1248
#define	YYFLAG		-32768
#define	YYNTBASE	195

/* YYTRANSLATE(YYLEX) -- Bison token number corresponding to YYLEX. */
#define YYTRANSLATE(x) ((unsigned)(x) <= 448 ? yytranslate[x] : 463)

/* YYTRANSLATE[YYLEX] -- Bison token number corresponding to YYLEX. */
static const short yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194
};

#if YYDEBUG
static const short yyprhs[] =
{
       0,     0,     1,     3,     5,     8,    11,    13,    15,    17,
      19,    21,    23,    25,    34,    46,    47,    53,    55,    59,
      61,    64,    66,    73,    77,    84,    85,    92,    93,   101,
     103,   110,   114,   121,   122,   129,   130,   138,   139,   140,
     151,   155,   159,   163,   166,   168,   172,   173,   178,   179,
     184,   186,   190,   192,   194,   196,   200,   202,   206,   208,
     210,   212,   214,   216,   218,   223,   229,   231,   233,   235,
     237,   241,   246,   249,   253,   257,   261,   263,   265,   267,
     268,   271,   272,   275,   277,   279,   281,   283,   285,   287,
     289,   291,   293,   295,   297,   299,   302,   303,   308,   310,
     313,   314,   318,   320,   324,   326,   328,   329,   332,   336,
     339,   341,   345,   348,   349,   352,   354,   356,   358,   360,
     362,   364,   366,   368,   370,   372,   374,   376,   378,   380,
     382,   384,   388,   389,   393,   394,   395,   400,   403,   406,
     408,   410,   412,   414,   418,   423,   426,   430,   434,   438,
     440,   442,   444,   448,   450,   452,   456,   461,   464,   468,
     472,   476,   477,   479,   481,   485,   487,   489,   491,   495,
     497,   499,   500,   505,   507,   512,   516,   521,   528,   534,
     540,   543,   546,   554,   556,   560,   562,   565,   568,   571,
     574,   577,   580,   583,   586,   588,   590,   594,   599,   601,
     611,   612,   616,   621,   624,   629,   632,   634,   639,   641,
     645,   649,   653,   655,   659,   663,   665,   669,   673,   675,
     679,   683,   687,   691,   693,   697,   701,   703,   707,   709,
     713,   715,   719,   721,   722,   727,   729,   730,   735,   737,
     738,   739,   747,   749,   753,   757,   761,   765,   769,   773,
     777,   781,   785,   789,   793,   795,   799,   800,   802,   804,
     806,   808,   810,   814,   815,   825,   826,   838,   840,   842,
     845,   846,   853,   854,   863,   868,   873,   874,   875,   878,
     880,   885,   888,   890,   895,   896,   901,   903,   907,   912,
     915,   918,   921,   923,   926,   930,   933,   935,   939,   941,
     943,   945,   947,   949,   952,   953,   960,   963,   966,   967,
     974,   975,   981,   983,   985,   987,   989,   991,   993,   995,
     997,   999,  1001,  1003,  1005,  1007,  1009,  1011,  1013,  1015,
    1017,  1019,  1021,  1023,  1025,  1027,  1029,  1031,  1033,  1035,
    1037,  1039,  1041,  1043,  1045,  1047,  1049,  1051,  1053,  1055,
    1057,  1059,  1061,  1063,  1065,  1067,  1069,  1071,  1073,  1075,
    1077,  1079,  1081,  1083,  1085,  1088,  1091,  1094,  1097,  1100,
    1103,  1106,  1109,  1112,  1115,  1118,  1121,  1124,  1127,  1130,
    1133,  1136,  1139,  1142,  1145,  1148,  1151,  1154,  1157,  1160,
    1163,  1167,  1169,  1174,  1176,  1180,  1183,  1186,  1189,  1190,
    1192,  1193,  1194,  1195,  1208,  1209,  1210,  1222,  1229,  1236,
    1237,  1238,  1249,  1250,  1251,  1262,  1268,  1274,  1279,  1284,
    1285,  1287,  1289,  1292,  1298,  1302,  1305,  1310,  1312,  1316,
    1321,  1328,  1329,  1338,  1343,  1345,  1349,  1352,  1354,  1359,
    1361,  1363,  1366,  1369,  1371,  1374,  1376,  1379,  1381,  1383,
    1385,  1387,  1390,  1392,  1395,  1398,  1402,  1404,  1408,  1410,
    1414,  1416,  1418,  1422,  1423,  1426,  1427,  1432,  1437,  1439,
    1441,  1444,  1446,  1448,  1451,  1452,  1454,  1460,  1463,  1467,
    1471,  1476,  1480,  1485,  1490,  1496,  1498,  1500,  1502,  1504,
    1506,  1508,  1510,  1512,  1514,  1516,  1518,  1520,  1523,  1526,
    1534,  1541,  1544,  1545,  1546,  1557,  1558,  1565,  1567,  1569,
    1571,  1573,  1576,  1578,  1580,  1582,  1584,  1586,  1588,  1590,
    1594,  1596,  1597,  1601,  1604,  1607,  1609,  1611,  1613,  1615,
    1617,  1619,  1621,  1623,  1625,  1627,  1631,  1633,  1635,  1638,
    1641,  1642,  1645,  1646,  1651,  1652,  1659,  1660,  1664,  1665,
    1671,  1675,  1678,  1682,  1683,  1684,  1685,  1686,  1687,  1689,
    1692,  1695,  1699,  1702,  1706,  1710,  1715,  1718,  1721,  1725,
    1729,  1734,  1736,  1739,  1741,  1744,  1746,  1750,  1752,  1757,
    1759,  1762,  1764,  1767,  1769,  1772,  1774,  1779,  1782,  1783,
    1789,  1790,  1797,  1802,  1807,  1808,  1809,  1820,  1822,  1823,
    1828,  1830,  1832,  1834,  1836,  1838,  1841,  1843,  1847,  1849,
    1854,  1858,  1863,  1870,  1876,  1882,  1885,  1888,  1890,  1893,
    1896,  1899,  1902,  1905,  1908,  1911,  1914,  1916,  1918,  1923,
    1925,  1929,  1933,  1937,  1939,  1943,  1947,  1949,  1953,  1957,
    1959,  1963,  1967,  1971,  1975,  1977,  1981,  1985,  1987,  1991,
    1993,  1997,  1999,  2003,  2005,  2009,  2011,  2015,  2017,  2018,
    2019,  2027,  2029,  2033,  2037,  2041,  2045,  2049,  2053,  2057,
    2061,  2065,  2069,  2073,  2075,  2076,  2078,  2081,  2089,  2092,
    2095,  2103,  2110,  2113,  2117,  2120,  2124,  2127,  2131,  2135,
    2139,  2143,  2146,  2150,  2151,  2153,  2154,  2156,  2158,  2160,
    2162,  2164,  2166,  2168,  2170,  2172,  2177
};
static const short yyrhs[] =
{
      -1,   196,     0,   197,     0,   196,   197,     0,   258,   458,
       0,   198,     0,   199,     0,   209,     0,   212,     0,   296,
       0,    18,     0,     1,     0,    77,   340,   354,   364,   354,
     458,   305,    91,     0,    77,   340,   354,   364,   354,    23,
     305,   312,   311,   458,    91,     0,     0,    78,   200,   201,
     458,    91,     0,   202,     0,   340,   354,   202,     0,   206,
       0,   368,   206,     0,   461,     0,   305,    24,   354,   364,
     305,    25,     0,   203,    26,    27,     0,   203,    26,   305,
     295,    27,   354,     0,     0,   203,   306,    24,    25,   204,
     230,     0,     0,   203,   306,    24,   365,    25,   205,   230,
       0,   461,     0,   305,    24,   354,   202,   305,    25,     0,
     206,    26,    27,     0,   206,    26,   305,   295,    27,   354,
       0,     0,   206,   306,    24,    25,   207,   231,     0,     0,
     206,   306,    24,   365,    25,   208,   231,     0,     0,     0,
      79,   461,    24,   365,    25,   210,   231,   211,   458,    91,
       0,    92,   395,    95,     0,    93,   381,    95,     0,    94,
     382,    95,     0,    92,    95,     0,   253,     0,   215,    23,
     218,     0,     0,   227,   216,    22,   219,     0,     0,     5,
     217,    22,   219,     0,   215,     0,   215,    40,   218,     0,
     194,     0,   185,     0,    56,     0,   222,   220,   221,     0,
     222,     0,   225,   224,   225,     0,   182,     0,   183,     0,
      53,     0,    52,     0,    54,     0,   226,     0,   228,    24,
     225,    25,     0,    24,   225,   229,   225,    25,     0,   227,
       0,   190,     0,   460,     0,   187,     0,   227,    26,    27,
       0,   227,    26,   190,    27,     0,    34,   227,     0,    24,
     227,    25,     0,   227,    28,   461,     0,   227,    45,   461,
       0,   223,     0,    33,     0,    32,     0,     0,   232,   230,
       0,     0,   233,   231,     0,   234,     0,   238,     0,   237,
       0,   318,     0,   321,     0,   244,     0,   235,     0,   239,
       0,   237,     0,   319,     0,   323,     0,   245,     0,   235,
      91,     0,     0,    74,   236,   246,   458,     0,    76,     0,
     239,    91,     0,     0,    75,   240,   259,     0,   242,     0,
     242,    40,   241,     0,   187,     0,   244,     0,     0,   245,
      91,     0,    73,   241,   434,     0,    73,   241,     0,   247,
       0,   246,    21,   247,     0,   248,   249,     0,     0,   250,
     248,     0,   460,     0,   187,     0,   296,     0,    89,     0,
      90,     0,   120,     0,   121,     0,   134,     0,    80,     0,
      81,     0,    82,     0,    83,     0,    84,     0,    85,     0,
      86,     0,   364,     0,   340,   354,   364,     0,     0,    19,
     255,   412,     0,     0,     0,   256,   416,   257,   405,     0,
     213,   254,     0,   262,   458,     0,   458,     0,   460,     0,
     187,     0,   188,     0,   260,    26,    27,     0,   260,    26,
     261,    27,     0,    34,   260,     0,    24,   260,    25,     0,
     260,    28,   461,     0,   260,    45,   461,     0,   260,     0,
     434,     0,   260,     0,   262,    21,   260,     0,   460,     0,
     187,     0,   263,    26,    27,     0,   263,    26,   261,    27,
       0,    34,   263,     0,    24,   263,    25,     0,   263,    28,
     461,     0,   263,    45,   461,     0,     0,   265,     0,   263,
       0,   265,    21,   263,     0,   460,     0,   187,     0,   434,
       0,    24,   293,    25,     0,   188,     0,   115,     0,     0,
      24,   267,   405,    25,     0,   266,     0,   268,    26,   293,
      27,     0,   268,    24,    25,     0,   268,    24,   269,    25,
       0,    71,    24,   292,    21,   376,    25,     0,   268,   354,
      28,   461,   305,     0,   268,   354,    45,   461,   305,     0,
     268,    48,     0,   268,    49,     0,    24,   376,    25,    19,
     417,   459,    20,     0,   292,     0,   269,    21,   292,     0,
     268,     0,    48,   270,     0,    49,   270,     0,    29,   276,
       0,    34,   276,     0,    33,   276,     0,    32,   276,     0,
      31,   276,     0,    30,   276,     0,   273,     0,   272,     0,
     271,    28,   461,     0,   271,    26,   293,    27,     0,   461,
       0,    47,   305,    24,   376,   354,    21,   271,    25,   305,
       0,     0,   305,   274,   275,     0,    42,    24,   376,    25,
       0,    42,   270,     0,    43,    24,   376,    25,     0,    43,
     270,     0,   270,     0,    24,   376,    25,   276,     0,   276,
       0,   277,    34,   276,     0,   277,    35,   276,     0,   277,
      36,   276,     0,   277,     0,   278,    33,   277,     0,   278,
      32,   277,     0,   278,     0,   279,    50,   278,     0,   279,
      51,   278,     0,   279,     0,   280,    37,   279,     0,   280,
      38,   279,     0,   280,    52,   279,     0,   280,    53,   279,
       0,   280,     0,   281,    54,   280,     0,   281,    55,   280,
       0,   281,     0,   282,    29,   281,     0,   282,     0,   283,
      39,   282,     0,   283,     0,   284,    40,   283,     0,   284,
       0,     0,   285,    56,   286,   284,     0,   285,     0,     0,
     287,    57,   288,   285,     0,   287,     0,     0,     0,   287,
      41,   290,   293,    22,   291,   289,     0,   289,     0,   270,
      23,   292,     0,   270,    58,   292,     0,   270,    59,   292,
       0,   270,    60,   292,     0,   270,    61,   292,     0,   270,
      62,   292,     0,   270,    63,   292,     0,   270,    64,   292,
       0,   270,    65,   292,     0,   270,    66,   292,     0,   270,
      67,   292,     0,   292,     0,   293,    21,   292,     0,     0,
     293,     0,   289,     0,   297,     0,    72,     0,   303,     0,
     340,   305,    18,     0,     0,   340,   354,   364,   354,   298,
     305,   311,    18,   305,     0,     0,   340,   354,   364,   354,
      23,   299,   305,   312,   311,    18,   305,     0,   301,     0,
     193,     0,   364,   354,     0,     0,   364,   354,    23,   302,
     305,   312,     0,     0,    46,   340,   304,   354,   309,   305,
     243,    18,     0,    46,   340,   305,    18,     0,    46,   307,
     305,    18,     0,     0,     0,   308,   305,     0,   301,     0,
     307,    21,   354,   301,     0,   310,   305,     0,   300,     0,
     309,    21,   354,   300,     0,     0,   311,    21,   354,   301,
       0,   292,     0,    19,   316,    20,     0,    19,   316,    21,
      20,     0,   313,   312,     0,   314,    23,     0,   461,    22,
       0,   315,     0,   314,   315,     0,    26,   295,    27,     0,
      28,   461,     0,   312,     0,   316,    21,   312,     0,   116,
       0,   114,     0,   117,     0,   118,     0,   119,     0,   319,
      91,     0,     0,   251,   354,   320,   265,   458,   305,     0,
     323,    91,     0,   252,   354,     0,     0,   322,   329,   324,
     264,   458,   305,     0,     0,   322,   325,   326,   458,   305,
       0,   221,     0,   214,     0,   143,     0,   144,     0,   146,
       0,   147,     0,   145,     0,   128,     0,   131,     0,   129,
       0,   130,     0,   136,     0,   137,     0,   122,     0,   124,
       0,   123,     0,   132,     0,   133,     0,   125,     0,   127,
       0,   140,     0,   142,     0,   155,     0,   154,     0,   139,
       0,   141,     0,   179,     0,   189,     0,   138,     0,   153,
       0,   152,     0,   162,     0,   160,     0,   161,     0,   156,
       0,   157,     0,   158,     0,   159,     0,   163,     0,   164,
       0,   167,     0,   168,     0,   165,     0,   166,     0,   151,
       0,   148,     0,   149,     0,   150,     0,   120,     0,   121,
       0,   134,     0,   135,     0,   111,   305,     0,   113,   305,
       0,   112,   305,     0,   336,   305,     0,   329,   305,     0,
     327,   305,     0,   330,   305,     0,   328,   305,     0,   332,
     305,     0,   331,   305,     0,   333,   305,     0,   334,   305,
       0,   169,   354,     0,   171,   354,     0,   170,   354,     0,
     172,   354,     0,   173,   354,     0,   174,   354,     0,   175,
     354,     0,   176,   354,     0,   177,   354,     0,   178,   354,
       0,   462,   354,     0,   345,   354,     0,   359,   354,     0,
     335,   354,     0,   305,   340,   305,     0,   342,     0,   342,
      88,   341,    91,     0,   376,     0,   376,    21,   341,     0,
     317,   343,     0,   337,   343,     0,   338,   343,     0,     0,
     340,     0,     0,     0,     0,   354,    68,   461,   305,    19,
     346,   409,   355,   410,   347,    20,   344,     0,     0,     0,
     354,    69,   461,   305,    19,   348,   409,   355,   410,   349,
      20,     0,   354,    68,   461,   305,    19,    20,     0,   354,
      69,   461,   305,    19,    20,     0,     0,     0,   354,    68,
     305,    19,   350,   409,   355,   410,   351,    20,     0,     0,
       0,   354,    69,   305,    19,   352,   409,   355,   410,   353,
      20,     0,   354,    68,   305,    19,    20,     0,   354,    69,
     305,    19,    20,     0,   354,    68,   461,   354,     0,   354,
      69,   461,   354,     0,     0,   356,     0,   212,     0,   355,
     356,     0,   340,   354,   357,   305,    18,     0,   340,   305,
      18,     0,   358,   354,     0,   357,    21,   358,   354,     0,
     364,     0,    22,   305,   295,     0,   364,    22,   305,   295,
       0,   354,    70,    19,   361,    20,   305,     0,     0,   354,
      70,   461,    19,   360,   361,    20,   305,     0,   354,    70,
     461,   305,     0,   362,     0,   361,    21,   362,     0,   361,
      21,     0,   461,     0,   461,    23,   305,   295,     0,   203,
       0,   378,     0,   368,   193,     0,   368,   363,     0,   203,
       0,   368,   203,     0,   371,     0,   354,   369,     0,   111,
       0,   112,     0,   113,     0,   366,     0,   367,   366,     0,
      34,     0,    34,   367,     0,    34,   368,     0,    34,   367,
     368,     0,   370,     0,   370,    21,     5,     0,   461,     0,
     370,    21,   461,     0,     5,     0,   372,     0,   372,    21,
       5,     0,     0,   373,   375,     0,     0,   372,    21,   374,
     375,     0,   305,   340,   363,   305,     0,   461,     0,   339,
       0,   339,   377,     0,   368,     0,   379,     0,   368,   379,
       0,     0,   379,     0,   305,    24,   354,   377,    25,     0,
      26,    27,     0,    26,   295,    27,     0,   379,    26,    27,
       0,   379,    26,   295,    27,     0,   305,    24,    25,     0,
     305,    24,   371,    25,     0,   379,   305,    24,    25,     0,
     379,   305,    24,   371,    25,     0,   397,     0,   399,     0,
     402,     0,   405,     0,   420,     0,   423,     0,   455,     0,
     428,     0,   457,     0,   383,     0,   381,     0,   390,     0,
     383,   390,     0,   427,   383,     0,   454,   396,    11,    24,
     293,    25,    18,     0,   454,   396,    11,    24,   293,    25,
       0,   385,   390,     0,     0,     0,    13,    24,   294,    18,
     294,    18,   386,   294,   387,    25,     0,     0,   191,   407,
      24,   389,   431,    25,     0,   192,     0,   397,     0,   399,
       0,   402,     0,   393,   416,     0,   393,     0,   394,     0,
     420,     0,   391,     0,   384,     0,   388,     0,   457,     0,
      24,   390,    25,     0,     1,     0,     0,   422,   392,   390,
       0,   407,    19,     0,   411,    20,     0,   396,     0,   415,
       0,   397,     0,   399,     0,   402,     0,   406,     0,   421,
       0,   423,     0,   428,     0,   456,     0,    24,   396,    25,
       0,   457,     0,     1,     0,   461,    22,     0,   110,   380,
       0,     0,   101,   398,     0,     0,     6,   295,   400,    22,
       0,     0,   101,   398,     6,   295,   401,    22,     0,     0,
       7,   403,    22,     0,     0,   101,   398,     7,   404,    22,
       0,    24,   405,    25,     0,   407,   413,     0,   407,   414,
     408,     0,     0,     0,     0,     0,     0,    20,     0,   110,
      20,     0,   419,    20,     0,   419,   110,    20,     0,   416,
      20,     0,   416,   110,    20,     0,   416,   419,    20,     0,
     416,   419,   110,    20,     0,    19,   412,     0,    19,    20,
       0,    19,   415,    20,     0,    19,   416,    20,     0,    19,
     416,   419,    20,     0,   396,     0,   415,   396,     0,   296,
       0,   416,   296,     0,   418,     0,   417,    21,   418,     0,
     292,     0,    19,   417,   459,    20,     0,   380,     0,   419,
     380,     0,    18,     0,   293,    18,     0,    18,     0,   293,
      18,     0,   293,     0,     8,    24,   293,    25,     0,   422,
     380,     0,     0,   422,   380,     9,   424,   380,     0,     0,
      10,    24,   293,   425,    25,   380,     0,    11,    24,   293,
      25,     0,    11,    24,   293,    25,     0,     0,     0,   191,
     429,   407,    24,   430,   431,    25,   405,   453,   408,     0,
     433,     0,     0,   431,   432,    21,   433,     0,   452,     0,
     460,     0,   188,     0,   187,     0,   190,     0,   434,   190,
       0,   434,     0,    24,   293,    25,     0,   435,     0,   268,
      26,   293,    27,     0,   268,    24,    25,     0,   268,    24,
     269,    25,     0,    71,    24,   292,    21,   376,    25,     0,
     268,   354,    28,   461,   305,     0,   268,   354,    45,   461,
     305,     0,   268,    48,     0,   268,    49,     0,   436,     0,
      48,   270,     0,    49,   270,     0,    29,   276,     0,    34,
     276,     0,    33,   276,     0,    32,   276,     0,    31,   276,
       0,    30,   276,     0,   273,     0,   437,     0,    24,   376,
      25,   276,     0,   438,     0,   277,    34,   276,     0,   277,
      35,   276,     0,   277,    36,   276,     0,   439,     0,   278,
      33,   277,     0,   278,    32,   277,     0,   440,     0,   279,
      50,   278,     0,   279,    51,   278,     0,   441,     0,   280,
      37,   279,     0,   280,    38,   279,     0,   280,    52,   279,
       0,   280,    53,   279,     0,   442,     0,   281,    54,   280,
       0,   281,    55,   280,     0,   443,     0,   282,    29,   281,
       0,   444,     0,   283,    39,   282,     0,   445,     0,   284,
      40,   283,     0,   446,     0,   285,    56,   284,     0,   447,
       0,   287,    57,   285,     0,   448,     0,     0,     0,   287,
      41,   450,   293,    22,   451,   289,     0,   449,     0,   270,
      23,   292,     0,   270,    58,   292,     0,   270,    59,   292,
       0,   270,    60,   292,     0,   270,    61,   292,     0,   270,
      62,   292,     0,   270,    63,   292,     0,   270,    64,   292,
       0,   270,    65,   292,     0,   270,    66,   292,     0,   270,
      67,   292,     0,   192,     0,     0,    12,     0,   426,   380,
       0,   454,   380,    11,    24,   293,    25,    18,     0,   385,
     380,     0,   426,   396,     0,   454,   396,    11,    24,   293,
      25,    18,     0,   454,   396,    11,    24,   293,    25,     0,
     385,   396,     0,    14,   461,    18,     0,    15,    18,     0,
     100,    15,    18,     0,    16,    18,     0,    96,    16,    18,
       0,    97,    16,    18,     0,    98,    16,    18,     0,    99,
      16,    18,     0,    17,    18,     0,    17,   293,    18,     0,
       0,    18,     0,     0,    21,     0,   186,     0,   187,     0,
     191,     0,   192,     0,   460,     0,   188,     0,   193,     0,
     188,     0,    44,    24,   293,    25,     0,    44,    24,   376,
      25,     0
};

#endif

#if YYDEBUG
/* YYRLINE[YYN] -- source line where rule number YYN was defined. */
static const short yyrline[] =
{
       0,   324,   325,   329,   330,   334,   335,   336,   337,   338,
     339,   340,   341,   345,   347,   352,   352,   361,   367,   372,
     373,   378,   379,   381,   383,   400,   400,   418,   418,   433,
     434,   436,   440,   457,   457,   469,   469,   483,   483,   483,
     492,   493,   494,   495,   499,   503,   508,   508,   513,   513,
     521,   522,   526,   532,   533,   537,   538,   542,   548,   549,
     553,   554,   555,   559,   560,   561,   567,   568,   572,   574,
     576,   578,   587,   589,   591,   593,   610,   614,   615,   622,
     623,   632,   634,   639,   640,   641,   642,   643,   644,   648,
     649,   650,   651,   652,   653,   657,   661,   661,   670,   674,
     678,   678,   693,   695,   700,   704,   705,   709,   713,   719,
     724,   725,   729,   733,   734,   738,   739,   740,   744,   745,
     746,   747,   748,   752,   753,   754,   755,   756,   760,   761,
     765,   772,   777,   777,   783,   783,   783,   794,   805,   806,
     810,   811,   812,   813,   814,   815,   816,   817,   818,   822,
     823,   828,   829,   833,   835,   837,   838,   839,   840,   841,
     843,   848,   849,   853,   857,   870,   871,   872,   873,   874,
     875,   876,   876,   882,   883,   884,   885,   886,   887,   888,
     889,   890,   891,   896,   897,   901,   902,   903,   904,   905,
     906,   907,   908,   909,   910,   911,   915,   916,   918,   922,
     928,   928,   933,   934,   935,   936,   940,   941,   946,   947,
     948,   949,   953,   954,   955,   959,   960,   961,   965,   966,
     967,   968,   969,   973,   974,   975,   979,   980,   984,   985,
     989,   990,   994,   995,   995,  1007,  1008,  1008,  1021,  1022,
    1022,  1022,  1028,  1029,  1030,  1031,  1032,  1033,  1034,  1035,
    1036,  1037,  1038,  1039,  1043,  1044,  1048,  1049,  1053,  1059,
    1060,  1061,  1065,  1079,  1079,  1090,  1090,  1099,  1100,  1104,
    1109,  1109,  1114,  1114,  1117,  1118,  1122,  1126,  1130,  1134,
    1135,  1139,  1143,  1144,  1148,  1149,  1153,  1154,  1155,  1156,
    1164,  1165,  1170,  1171,  1175,  1176,  1180,  1182,  1192,  1193,
    1194,  1195,  1196,  1200,  1204,  1204,  1220,  1224,  1228,  1228,
    1242,  1242,  1274,  1275,  1279,  1280,  1281,  1282,  1283,  1287,
    1288,  1289,  1290,  1294,  1295,  1296,  1297,  1298,  1299,  1300,
    1301,  1302,  1303,  1304,  1305,  1306,  1307,  1308,  1309,  1310,
    1314,  1315,  1319,  1320,  1324,  1325,  1329,  1330,  1331,  1332,
    1336,  1337,  1338,  1339,  1340,  1341,  1345,  1346,  1347,  1348,
    1352,  1353,  1354,  1355,  1359,  1360,  1361,  1362,  1363,  1364,
    1365,  1366,  1367,  1368,  1369,  1370,  1378,  1379,  1380,  1381,
    1382,  1383,  1384,  1385,  1386,  1387,  1388,  1389,  1390,  1391,
    1395,  1400,  1401,  1406,  1407,  1412,  1413,  1414,  1418,  1419,
    1423,  1430,  1430,  1430,  1436,  1436,  1436,  1441,  1443,  1445,
    1445,  1445,  1450,  1450,  1450,  1455,  1457,  1459,  1460,  1464,
    1468,  1469,  1470,  1474,  1476,  1481,  1483,  1488,  1489,  1490,
    1495,  1497,  1497,  1499,  1503,  1505,  1507,  1511,  1516,  1524,
    1525,  1526,  1532,  1537,  1538,  1543,  1544,  1548,  1549,  1550,
    1554,  1555,  1559,  1560,  1561,  1562,  1566,  1567,  1571,  1572,
    1576,  1577,  1578,  1582,  1582,  1583,  1583,  1588,  1600,  1617,
    1618,  1622,  1623,  1624,  1628,  1629,  1633,  1635,  1636,  1638,
    1639,  1641,  1643,  1645,  1647,  1654,  1655,  1656,  1657,  1658,
    1659,  1660,  1661,  1662,  1667,  1671,  1675,  1676,  1681,  1683,
    1685,  1687,  1692,  1692,  1692,  1700,  1700,  1704,  1708,  1709,
    1710,  1711,  1712,  1713,  1714,  1715,  1716,  1717,  1718,  1719,
    1720,  1724,  1724,  1731,  1735,  1739,  1740,  1744,  1745,  1746,
    1747,  1748,  1749,  1750,  1751,  1752,  1753,  1754,  1758,  1759,
    1767,  1768,  1775,  1775,  1777,  1777,  1782,  1782,  1784,  1784,
    1789,  1790,  1795,  1799,  1803,  1807,  1811,  1815,  1819,  1820,
    1821,  1822,  1824,  1825,  1827,  1829,  1836,  1841,  1843,  1845,
    1847,  1852,  1853,  1857,  1858,  1862,  1863,  1867,  1868,  1872,
    1873,  1877,  1878,  1882,  1883,  1884,  1888,  1902,  1907,  1907,
    1912,  1912,  1917,  1923,  1927,  1927,  1927,  1938,  1939,  1939,
    1944,  1945,  1946,  1957,  1965,  1966,  1970,  1971,  1975,  1976,
    1977,  1978,  1979,  1981,  1982,  1983,  1984,  1988,  1989,  1990,
    1991,  1992,  1993,  1994,  1995,  1996,  1997,  2001,  2002,  2006,
    2007,  2008,  2009,  2013,  2014,  2015,  2019,  2020,  2021,  2025,
    2026,  2027,  2028,  2029,  2033,  2034,  2035,  2039,  2040,  2044,
    2045,  2049,  2050,  2054,  2055,  2059,  2060,  2064,  2065,  2065,
    2065,  2071,  2072,  2073,  2074,  2075,  2076,  2077,  2078,  2079,
    2080,  2081,  2082,  2086,  2087,  2091,  2095,  2097,  2099,  2104,
    2105,  2107,  2109,  2113,  2114,  2115,  2117,  2118,  2119,  2120,
    2121,  2122,  2123,  2127,  2128,  2132,  2133,  2137,  2141,  2142,
    2143,  2144,  2145,  2149,  2150,  2151,  2152
};
#endif


#if (YYDEBUG) || defined YYERROR_VERBOSE

/* YYTNAME[TOKEN_NUM] -- String name of the token TOKEN_NUM. */
static const char *const yytname[] =
{
  "$", "error", "$undefined.", "BADTOK", "SKIPTOK", "CTOK_ELIPSIS", "CASE", 
  "DEFAULT", "CIF", "CELSE", "SWITCH", "WHILE", "DO", "CFOR", "GOTO", 
  "CONTINUE", "BREAK", "RETURN", "TSEMI", "TLBRACE", "TRBRACE", "TCOMMA", 
  "TCOLON", "TASSIGN", "TLPAREN", "TRPAREN", "TLSQBR", "TRSQBR", "TDOT", 
  "TAMPERSAND", "TEXCL", "TTILDE", "TMINUS", "TPLUS", "TMULT", "TDIV", 
  "TPERCENT", "TLT", "TGT", "TCIRC", "TBAR", "TQUEST", "CSIZEOF", 
  "CALIGNOF", "CTYPEOF", "ARROW_OP", "CTYPEDEF", "COFFSETOF", "INC_OP", 
  "DEC_OP", "LEFT_OP", "RIGHT_OP", "LE_OP", "GE_OP", "EQ_OP", "NE_OP", 
  "AND_OP", "OR_OP", "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
  "ADD_ASSIGN", "SUB_ASSIGN", "LEFT_ASSIGN", "RIGHT_ASSIGN", "AND_ASSIGN", 
  "XOR_ASSIGN", "OR_ASSIGN", "CSTRUCT", "CUNION", "CENUM", "VA_ARG", 
  "VA_DCL", "QWARN", "QGLOBALS", "QMODIFIES", "QNOMODS", "QCONSTANT", 
  "QFUNCTION", "QITER", "QDEFINES", "QUSES", "QALLOCATES", "QSETS", 
  "QRELEASES", "QPRECLAUSE", "QPOSTCLAUSE", "QINVARIANT", "QALT", 
  "QUNDEF", "QKILLED", "QENDMACRO", "LLMACRO", "LLMACROITER", 
  "LLMACROEND", "TENDMACRO", "QSWITCHBREAK", "QLOOPBREAK", "QINNERBREAK", 
  "QSAFEBREAK", "QINNERCONTINUE", "QFALLTHROUGH", "QLINTNOTREACHED", 
  "QLINTFALLTHROUGH", "QLINTFALLTHRU", "QARGSUSED", "QPRINTFLIKE", 
  "QLINTPRINTFLIKE", "QSCANFLIKE", "QMESSAGELIKE", "QNOTREACHED", 
  "QCONST", "QRESTRICT", "QVOLATILE", "QINLINE", "QEXTENSION", "QEXTERN", 
  "QSTATIC", "QAUTO", "QREGISTER", "QOUT", "QIN", "QYIELD", "QONLY", 
  "QTEMP", "QSHARED", "QREF", "QUNIQUE", "QCHECKED", "QUNCHECKED", 
  "QCHECKEDSTRICT", "QCHECKMOD", "QKEEP", "QKEPT", "QPARTIAL", "QSPECIAL", 
  "QOWNED", "QDEPENDENT", "QRETURNED", "QEXPOSED", "QNULL", "QOBSERVER", 
  "QISNULL", "QEXITS", "QMAYEXIT", "QNEVEREXIT", "QTRUEEXIT", 
  "QFALSEEXIT", "QLONG", "QSIGNED", "QUNSIGNED", "QSHORT", "QUNUSED", 
  "QSEF", "QNOTNULL", "QRELNULL", "QABSTRACT", "QCONCRETE", "QMUTABLE", 
  "QIMMUTABLE", "QTRUENULL", "QFALSENULL", "QEXTERNAL", "QREFCOUNTED", 
  "QREFS", "QNEWREF", "QTEMPREF", "QKILLREF", "QRELDEF", "CGCHAR", 
  "CBOOL", "CINT", "CGFLOAT", "CDOUBLE", "CVOID", "QANYTYPE", 
  "QINTEGRALTYPE", "QUNSIGNEDINTEGRALTYPE", "QSIGNEDINTEGRALTYPE", 
  "QNULLTERMINATED", "QSETBUFFERSIZE", "QSETSTRINGLENGTH", "QMAXSET", 
  "QMAXREAD", "QTESTINRANGE", "TCAND", "IDENTIFIER", "NEW_IDENTIFIER", 
  "TYPE_NAME_OR_ID", "CANNOTATION", "CCONSTANT", "ITER_NAME", 
  "ITER_ENDNAME", "TYPE_NAME", "METASTATE_NAME", "file", "externalDefs", 
  "externalDef", "constantDecl", "fcnDecl", "@1", "plainFcn", 
  "plainNamedDecl", "namedDeclBase", "@2", "@3", "plainNamedDeclBase", 
  "@4", "@5", "iterDecl", "@6", "@7", "macroDef", "fcnDefHdr", 
  "metaStateConstraint", "metaStateSpecifier", "@8", "@9", 
  "metaStateExpression", "metaStateName", "constraintSeperator", 
  "BufConstraintList", "BufConstraint", "bufferModifier", "relationalOp", 
  "BufConstraintExpr", "BufConstraintTerm", "BufConstraintSrefExpr", 
  "BufUnaryOp", "BufBinaryOp", "functionClauses", "functionClausesPlain", 
  "functionClause", "functionClausePlain", "globalsClause", 
  "globalsClausePlain", "@10", "nomodsClause", "modifiesClause", 
  "modifiesClausePlain", "@11", "flagSpec", "flagId", "optWarnClause", 
  "warnClause", "warnClausePlain", "globIdList", "globIdListExpr", 
  "optGlobQuals", "globId", "globQual", "stateTag", "conditionTag", 
  "fcnDefHdrAux", "fcnBody", "@12", "@13", "@14", "fcnDef", "locModifies", 
  "modListExpr", "mExpr", "modList", "specClauseListExpr", 
  "optSpecClauseList", "specClauseList", "primaryExpr", "@15", 
  "postfixExpr", "argumentExprList", "unaryExpr", "fieldDesignator", 
  "offsetofExpr", "sizeofExpr", "@16", "sizeofExprAux", "castExpr", 
  "timesExpr", "plusExpr", "shiftExpr", "relationalExpr", "equalityExpr", 
  "bitandExpr", "xorExpr", "bitorExpr", "andExpr", "@17", "orExpr", "@18", 
  "conditionalExpr", "@19", "@20", "assignExpr", "expr", "optExpr", 
  "constantExpr", "initializer", "instanceDecl", "@21", "@22", 
  "namedInitializerType", "namedInitializer", "@23", "typeDecl", "@24", 
  "IsType", "PushType", "namedInitializerList", "namedInitializerListAux", 
  "namedInitializerTypeList", "namedInitializerTypeListAux", 
  "optDeclarators", "init", "designation", "designatorList", "designator", 
  "initList", "storageSpecifier", "stateClause", "stateClausePlain", 
  "@25", "conditionClause", "startConditionClause", 
  "conditionClausePlain", "@26", "@27", "functionConstraint", 
  "exitsQualifier", "checkQualifier", "stateQualifier", "paramQualifier", 
  "visibilityQualifier", "returnQualifier", "typedefQualifier", 
  "refcountQualifier", "typeModifier", "definedQualifier", 
  "typeQualifier", "typeSpecifier", "completeType", 
  "completeTypeSpecifier", "altType", "completeTypeSpecifierAux", 
  "optCompleteType", "optStructInvariant", "suSpc", "@28", "@29", "@30", 
  "@31", "@32", "@33", "@34", "@35", "NotType", "structDeclList", 
  "structDecl", "structNamedDeclList", "structNamedDecl", "enumSpc", 
  "@36", "enumeratorList", "enumerator", "optNamedDecl", "namedDecl", 
  "genericParamList", "innerMods", "innerModsList", "pointers", 
  "paramIdList", "idList", "paramTypeList", "paramList", "@37", "@38", 
  "paramDecl", "typeExpression", "abstractDecl", "optAbstractDeclBase", 
  "abstractDeclBase", "stmt", "iterBody", "endBody", "iterDefStmtList", 
  "iterDefIterationStmt", "forPred", "@39", "@40", "partialIterStmt", 
  "@41", "iterDefStmt", "iterSelectionStmt", "@42", "openScope", 
  "closeScope", "macroBody", "stmtErr", "labeledStmt", 
  "optExtraFallThroughs", "caseStmt", "@43", "@44", "defaultStmt", "@45", 
  "@46", "compoundStmt", "compoundStmtErr", "CreateInnerScope", 
  "DeleteInnerScope", "CreateStructInnerScope", "DeleteStructInnerScope", 
  "DeleteInnerScopeSafe", "compoundStmtRest", "compoundStmtAux", 
  "compoundStmtAuxErr", "stmtListErr", "initializerList", 
  "typeInitializerList", "typeInitializer", "stmtList", "expressionStmt", 
  "expressionStmtErr", "ifPred", "selectionStmt", "@47", "@48", 
  "whilePred", "iterWhilePred", "iterStmt", "@49", "@50", "iterArgList", 
  "@51", "iterArgExpr", "cconstantExpr", "primaryIterExpr", 
  "postfixIterExpr", "unaryIterExpr", "castIterExpr", "timesIterExpr", 
  "plusIterExpr", "shiftIterExpr", "relationalIterExpr", 
  "equalityIterExpr", "bitandIterExpr", "xorIterExpr", "bitorIterExpr", 
  "andIterExpr", "orIterExpr", "conditionalIterExpr", "@52", "@53", 
  "assignIterExpr", "endIter", "doHeader", "iterationStmt", 
  "iterationStmtErr", "jumpStmt", "optSemi", "optComma", "id", "newId", 
  "typeName", 0
};
#endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives. */
static const short yyr1[] =
{
       0,   195,   195,   196,   196,   197,   197,   197,   197,   197,
     197,   197,   197,   198,   198,   200,   199,   201,   201,   202,
     202,   203,   203,   203,   203,   204,   203,   205,   203,   206,
     206,   206,   206,   207,   206,   208,   206,   210,   211,   209,
     212,   212,   212,   212,   213,   214,   216,   215,   217,   215,
     218,   218,   219,   220,   220,   221,   221,   222,   223,   223,
     224,   224,   224,   225,   225,   225,   226,   226,   227,   227,
     227,   227,   227,   227,   227,   227,   228,   229,   229,   230,
     230,   231,   231,   232,   232,   232,   232,   232,   232,   233,
     233,   233,   233,   233,   233,   234,   236,   235,   237,   238,
     240,   239,   241,   241,   242,   243,   243,   244,   245,   245,
     246,   246,   247,   248,   248,   249,   249,   249,   250,   250,
     250,   250,   250,   251,   251,   251,   251,   251,   252,   252,
     253,   253,   255,   254,   256,   257,   254,   258,   259,   259,
     260,   260,   260,   260,   260,   260,   260,   260,   260,   261,
     261,   262,   262,   263,   263,   263,   263,   263,   263,   263,
     263,   264,   264,   265,   265,   266,   266,   266,   266,   266,
     266,   267,   266,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   269,   269,   270,   270,   270,   270,   270,
     270,   270,   270,   270,   270,   270,   271,   271,   271,   272,
     274,   273,   275,   275,   275,   275,   276,   276,   277,   277,
     277,   277,   278,   278,   278,   279,   279,   279,   280,   280,
     280,   280,   280,   281,   281,   281,   282,   282,   283,   283,
     284,   284,   285,   286,   285,   287,   288,   287,   289,   290,
     291,   289,   292,   292,   292,   292,   292,   292,   292,   292,
     292,   292,   292,   292,   293,   293,   294,   294,   295,   296,
     296,   296,   297,   298,   297,   299,   297,   300,   300,   301,
     302,   301,   304,   303,   303,   303,   305,   306,   307,   308,
     308,   309,   310,   310,   311,   311,   312,   312,   312,   312,
     313,   313,   314,   314,   315,   315,   316,   316,   317,   317,
     317,   317,   317,   318,   320,   319,   321,   322,   324,   323,
     325,   323,   326,   326,   327,   327,   327,   327,   327,   328,
     328,   328,   328,   329,   329,   329,   329,   329,   329,   329,
     329,   329,   329,   329,   329,   329,   329,   329,   329,   329,
     330,   330,   331,   331,   332,   332,   333,   333,   333,   333,
     334,   334,   334,   334,   334,   334,   335,   335,   335,   335,
     336,   336,   336,   336,   337,   337,   337,   337,   337,   337,
     337,   337,   337,   337,   337,   337,   338,   338,   338,   338,
     338,   338,   338,   338,   338,   338,   338,   338,   338,   338,
     339,   340,   340,   341,   341,   342,   342,   342,   343,   343,
     344,   346,   347,   345,   348,   349,   345,   345,   345,   350,
     351,   345,   352,   353,   345,   345,   345,   345,   345,   354,
     355,   355,   355,   356,   356,   357,   357,   358,   358,   358,
     359,   360,   359,   359,   361,   361,   361,   362,   362,   363,
     363,   363,   363,   364,   364,   365,   365,   366,   366,   366,
     367,   367,   368,   368,   368,   368,   369,   369,   370,   370,
     371,   371,   371,   373,   372,   374,   372,   375,   375,   376,
     376,   377,   377,   377,   378,   378,   379,   379,   379,   379,
     379,   379,   379,   379,   379,   380,   380,   380,   380,   380,
     380,   380,   380,   380,   381,   382,   383,   383,   384,   384,
     384,   384,   386,   387,   385,   389,   388,   388,   390,   390,
     390,   390,   390,   390,   390,   390,   390,   390,   390,   390,
     390,   392,   391,   393,   394,   395,   395,   396,   396,   396,
     396,   396,   396,   396,   396,   396,   396,   396,   397,   397,
     398,   398,   400,   399,   401,   399,   403,   402,   404,   402,
     405,   405,   406,   407,   408,   409,   410,   411,   412,   412,
     412,   412,   412,   412,   412,   412,   413,   414,   414,   414,
     414,   415,   415,   416,   416,   417,   417,   418,   418,   419,
     419,   420,   420,   421,   421,   421,   422,   423,   424,   423,
     425,   423,   426,   427,   429,   430,   428,   431,   432,   431,
     433,   433,   433,   433,   434,   434,   435,   435,   436,   436,
     436,   436,   436,   436,   436,   436,   436,   437,   437,   437,
     437,   437,   437,   437,   437,   437,   437,   438,   438,   439,
     439,   439,   439,   440,   440,   440,   441,   441,   441,   442,
     442,   442,   442,   442,   443,   443,   443,   444,   444,   445,
     445,   446,   446,   447,   447,   448,   448,   449,   450,   451,
     449,   452,   452,   452,   452,   452,   452,   452,   452,   452,
     452,   452,   452,   453,   453,   454,   455,   455,   455,   456,
     456,   456,   456,   457,   457,   457,   457,   457,   457,   457,
     457,   457,   457,   458,   458,   459,   459,   460,   461,   461,
     461,   461,   461,   462,   462,   462,   462
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN. */
static const short yyr2[] =
{
       0,     0,     1,     1,     2,     2,     1,     1,     1,     1,
       1,     1,     1,     8,    11,     0,     5,     1,     3,     1,
       2,     1,     6,     3,     6,     0,     6,     0,     7,     1,
       6,     3,     6,     0,     6,     0,     7,     0,     0,    10,
       3,     3,     3,     2,     1,     3,     0,     4,     0,     4,
       1,     3,     1,     1,     1,     3,     1,     3,     1,     1,
       1,     1,     1,     1,     4,     5,     1,     1,     1,     1,
       3,     4,     2,     3,     3,     3,     1,     1,     1,     0,
       2,     0,     2,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     0,     4,     1,     2,
       0,     3,     1,     3,     1,     1,     0,     2,     3,     2,
       1,     3,     2,     0,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     0,     3,     0,     0,     4,     2,     2,     1,
       1,     1,     1,     3,     4,     2,     3,     3,     3,     1,
       1,     1,     3,     1,     1,     3,     4,     2,     3,     3,
       3,     0,     1,     1,     3,     1,     1,     1,     3,     1,
       1,     0,     4,     1,     4,     3,     4,     6,     5,     5,
       2,     2,     7,     1,     3,     1,     2,     2,     2,     2,
       2,     2,     2,     2,     1,     1,     3,     4,     1,     9,
       0,     3,     4,     2,     4,     2,     1,     4,     1,     3,
       3,     3,     1,     3,     3,     1,     3,     3,     1,     3,
       3,     3,     3,     1,     3,     3,     1,     3,     1,     3,
       1,     3,     1,     0,     4,     1,     0,     4,     1,     0,
       0,     7,     1,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     1,     3,     0,     1,     1,     1,
       1,     1,     3,     0,     9,     0,    11,     1,     1,     2,
       0,     6,     0,     8,     4,     4,     0,     0,     2,     1,
       4,     2,     1,     4,     0,     4,     1,     3,     4,     2,
       2,     2,     1,     2,     3,     2,     1,     3,     1,     1,
       1,     1,     1,     2,     0,     6,     2,     2,     0,     6,
       0,     5,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       3,     1,     4,     1,     3,     2,     2,     2,     0,     1,
       0,     0,     0,    12,     0,     0,    11,     6,     6,     0,
       0,    10,     0,     0,    10,     5,     5,     4,     4,     0,
       1,     1,     2,     5,     3,     2,     4,     1,     3,     4,
       6,     0,     8,     4,     1,     3,     2,     1,     4,     1,
       1,     2,     2,     1,     2,     1,     2,     1,     1,     1,
       1,     2,     1,     2,     2,     3,     1,     3,     1,     3,
       1,     1,     3,     0,     2,     0,     4,     4,     1,     1,
       2,     1,     1,     2,     0,     1,     5,     2,     3,     3,
       4,     3,     4,     4,     5,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     2,     7,
       6,     2,     0,     0,    10,     0,     6,     1,     1,     1,
       1,     2,     1,     1,     1,     1,     1,     1,     1,     3,
       1,     0,     3,     2,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     3,     1,     1,     2,     2,
       0,     2,     0,     4,     0,     6,     0,     3,     0,     5,
       3,     2,     3,     0,     0,     0,     0,     0,     1,     2,
       2,     3,     2,     3,     3,     4,     2,     2,     3,     3,
       4,     1,     2,     1,     2,     1,     3,     1,     4,     1,
       2,     1,     2,     1,     2,     1,     4,     2,     0,     5,
       0,     6,     4,     4,     0,     0,    10,     1,     0,     4,
       1,     1,     1,     1,     1,     2,     1,     3,     1,     4,
       3,     4,     6,     5,     5,     2,     2,     1,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     1,     4,     1,
       3,     3,     3,     1,     3,     3,     1,     3,     3,     1,
       3,     3,     3,     3,     1,     3,     3,     1,     3,     1,
       3,     1,     3,     1,     3,     1,     3,     1,     0,     0,
       7,     1,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     1,     0,     1,     2,     7,     2,     2,
       7,     6,     2,     3,     2,     3,     2,     3,     3,     3,
       3,     2,     3,     0,     1,     0,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     4,     4
};

/* YYDEFACT[S] -- default rule to reduce with in state S when YYTABLE
   doesn't specify something else to do.  Zero means the default is an
   error. */
static const short yydefact[] =
{
       0,    12,    11,   452,     0,   419,   260,   419,    15,     0,
       0,     0,     0,   276,   276,   276,   299,   298,   300,   301,
     302,   360,   361,   325,   327,   326,   330,   331,   319,   321,
     322,   320,   328,   329,   362,   363,   323,   324,   340,   336,
     332,   337,   333,   314,   315,   318,   316,   317,   357,   358,
     359,   356,   342,   341,   335,   334,   346,   347,   348,   349,
     344,   345,   343,   350,   351,   354,   355,   352,   353,   419,
     419,   419,   419,   419,   419,   419,   419,   419,   419,   338,
     697,   698,   702,   339,   699,   700,   703,     0,     3,     6,
       7,   443,     8,     9,   134,    44,   693,    10,   259,   261,
       0,   398,   276,   276,   276,   276,   276,   276,   276,   276,
     419,   276,   398,   398,   419,   391,   419,     0,   419,   130,
     276,   701,    21,   419,   447,   448,   449,   450,   453,   454,
     276,   279,   276,   276,   272,   419,   704,   419,   419,   702,
       0,   537,   276,   546,     0,     0,     0,   675,     0,     0,
       0,     0,   276,   583,     0,   276,   276,   276,   276,   276,
     276,   276,   276,   276,     0,    43,     0,     0,     0,     0,
       0,   540,   276,   170,   166,   169,   604,   594,   173,   185,
     206,   195,   194,   208,   212,   215,   218,   223,   226,   228,
     230,   232,   235,   238,   242,   254,   585,   200,     0,     0,
     571,   527,   528,   529,   530,     0,     0,   531,   276,   532,
       0,   533,   167,     0,   534,   536,   165,     0,   520,     0,
     581,     0,   553,   507,     0,     0,     0,   516,     0,   517,
     496,   515,   512,   513,   508,   509,   510,     0,     0,   514,
     521,     0,     0,   518,   495,     0,   364,   366,   365,   376,
     378,   377,   379,   380,   381,   382,   383,   384,   385,     4,
     276,     0,   132,   137,   419,   694,     5,   419,   399,   395,
     369,   371,   368,   370,   373,   372,   374,   375,   389,   367,
     396,   397,     0,   276,   276,   387,   276,   276,     0,   388,
     444,   386,   451,   455,   276,   166,   169,     0,   419,   469,
       0,   165,   419,     0,   278,   419,     0,   269,   276,   693,
      17,    19,     0,   419,   276,    29,   463,   206,   258,   542,
       0,   276,   276,   276,   276,     0,   684,   686,   691,     0,
     553,     0,     0,     0,   188,   193,   192,   191,   190,   189,
       0,   276,   186,   187,   276,     0,     0,     0,     0,     0,
     540,     0,   276,   539,   276,   485,   486,   487,   488,     0,
     489,   490,   276,   492,   276,   491,   493,   553,   276,   276,
     180,   181,     0,   276,   276,   276,   276,   276,   276,   276,
     276,   276,   276,   276,   276,   276,   276,   276,   276,   276,
     276,   276,   276,   276,   276,   276,   276,   276,   276,   276,
     233,   239,   236,   584,   276,     0,   682,    40,     0,   554,
     572,   587,   679,   605,     0,   538,   276,     0,     0,     0,
     582,    41,   497,   501,   573,   419,   511,   523,   524,     0,
       0,     0,    42,    23,   276,   463,   419,   419,   276,   262,
     131,   419,     0,   393,     0,   419,     0,   419,     0,   276,
       0,   705,   276,   276,     0,   471,   470,   472,   706,   276,
     275,   276,   274,   270,   419,     0,   276,     0,   419,   276,
      20,   460,     0,     0,   445,   461,   276,     0,   547,     0,
     590,     0,   257,     0,   683,   692,   553,     0,   168,   276,
     535,   276,     0,     0,   687,   688,   689,   690,   685,   541,
     276,   548,     0,   678,   419,   551,   676,     0,     0,   175,
       0,   183,     0,     0,     0,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   209,   210,   211,   214,
     213,   216,   217,   219,   220,   221,   222,   224,   225,   227,
     229,   231,   276,   276,   276,   255,   276,   276,   201,   567,
     704,   571,     0,   419,   552,   588,     0,     0,   519,   505,
     276,   574,   522,     0,     0,    25,     0,   558,   276,   579,
     133,   419,   276,   553,   276,   263,   392,   276,   409,     0,
     417,   412,     0,   418,     0,   434,   437,   431,   433,   390,
     477,     0,   463,   473,   276,     0,   280,   268,   282,   267,
     276,   276,   276,   693,    16,    31,   276,   463,   276,    18,
     446,   456,   458,    37,   465,   419,   464,   468,   543,   586,
       0,   592,   276,   172,   276,   207,   419,     0,   276,   544,
       0,   550,   566,     0,   595,   276,   176,   174,   276,   276,
     234,     0,   237,   276,   203,   276,   205,   568,   569,   276,
     276,   276,   593,   276,   419,   276,   419,    79,    27,   559,
     562,   276,   276,   560,   276,   580,   136,     0,   265,   276,
     394,   415,   555,   401,   416,   555,   404,   276,   436,   276,
       0,   478,   481,   276,     0,   479,     0,   463,   419,   106,
     281,   276,   276,   276,     0,    33,     0,   276,     0,    81,
     462,   276,   474,   276,     0,   276,   577,   695,   575,     0,
       0,     0,   549,   276,   276,   184,   178,   179,   240,     0,
       0,   570,   589,     0,   276,   276,   276,   276,   276,   276,
     276,   276,   276,     0,   166,   169,   185,   206,   194,   212,
     215,   218,   223,   226,   228,   230,   232,   235,     0,   598,
     597,   167,   608,   617,   627,   629,   633,   636,   639,   644,
     647,   649,   651,   653,   655,   657,   661,   600,   165,     0,
      24,     0,    96,   100,    98,   123,   124,   125,   126,   127,
     128,   129,    26,    79,    83,     0,    85,    84,     0,    88,
       0,   419,   419,    86,     0,    87,   310,     0,    79,   563,
     564,   276,   561,    22,   276,   284,   419,   407,   555,   419,
     408,   555,   430,   435,   276,     0,     0,   482,   480,   483,
       0,   276,     0,   105,   276,   276,     0,   286,   271,   276,
       0,   292,     0,   276,     0,   419,    81,    35,     0,   457,
     459,    38,    81,    89,    91,    90,    94,    92,    93,   466,
     439,     0,   276,   474,   440,   475,   591,   502,   695,   276,
       0,     0,   177,   545,     0,   598,   276,   202,   204,   681,
       0,     0,   188,   193,   192,   191,   190,   189,   186,   187,
     276,   276,   276,   180,   181,     0,   276,   276,   276,   276,
     276,   276,   276,   276,   276,   276,   276,   276,   276,   276,
     276,   276,   276,   276,   276,   276,   276,   276,   276,   276,
     276,   276,   276,   233,   658,   236,   506,     0,   500,   104,
     109,   102,   113,   693,    80,    95,    99,   107,   304,   307,
     303,     0,   308,   306,    28,   565,   276,     0,   421,   419,
     419,   420,   419,   419,   419,   438,   276,   476,   484,   283,
     273,   296,     0,     0,   295,   289,   290,   293,   291,   284,
      13,    32,    34,    81,    30,   693,    82,   463,   467,   441,
     442,   276,     0,   576,   182,     0,   198,     0,   553,   241,
     680,   168,   276,     0,   175,     0,     0,     0,     0,   662,
     663,   664,   665,   666,   667,   668,   669,   670,   671,   672,
     209,   210,   211,   214,   213,   216,   217,   219,   220,   221,
     222,   224,   225,   227,   229,   231,   654,   276,   656,   276,
     499,   108,     0,   118,   119,   120,   121,   122,   693,   110,
     419,   113,     0,     0,   141,   142,   101,   151,   693,   139,
     140,     0,    48,     0,     0,    58,    59,    69,    67,   313,
       0,   312,    56,    76,     0,    63,    66,     0,   693,    68,
     161,   284,   276,   419,     0,   276,   422,   410,   419,   413,
     419,   432,   287,   276,   294,   693,    36,     0,   276,   503,
     578,   276,   276,     0,   677,   674,   207,   276,   176,   174,
     276,   276,     0,   599,   103,   113,    97,   116,   112,   117,
     115,   114,     0,   145,     0,     0,     0,     0,   138,     0,
       0,   154,   163,   693,   153,     0,     0,    66,     0,    72,
       0,    54,    53,     0,    61,    60,    62,     0,     0,     0,
       0,     0,     0,   276,   693,   162,     0,   264,   276,   424,
     276,   276,   419,   427,     0,   402,     0,   405,   288,   297,
       0,    39,   276,     0,   199,     0,   196,   673,   554,     0,
     178,   179,   659,   111,   146,   143,   149,     0,   150,   147,
     148,   152,     0,   157,     0,     0,     0,     0,   276,     0,
      78,    77,     0,    73,     0,    50,    45,    46,    55,    66,
      57,    70,     0,    74,    75,     0,     0,   311,   276,   276,
     285,   276,   276,     0,   425,   276,   411,     0,   414,     0,
      14,   504,   197,   596,   177,   276,   144,   158,   155,     0,
     159,   160,   164,   305,    52,    49,     0,     0,    71,    47,
      64,   309,   266,   428,   419,   423,   276,   400,   406,   660,
     156,    65,    51,   426,   429,   403,     0,     0,     0
};

static const short yydefgoto[] =
{
    1246,    87,    88,    89,    90,   138,   309,   310,    91,   657,
     798,   311,   836,   963,    92,   699,   965,   938,    94,  1049,
    1185,  1131,  1115,  1186,  1225,  1123,  1051,  1052,  1053,  1127,
    1054,  1055,  1189,  1057,  1182,   782,   841,   783,   842,   784,
     843,   922,   844,   787,   845,   923,   920,   921,   822,   789,
     790,  1028,  1029,  1030,  1098,  1031,   791,   792,    95,   263,
     436,   264,   573,    96,  1036,  1166,  1167,  1038,  1112,  1134,
    1113,   178,   330,   179,   510,   180,   975,   181,   182,   405,
     548,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   542,   193,   544,   194,   543,   866,   195,   224,   483,
     319,   424,    98,   669,   804,   598,   599,   602,    99,   305,
     197,   261,   132,   133,   600,   601,   937,   828,   829,   830,
     831,   952,   101,   793,   847,  1041,   795,   796,   848,  1060,
     931,  1058,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   299,   425,   442,   115,   269,  1245,
     116,   808,  1207,   811,  1209,   672,  1144,   675,  1146,   117,
     940,   941,  1141,  1142,   118,   680,   584,   585,   852,   135,
     473,   127,   128,   120,   610,   611,   474,   475,   476,   701,
     616,   332,   816,   854,   457,   353,   225,   245,   226,   227,
     354,   971,  1153,   229,   653,   230,   231,   429,   232,   233,
     199,   410,   355,   351,   356,   477,   711,   357,   320,   630,
     358,   204,   359,   554,   806,  1067,   238,   570,   505,   409,
     206,   571,   707,   708,   572,   360,   207,   208,   361,   650,
     620,   362,   241,   363,   367,   714,   749,   917,   750,   212,
     752,   753,   754,   755,   756,   757,   758,   759,   760,   761,
     762,   763,   764,   765,   766,  1017,  1215,   767,  1158,   364,
     365,   214,   366,   266,   860,   301,   217,   123
};

static const short yypact[] =
{
    2483,-32768,-32768,   239,   167,  5520,-32768,  6818,-32768,   811,
    2346,  3733,  3733,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,   556,-32768,-32768,-32768,-32768,  2663,-32768,-32768,
  -32768,   155,-32768,-32768,    74,-32768,    99,-32768,-32768,-32768,
     198,  6410,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,  6410,  6410,   221,   165,-32768,   395,-32768,-32768,
     811,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   239,-32768,
    5802,-32768,   272,-32768,   221,-32768,-32768,-32768,  5520,-32768,
     283,-32768,  5802,-32768,   334,   380,   426,-32768,   428,   811,
     416,   424,   871,-32768,  3045,  5802,  5802,  5802,  5802,  5802,
    5802,-32768,  5823,  5823,   433,-32768,   457,   459,   475,   499,
     514,   430,  4962,-32768,   534,   544,-32768,   624,-32768,   823,
     962,-32768,-32768,-32768,   447,   107,   150,   115,   356,   626,
     504,   629,   610,   109,-32768,-32768,   303,-32768,  3839,   592,
     612,-32768,-32768,-32768,-32768,   675,  3537,-32768,  4962,-32768,
    3839,-32768,   520,  3839,-32768,-32768,   698,   730,-32768,   745,
  -32768,  3238,   624,   773,   593,   695,  3582,-32768,  3733,-32768,
  -32768,-32768,  6138,-32768,-32768,-32768,-32768,   788,   794,-32768,
  -32768,  3733,  3839,-32768,-32768,   749,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
     810,   826,-32768,-32768,  6682,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,   838,   762,-32768,-32768,   811,   811,    43,-32768,
     155,-32768,-32768,-32768,  5371,-32768,-32768,   322,  6002,   286,
     842,-32768,-32768,   851,-32768,-32768,   904,   912,   762,    99,
  -32768,   256,   921,-32768,   811,-32768,   397,-32768,-32768,-32768,
     935,  5802,  5802,  5802,  1272,   941,-32768,-32768,-32768,   639,
     942,   410,   949,   975,-32768,-32768,-32768,-32768,-32768,-32768,
    1018,  5371,-32768,-32768,  5802,  1037,  1038,  1044,  1046,  1052,
     430,   326,  5392,-32768,  4962,-32768,-32768,-32768,-32768,  1058,
  -32768,-32768,  4962,-32768,  4962,-32768,-32768,-32768,  5690,  5802,
  -32768,-32768,    73,  5802,  5802,  5802,  5802,  5802,  5802,  5802,
    5802,  5802,  5802,  5802,  5802,  5802,  5802,  5802,  5802,  5802,
    5802,  5802,  5802,  5802,  5802,  5802,  5802,  5802,  5802,  5802,
  -32768,-32768,-32768,-32768,  5802,   538,-32768,-32768,  2852,-32768,
  -32768,  1071,-32768,-32768,  1070,-32768,  5802,   515,  1057,  1061,
  -32768,-32768,-32768,-32768,-32768,   221,  6138,-32768,-32768,  3733,
    1952,  1075,-32768,-32768,  5802,    28,  3945,  5045,   762,-32768,
     482,  6818,   996,  1067,  1074,  1077,  1078,  1077,   811,  1080,
     467,-32768,-32768,  5701,  1066,   355,-32768,   370,-32768,   762,
  -32768,   672,-32768,-32768,-32768,  1003,  1073,  1079,-32768,   762,
     256,-32768,   811,  1076,-32768,  1081,   811,  1086,-32768,   469,
    1090,   495,  1090,  1094,-32768,-32768,   942,  1089,-32768,  5419,
  -32768,-32768,  1091,  1101,-32768,-32768,-32768,-32768,-32768,-32768,
    5802,-32768,  1099,-32768,  3945,-32768,-32768,  1104,  1102,-32768,
     599,-32768,    94,   811,   811,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   447,
     447,   107,   107,   150,   150,   150,   150,   115,   115,   356,
     626,   504,  5802,  5802,  5802,-32768,  5834,  5866,-32768,-32768,
    3431,-32768,  3688,  4133,-32768,-32768,  1107,   608,-32768,-32768,
     762,-32768,-32768,  1115,  1106,-32768,  1119,-32768,  2301,-32768,
  -32768,  4321,  4509,   942,-32768,  1122,-32768,-32768,  1126,  1128,
  -32768,  1129,  1131,-32768,   554,-32768,  1125,-32768,-32768,-32768,
  -32768,  1124,   768,   370,  5733,  1130,-32768,-32768,-32768,-32768,
    1132,-32768,-32768,   369,-32768,-32768,  5802,   320,   762,-32768,
  -32768,  1134,-32768,-32768,  1153,  6818,-32768,-32768,-32768,-32768,
    1135,-32768,  1272,-32768,  5440,-32768,-32768,  1140,-32768,-32768,
    1139,-32768,-32768,  1138,-32768,  5802,-32768,-32768,-32768,-32768,
     629,   742,   610,  5371,-32768,  5371,-32768,-32768,-32768,  4554,
    4962,  5802,-32768,  5922,-32768,  5802,-32768,  1256,-32768,-32768,
  -32768,  4660,  4705,-32768,  4811,-32768,-32768,  1142,-32768,-32768,
  -32768,-32768,-32768,  1149,-32768,-32768,  1150,-32768,   811,-32768,
     811,-32768,-32768,   156,  1146,-32768,  1145,    69,-32768,  1100,
  -32768,  2401,-32768,-32768,  1151,-32768,  1154,-32768,   418,  1256,
  -32768,   811,   589,  4962,  1162,  5440,-32768,  1160,-32768,  1163,
    1158,  1164,-32768,  5802,  5922,-32768,-32768,-32768,-32768,  1175,
    1176,-32768,-32768,   642,  5371,  5802,  5802,  5802,  5802,  5802,
    5802,  5823,  5823,  1161,   671,   674,  1023,  1250,   684,   850,
     790,   847,   621,   855,  1159,  1148,  1165,  1133,   192,  1179,
  -32768,    91,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   706,   707,
  -32768,  1019,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,  1256,-32768,  1116,-32768,-32768,  1117,-32768,
    1118,-32768,-32768,-32768,  1120,-32768,  2065,  1127,  1256,-32768,
  -32768,  4856,-32768,-32768,-32768,-32768,  6546,-32768,-32768,  6546,
  -32768,-32768,-32768,-32768,  5802,   896,  1191,-32768,-32768,-32768,
    1192,   672,  1201,-32768,  2401,  5802,   811,-32768,-32768,  2401,
     575,-32768,  1198,  2401,  1137,-32768,  1256,-32768,  1196,-32768,
  -32768,-32768,  1256,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
     155,  1200,-32768,   525,-32768,   370,-32768,-32768,  1160,  4911,
    1202,   811,-32768,-32768,   729,  1204,  5802,  1140,  1140,  1207,
     732,  1211,   766,   791,   792,   807,   818,   827,   858,   886,
    5802,  5722,  5802,   887,   908,    79,  5802,  5802,  5802,  5802,
    5802,  5802,  5802,  5802,  5802,  5802,  5802,  5802,  5802,  5802,
    5802,  5802,  5802,  5802,  5802,  5802,  5802,  5802,  5802,  5802,
    5802,  5802,  5802,  5802,-32768,  5802,-32768,  1205,  1214,-32768,
    1048,  1206,   278,    71,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,   543,-32768,-32768,-32768,-32768,  2401,   658,-32768,   221,
    5205,-32768,  6546,  5205,  6546,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,   963,  1213,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,  1256,-32768,    99,-32768,   169,-32768,-32768,
  -32768,  5754,  1221,-32768,-32768,   567,-32768,  1224,   942,-32768,
  -32768,   909,  5419,  1222,   947,   948,   247,   811,   811,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
     956,   986,   988,   857,   903,   477,   946,    75,   445,   566,
     597,   388,   746,    81,   521,   137,   629,  5802,   610,  5922,
  -32768,   520,  1019,-32768,-32768,-32768,-32768,-32768,   767,-32768,
    6274,   278,   113,   113,-32768,-32768,-32768,   103,   779,-32768,
  -32768,    89,-32768,   335,   108,-32768,-32768,-32768,-32768,-32768,
    1225,-32768,    -1,-32768,  1022,-32768,   733,  1223,    99,-32768,
      89,-32768,-32768,-32768,  1227,   548,-32768,-32768,  5205,-32768,
    5205,-32768,-32768,  2070,-32768,   824,-32768,  1166,   689,-32768,
  -32768,-32768,  5802,   811,-32768,  1062,   991,-32768,  1010,  1013,
  -32768,-32768,   973,-32768,-32768,   278,-32768,-32768,-32768,-32768,
  -32768,-32768,   696,   103,   444,   811,   811,   113,-32768,    89,
      89,-32768,   244,   878,-32768,  1228,   985,   780,   108,   358,
      51,-32768,-32768,   335,-32768,-32768,-32768,   335,   -10,   811,
     811,  1231,   335,-32768,    99,  1234,   925,-32768,   762,-32768,
  -32768,  1239,-32768,  1240,  1229,-32768,  1241,-32768,-32768,-32768,
    1172,-32768,   498,  1245,-32768,   344,-32768,-32768,-32768,  1249,
    1027,  1029,-32768,-32768,-32768,-32768,   103,  1248,   520,-32768,
  -32768,   103,   829,   244,   648,   811,   811,    89,-32768,  1082,
  -32768,-32768,   335,-32768,   780,  1237,-32768,   358,-32768,   358,
  -32768,-32768,  1251,-32768,-32768,  1082,  1254,-32768,-32768,-32768,
  -32768,  5802,   548,  1262,-32768,-32768,-32768,  1261,-32768,  1263,
  -32768,-32768,-32768,-32768,  1042,  5802,-32768,-32768,-32768,  1257,
  -32768,-32768,   244,-32768,-32768,-32768,  1260,    51,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,  5802,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,  1287,  1288,-32768
};

static const short yypgoto[] =
{
  -32768,-32768,  1208,-32768,-32768,-32768,-32768,  -430,  -116,-32768,
  -32768,   977,-32768,-32768,-32768,-32768,-32768,    76,-32768,-32768,
     361,-32768,-32768,    62,    98,-32768,   171,-32768,-32768,-32768,
    -695,-32768,  -874,-32768,-32768,  -679,  -685,-32768,-32768,-32768,
    -596,-32768,  -591,-32768,  -571,-32768,   275,-32768,-32768,   609,
    -659,-32768,   204,   276,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,  -889,   144,-32768, -1012,-32768,
     262,-32768,-32768,  -634,   443,  1109,-32768,-32768,  -624,-32768,
  -32768,   -88,  -374,  -348,  -342,  -351,  -391,  -376,  -384,  -539,
    -526,-32768,  -622,-32768,  -117,-32768,-32768,  1406,  1527,  -595,
    -370,    23,-32768,-32768,-32768,   505,    -3,-32768,-32768,-32768,
     313,  -265,-32768,-32768,-32768,-32768,  -905,  -751,-32768,-32768,
     497,-32768,-32768,-32768,  -566,-32768,-32768,-32768,  -558,-32768,
  -32768,-32768,-32768,-32768,   529,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,    21,   751,-32768,   927,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1121,
    -771,  -859,-32768,   145,-32768,-32768,   666,   670,   496,     1,
    -411,  1226,-32768,    17,-32768,-32768,  -576,-32768,-32768,-32768,
     649,   -98,  1053,-32768,  -448,  -165,  1339,-32768,  1114,-32768,
     734,-32768,-32768,-32768,-32768,  -163,-32768,-32768,-32768,-32768,
  -32768,    93,  1203,  1009,  1323,-32768,-32768,  1386,-32768,-32768,
    -322,-32768,   915,   202,  -547,  -688,-32768,   859,-32768,-32768,
     954,  -185,   659,   507,  -494,    24,-32768,   149,    50,-32768,
  -32768,   131,-32768,   136,-32768,-32768,   653,-32768,   349,  -605,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1476,
  -32768,-32768,  1648,  -272,   511,     0,   532,-32768
};


#define	YYLAST		7011


static const short yytable[] =
{
     121,   119,   131,   640,   290,   121,   539,   593,   487,   121,
     216,   216,   216,   529,   530,   541,   684,  1191,   642,   736,
     129,   114,   540,    97,   566,   318,   134,   704,   137,   738,
     502,   748,   300,   471,  1037,   239,   239,   465,   943,   609,
     846,   531,   532,   411,   537,   538,   467,   426,   751,   533,
     534,   535,   536,   565,  1075,  1121,  1042,  1056,   418,   649,
     209,   785,   448,   422,   564,   423,   786,   334,   335,   336,
     337,   338,   339,   951,   471,  1118,    93,   662,   955,   437,
     736,  1066,   959,   591,  1066,  1044,   788,   121,   119,   265,
     738,   794,   748,   262,   819,  1032,  -640,  1172,  1173,   797,
    -640,   513,  -648,   200,   924,  1033,  -648,   987,   114,   751,
      97,   820,  -606,  1109,   746,   404,  -606,   265,   514,   934,
     121,   637,   268,  1110,   988,   389,   390,   747,   809,  1104,
     629,  1105,  1118,   268,   268,   395,   396,  1032,   121,   387,
     388,   210,  1044,  1102,  1103,   293,   211,  1033,  1106,   121,
     401,   962,   391,   392,   216,   314,  1136,   966,  -652,   313,
     240,   240,  -652,    93,   502,  1222,   402,   393,   394,  1117,
    1119,  1068,   216,  1070,   471,   746,   398,   846,   697,  -277,
    1192,   260,   453,   846,  1122,  1061,   443,   785,   747,   503,
       3,   130,   786,  -419,   682,  -419,   696,   506,   216,   507,
     389,   390,   785,  -419,   209,   467,   216,   786,   216,  1066,
     216,  1066,   788,   216,  -419,  -419,  -419,   794,  1171,  -419,
    -419,   216,   267,   553,   686,   797,   216,   788,   216,    80,
      81,   139,   794,   914,    84,    85,   694,    80,  1047,  -276,
     797,   216,   216,   492,  1184,   239,  1187,   333,   209,   915,
     239,   666,   239,   284,   855,  1069,   209,    80,  1034,  1035,
     209,   942,   743,   209,   944,   239,   562,   422,   404,   745,
    1174,   569,  1175,     3,  1089,    80,  1111,   744,  1076,   739,
    -277,   413,   466,   121,   440,   210,   121,   121,   121,  1176,
     211,   406,   209,   302,    80,  1047,   526,   527,   528,    80,
    1034,  1035,   742,   412,   846,   740,   414,   316,   121,   464,
    -276,   741,   453,   100,   121,  1021,   455,   318,   100,   452,
       3,   403,  1149,   743,   404,   471,   246,   247,   248,   210,
     745,   693,   500,   501,   211,   431,   318,   210,   744,   569,
     739,   210,   211,   404,   210,   695,   211,   451,  1116,   211,
     124,   125,   126,  1187,   216,  -419,  -419,  -419,   321,  1043,
    -419,  -419,   216,   742,   216,   404,   740,  1023,  1024,  1044,
     240,  1212,   741,   210,  1016,   240,  1079,   240,   211,  -276,
    1145,   453,  1147,   318,  1128,   736,  1129,   265,   569,  1018,
     240,   684,   692,   626,  -276,   738,   594,   748,  1025,  1026,
     100,   625,   471,  1130,   322,   855,   569,   665,   216,  -645,
     395,   396,  1027,  -645,   751,   270,   271,   272,   273,   274,
     275,   276,   277,   839,   279,   391,   392,   282,   403,   216,
     216,   404,  1190,   100,   326,   488,   216,  1196,   121,   574,
     393,   394,   327,   298,   945,   303,   304,   306,   121,   561,
     323,   312,   324,   239,   239,   953,   596,   344,   209,   121,
     561,   121,   452,   286,   287,   288,  -641,   298,  1032,   121,
    -641,  1165,   121,   345,   340,   346,   121,   318,  1033,   443,
     746,   384,   385,   386,   665,   722,   314,  1226,   404,   318,
     404,   347,   488,   747,   619,   389,   390,   665,  -637,  1168,
    -419,   551,  -637,  -419,   216,  -419,  -419,  -419,  -419,   387,
     388,  -419,  -419,   121,   121,   348,   404,  1045,  1046,  1013,
     621,    80,  1047,  -471,   453,  1048,  1003,  1004,  1015,   349,
     710,   350,   122,   420,   298,  1014,   404,   122,   856,   210,
     488,   140,  -650,   398,   211,   719,  -650,   720,  1042,  -276,
     397,   453,   216,   216,  1005,  1006,  -698,  1011,  1012,     3,
     121,   654,  1007,  1008,  1009,  1010,  -702,  1043,   216,  1168,
    1140,   216,   216,   434,   677,   678,   561,  1044,   240,   240,
     546,   547,     3,  -419,  -419,  -419,   850,  -642,  -419,  -419,
    -704,  -642,  1081,  1082,   561,  1083,   100,   441,   956,   444,
     446,   825,   209,   826,    80,    81,   139,   298,   121,    84,
      85,   420,   454,  -276,   404,   453,   389,   390,  -643,   122,
     635,   100,  -643,     3,   636,   314,   871,   312,   743,   404,
      80,  1034,  1035,   652,   176,   745,   702,   872,   873,   874,
     875,   876,   877,   744,  -704,   739,  -699,   389,   390,   216,
     216,  1039,   122,   768,   298,   397,  1085,   485,   904,   905,
     404,   216,   216,   404,   216,   298,   400,   869,   742,   399,
     315,   740,  1032,   906,   907,  1218,  1062,   741,   121,  1063,
     121,   325,  1033,   210,    80,    81,   139,   407,   211,    84,
      85,   216,  -603,  1077,   408,  -602,  -603,   318,   121,  -602,
     455,   121,   121,   216,   593,  -626,     3,  -525,   318,  -626,
     413,    80,    81,   139,   768,   453,    84,    85,   969,   853,
    -701,  1164,  1104,     3,  1105,  1045,  1046,  -601,   404,    80,
    1047,  -601,   918,  1048,    80,    81,   139,   850,   282,    84,
      85,  1106,  -704,  -704,   198,   228,   228,  -704,  -704,   979,
     404,   100,   415,   404,   977,   -46,  1096,   981,   579,  1128,
     582,  1129,   588,   404,   718,   589,  1108,  -646,   454,   416,
     595,  -646,   100,   471,   100,    80,    81,   139,  1130,   606,
      84,    85,   312,   391,   392,   265,  1133,  -620,  1095,   615,
     421,  -620,  -419,   682,  -419,  -700,     3,   265,   393,   394,
    1107,   216,  -419,  1150,   441,  1183,  1128,   427,  1129,  1000,
    1001,  1002,  -625,  -624,   428,   122,  -625,  -624,   445,   447,
     449,   121,   900,   901,   216,  1130,   121,   939,  -623,   216,
     939,  1233,  -623,   216,    80,  1034,  1035,   433,   176,  -622,
     122,  1178,   265,  -622,   432,  1063,   315,   368,  -621,   369,
     435,  -419,  -621,   121,  1217,  1174,   439,  1175,    80,    81,
     139,   121,  1198,    84,    85,   597,  1244,   458,  -419,   460,
     853,   370,   371,   100,  1176,    80,    81,   139,  -635,  -618,
      84,    85,  -635,  -618,   897,   898,   899,   667,   198,   328,
     441,   384,   385,   386,  1086,   294,   265,   902,   903,  1177,
     155,   156,   157,   158,   159,   160,   595,  -619,  -615,   908,
     909,  -619,  -615,   689,   690,   691,   946,   678,   161,   162,
     163,   312,   462,  1040,  -634,   205,   237,   237,  -634,  -616,
    -607,  1059,   198,  -616,  -607,   463,   216,   384,   385,   386,
     198,   441,   164,  1199,   198,   468,  1063,   198,    80,    81,
     139,   716,   717,    84,    85,   228,   298,   478,   298,   484,
     228,   939,   228,   939,   939,   939,   486,  -638,  -610,   635,
     122,  -638,  -610,  1088,   489,   228,   198,  -630,   387,   388,
     586,  -630,   805,  1072,  1073,   373,   173,   121,   121,  1159,
     812,   122,   814,   122,   404,  1162,   454,    80,    81,   139,
     490,   315,    84,    85,   612,   833,   834,  -631,   617,  -632,
     838,  -631,  -628,  -632,   615,   851,  -628,  1180,  1181,   768,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
    1100,  -611,  1040,  1040,  -609,  -611,   290,   298,  -609,   280,
     281,  1114,   491,  1059,  1059,   638,   639,   881,  -613,   882,
    -614,  -419,  -613,  1099,  -614,   494,   495,    80,   295,   296,
    1114,   176,   496,  -612,   497,   121,  1143,  -612,  -419,   205,
     498,   883,   884,   216,  1124,  1125,  1126,   504,   121,   574,
     555,   556,   558,   121,   318,   559,   563,   576,   577,   939,
     592,   939,   122,   578,   604,  1152,  -276,   581,  1239,   587,
     605,   613,   614,   607,  1040,   121,   121,  1040,   618,  1114,
    1114,   404,   622,   205,   623,   633,   627,   936,  1059,   318,
    1059,   205,   628,  1059,   631,   205,   634,  1059,   205,   121,
     121,   651,  1059,   656,   100,  1200,   237,   419,   121,   655,
     315,   237,   198,   237,   658,   668,   671,   673,   679,   674,
     676,   681,   121,   688,   687,   698,   237,   205,   700,   624,
     703,   712,   713,   228,   228,   968,   851,   803,   595,   807,
     810,   817,   818,   771,  1040,   121,   121,  1114,   835,   837,
     857,   859,  1059,   862,   861,   880,   863,   911,   910,   913,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     867,   868,   121,  1143,   916,   912,   919,   925,   926,   927,
     586,   930,   586,   201,   234,   234,   947,   948,   933,   950,
     958,   964,   974,   832,   967,   980,  1019,  1059,   960,   978,
     840,   278,  1020,   617,   122,   283,   982,   285,   176,   289,
    1074,  1080,  1084,  1087,   291,  1139,  1022,  1132,  1120,  1206,
    1179,   317,  1064,  1195,  1157,  1177,   307,  1151,   308,  1071,
    1202,  1208,  1205,  1210,   317,   317,   317,   317,   317,   317,
    1211,   342,   343,   886,  1214,  1216,  1224,  1227,  1228,  1230,
    1235,  1237,   508,  1238,  1240,  1241,   198,  1247,  1248,  1242,
    -256,   470,  1050,  1229,  1188,   259,   294,  1094,   823,  1163,
     372,   155,   156,   157,   158,   159,   160,  1101,   887,   888,
     889,   890,   891,   892,   893,   894,   895,   896,  1219,   161,
     162,   163,  1135,   205,   985,   932,   949,   957,   670,   771,
     772,   773,   774,   202,   235,   235,   775,   776,   777,   778,
     779,   780,   781,   164,   237,   237,   815,  1234,   813,   970,
     849,   244,   456,   122,   292,   430,   832,   201,   954,   499,
    1213,   832,   552,   632,   858,   832,   973,   865,  1093,   972,
       0,     0,     0,     0,     0,  1137,     0,     0,   100,     0,
       0,     0,     0,     0,     0,   122,     0,   173,   438,     0,
       0,   851,     0,   976,  1154,     0,   203,   236,   236,     0,
     441,   201,     0,  1160,  1161,     0,     0,     0,     0,   201,
       0,     0,     0,   201,     0,     0,   201,     0,     0,     0,
       0,     0,     0,   459,   234,     0,   461,     0,     0,   234,
       0,   234,     0,     0,   469,     0,     0,   472,     0,     0,
       0,     0,     0,     0,   234,   201,  1197,     0,     0,     0,
       0,   100,     0,  1201,  1203,     0,     0,     0,    80,   295,
     296,     0,   176,     0,     0,   851,     0,   205,   832,     0,
       0,     0,     0,     0,     0,     0,     0,   202,     0,     0,
       0,     0,     0,     0,     0,     0,   213,   242,   242,     0,
       0,  1223,     0,   317,   317,   317,   317,   317,   317,   317,
     317,   317,   317,   317,   317,   317,   317,   317,   317,     0,
       0,  1231,  1232,     0,     0,   100,     0,     0,  1236,  1090,
    1091,   202,     0,     0,     0,     0,     0,     0,     0,   202,
       0,     0,     0,   202,     0,     0,   202,   196,     0,     0,
     203,     0,     0,   317,   235,     0,   560,     0,     0,   235,
       0,   235,     0,     0,     0,     0,   472,     0,     0,     0,
       0,   575,   317,     0,   235,   202,   580,     0,   583,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   203,   603,     0,     0,     0,   608,
       0,     0,   203,     0,     0,     0,   203,   122,   317,   203,
       0,     0,     0,     0,     0,   832,     0,   236,     0,   317,
     122,   201,   236,     0,   236,  1156,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   236,   203,     0,
     213,     0,   234,   234,     0,     0,     0,  1169,  1170,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   317,     0,   317,     0,   644,   646,   297,   215,   243,
     243,  1193,  1194,     0,     0,     0,     0,     0,     0,     0,
     122,     0,     0,     0,   213,     0,     0,     0,     0,   329,
       0,   331,   213,     0,   122,     0,   213,     0,     0,   213,
       0,     0,     0,     0,     0,     0,     0,   242,     0,     0,
       0,     0,   242,   317,   242,     0,     0,  1220,  1221,     0,
       0,     0,     0,   683,     0,   317,     0,   242,   213,     0,
       0,     0,     0,     0,     0,   196,     0,     0,   472,     0,
       0,   202,     0,   196,   122,     0,     0,   196,     0,     0,
     196,     0,     0,     0,     0,     0,     0,   709,   417,     0,
     493,     0,   235,   235,     0,   201,     0,     0,     0,     0,
       0,     0,   737,     0,     0,     0,     0,     0,     0,   196,
       0,     0,     0,     0,   511,   575,     0,   770,     0,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
       0,     0,     0,     0,   203,     0,     0,     0,     0,     0,
       0,     0,   215,     0,     0,     0,     0,     0,     0,   821,
     545,     0,     0,     0,     0,   236,   236,     0,     0,     0,
       0,   450,     0,   737,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   317,   317,   317,   317,   317,   317,
     878,   879,     0,     0,     0,     0,   215,     0,   479,   480,
     481,   482,     0,     0,   215,     0,     0,   885,   215,     0,
       0,   215,     0,     0,     0,     0,     0,     0,   450,   243,
       0,     0,     0,     0,   243,   202,   243,     0,     0,   450,
       0,     0,     0,     0,   213,     0,     0,     0,     0,   243,
     215,     0,     0,     0,     0,     0,   512,     0,     0,     0,
       0,     0,     0,     0,     0,   242,   242,     0,     0,     0,
       0,     0,   928,   929,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   317,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   317,   196,     0,     0,   203,     0,
       0,     0,     0,   557,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   218,     0,     0,   961,     0,   142,   143,
     144,     0,     0,   219,   147,   148,   149,   150,   151,   152,
     220,  -498,  -498,     0,     0,   317,   221,  -498,     0,     0,
       0,   155,   156,   157,   158,   159,   160,     0,     0,     0,
       0,     0,     0,     0,  -276,  -276,     0,     0,     0,   161,
     162,   163,     0,     0,     0,     0,   317,   317,   317,   317,
     317,   317,   317,   317,   317,   317,   317,   317,   317,   317,
     317,   317,   317,   164,   317,     0,     0,     0,   213,     0,
     706,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   715,     0,     0,     0,     0,     0,  -498,   166,   167,
     168,   169,   170,   171,     0,     0,   215,     0,     0,     0,
    1065,     0,   172,     0,     0,     0,     0,   173,     0,     0,
     641,     0,     0,     0,     0,     0,     0,   243,   243,   196,
       0,     0,     0,     0,     0,     0,     0,     0,  1078,   824,
    1148,   317,     0,     0,   294,     0,   825,   827,   826,   155,
     156,   157,   158,   159,   160,     0,     0,     0,     0,     0,
       0,   706,     0,     0,     0,     0,     0,   161,   162,   163,
       0,     0,     0,     0,     0,     0,     0,     0,   737,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    80,   174,
     175,   164,   176,   222,   223,     0,     0,     0,     0,   482,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     450,     0,   450,     0,     0,     0,     0,     0,   723,     0,
       0,     0,   769,     0,  1138,   173,     0,    23,    24,    25,
      26,     0,    27,     0,     0,     0,     0,    32,    33,     0,
     215,    36,    37,     0,    39,    40,    41,    42,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    54,
      55,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     827,     0,     0,     0,     0,   827,     0,     0,     0,   827,
     864,     0,     0,     0,    79,     0,     0,     0,     0,     0,
       0,   870,     0,     0,    83,     0,    80,   174,   175,     0,
     176,    84,    85,  1204,     0,   706,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   983,   511,     0,     0,
       0,     0,   989,   990,   991,   992,   993,   994,   995,   996,
     997,   998,   999,     0,     0,     0,     0,   142,   143,   144,
     317,   145,   146,   147,   148,   149,   150,   151,   152,   220,
    -553,   659,     0,     0,   317,   352,     0,     0,     0,     0,
     155,   156,   157,   158,   159,   160,     0,     0,     0,     0,
       0,     0,   827,     0,     0,   317,     0,   141,   161,   162,
     163,     0,   142,   143,   144,  1243,   145,   146,   147,   148,
     149,   150,   151,   152,   153,  -553,     0,     0,     0,     0,
     154,     0,   164,     0,     0,   155,   156,   157,   158,   159,
     160,     0,     0,     0,     0,     0,     0,     0,  -276,  -276,
       0,     0,     0,   161,   162,   163,     0,   166,   167,   168,
     169,   170,   171,     0,     0,     0,     0,     0,     0,   986,
       0,   172,     0,     0,     0,     0,   173,   164,     0,     0,
     824,     0,     0,     0,     0,   294,     0,   825,     0,   826,
     155,   156,   157,   158,   159,   160,     0,     0,     0,     0,
       0,   165,   166,   167,   168,   169,   170,   171,   161,   162,
     163,     0,     0,     0,     0,     0,   172,     0,     0,     0,
       0,   173,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   164,     0,     0,     0,     0,     0,     0,   827,
       0,     0,     0,    -1,     1,     0,     0,    80,   174,   175,
       0,   176,   177,    85,     0,     0,     0,     0,   482,     0,
       0,     2,     0,     0,     0,     0,     0,  -276,     0,     0,
       0,     0,     0,     0,     0,     0,   173,     3,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     4,     0,     5,
       0,     0,    80,   174,   175,     0,   176,   177,    85,     0,
       0,     0,     0,     0,  1092,     0,     0,     0,     0,     0,
       0,  -419,  -419,  -419,     0,     6,     0,     0,     0,     0,
       7,     8,     9,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    10,    11,    12,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    80,   174,   175,
       0,   176,    84,    85,    13,    14,    15,    16,     0,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,  1155,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    -2,     1,     0,     0,     0,     0,    80,
      81,    82,    83,     0,    84,    85,    86,     0,     0,     0,
       0,     2,     0,     0,     0,     0,     0,  -276,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     3,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     4,     0,     5,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -419,  -419,  -419,     0,     6,     0,     0,     0,     0,
       7,     8,     9,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    10,    11,    12,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    13,    14,    15,    16,     0,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,     0,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,     0,     0,     0,     0,     0,     0,    80,
      81,    82,    83,   141,    84,    85,    86,     0,   142,   143,
     144,     0,   145,   146,   147,   148,   149,   150,   151,   152,
     153,  -553,   549,     0,     0,     0,   154,     0,     0,     0,
       0,   155,   156,   157,   158,   159,   160,     0,     0,     0,
       0,     0,     0,     0,  -276,  -276,     4,     0,     5,   161,
     162,   163,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -419,  -419,  -419,   164,     6,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   166,   167,
     168,   169,   170,   171,     0,     0,     0,     0,     0,     0,
       0,     0,   172,    13,    14,    15,    16,   173,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,     0,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,     0,     0,     0,     0,     0,     0,    80,   174,
     550,    83,   176,   177,    85,    86,   141,     0,     0,     0,
       0,   142,   143,   144,     0,   145,   146,   147,   148,   149,
     150,   151,   152,   153,  -171,     0,     0,     0,     0,   154,
       0,     0,     0,     0,   155,   156,   157,   158,   159,   160,
       0,     0,     0,     0,     0,     0,     0,  -276,  -276,  -276,
       0,     0,   161,   162,   163,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -276,  -276,  -276,   164,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   166,   167,   168,   169,   170,   171,     0,     0,     0,
       0,     0,     0,     0,     0,   172,  -276,  -276,  -276,  -276,
     173,  -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,
    -276,     0,  -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,
    -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,
    -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,
    -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,
    -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,
    -276,  -276,  -276,  -276,  -276,     0,     0,     0,     0,     0,
       0,    80,   174,   175,  -276,   176,   177,    85,  -276,   218,
       0,     0,     0,     0,   142,   143,   144,     0,     0,   219,
     147,   148,   149,   150,   151,   152,   220,  -171,  -557,     0,
       0,     0,   221,     0,     0,     0,     0,   155,   156,   157,
     158,   159,   160,     0,     0,     0,     0,     0,     0,     0,
    -276,  -276,  -276,     0,     0,   161,   162,   163,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -276,  -276,  -276,   164,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   166,   167,   168,   169,   170,   171,
       0,     0,     0,     0,     0,     0,     0,     0,   172,  -276,
    -276,  -276,  -276,   173,  -276,  -276,  -276,  -276,  -276,  -276,
    -276,  -276,  -276,  -276,     0,  -276,  -276,  -276,  -276,  -276,
    -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,
    -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,
    -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,
    -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,
    -276,  -276,  -276,  -276,  -276,  -276,  -276,  -276,     0,     0,
       0,     0,     0,     0,    80,   174,   175,  -276,   176,   222,
     223,  -276,  -169,     0,     0,     0,     0,  -169,  -169,  -169,
       0,  -169,  -169,  -169,  -169,  -169,  -169,  -169,  -169,  -169,
    -169,  -169,  -169,  -702,  -169,  -169,     0,  -169,     0,  -169,
    -169,  -169,  -169,  -169,  -169,  -169,  -169,  -169,  -169,  -169,
    -169,  -169,  -169,  -169,  -169,     0,  -169,     0,  -169,  -169,
    -169,  -169,  -169,  -169,  -169,  -169,  -169,  -169,  -169,  -169,
    -169,  -169,  -169,  -169,  -169,  -169,  -169,  -169,  -169,     0,
       0,     0,  -169,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -169,  -169,  -169,
    -169,  -169,  -169,     0,     0,     0,     0,     0,   141,     0,
       0,  -169,     0,   142,   143,   144,  -169,   145,   146,   147,
     148,   149,   150,   151,   152,   153,  -553,     0,     0,     0,
       0,   154,     0,     0,     0,     0,   155,   156,   157,   158,
     159,   160,     0,     0,     0,     0,     0,     0,     0,  -276,
    -276,     0,     0,   218,   161,   162,   163,     0,   142,   143,
     144,     0,     0,   219,   147,   148,   149,   150,   151,   152,
     220,  -553,  -557,     0,     0,     0,   221,     0,   164,     0,
       0,   155,   156,   157,   158,   159,   160,  -169,  -169,  -169,
       0,  -169,  -169,  -169,  -276,  -276,     0,     0,     0,   161,
     162,   163,  -526,   166,   167,   168,   169,   170,   171,     0,
       0,     0,     0,     0,     0,     0,     0,   172,     0,     0,
       0,     0,   173,   164,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -494,   166,   167,
     168,   169,   170,   171,     0,     0,     0,     0,     0,   141,
       0,     0,   172,     0,   142,   143,   144,   173,   145,   146,
     147,   148,   149,   150,   151,   152,   153,  -553,   647,     0,
       0,     0,   154,     0,     0,     0,     0,   155,   156,   157,
     158,   159,   160,    80,   174,   175,     0,   176,   177,    85,
    -276,  -276,     0,     0,   218,   161,   162,   163,     0,   142,
     143,   144,     0,     0,   219,   147,   148,   149,   150,   151,
     152,   220,  -553,  -557,     0,     0,     0,   221,     0,   164,
       0,     0,   155,   156,   157,   158,   159,   160,    80,   174,
     175,     0,   176,   222,   223,  -276,  -276,     0,     0,     0,
     161,   162,   163,     0,   166,   167,   168,   169,   170,   171,
       0,     0,     0,     0,     0,     0,     0,     0,   172,     0,
       0,     0,     0,   173,   164,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   166,
     167,   168,   169,   170,   171,     0,     0,     0,     0,     0,
     141,     0,     0,   172,     0,   142,   143,   144,   173,   145,
     146,   147,   148,   149,   150,   151,   152,   153,  -553,     0,
       0,     0,     0,   154,     0,     0,     0,     0,   155,   156,
     157,   158,   159,   160,    80,   174,   175,     0,   176,   177,
      85,  -276,  -276,     0,     0,     0,   161,   162,   163,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     164,     0,     0,     0,     0,     0,     0,     0,     0,    80,
     174,   175,     0,   176,   222,   223,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   166,   167,   168,   169,   170,
     171,     0,     0,     0,     0,     0,     0,     0,     0,   172,
       0,   142,   143,   144,   173,   145,   146,   147,   148,   149,
     150,   151,   152,   220,  -553,   567,     0,     0,     0,   352,
       0,     0,     0,     0,   155,   156,   157,   158,   159,   160,
       0,     0,     0,     0,     0,     0,     0,  -276,  -276,     4,
       0,     5,   161,   162,   163,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   164,     6,     0,     0,
       0,     0,     0,     0,     0,    80,   174,   175,     0,   176,
     177,    85,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   166,   167,   168,   169,   170,   171,     0,     0,     0,
       0,     0,     0,     0,     0,   568,    13,    14,    15,    16,
     173,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,     0,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,     0,     0,     0,     0,     0,
       0,    80,   174,   550,    83,   176,   177,    85,    86,   142,
     143,   144,     0,   145,   146,   147,   148,   149,   150,   151,
     152,   220,  -553,   648,     0,     0,     0,   352,     0,     0,
       0,     0,   155,   156,   157,   158,   159,   160,     0,     0,
       0,     0,     0,     0,     0,  -276,  -276,     4,     0,     5,
     161,   162,   163,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   164,     6,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   166,
     167,   168,   169,   170,   171,     0,     0,     0,     0,     0,
       0,     0,     0,   172,    13,    14,    15,    16,   173,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,     0,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,     0,     0,     0,     0,     0,     0,    80,
     174,   550,    83,   176,   177,    85,    86,   142,   143,   144,
       0,   145,   146,   147,   148,   149,   150,   151,   152,   220,
    -553,   660,     0,     0,     0,   352,     0,     0,     0,     0,
     155,   156,   157,   158,   159,   160,     0,     0,     0,     0,
       0,     0,     0,  -276,  -276,     4,     0,     5,   161,   162,
     163,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   164,     6,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   166,   167,   168,
     169,   170,   171,     0,     0,     0,     0,     0,     0,     0,
       0,   661,    13,    14,    15,    16,   173,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,     0,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,     0,     0,     0,     0,     0,     0,    80,   174,   550,
      83,   176,   177,    85,    86,   142,   143,   144,     0,   145,
     146,   147,   148,   149,   150,   151,   152,   220,  -553,   663,
       0,     0,     0,   352,     0,     0,     0,     0,   155,   156,
     157,   158,   159,   160,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   161,   162,   163,     0,
     142,   143,   144,     0,   145,   146,   147,   148,   149,   150,
     151,   152,   220,  -553,   721,     0,     0,     0,   352,     0,
     164,     0,     0,   155,   156,   157,   158,   159,   160,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   161,   162,   163,     0,   166,   167,   168,   169,   170,
     171,     0,     0,     0,     0,     0,     0,     0,     0,   664,
       0,     0,     0,     0,   173,   164,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     166,   167,   168,   169,   170,   171,     0,     0,     0,     0,
       0,     0,     0,     0,   172,     0,   142,   143,   144,   173,
     145,   146,   147,   148,   149,   150,   151,   152,   220,  -553,
     799,     0,     0,     0,   352,     0,     0,     0,     0,   155,
     156,   157,   158,   159,   160,    80,   174,   175,     0,   176,
     177,    85,     0,     0,     0,     0,     0,   161,   162,   163,
       0,   142,   143,   144,     0,   145,   146,   147,   148,   149,
     150,   151,   152,   220,  -553,   800,     0,     0,     0,   352,
       0,   164,     0,     0,   155,   156,   157,   158,   159,   160,
      80,   174,   175,     0,   176,   177,    85,     0,     0,     0,
       0,     0,   161,   162,   163,     0,   166,   167,   168,   169,
     170,   171,     0,     0,     0,     0,     0,     0,     0,     0,
     172,     0,     0,     0,     0,   173,   164,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   166,   167,   168,   169,   170,   171,     0,     0,     0,
       0,     0,     0,     0,     0,   801,     0,   142,   143,   144,
     173,   145,   146,   147,   148,   149,   150,   151,   152,   220,
    -553,   802,     0,     0,     0,   352,     0,     0,     0,     0,
     155,   156,   157,   158,   159,   160,    80,   174,   175,     0,
     176,   177,    85,     0,     0,     0,     0,     0,   161,   162,
     163,     0,   142,   143,   144,     0,   145,   146,   147,   148,
     149,   150,   151,   152,   220,  -553,   935,     0,     0,     0,
     352,     0,   164,     0,     0,   155,   156,   157,   158,   159,
     160,    80,   174,   175,     0,   176,   177,    85,     0,     0,
       0,     0,     0,   161,   162,   163,     0,   166,   167,   168,
     169,   170,   171,     0,     0,     0,     0,     0,     0,     0,
       0,   172,     0,     0,     0,     0,   173,   164,     0,     0,
     705,  -696,     0,     0,     0,   294,     0,     0,     0,     0,
     155,   156,   157,   158,   159,   160,     0,     0,     0,     0,
       0,     0,   166,   167,   168,   169,   170,   171,   161,   162,
     163,     0,     0,     0,     0,     0,   172,     0,   142,   143,
     144,   173,   145,   146,   147,   148,   149,   150,   151,   152,
     220,  -553,   164,     0,     0,     0,   352,     0,     0,     0,
       0,   155,   156,   157,   158,   159,   160,    80,   174,   175,
       0,   176,   177,    85,     0,     0,     0,     0,     0,   161,
     162,   163,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   173,     0,     0,     0,
       0,     0,     0,   164,     0,     0,     0,     0,     0,     0,
       0,     0,    80,   174,   175,     0,   176,   177,    85,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   166,   167,
     168,   169,   170,   171,  -135,     0,     0,     0,     0,  -135,
       0,     0,   172,     0,     0,     0,     0,   173,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     4,
       0,     5,     0,     0,     0,     0,     0,    80,   295,   296,
       0,   176,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     6,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    80,   174,
     175,     0,   176,   177,    85,     0,    13,    14,    15,    16,
       0,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,     0,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,  -556,     0,     0,     0,     0,
       0,     0,     0,   136,    83,     0,     0,     0,    86,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     4,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    13,    14,    15,    16,
       0,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,     0,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,     0,     0,     0,     0,     0,
    -171,     0,     0,   136,    83,   294,     0,     0,    86,     0,
     155,   156,   157,   158,   159,   160,     0,     0,     0,     0,
       0,  -171,     0,     0,     0,     0,   352,     0,   161,   162,
     163,   155,   156,   157,   158,   159,   160,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   624,   161,
     162,   163,   164,   294,     0,     0,     0,     0,   155,   156,
     157,   158,   159,   160,     0,     0,     0,     0,     0,   705,
       0,     0,     0,   164,   294,     0,   161,   162,   163,   155,
     156,   157,   158,   159,   160,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   173,   161,   162,   163,
     164,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   173,     0,     0,
       0,   164,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   173,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -276,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     3,   173,     0,    80,   295,   296,
       0,   176,     0,     0,     4,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    80,   295,
     296,     0,   176,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    80,   295,   296,     0,   176,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    80,   295,   296,     0,
     176,    13,    14,    15,    16,     0,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,     0,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
       0,     0,     0,     0,     0,     0,    80,    81,    82,    83,
       0,    84,    85,    86,   294,   509,     0,     0,     0,   155,
     156,   157,   158,   159,   160,   294,     0,     0,   590,     0,
     155,   156,   157,   158,   159,   160,     0,   161,   162,   163,
       0,     0,     0,     0,     0,     0,   294,   984,   161,   162,
     163,   155,   156,   157,   158,   159,   160,   294,     0,     0,
     685,   164,   155,   156,   157,   158,   159,   160,     0,   161,
     162,   163,   164,     0,     0,     0,     0,     0,   294,  -256,
     161,   162,   163,   155,   156,   157,   158,   159,   160,     0,
       0,     0,     0,   164,     0,     0,     0,     0,     0,     0,
       0,   161,   162,   163,   164,   173,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   173,     0,     0,     0,
       0,     0,     0,     0,     0,   164,   294,     0,     0,     0,
       0,   155,   156,   157,   158,   159,   160,   173,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   341,   173,   161,
     162,   163,   155,   156,   157,   158,   159,   160,   643,     0,
       0,     0,     0,   155,   156,   157,   158,   159,   160,   173,
     161,   162,   163,   164,     0,     0,    80,   295,   296,     0,
     176,   161,   162,   163,     0,     0,     0,    80,   295,   296,
     645,   176,     0,     0,   164,   155,   156,   157,   158,   159,
     160,     0,     0,     0,     0,   164,     0,     0,    80,   295,
     296,     0,   176,   161,   162,   163,     0,   173,     0,    80,
     295,   296,     0,   176,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   164,   173,     0,
      80,   295,   296,     0,   176,     0,   724,     0,     0,   173,
       0,   725,   726,   727,   728,   729,   730,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   161,
     731,   732,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   173,     0,     0,     0,     0,     0,     0,    80,   295,
     296,     0,   176,   733,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    80,
     295,   296,     0,   176,     0,     0,     0,     0,     0,     0,
      80,   295,   296,     0,   176,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   173,     0,     0,
       0,     0,     0,     0,  -200,  -200,     4,     0,     0,     0,
       0,     0,    80,   295,   296,     0,   176,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    80,   734,
     735,     0,   176,    13,    14,    15,    16,     0,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,     0,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,     4,     0,     5,     0,     0,     0,     0,     0,
     136,    83,     0,     0,     0,    86,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -419,  -419,  -419,     0,
       6,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    13,
      14,    15,    16,     0,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,     0,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,     4,     0,
       5,     0,     0,     0,     0,     0,   136,    83,     0,     0,
       0,    86,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     6,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    13,    14,    15,    16,     0,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
       0,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,     4,     0,     0,     0,     0,     0,
      80,  1097,   136,    83,     0,     0,     0,    86,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -419,  -419,
    -419,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    13,    14,    15,    16,     0,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,     0,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
       4,     0,     0,     0,     0,     0,     0,     0,   136,    83,
       0,     0,     0,    86,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    10,    11,
      12,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    13,    14,    15,
      16,     0,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,     0,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,     4,     0,     5,     0,
       0,     0,     0,     0,   136,    83,     0,     0,     0,    86,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     6,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    13,    14,    15,    16,     0,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,     0,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,     4,     0,     0,     0,     0,     0,     0,     0,
     136,    83,     0,     0,     0,    86,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    13,
      14,    15,    16,     0,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,     0,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,     0,     0,
       0,     0,     0,     0,     0,     0,   136,    83,     0,     0,
       0,    86
};

static const short yycheck[] =
{
       0,     0,     5,   542,   120,     5,   397,   455,   330,     9,
      10,    11,    12,   387,   388,   399,   592,    27,   544,   653,
       3,     0,   398,     0,   435,   142,     5,   622,     7,   653,
     352,   653,   130,     5,   923,    11,    12,   309,   809,   469,
     699,   389,   390,   208,   395,   396,   311,   232,   653,   391,
     392,   393,   394,    25,   959,    56,     5,   931,   221,   553,
      10,   657,    19,   226,   434,   228,   657,   155,   156,   157,
     158,   159,   160,   824,     5,    24,     0,   571,   829,   264,
     714,   940,   833,   453,   943,    34,   657,    87,    87,    18,
     714,   657,   714,    19,    25,    24,    21,  1109,  1110,   657,
      25,    28,    21,    10,   783,    34,    25,    28,    87,   714,
      87,   687,    21,    24,   653,    21,    25,    18,    45,   798,
     120,    27,   101,    34,    45,    50,    51,   653,   675,    26,
     500,    28,    24,   112,   113,    54,    55,    24,   138,    32,
      33,    10,    34,  1032,  1033,   128,    10,    34,    45,   149,
      41,   836,    37,    38,   154,   138,  1061,   842,    21,   138,
      11,    12,    25,    87,   486,  1177,    57,    52,    53,  1043,
    1044,   942,   172,   944,     5,   714,    39,   836,   608,    24,
     190,    26,    26,   842,   185,   936,   284,   783,   714,   354,
      34,    24,   783,    24,    25,    26,   607,   362,   198,   364,
      50,    51,   798,    34,   154,   470,   206,   798,   208,  1068,
     210,  1070,   783,   213,   186,   187,   188,   783,  1107,   191,
     192,   221,    24,   408,   594,   783,   226,   798,   228,   186,
     187,   188,   798,    41,   191,   192,   606,   186,   187,    18,
     798,   241,   242,   341,  1118,   221,  1120,   154,   198,    57,
     226,   573,   228,    88,   702,   943,   206,   186,   187,   188,
     210,   808,   653,   213,   811,   241,   429,   430,    21,   653,
      26,   436,    28,    34,    27,   186,   187,   653,   963,   653,
      24,   190,    26,   283,   283,   154,   286,   287,   288,    45,
     154,   198,   242,    21,   186,   187,   384,   385,   386,   186,
     187,   188,   653,   210,   963,   653,   213,    24,   308,   308,
      24,   653,    26,     0,   314,   920,   299,   434,     5,   298,
      34,    18,  1073,   714,    21,     5,    13,    14,    15,   198,
     714,   603,     6,     7,   198,   242,   453,   206,   714,   504,
     714,   210,   206,    21,   213,    25,   210,    25,  1043,   213,
     111,   112,   113,  1227,   354,   186,   187,   188,    24,    24,
     191,   192,   362,   714,   364,    21,   714,    89,    90,    34,
     221,    27,   714,   242,   913,   226,   971,   228,   242,    24,
    1068,    26,  1070,   500,    26,  1019,    28,    18,   553,   915,
     241,   967,    23,   491,    24,  1019,    26,  1019,   120,   121,
      87,   489,     5,    45,    24,   853,   571,   572,   408,    21,
      54,    55,   134,    25,  1019,   102,   103,   104,   105,   106,
     107,   108,   109,     5,   111,    37,    38,   114,    18,   429,
     430,    21,  1127,   120,    18,    25,   436,  1132,   438,   438,
      52,    53,    18,   130,   814,   132,   133,   134,   448,   426,
      24,   138,    24,   429,   430,   825,   459,    24,   408,   459,
     437,   461,   441,    68,    69,    70,    21,   154,    24,   469,
      25,    27,   472,    16,   161,    16,   476,   594,    34,   577,
    1019,    34,    35,    36,   649,   650,   469,  1182,    21,   606,
      21,    16,    25,  1019,    25,    50,    51,   662,    21,  1104,
      18,   408,    25,    21,   504,    23,   186,   187,   188,    32,
      33,   191,   192,   513,   514,    16,    21,   182,   183,   910,
      25,   186,   187,    25,    26,   190,   900,   901,   912,    15,
     628,   101,     0,    18,   221,   911,    21,     5,   703,   408,
      25,     9,    21,    39,   408,   643,    25,   645,     5,    24,
      29,    26,   552,   553,   902,   903,    22,   908,   909,    34,
     560,   560,   904,   905,   906,   907,    22,    24,   568,  1174,
      22,   571,   572,   260,    20,    21,   553,    34,   429,   430,
      42,    43,    34,   186,   187,   188,   702,    21,   191,   192,
      34,    25,    25,    26,   571,    28,   283,   284,    23,   286,
     287,    26,   552,    28,   186,   187,   188,   294,   608,   191,
     192,    18,   299,    24,    21,    26,    50,    51,    21,    87,
      21,   308,    25,    34,    25,   608,   724,   314,  1019,    21,
     186,   187,   188,    25,   190,  1019,   615,   725,   726,   727,
     728,   729,   730,  1019,    88,  1019,    22,    50,    51,   649,
     650,   923,   120,   653,   341,    29,   978,    18,    37,    38,
      21,   661,   662,    21,   664,   352,    56,    25,  1019,    40,
     138,  1019,    24,    52,    53,    27,    18,  1019,   678,    21,
     680,   149,    34,   552,   186,   187,   188,    95,   552,   191,
     192,   691,    21,   965,    19,    21,    25,   814,   698,    25,
     683,   701,   702,   703,  1152,    21,    34,    95,   825,    25,
     190,   186,   187,   188,   714,    26,   191,   192,   193,   702,
      22,    25,    26,    34,    28,   182,   183,    21,    21,   186,
     187,    25,    25,   190,   186,   187,   188,   853,   425,   191,
     192,    45,   186,   187,    10,    11,    12,   191,   192,   866,
      21,   438,    22,    21,    25,    22,  1028,    25,   445,    26,
     447,    28,   449,    21,    22,   452,  1038,    21,   455,    24,
     457,    25,   459,     5,   461,   186,   187,   188,    45,   466,
     191,   192,   469,    37,    38,    18,  1058,    21,    21,   476,
      95,    25,    24,    25,    26,    22,    34,    18,    52,    53,
      21,   801,    34,  1075,   491,    25,    26,    19,    28,   897,
     898,   899,    21,    21,    20,   283,    25,    25,   286,   287,
     288,   821,    32,    33,   824,    45,   826,   806,    21,   829,
     809,  1201,    25,   833,   186,   187,   188,    27,   190,    21,
     308,  1113,    18,    25,    95,    21,   314,    24,    21,    26,
      24,    28,    25,   853,    25,    26,    18,    28,   186,   187,
     188,   861,  1134,   191,   192,   193,  1236,    25,    45,    18,
     853,    48,    49,   560,    45,   186,   187,   188,    21,    21,
     191,   192,    25,    25,    34,    35,    36,   574,   154,    18,
     577,    34,    35,    36,   982,    24,    18,    50,    51,    21,
      29,    30,    31,    32,    33,    34,   593,    21,    21,    54,
      55,    25,    25,   600,   601,   602,    20,    21,    47,    48,
      49,   608,    18,   923,    21,    10,    11,    12,    25,    21,
      21,   931,   198,    25,    25,    23,   936,    34,    35,    36,
     206,   628,    71,    18,   210,    24,    21,   213,   186,   187,
     188,   638,   639,   191,   192,   221,   643,    22,   645,    18,
     226,   940,   228,   942,   943,   944,    24,    21,    21,    21,
     438,    25,    25,    25,    25,   241,   242,    21,    32,    33,
     448,    25,   669,    20,    21,    23,   115,   987,   988,  1087,
     677,   459,   679,   461,    21,    22,   683,   186,   187,   188,
      25,   469,   191,   192,   472,   692,   693,    21,   476,    21,
     697,    25,    21,    25,   701,   702,    25,    32,    33,  1019,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
    1030,    21,  1032,  1033,    21,    25,  1152,   724,    25,   112,
     113,  1041,    24,  1043,  1044,   513,   514,    24,    21,    26,
      21,    28,    25,  1030,    25,    18,    18,   186,   187,   188,
    1060,   190,    18,    21,    18,  1065,  1065,    25,    45,   154,
      18,    48,    49,  1073,    52,    53,    54,    19,  1078,  1078,
       9,    11,    25,  1083,  1201,    24,    11,    91,    21,  1068,
      24,  1070,   560,    19,    91,  1078,    19,    19,  1215,    19,
      27,    25,    21,    24,  1104,  1105,  1106,  1107,    22,  1109,
    1110,    21,    18,   198,    25,    11,    25,   804,  1118,  1236,
    1120,   206,    21,  1123,    25,   210,    24,  1127,   213,  1129,
    1130,    24,  1132,    27,   821,  1138,   221,   222,  1138,    24,
     608,   226,   408,   228,    25,    23,    20,    19,    23,    20,
      19,    27,  1152,    21,    24,    21,   241,   242,     5,    19,
      25,    22,    24,   429,   430,   852,   853,    25,   855,    20,
      20,    25,    27,    73,  1174,  1175,  1176,  1177,    27,    25,
      18,    21,  1182,    25,    21,    24,    22,    39,    29,    56,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      25,    25,  1202,  1202,    25,    40,   187,    91,    91,    91,
     678,    91,   680,    10,    11,    12,    25,    25,    91,    18,
      22,    25,    20,   691,    24,    18,    21,  1227,    91,    25,
     698,   110,    18,   701,   702,   114,    25,   116,   190,   118,
      27,    20,    18,    21,   123,    18,    40,    24,    23,    20,
      22,   142,   939,    22,   192,    21,   135,    91,   137,   946,
      21,    20,    22,    91,   155,   156,   157,   158,   159,   160,
      25,   162,   163,    23,    25,    27,   194,    40,    27,    25,
      18,    20,   367,    20,    27,    25,   552,     0,     0,  1227,
      18,   314,   931,  1195,  1123,    87,    24,  1022,   689,  1095,
     179,    29,    30,    31,    32,    33,    34,  1031,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,  1174,    47,
      48,    49,  1060,   408,   881,   796,   821,   830,   577,    73,
      74,    75,    76,    10,    11,    12,    80,    81,    82,    83,
      84,    85,    86,    71,   429,   430,   680,  1202,   678,   853,
     701,    12,   299,   821,   128,   241,   824,   154,   826,   350,
    1158,   829,   408,   504,   705,   833,   859,   714,  1019,   858,
      -1,    -1,    -1,    -1,    -1,  1062,    -1,    -1,  1065,    -1,
      -1,    -1,    -1,    -1,    -1,   853,    -1,   115,   267,    -1,
      -1,  1078,    -1,   861,  1081,    -1,    10,    11,    12,    -1,
    1087,   198,    -1,  1090,  1091,    -1,    -1,    -1,    -1,   206,
      -1,    -1,    -1,   210,    -1,    -1,   213,    -1,    -1,    -1,
      -1,    -1,    -1,   302,   221,    -1,   305,    -1,    -1,   226,
      -1,   228,    -1,    -1,   313,    -1,    -1,   316,    -1,    -1,
      -1,    -1,    -1,    -1,   241,   242,  1133,    -1,    -1,    -1,
      -1,  1138,    -1,  1140,  1141,    -1,    -1,    -1,   186,   187,
     188,    -1,   190,    -1,    -1,  1152,    -1,   552,   936,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   154,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    10,    11,    12,    -1,
      -1,  1178,    -1,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,    -1,
      -1,  1198,  1199,    -1,    -1,  1202,    -1,    -1,  1205,   987,
     988,   198,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   206,
      -1,    -1,    -1,   210,    -1,    -1,   213,    10,    -1,    -1,
     154,    -1,    -1,   434,   221,    -1,   425,    -1,    -1,   226,
      -1,   228,    -1,    -1,    -1,    -1,   435,    -1,    -1,    -1,
      -1,   440,   453,    -1,   241,   242,   445,    -1,   447,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   198,   464,    -1,    -1,    -1,   468,
      -1,    -1,   206,    -1,    -1,    -1,   210,  1065,   489,   213,
      -1,    -1,    -1,    -1,    -1,  1073,    -1,   221,    -1,   500,
    1078,   408,   226,    -1,   228,  1083,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   241,   242,    -1,
     154,    -1,   429,   430,    -1,    -1,    -1,  1105,  1106,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   542,    -1,   544,    -1,   546,   547,   130,    10,    11,
      12,  1129,  1130,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1138,    -1,    -1,    -1,   198,    -1,    -1,    -1,    -1,   152,
      -1,   154,   206,    -1,  1152,    -1,   210,    -1,    -1,   213,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   221,    -1,    -1,
      -1,    -1,   226,   594,   228,    -1,    -1,  1175,  1176,    -1,
      -1,    -1,    -1,   592,    -1,   606,    -1,   241,   242,    -1,
      -1,    -1,    -1,    -1,    -1,   198,    -1,    -1,   607,    -1,
      -1,   408,    -1,   206,  1202,    -1,    -1,   210,    -1,    -1,
     213,    -1,    -1,    -1,    -1,    -1,    -1,   626,   221,    -1,
     344,    -1,   429,   430,    -1,   552,    -1,    -1,    -1,    -1,
      -1,    -1,   653,    -1,    -1,    -1,    -1,    -1,    -1,   242,
      -1,    -1,    -1,    -1,   368,   654,    -1,   656,    -1,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
      -1,    -1,    -1,    -1,   408,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   154,    -1,    -1,    -1,    -1,    -1,    -1,   688,
     404,    -1,    -1,    -1,    -1,   429,   430,    -1,    -1,    -1,
      -1,   294,    -1,   714,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   725,   726,   727,   728,   729,   730,
     731,   732,    -1,    -1,    -1,    -1,   198,    -1,   321,   322,
     323,   324,    -1,    -1,   206,    -1,    -1,   736,   210,    -1,
      -1,   213,    -1,    -1,    -1,    -1,    -1,    -1,   341,   221,
      -1,    -1,    -1,    -1,   226,   552,   228,    -1,    -1,   352,
      -1,    -1,    -1,    -1,   408,    -1,    -1,    -1,    -1,   241,
     242,    -1,    -1,    -1,    -1,    -1,   369,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   429,   430,    -1,    -1,    -1,
      -1,    -1,   791,   792,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   814,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   825,   408,    -1,    -1,   552,    -1,
      -1,    -1,    -1,   416,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     1,    -1,    -1,   835,    -1,     6,     7,
       8,    -1,    -1,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    -1,    -1,   866,    24,    25,    -1,    -1,
      -1,    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    43,    -1,    -1,    -1,    47,
      48,    49,    -1,    -1,    -1,    -1,   897,   898,   899,   900,
     901,   902,   903,   904,   905,   906,   907,   908,   909,   910,
     911,   912,   913,    71,   915,    -1,    -1,    -1,   552,    -1,
     624,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   635,    -1,    -1,    -1,    -1,    -1,    95,    96,    97,
      98,    99,   100,   101,    -1,    -1,   408,    -1,    -1,    -1,
     939,    -1,   110,    -1,    -1,    -1,    -1,   115,    -1,    -1,
     543,    -1,    -1,    -1,    -1,    -1,    -1,   429,   430,   552,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   967,    19,
      20,   982,    -1,    -1,    24,    -1,    26,   691,    28,    29,
      30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,   705,    -1,    -1,    -1,    -1,    -1,    47,    48,    49,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1019,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   186,   187,
     188,    71,   190,   191,   192,    -1,    -1,    -1,    -1,   622,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     643,    -1,   645,    -1,    -1,    -1,    -1,    -1,   651,    -1,
      -1,    -1,   655,    -1,  1063,   115,    -1,   122,   123,   124,
     125,    -1,   127,    -1,    -1,    -1,    -1,   132,   133,    -1,
     552,   136,   137,    -1,   139,   140,   141,   142,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   154,
     155,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     824,    -1,    -1,    -1,    -1,   829,    -1,    -1,    -1,   833,
     713,    -1,    -1,    -1,   179,    -1,    -1,    -1,    -1,    -1,
      -1,   724,    -1,    -1,   189,    -1,   186,   187,   188,    -1,
     190,   191,   192,  1142,    -1,   859,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   880,   881,    -1,    -1,
      -1,    -1,   886,   887,   888,   889,   890,   891,   892,   893,
     894,   895,   896,    -1,    -1,    -1,    -1,     6,     7,     8,
    1201,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    -1,    -1,  1215,    24,    -1,    -1,    -1,    -1,
      29,    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,   936,    -1,    -1,  1236,    -1,     1,    47,    48,
      49,    -1,     6,     7,     8,  1234,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    -1,    -1,    -1,    -1,
      24,    -1,    71,    -1,    -1,    29,    30,    31,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,
      -1,    -1,    -1,    47,    48,    49,    -1,    96,    97,    98,
      99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,   882,
      -1,   110,    -1,    -1,    -1,    -1,   115,    71,    -1,    -1,
      19,    -1,    -1,    -1,    -1,    24,    -1,    26,    -1,    28,
      29,    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    95,    96,    97,    98,    99,   100,   101,    47,    48,
      49,    -1,    -1,    -1,    -1,    -1,   110,    -1,    -1,    -1,
      -1,   115,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    71,    -1,    -1,    -1,    -1,    -1,    -1,  1073,
      -1,    -1,    -1,     0,     1,    -1,    -1,   186,   187,   188,
      -1,   190,   191,   192,    -1,    -1,    -1,    -1,   971,    -1,
      -1,    18,    -1,    -1,    -1,    -1,    -1,    24,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   115,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,    -1,    46,
      -1,    -1,   186,   187,   188,    -1,   190,   191,   192,    -1,
      -1,    -1,    -1,    -1,  1017,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    69,    70,    -1,    72,    -1,    -1,    -1,    -1,
      77,    78,    79,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    92,    93,    94,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   186,   187,   188,
      -1,   190,   191,   192,   111,   112,   113,   114,    -1,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,  1082,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,     0,     1,    -1,    -1,    -1,    -1,   186,
     187,   188,   189,    -1,   191,   192,   193,    -1,    -1,    -1,
      -1,    18,    -1,    -1,    -1,    -1,    -1,    24,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,    -1,    46,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    69,    70,    -1,    72,    -1,    -1,    -1,    -1,
      77,    78,    79,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    92,    93,    94,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   111,   112,   113,   114,    -1,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,    -1,    -1,    -1,    -1,    -1,    -1,   186,
     187,   188,   189,     1,   191,   192,   193,    -1,     6,     7,
       8,    -1,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    -1,    -1,    -1,    24,    -1,    -1,    -1,
      -1,    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    69,    70,    71,    72,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    96,    97,
      98,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,    -1,    -1,    -1,    -1,    -1,    -1,   186,   187,
     188,   189,   190,   191,   192,   193,     1,    -1,    -1,    -1,
      -1,     6,     7,     8,    -1,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    -1,    -1,    -1,    -1,    24,
      -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    44,
      -1,    -1,    47,    48,    49,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    69,    70,    71,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    96,    97,    98,    99,   100,   101,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,    -1,    -1,    -1,    -1,    -1,
      -1,   186,   187,   188,   189,   190,   191,   192,   193,     1,
      -1,    -1,    -1,    -1,     6,     7,     8,    -1,    -1,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    -1,
      -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      42,    43,    44,    -1,    -1,    47,    48,    49,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    70,    71,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    96,    97,    98,    99,   100,   101,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,    -1,    -1,
      -1,    -1,    -1,    -1,   186,   187,   188,   189,   190,   191,
     192,   193,     1,    -1,    -1,    -1,    -1,     6,     7,     8,
      -1,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    -1,    26,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    -1,    45,    -1,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    -1,
      -1,    -1,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    96,    97,    98,
      99,   100,   101,    -1,    -1,    -1,    -1,    -1,     1,    -1,
      -1,   110,    -1,     6,     7,     8,   115,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    -1,    -1,    -1,
      -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
      43,    -1,    -1,     1,    47,    48,    49,    -1,     6,     7,
       8,    -1,    -1,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    -1,    -1,    -1,    24,    -1,    71,    -1,
      -1,    29,    30,    31,    32,    33,    34,   186,   187,   188,
      -1,   190,   191,   192,    42,    43,    -1,    -1,    -1,    47,
      48,    49,    95,    96,    97,    98,    99,   100,   101,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,    -1,    -1,
      -1,    -1,   115,    71,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    95,    96,    97,
      98,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,     1,
      -1,    -1,   110,    -1,     6,     7,     8,   115,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    -1,
      -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,
      32,    33,    34,   186,   187,   188,    -1,   190,   191,   192,
      42,    43,    -1,    -1,     1,    47,    48,    49,    -1,     6,
       7,     8,    -1,    -1,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    -1,    -1,    -1,    24,    -1,    71,
      -1,    -1,    29,    30,    31,    32,    33,    34,   186,   187,
     188,    -1,   190,   191,   192,    42,    43,    -1,    -1,    -1,
      47,    48,    49,    -1,    96,    97,    98,    99,   100,   101,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,    -1,
      -1,    -1,    -1,   115,    71,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    96,
      97,    98,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,
       1,    -1,    -1,   110,    -1,     6,     7,     8,   115,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    -1,
      -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,
      31,    32,    33,    34,   186,   187,   188,    -1,   190,   191,
     192,    42,    43,    -1,    -1,    -1,    47,    48,    49,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   186,
     187,   188,    -1,   190,   191,   192,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    96,    97,    98,    99,   100,
     101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
      -1,     6,     7,     8,   115,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    24,
      -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    71,    72,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   186,   187,   188,    -1,   190,
     191,   192,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    96,    97,    98,    99,   100,   101,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,    -1,    -1,    -1,    -1,    -1,
      -1,   186,   187,   188,   189,   190,   191,   192,   193,     6,
       7,     8,    -1,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    -1,    -1,    -1,    24,    -1,    -1,
      -1,    -1,    29,    30,    31,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    71,    72,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    96,
      97,    98,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,    -1,    -1,    -1,    -1,    -1,    -1,   186,
     187,   188,   189,   190,   191,   192,   193,     6,     7,     8,
      -1,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,
      29,    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    71,    72,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    96,    97,    98,
      99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,    -1,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,    -1,    -1,    -1,    -1,    -1,    -1,   186,   187,   188,
     189,   190,   191,   192,   193,     6,     7,     8,    -1,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,
      31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    47,    48,    49,    -1,
       6,     7,     8,    -1,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    -1,    -1,    -1,    24,    -1,
      71,    -1,    -1,    29,    30,    31,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    47,    48,    49,    -1,    96,    97,    98,    99,   100,
     101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
      -1,    -1,    -1,    -1,   115,    71,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      96,    97,    98,    99,   100,   101,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,    -1,     6,     7,     8,   115,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,
      30,    31,    32,    33,    34,   186,   187,   188,    -1,   190,
     191,   192,    -1,    -1,    -1,    -1,    -1,    47,    48,    49,
      -1,     6,     7,     8,    -1,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    24,
      -1,    71,    -1,    -1,    29,    30,    31,    32,    33,    34,
     186,   187,   188,    -1,   190,   191,   192,    -1,    -1,    -1,
      -1,    -1,    47,    48,    49,    -1,    96,    97,    98,    99,
     100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,    -1,    -1,    -1,    -1,   115,    71,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    96,    97,    98,    99,   100,   101,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,    -1,     6,     7,     8,
     115,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,
      29,    30,    31,    32,    33,    34,   186,   187,   188,    -1,
     190,   191,   192,    -1,    -1,    -1,    -1,    -1,    47,    48,
      49,    -1,     6,     7,     8,    -1,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
      24,    -1,    71,    -1,    -1,    29,    30,    31,    32,    33,
      34,   186,   187,   188,    -1,   190,   191,   192,    -1,    -1,
      -1,    -1,    -1,    47,    48,    49,    -1,    96,    97,    98,
      99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,    -1,    -1,    -1,    -1,   115,    71,    -1,    -1,
      19,    20,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,
      29,    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    96,    97,    98,    99,   100,   101,    47,    48,
      49,    -1,    -1,    -1,    -1,    -1,   110,    -1,     6,     7,
       8,   115,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    71,    -1,    -1,    -1,    24,    -1,    -1,    -1,
      -1,    29,    30,    31,    32,    33,    34,   186,   187,   188,
      -1,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,    47,
      48,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   115,    -1,    -1,    -1,
      -1,    -1,    -1,    71,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   186,   187,   188,    -1,   190,   191,   192,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    96,    97,
      98,    99,   100,   101,    19,    -1,    -1,    -1,    -1,    24,
      -1,    -1,   110,    -1,    -1,    -1,    -1,   115,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,
      -1,    46,    -1,    -1,    -1,    -1,    -1,   186,   187,   188,
      -1,   190,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   186,   187,
     188,    -1,   190,   191,   192,    -1,   111,   112,   113,   114,
      -1,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,    20,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   188,   189,    -1,    -1,    -1,   193,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,
      -1,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,    -1,    -1,    -1,    -1,    -1,
      19,    -1,    -1,   188,   189,    24,    -1,    -1,   193,    -1,
      29,    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    19,    -1,    -1,    -1,    -1,    24,    -1,    47,    48,
      49,    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    47,
      48,    49,    71,    24,    -1,    -1,    -1,    -1,    29,    30,
      31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    19,
      -1,    -1,    -1,    71,    24,    -1,    47,    48,    49,    29,
      30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   115,    47,    48,    49,
      71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   115,    -1,    -1,
      -1,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   115,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    34,   115,    -1,   186,   187,   188,
      -1,   190,    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   186,   187,
     188,    -1,   190,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   186,   187,   188,    -1,   190,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   186,   187,   188,    -1,
     190,   111,   112,   113,   114,    -1,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
      -1,    -1,    -1,    -1,    -1,    -1,   186,   187,   188,   189,
      -1,   191,   192,   193,    24,    25,    -1,    -1,    -1,    29,
      30,    31,    32,    33,    34,    24,    -1,    -1,    27,    -1,
      29,    30,    31,    32,    33,    34,    -1,    47,    48,    49,
      -1,    -1,    -1,    -1,    -1,    -1,    24,    25,    47,    48,
      49,    29,    30,    31,    32,    33,    34,    24,    -1,    -1,
      27,    71,    29,    30,    31,    32,    33,    34,    -1,    47,
      48,    49,    71,    -1,    -1,    -1,    -1,    -1,    24,    25,
      47,    48,    49,    29,    30,    31,    32,    33,    34,    -1,
      -1,    -1,    -1,    71,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    47,    48,    49,    71,   115,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   115,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    71,    24,    -1,    -1,    -1,
      -1,    29,    30,    31,    32,    33,    34,   115,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    24,   115,    47,
      48,    49,    29,    30,    31,    32,    33,    34,    24,    -1,
      -1,    -1,    -1,    29,    30,    31,    32,    33,    34,   115,
      47,    48,    49,    71,    -1,    -1,   186,   187,   188,    -1,
     190,    47,    48,    49,    -1,    -1,    -1,   186,   187,   188,
      24,   190,    -1,    -1,    71,    29,    30,    31,    32,    33,
      34,    -1,    -1,    -1,    -1,    71,    -1,    -1,   186,   187,
     188,    -1,   190,    47,    48,    49,    -1,   115,    -1,   186,
     187,   188,    -1,   190,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,   115,    -1,
     186,   187,   188,    -1,   190,    -1,    24,    -1,    -1,   115,
      -1,    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    47,
      48,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   115,    -1,    -1,    -1,    -1,    -1,    -1,   186,   187,
     188,    -1,   190,    71,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   186,
     187,   188,    -1,   190,    -1,    -1,    -1,    -1,    -1,    -1,
     186,   187,   188,    -1,   190,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   115,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    43,    44,    -1,    -1,    -1,
      -1,    -1,   186,   187,   188,    -1,   190,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   186,   187,
     188,    -1,   190,   111,   112,   113,   114,    -1,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,    44,    -1,    46,    -1,    -1,    -1,    -1,    -1,
     188,   189,    -1,    -1,    -1,   193,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    70,    -1,
      72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,
     112,   113,   114,    -1,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,    44,    -1,
      46,    -1,    -1,    -1,    -1,    -1,   188,   189,    -1,    -1,
      -1,   193,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    72,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,    -1,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
      -1,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,    44,    -1,    -1,    -1,    -1,    -1,
     186,   187,   188,   189,    -1,    -1,    -1,   193,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,
      70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   111,   112,   113,   114,    -1,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
      44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   188,   189,
      -1,    -1,    -1,   193,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    92,    93,
      94,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,
     114,    -1,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,    44,    -1,    46,    -1,
      -1,    -1,    -1,    -1,   188,   189,    -1,    -1,    -1,   193,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    72,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   111,   112,   113,   114,    -1,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     188,   189,    -1,    -1,    -1,   193,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,
     112,   113,   114,    -1,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   188,   189,    -1,    -1,
      -1,   193
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */

/* Skeleton output parser for bison,

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002 Free Software
   Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser when
   the %semantic_parser declaration is not specified in the grammar.
   It was written by Richard Stallman by simplifying the hairy parser
   used when %semantic_parser is specified.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

#if ! defined (yyoverflow) || defined (YYERROR_VERBOSE)

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# if YYSTACK_USE_ALLOCA
#  define YYSTACK_ALLOC alloca
# else
#  ifndef YYSTACK_USE_ALLOCA
#   if defined (alloca) || defined (_ALLOCA_H)
#    define YYSTACK_ALLOC alloca
#   else
#    ifdef __GNUC__
#     define YYSTACK_ALLOC __builtin_alloca
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
# else
#  if defined (__STDC__) || defined (__cplusplus)
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   define YYSIZE_T size_t
#  endif
#  define YYSTACK_ALLOC malloc
#  define YYSTACK_FREE free
# endif
#endif /* ! defined (yyoverflow) || defined (YYERROR_VERBOSE) */


#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || (YYLTYPE_IS_TRIVIAL && cgrammar_YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short yyss;
  cgrammar_YYSTYPE yyvs;
# if YYLSP_NEEDED
  YYLTYPE yyls;
# endif
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAX (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# if YYLSP_NEEDED
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (cgrammar_YYSTYPE) + sizeof (YYLTYPE))	\
      + 2 * YYSTACK_GAP_MAX)
# else
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (cgrammar_YYSTYPE))				\
      + YYSTACK_GAP_MAX)
# endif

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  register YYSIZE_T yyi;		\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (0)
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAX;	\
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (0)

#endif


#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# if defined (__STDC__) || defined (__cplusplus)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# endif
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { 								\
      yyerror ("syntax error: cannot back up");			\
      YYERROR;							\
    }								\
while (0)

#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Compute the default location (before the actions
   are run).

   When YYLLOC_DEFAULT is run, CURRENT is set the location of the
   first token.  By default, to implement support for ranges, extend
   its range to the last symbol.  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)       	\
   Current.last_line   = Rhs[N].last_line;	\
   Current.last_column = Rhs[N].last_column;
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#if YYPURE
# if YYLSP_NEEDED
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, &yylloc, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval, &yylloc)
#  endif
# else /* !YYLSP_NEEDED */
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval)
#  endif
# endif /* !YYLSP_NEEDED */
#else /* !YYPURE */
# define YYLEX			yylex ()
#endif /* !YYPURE */


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)
/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
#endif /* !YYDEBUG */

/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#if YYMAXDEPTH == 0
# undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif

#ifdef YYERROR_VERBOSE

# ifndef yystrlen
#  if defined (__GLIBC__) && defined (_STRING_H)
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
#   if defined (__STDC__) || defined (__cplusplus)
yystrlen (const char *yystr)
#   else
yystrlen (yystr)
     const char *yystr;
#   endif
{
  register const char *yys = yystr;

  while (*yys++ != '\0')
    continue;

  return yys - yystr - 1;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#   if defined (__STDC__) || defined (__cplusplus)
yystpcpy (char *yydest, const char *yysrc)
#   else
yystpcpy (yydest, yysrc)
     char *yydest;
     const char *yysrc;
#   endif
{
  register char *yyd = yydest;
  register const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif
#endif



/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
#  define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL
# else
#  define YYPARSE_PARAM_ARG YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
# endif
#else /* !YYPARSE_PARAM */
# define YYPARSE_PARAM_ARG
# define YYPARSE_PARAM_DECL
#endif /* !YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
# ifdef YYPARSE_PARAM
int yyparse (void *);
# else
int yyparse (void);
# endif
#endif

/* YY_DECL_VARIABLES -- depending whether we use a pure parser,
   variables are global, or local to YYPARSE.  */

#define YY_DECL_NON_LSP_VARIABLES			\
/* The lookahead symbol.  */				\
int yychar;						\
							\
/* The semantic value of the lookahead symbol. */	\
cgrammar_YYSTYPE yylval;						\
							\
/* Number of parse errors so far.  */			\
int yynerrs;

#if YYLSP_NEEDED
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES			\
						\
/* Location data for the lookahead symbol.  */	\
YYLTYPE yylloc;
#else
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES
#endif


/* If nonreentrant, generate the variables here. */

#if !YYPURE
YY_DECL_VARIABLES
#endif  /* !YYPURE */

int
yyparse (YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  /* If reentrant, generate the variables here. */
#if YYPURE
  YY_DECL_VARIABLES
#endif  /* !YYPURE */

  register int yystate;
  register int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Lookahead token as an internal (translated) token number.  */
  int yychar1 = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack. */
  short	yyssa[YYINITDEPTH];
  short *yyss = yyssa;
  register short *yyssp;

  /* The semantic value stack.  */
  cgrammar_YYSTYPE yyvsa[YYINITDEPTH];
  cgrammar_YYSTYPE *yyvs = yyvsa;
  register cgrammar_YYSTYPE *yyvsp;

#if YYLSP_NEEDED
  /* The location stack.  */
  YYLTYPE yylsa[YYINITDEPTH];
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;
#endif

#if YYLSP_NEEDED
# define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
# define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  YYSIZE_T yystacksize = YYINITDEPTH;


  /* The variables used to return semantic value and location from the
     action routines.  */
  cgrammar_YYSTYPE yyval;
#if YYLSP_NEEDED
  YYLTYPE yyloc;
#endif

  /* When reducing, the number of symbols on the RHS of the reduced
     rule. */
  int yylen;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;
#if YYLSP_NEEDED
  yylsp = yyls;
#endif
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack. Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	cgrammar_YYSTYPE *yyvs1 = yyvs;
	short *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  */
# if YYLSP_NEEDED
	YYLTYPE *yyls1 = yyls;
	/* This used to be a conditional around just the two extra args,
	   but that might be undefined if yyoverflow is a macro.  */
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);
	yyls = yyls1;
# else
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);
# endif
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyoverflowlab;
# else
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	goto yyoverflowlab;
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;

      {
	short *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyoverflowlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);
# if YYLSP_NEEDED
	YYSTACK_RELOCATE (yyls);
# endif
# undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
#if YYLSP_NEEDED
      yylsp = yyls + yysize - 1;
#endif

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yychar1 = YYTRANSLATE (yychar);

#if YYDEBUG
     /* We have to keep this `#if YYDEBUG', since we use variables
	which are defined only if `YYDEBUG' is set.  */
      if (yydebug)
	{
	  YYFPRINTF (stderr, "Next token is %d (%s",
		     yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise
	     meaning of a token, for further debugging info.  */
# ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
# endif
	  YYFPRINTF (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */
  YYDPRINTF ((stderr, "Shifting token %d (%s), ",
	      yychar, yytname[yychar1]));

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  yystate = yyn;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to the semantic value of
     the lookahead token.  This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

#if YYLSP_NEEDED
  /* Similarly for the default location.  Let the user run additional
     commands if for instance locations are ranges.  */
  yyloc = yylsp[1-yylen];
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
#endif

#if YYDEBUG
  /* We have to keep this `#if YYDEBUG', since we use variables which
     are defined only if `YYDEBUG' is set.  */
  if (yydebug)
    {
      int yyi;

      YYFPRINTF (stderr, "Reducing via rule %d (line %d), ",
		 yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (yyi = yyprhs[yyn]; yyrhs[yyi] > 0; yyi++)
	YYFPRINTF (stderr, "%s ", yytname[yyrhs[yyi]]);
      YYFPRINTF (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif

  switch (yyn) {

case 3:
{ context_checkGlobalScope (); ;
    break;}
case 4:
{ context_checkGlobalScope (); ;
    break;}
case 5:
{ uentry_clearDecl (); ;
    break;}
case 6:
{ uentry_clearDecl (); ;
    break;}
case 7:
{ uentry_clearDecl (); ;
    break;}
case 8:
{ uentry_clearDecl (); ;
    break;}
case 9:
{ uentry_clearDecl (); ;
    break;}
case 10:
{ uentry_checkDecl (); exprNode_free (yyvsp[0].expr); ;
    break;}
case 11:
{ uentry_clearDecl (); lltok_free (yyvsp[0].tok); /* evans 2002-02-08: okay to have a null statement */ ;
    break;}
case 12:
{ uentry_clearDecl (); ;
    break;}
case 13:
{ checkConstant (yyvsp[-6].qtyp, yyvsp[-4].ntyp); lltok_free2 (yyvsp[-7].tok, yyvsp[0].tok); ;
    break;}
case 14:
{ checkValueConstant (yyvsp[-9].qtyp, yyvsp[-7].ntyp, yyvsp[-3].expr); lltok_free3 (yyvsp[-10].tok, yyvsp[-5].tok, yyvsp[0].tok); ;
    break;}
case 15:
{ context_enterFunctionHeader (); ;
    break;}
case 16:
{ 
     declareStaticFunction (yyvsp[-2].ntyp); context_quietExitFunction (); 
     context_exitFunctionHeader (); 
     lltok_free2 (yyvsp[-4].tok, yyvsp[0].tok); /*!*/
   ;
    break;}
case 17:
{ 
     qtype qint = qtype_create (ctype_int);
     yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, qint);
     qtype_free (qint);
   ;
    break;}
case 18:
{ yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, yyvsp[-2].qtyp); ;
    break;}
case 20:
{ yyval.ntyp = yyvsp[0].ntyp; qtype_adjustPointers (yyvsp[-1].pointers, idDecl_getTyp (yyval.ntyp)); ;
    break;}
case 21:
{ yyval.ntyp = idDecl_create (yyvsp[0].cname, qtype_unknown ()); ;
    break;}
case 22:
{ yyval.ntyp = idDecl_expectFunction (yyvsp[-2].ntyp); lltok_free2 (yyvsp[-4].tok, yyvsp[0].tok); ;
    break;}
case 23:
{ yyval.ntyp = idDecl_replaceCtype (yyvsp[-2].ntyp, ctype_makeInnerArray (idDecl_getCtype (yyvsp[-2].ntyp))); lltok_free2 (yyvsp[-1].tok, yyvsp[0].tok); ;
    break;}
case 24:
{
     exprNode_findValue (yyvsp[-2].expr);
     idDecl_notExpectingFunction (yyvsp[-5].ntyp);

     if (exprNode_hasValue (yyvsp[-2].expr)) 
       {
	 yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ctype_makeInnerFixedArray (idDecl_getCtype (yyvsp[-5].ntyp), 
								  exprNode_getLongValue (yyvsp[-2].expr)));
       } 
     else
       {
	 yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ctype_makeInnerArray (idDecl_getCtype (yyvsp[-5].ntyp))); 
       }

     lltok_free2 (yyvsp[-4].tok, yyvsp[-1].tok);
   ;
    break;}
case 25:
{ setCurrentParams (uentryList_missingParams); ;
    break;}
case 26:
{ /* need to support globals and modifies here! */
     ctype ct = ctype_makeFunction (idDecl_getCtype (yyvsp[-5].ntyp), 
				    uentryList_makeMissingParams ());
     
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ct);

     /*drl 7/25/01 added*/
     setImplictfcnConstraints();

     /*     functionClauseList_ImplictConstraints($6); */

     idDecl_addClauses (yyval.ntyp, yyvsp[0].funcclauselist);
     context_popLoc ();
     lltok_free2 (yyvsp[-3].tok, yyvsp[-2].tok);
   ;
    break;}
case 27:
{ setCurrentParams (yyvsp[-1].entrylist); ;
    break;}
case 28:
{
     setImplictfcnConstraints ();
     /*        functionClauseList_ImplictConstraints($7);*/
     clearCurrentParams ();
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-6].ntyp, ctype_makeFunction (idDecl_getCtype (yyvsp[-6].ntyp), yyvsp[-3].entrylist));
     idDecl_addClauses (yyval.ntyp, yyvsp[0].funcclauselist);
     context_popLoc (); 
     lltok_free2 (yyvsp[-4].tok, yyvsp[-2].tok);
   ;
    break;}
case 29:
{ yyval.ntyp = idDecl_create (yyvsp[0].cname, qtype_unknown ()); ;
    break;}
case 30:
{ yyval.ntyp = idDecl_expectFunction (yyvsp[-2].ntyp); lltok_free2 (yyvsp[-4].tok, yyvsp[0].tok); ;
    break;}
case 31:
{ yyval.ntyp = idDecl_replaceCtype (yyvsp[-2].ntyp, ctype_makeInnerArray (idDecl_getCtype (yyvsp[-2].ntyp))); 
     lltok_free2 (yyvsp[-1].tok, yyvsp[0].tok); 
   ;
    break;}
case 32:
{ 
     int value;

     if (exprNode_hasValue (yyvsp[-2].expr) 
	 && multiVal_isInt (exprNode_getValue (yyvsp[-2].expr)))
       {
	 value = (int) multiVal_forceInt (exprNode_getValue (yyvsp[-2].expr));
       }
     else
       {
	 value = 0;
       }

     yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ctype_makeInnerFixedArray (idDecl_getCtype (yyvsp[-5].ntyp), value));
     lltok_free2 (yyvsp[-4].tok, yyvsp[-1].tok);
   ;
    break;}
case 33:
{ setCurrentParams (uentryList_missingParams); ;
    break;}
case 34:
{
     ctype ct = ctype_makeFunction (idDecl_getCtype (yyvsp[-5].ntyp), 
				    uentryList_makeMissingParams ());
     
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ct);
     idDecl_addClauses (yyval.ntyp, yyvsp[0].funcclauselist);
     context_popLoc (); 
     lltok_free2 (yyvsp[-3].tok, yyvsp[-2].tok);
   ;
    break;}
case 35:
{ setCurrentParams (yyvsp[-1].entrylist); ;
    break;}
case 36:
{ 
     clearCurrentParams ();
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-6].ntyp, ctype_makeFunction (idDecl_getCtype (yyvsp[-6].ntyp), yyvsp[-3].entrylist));
     idDecl_addClauses (yyval.ntyp, yyvsp[0].funcclauselist);
     context_popLoc (); 
     lltok_free (yyvsp[-4].tok);
     /*!! lltok_free2 ($3, $5); */
   ;
    break;}
case 37:
{ setCurrentParams (yyvsp[-1].entrylist); ;
    break;}
case 38:
{ clearCurrentParams (); ;
    break;}
case 39:
{ declareCIter (yyvsp[-8].cname, yyvsp[-6].entrylist); 
     lltok_free3 (yyvsp[-9].tok, yyvsp[-7].tok, yyvsp[-5].tok); 
   ;
    break;}
case 40:
{ exprNode_checkMacroBody (yyvsp[-1].expr); lltok_free2 (yyvsp[-2].tok, yyvsp[0].tok); ;
    break;}
case 41:
{ exprNode_checkIterBody (yyvsp[-1].expr); lltok_free2 (yyvsp[-2].tok, yyvsp[0].tok); ;
    break;}
case 42:
{ exprNode_checkIterEnd (yyvsp[-1].expr); lltok_free2 (yyvsp[-2].tok, yyvsp[0].tok);;
    break;}
case 43:
{ exprChecks_checkEmptyMacroBody (); lltok_free2 (yyvsp[-1].tok, yyvsp[0].tok); ;
    break;}
case 44:
{ clabstract_declareFunction (yyvsp[0].ntyp); ;
    break;}
case 45:
{ yyval.msconstraint = metaStateConstraint_create (yyvsp[-2].msspec, yyvsp[0].msexpr); lltok_free (yyvsp[-1].tok); ;
    break;}
case 46:
{ cscanner_expectingMetaStateName (); ;
    break;}
case 47:
{ cscanner_clearExpectingMetaStateName ();
      yyval.msspec = metaStateSpecifier_create (yyvsp[-3].sr, yyvsp[0].msinfo); 
      lltok_free (yyvsp[-1].tok); 
    ;
    break;}
case 48:
{ cscanner_expectingMetaStateName (); ;
    break;}
case 49:
{ cscanner_clearExpectingMetaStateName ();
      yyval.msspec = metaStateSpecifier_createElipsis (yyvsp[0].msinfo); 
      lltok_free2 (yyvsp[-3].tok, yyvsp[-1].tok);
    ;
    break;}
case 50:
{ yyval.msexpr = metaStateExpression_create (yyvsp[0].msspec); ;
    break;}
case 51:
{ yyval.msexpr = metaStateExpression_createMerge (yyvsp[-2].msspec, yyvsp[0].msexpr); lltok_free (yyvsp[-1].tok); ;
    break;}
case 55:
{ yyval.conL = constraintList_add (yyvsp[0].conL, yyvsp[-2].con); ;
    break;}
case 56:
{ yyval.conL = constraintList_single (yyvsp[0].con); ;
    break;}
case 57:
{
 yyval.con = makeConstraintParse3 (yyvsp[-2].conE, yyvsp[-1].tok, yyvsp[0].conE);
 DPRINTF(("Done BufConstraint1\n")); ;
    break;}
case 64:
{yyval.conE = constraintExpr_parseMakeUnaryOp (yyvsp[-3].tok, yyvsp[-1].conE);  DPRINTF( ("Got BufConstraintExpr UNary Op ") ); ;
    break;}
case 65:
{
   DPRINTF( ("Got BufConstraintExpr BINary Op ") );
   yyval.conE = constraintExpr_parseMakeBinaryOp (yyvsp[-3].conE, yyvsp[-2].tok, yyvsp[-1].conE); ;
    break;}
case 66:
{ yyval.conE =  constraintExpr_makeTermsRef (yyvsp[0].sr);;
    break;}
case 67:
{ yyval.conE = constraintExpr_makeIntLiteral (exprNode_getLongValue (yyvsp[0].expr)); ;
    break;}
case 68:
{ /*@-onlytrans@*/ yyval.sr = checkbufferConstraintClausesId (yyvsp[0].entry); /*@=onlytrans@*/ /*@i523@*/ ;
    break;}
case 69:
{ yyval.sr = fixStateClausesId (yyvsp[0].cname); ;
    break;}
case 70:
{ yyval.sr = sRef_makeAnyArrayFetch (yyvsp[-2].sr); ;
    break;}
case 71:
{
    /*
    char *t; int c; 
    t =  cstring_toCharsSafe (exprNode_unparse($3)); 
    c = atoi( t );
    */
    yyval.sr = sRef_makeArrayFetchKnown (yyvsp[-3].sr, exprNode_getLongValue (yyvsp[-1].expr));
  ;
    break;}
case 72:
{ yyval.sr = sRef_constructPointer (yyvsp[0].sr); ;
    break;}
case 73:
{ yyval.sr = yyvsp[-1].sr; ;
    break;}
case 74:
{ cstring_markOwned (yyvsp[0].cname); yyval.sr = sRef_buildField (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 75:
{ cstring_markOwned (yyvsp[0].cname); yyval.sr = sRef_makeArrow (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 79:
{ yyval.funcclauselist = functionClauseList_new (); ;
    break;}
case 80:
{ yyval.funcclauselist = functionClauseList_prepend (yyvsp[0].funcclauselist, yyvsp[-1].funcclause); ;
    break;}
case 81:
{ yyval.funcclauselist = functionClauseList_new (); ;
    break;}
case 82:
{ yyval.funcclauselist = functionClauseList_prepend (yyvsp[0].funcclauselist, yyvsp[-1].funcclause); ;
    break;}
case 83:
{ yyval.funcclause = functionClause_createGlobals (yyvsp[0].globsclause); ;
    break;}
case 84:
{ yyval.funcclause = functionClause_createModifies (yyvsp[0].modsclause); ;
    break;}
case 85:
{ yyval.funcclause = functionClause_createModifies (yyvsp[0].modsclause); ;
    break;}
case 86:
{ yyval.funcclause = functionClause_createState (yyvsp[0].stateclause); ;
    break;}
case 87:
{ yyval.funcclause = yyvsp[0].funcclause; ;
    break;}
case 88:
{ yyval.funcclause = functionClause_createWarn (yyvsp[0].warnclause); ;
    break;}
case 89:
{ yyval.funcclause = functionClause_createGlobals (yyvsp[0].globsclause); ;
    break;}
case 90:
{ yyval.funcclause = functionClause_createModifies (yyvsp[0].modsclause); ;
    break;}
case 91:
{ yyval.funcclause = functionClause_createModifies (yyvsp[0].modsclause); ;
    break;}
case 92:
{ yyval.funcclause = functionClause_createState (yyvsp[0].stateclause); ;
    break;}
case 93:
{ yyval.funcclause = yyvsp[0].funcclause; ;
    break;}
case 94:
{ yyval.funcclause = functionClause_createWarn (yyvsp[0].warnclause); ;
    break;}
case 95:
{ yyval.globsclause = yyvsp[-1].globsclause; ;
    break;}
case 96:
{ setProcessingGlobalsList (); ;
    break;}
case 97:
{ 
     unsetProcessingGlobals (); 
     yyval.globsclause = globalsClause_create (yyvsp[-3].tok, yyvsp[-1].globset); 
   ;
    break;}
case 98:
{ yyval.modsclause = modifiesClause_createNoMods (yyvsp[0].tok); ;
    break;}
case 99:
{ yyval.modsclause = yyvsp[-1].modsclause; ;
    break;}
case 100:
{
     context_setProtectVars (); enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;
    break;}
case 101:
{ 
     exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
     yyval.modsclause = modifiesClause_create (yyvsp[-2].tok, yyvsp[0].srset);
   ;
    break;}
case 102:
{ yyval.flagspec = flagSpec_createPlain (yyvsp[0].cname); ;
    break;}
case 103:
{ yyval.flagspec = flagSpec_createOr (yyvsp[-2].cname, yyvsp[0].flagspec); ;
    break;}
case 106:
{ yyval.warnclause = warnClause_undefined; ;
    break;}
case 107:
{ yyval.warnclause = yyvsp[-1].warnclause; ;
    break;}
case 108:
{      
     llassert (exprNode_knownStringValue (yyvsp[0].expr));
     yyval.warnclause = warnClause_create (yyvsp[-2].tok, yyvsp[-1].flagspec, cstring_copy (multiVal_forceString (exprNode_getValue (yyvsp[0].expr)))); 
     exprNode_free (yyvsp[0].expr);
   ;
    break;}
case 109:
{ yyval.warnclause = warnClause_create (yyvsp[-1].tok, yyvsp[0].flagspec, cstring_undefined); ;
    break;}
case 110:
{ yyval.globset = globSet_single (yyvsp[0].sr); ;
    break;}
case 111:
{ yyval.globset = globSet_insert (yyvsp[-2].globset, yyvsp[0].sr); ;
    break;}
case 112:
{ yyval.sr = clabstract_createGlobal (yyvsp[0].sr, yyvsp[-1].tquallist); ;
    break;}
case 113:
{ yyval.tquallist = qualList_undefined; ;
    break;}
case 114:
{ yyval.tquallist = qualList_add (yyvsp[0].tquallist, yyvsp[-1].typequal); ;
    break;}
case 115:
{ yyval.sr = uentry_getSref (yyvsp[0].entry); ;
    break;}
case 116:
{ yyval.sr = clabstract_unrecognizedGlobal (yyvsp[0].cname); ;
    break;}
case 117:
{ yyval.sr = clabstract_checkGlobal (yyvsp[0].expr); ;
    break;}
case 118:
{ yyval.typequal = qual_createUndef (); ;
    break;}
case 119:
{ yyval.typequal = qual_createKilled (); ;
    break;}
case 120:
{ yyval.typequal = qual_createOut (); ;
    break;}
case 121:
{ yyval.typequal = qual_createIn (); ;
    break;}
case 122:
{ yyval.typequal = qual_createPartial (); ;
    break;}
case 130:
{ 
     /**!!! deal with fred; fred (int); declarations! **/
     qtype qint = qtype_create (ctype_int); 
     yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, qint);
     qtype_free (qint);
   ;
    break;}
case 131:
{ yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, yyvsp[-2].qtyp); ;
    break;}
case 132:
{ checkDoneParams (); context_enterInnerContext (); ;
    break;}
case 133:
{  
     exprNode_checkFunctionBody (yyvsp[0].expr); yyval.expr = yyvsp[0].expr; 
     context_exitInner (yyvsp[0].expr); 
   ;
    break;}
case 134:
{ context_enterOldStyleScope (); ;
    break;}
case 135:
{ oldStyleDoneParams (); context_enterInnerContext (); ;
    break;}
case 136:
{
     exprNode_checkFunctionBody (yyvsp[0].expr); 
     yyval.expr = yyvsp[0].expr; /* oldstyle */ 
     context_exitInner (yyvsp[0].expr);
   ;
    break;}
case 137:
{ 
     context_setFunctionDefined (exprNode_loc (yyvsp[0].expr)); 
     exprNode_checkFunction (context_getHeader (),  yyvsp[0].expr); 
     /* DRL 8 8 2000 */
     
     context_exitFunction ();
   ;
    break;}
case 138:
{ yyval.srset = yyvsp[-1].srset; ;
    break;}
case 139:
{ yyval.srset = sRefSet_new (); ;
    break;}
case 140:
{ yyval.sr = uentry_getSref (yyvsp[0].entry); checkModifiesId (yyvsp[0].entry); ;
    break;}
case 141:
{ yyval.sr = fixModifiesId (yyvsp[0].cname); ;
    break;}
case 142:
{ yyval.sr = fixModifiesId (yyvsp[0].cname); ;
    break;}
case 143:
{ yyval.sr = modListArrayFetch (yyvsp[-2].sr, sRef_undefined); ;
    break;}
case 144:
{ yyval.sr = modListArrayFetch (yyvsp[-3].sr, yyvsp[-1].sr); ;
    break;}
case 145:
{ yyval.sr = modListPointer (yyvsp[0].sr); ;
    break;}
case 146:
{ yyval.sr = yyvsp[-1].sr; ;
    break;}
case 147:
{ yyval.sr = modListFieldAccess (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 148:
{ yyval.sr = modListArrowAccess (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 149:
{ yyval.sr = yyvsp[0].sr; ;
    break;}
case 150:
{ yyval.sr = sRef_makeUnknown (); /* sRef_makeConstant ($1); ? */ ;
    break;}
case 151:
{ yyval.srset = sRefSet_single (yyvsp[0].sr); ;
    break;}
case 152:
{ yyval.srset = sRefSet_insert (yyvsp[-2].srset, yyvsp[0].sr); ;
    break;}
case 153:
{ yyval.sr = checkStateClausesId (yyvsp[0].entry); ;
    break;}
case 154:
{ yyval.sr = fixStateClausesId (yyvsp[0].cname); ;
    break;}
case 155:
{ yyval.sr = sRef_makeAnyArrayFetch (yyvsp[-2].sr); ;
    break;}
case 156:
{ yyval.sr = sRef_makeAnyArrayFetch (yyvsp[-3].sr); ;
    break;}
case 157:
{ yyval.sr = sRef_constructPointer (yyvsp[0].sr); ;
    break;}
case 158:
{ yyval.sr = yyvsp[-1].sr; ;
    break;}
case 159:
{ cstring_markOwned (yyvsp[0].cname);
					    yyval.sr = sRef_buildField (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 160:
{ cstring_markOwned (yyvsp[0].cname);
                                            yyval.sr = sRef_makeArrow (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 161:
{ yyval.srset = sRefSet_undefined ;
    break;}
case 163:
{ if (sRef_isValid (yyvsp[0].sr)) { yyval.srset = sRefSet_single (yyvsp[0].sr); } 
      else { yyval.srset = sRefSet_undefined; } 
    ;
    break;}
case 164:
{ if (sRef_isValid (yyvsp[0].sr))
	{
	  yyval.srset = sRefSet_insert (yyvsp[-2].srset, yyvsp[0].sr); 
	}
      else
	{
	  yyval.srset = yyvsp[-2].srset;
	}
    ;
    break;}
case 165:
{ yyval.expr = exprNode_fromIdentifier (yyvsp[0].entry); ;
    break;}
case 166:
{ yyval.expr = exprNode_fromUIO (yyvsp[0].cname); ;
    break;}
case 168:
{ yyval.expr = exprNode_addParens (yyvsp[-2].tok, yyvsp[-1].expr); ;
    break;}
case 169:
{ yyval.expr = exprNode_fromIdentifier (coerceId (yyvsp[0].cname)); ;
    break;}
case 170:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 171:
{ exprChecks_inCompoundStatementExpression (); ;
    break;}
case 172:
{ exprChecks_leaveCompoundStatementExpression (); yyval.expr = exprNode_compoundStatementExpression (yyvsp[-3].tok, yyvsp[-1].expr); ;
    break;}
case 174:
{ yyval.expr = exprNode_arrayFetch (yyvsp[-3].expr, yyvsp[-1].expr); ;
    break;}
case 175:
{ yyval.expr = exprNode_functionCall (yyvsp[-2].expr, exprNodeList_new ()); ;
    break;}
case 176:
{ yyval.expr = exprNode_functionCall (yyvsp[-3].expr, yyvsp[-1].exprlist); ;
    break;}
case 177:
{ yyval.expr = exprNode_vaArg (yyvsp[-5].tok, yyvsp[-3].expr, yyvsp[-1].qtyp); ;
    break;}
case 178:
{ yyval.expr = exprNode_fieldAccess (yyvsp[-4].expr, yyvsp[-2].tok, yyvsp[-1].cname); ;
    break;}
case 179:
{ yyval.expr = exprNode_arrowAccess (yyvsp[-4].expr, yyvsp[-2].tok, yyvsp[-1].cname); ;
    break;}
case 180:
{ yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 181:
{ yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 182:
{ /* added for C99 */ yyval.expr = exprNode_undefined; /*@i87 no checking */ ;
    break;}
case 183:
{ yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 184:
{ yyval.exprlist = exprNodeList_push (yyvsp[-2].exprlist, yyvsp[0].expr); ;
    break;}
case 186:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 187:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 188:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 189:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 190:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 191:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 192:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 193:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 194:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 195:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 196:
{ yyval.cstringlist = cstringList_add (yyvsp[-2].cstringlist, yyvsp[0].cname); lltok_free (yyvsp[-1].tok); ;
    break;}
case 197:
{ yyval.cstringlist = yyvsp[-3].cstringlist; lltok_free2 (yyvsp[-2].tok, yyvsp[0].tok); ;
    break;}
case 198:
{ yyval.cstringlist = cstringList_single (yyvsp[0].cname); ;
    break;}
case 199:
{ yyval.expr = exprNode_offsetof (yyvsp[-5].qtyp, yyvsp[-2].cstringlist); 
     lltok_free3 (yyvsp[-8].tok, yyvsp[-6].tok, yyvsp[-3].tok); lltok_free (yyvsp[-1].tok); ;
    break;}
case 200:
{ context_setProtectVars (); ;
    break;}
case 201:
{ context_sizeofReleaseVars (); yyval.expr = yyvsp[0].expr; ;
    break;}
case 202:
{ yyval.expr = exprNode_sizeofType (yyvsp[-1].qtyp); lltok_free3 (yyvsp[-3].tok, yyvsp[-2].tok, yyvsp[0].tok); ;
    break;}
case 203:
{ yyval.expr = exprNode_sizeofExpr (yyvsp[0].expr); lltok_free (yyvsp[-1].tok); ;
    break;}
case 204:
{ yyval.expr = exprNode_alignofType (yyvsp[-1].qtyp); lltok_free3 (yyvsp[-3].tok, yyvsp[-2].tok, yyvsp[0].tok); ;
    break;}
case 205:
{ yyval.expr = exprNode_alignofExpr (yyvsp[0].expr); lltok_free (yyvsp[-1].tok); ;
    break;}
case 207:
{ yyval.expr = exprNode_cast (yyvsp[-3].tok, yyvsp[0].expr, yyvsp[-2].qtyp); lltok_free (yyvsp[-1].tok); ;
    break;}
case 209:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 210:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 211:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 213:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 214:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 216:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 217:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 219:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 220:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 221:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 222:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 224:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 225:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 227:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 229:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 231:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 233:
{ exprNode_produceGuards (yyvsp[-1].expr); 
     context_enterAndClause (yyvsp[-1].expr); 
   ;
    break;}
case 234:
{ 
     yyval.expr = exprNode_op (yyvsp[-3].expr, yyvsp[0].expr, yyvsp[-2].tok); 
     context_exitAndClause (yyval.expr, yyvsp[0].expr);
   ;
    break;}
case 236:
{ 
     exprNode_produceGuards (yyvsp[-1].expr);
     context_enterOrClause (yyvsp[-1].expr); 
   ;
    break;}
case 237:
{ 
     yyval.expr = exprNode_op (yyvsp[-3].expr, yyvsp[0].expr, yyvsp[-2].tok); 
     context_exitOrClause (yyval.expr, yyvsp[0].expr);
   ;
    break;}
case 239:
{ exprNode_produceGuards (yyvsp[-1].expr); context_enterTrueClause (yyvsp[-1].expr); ;
    break;}
case 240:
{ context_enterFalseClause (yyvsp[-4].expr); ;
    break;}
case 241:
{ yyval.expr = exprNode_cond (yyvsp[-6].expr, yyvsp[-3].expr, yyvsp[0].expr); context_exitClause (yyvsp[-6].expr, yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 243:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 244:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 245:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 246:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 247:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 248:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 249:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 250:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 251:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 252:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 253:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 255:
{ yyval.expr = exprNode_comma (yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 256:
{ yyval.expr = exprNode_undefined; ;
    break;}
case 259:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 260:
{ doVaDcl (); yyval.expr = exprNode_makeError (); ;
    break;}
case 261:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 262:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 263:
{
     setProcessingVars (yyvsp[-3].qtyp); 
     processNamedDecl (yyvsp[-1].ntyp); 
   ;
    break;}
case 264:
{ 
     unsetProcessingVars (); 
     yyval.expr = exprNode_makeEmptyInitialization (yyvsp[-6].ntyp); 
     DPRINTF (("Empty initialization: %s", exprNode_unparse (yyval.expr)));
   ;
    break;}
case 265:
{ setProcessingVars (yyvsp[-4].qtyp); processNamedDecl (yyvsp[-2].ntyp); ;
    break;}
case 266:
{ yyval.expr = exprNode_concat (yyvsp[-2].expr, exprNode_makeInitialization (yyvsp[-8].ntyp, yyvsp[-3].expr)); 
     unsetProcessingVars ();
   ;
    break;}
case 267:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 268:
{ yyval.expr = exprNode_fromIdentifier (usymtab_getTypeEntry (ctype_typeId (yyvsp[0].ctyp))); ;
    break;}
case 269:
{ 
     processNamedDecl (yyvsp[-1].ntyp); 
     yyval.expr = exprNode_makeEmptyInitialization (yyvsp[-1].ntyp);
   ;
    break;}
case 270:
{ processNamedDecl (yyvsp[-2].ntyp); ;
    break;}
case 271:
{ yyval.expr = exprNode_makeInitialization (yyvsp[-5].ntyp, yyvsp[0].expr); ;
    break;}
case 272:
{ setProcessingTypedef (yyvsp[0].qtyp); ;
    break;}
case 273:
{ clabstract_declareType (yyvsp[-3].exprlist, yyvsp[-1].warnclause); ;
    break;}
case 274:
{ /* in the ANSI grammar, semantics unclear */ ;
    break;}
case 275:
{ /* in the ANSI grammar, semantics unclear */ ;
    break;}
case 276:
{ g_expectingTypeName = TRUE; ;
    break;}
case 277:
{ g_expectingTypeName = TRUE; context_pushLoc (); ;
    break;}
case 278:
{ yyval.exprlist = yyvsp[-1].exprlist; ;
    break;}
case 279:
{ yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 280:
{ yyval.exprlist = exprNodeList_push (yyvsp[-3].exprlist, yyvsp[0].expr); ;
    break;}
case 281:
{ yyval.exprlist = yyvsp[-1].exprlist; ;
    break;}
case 282:
{ yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 283:
{ yyval.exprlist = exprNodeList_push (yyvsp[-3].exprlist, yyvsp[0].expr); ;
    break;}
case 284:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 285:
{ yyval.expr = exprNode_concat (yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 287:
{ yyval.expr = exprNode_makeInitBlock (yyvsp[-2].tok, yyvsp[-1].exprlist); lltok_free (yyvsp[0].tok); ;
    break;}
case 288:
{ yyval.expr = exprNode_makeInitBlock (yyvsp[-3].tok, yyvsp[-2].exprlist); lltok_free2 (yyvsp[-1].tok, yyvsp[0].tok); ;
    break;}
case 289:
{ yyval.expr = exprNode_undefined; ;
    break;}
case 290:
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 291:
{ yyval.expr = exprNode_undefined; 
                                     /* gcc extension, obsolete since 2.5 */ ;
    break;}
case 292:
{ yyval.expr = exprNode_undefined; ;
    break;}
case 293:
{ yyval.expr = exprNode_undefined; ;
    break;}
case 294:
{ yyval.expr = exprNode_undefined; ;
    break;}
case 295:
{ yyval.expr = exprNode_undefined; ;
    break;}
case 296:
{ yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 297:
{ yyval.exprlist = exprNodeList_push (yyvsp[-2].exprlist, yyvsp[0].expr); ;
    break;}
case 298:
{ setStorageClass (SCEXTERN); yyval.typequal = qual_createExtern (); ;
    break;}
case 299:
{ yyval.typequal = qual_createInline (); ;
    break;}
case 300:
{ setStorageClass (SCSTATIC); yyval.typequal = qual_createStatic (); ;
    break;}
case 301:
{ yyval.typequal = qual_createAuto (); ;
    break;}
case 302:
{ yyval.typequal = qual_createRegister (); ;
    break;}
case 303:
{ yyval.stateclause = yyvsp[-1].stateclause; ;
    break;}
case 304:
{
     context_setProtectVars (); 
     enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;
    break;}
case 305:
{ 
     exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
     yyval.stateclause = stateClause_createPlain (yyvsp[-5].tok, yyvsp[-2].srset);
   ;
    break;}
case 306:
{ yyval.funcclause = yyvsp[-1].funcclause; ;
    break;}
case 307:
{ yyval.tok = yyvsp[-1].tok; context_enterFunctionHeader (); ;
    break;}
case 308:
{
     context_exitFunctionHeader ();
     context_setProtectVars (); 
     enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;
    break;}
case 309:
{ 
     exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
     yyval.funcclause = functionClause_createState (stateClause_create (yyvsp[-5].tok, yyvsp[-4].typequal, yyvsp[-2].srset));
   ;
    break;}
case 310:
{
     context_setProtectVars (); 
     enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;
    break;}
case 311:
{
     context_exitFunctionHeader ();
     exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
     DPRINTF (("done optGlobBufConstraintsAux\n"));

     if (lltok_isEnsures (yyvsp[-4].tok)) 
       {
	 yyval.funcclause = functionClause_createEnsures (yyvsp[-2].fcnconstraint);
       }
     else if (lltok_isRequires (yyvsp[-4].tok))
       {
	 yyval.funcclause = functionClause_createRequires (yyvsp[-2].fcnconstraint);
       }
     else
       {
	 BADBRANCH;
       }

     DPRINTF (("FunctionclauseS: %s", functionClause_unparse (yyval.funcclause)));
   ;
    break;}
case 312:
{ yyval.fcnconstraint = functionConstraint_createBufferConstraint (yyvsp[0].conL); ;
    break;}
case 313:
{ yyval.fcnconstraint = functionConstraint_createMetaStateConstraint (yyvsp[0].msconstraint); DPRINTF (("Made constraint: %s", functionConstraint_unparse (yyval.fcnconstraint))); ;
    break;}
case 314:
{ yyval.typequal = qual_createExits (); ;
    break;}
case 315:
{ yyval.typequal = qual_createMayExit (); ;
    break;}
case 316:
{ yyval.typequal = qual_createTrueExit (); ;
    break;}
case 317:
{ yyval.typequal = qual_createFalseExit (); ;
    break;}
case 318:
{ yyval.typequal = qual_createNeverExit (); ;
    break;}
case 319:
{ yyval.typequal = qual_createChecked (); ;
    break;}
case 320:
{ yyval.typequal = qual_createCheckMod (); ;
    break;}
case 321:
{ yyval.typequal = qual_createUnchecked (); ;
    break;}
case 322:
{ yyval.typequal = qual_createCheckedStrict (); ;
    break;}
case 323:
{ yyval.typequal = qual_createOwned (); ;
    break;}
case 324:
{ yyval.typequal = qual_createDependent (); ;
    break;}
case 325:
{ yyval.typequal = qual_createYield (); ;
    break;}
case 326:
{ yyval.typequal = qual_createTemp (); ;
    break;}
case 327:
{ yyval.typequal = qual_createOnly (); ;
    break;}
case 328:
{ yyval.typequal = qual_createKeep (); ;
    break;}
case 329:
{ yyval.typequal = qual_createKept (); ;
    break;}
case 330:
{ yyval.typequal = qual_createShared (); ;
    break;}
case 331:
{ yyval.typequal = qual_createUnique (); ;
    break;}
case 332:
{ yyval.typequal = qual_createNull (); ;
    break;}
case 333:
{ yyval.typequal = qual_createIsNull (); ;
    break;}
case 334:
{ yyval.typequal = qual_createRelNull (); ;
    break;}
case 335:
{ yyval.typequal = qual_createNotNull (); ;
    break;}
case 336:
{ yyval.typequal = qual_createExposed (); ;
    break;}
case 337:
{ yyval.typequal = qual_createObserver (); ;
    break;}
case 338:
{ yyval.typequal = qual_createNullTerminated (); ;
    break;}
case 339:
{ yyval.typequal = qual_createMetaState (yyvsp[0].annotation); ;
    break;}
case 340:
{ yyval.typequal = qual_createReturned (); ;
    break;}
case 341:
{ yyval.typequal = qual_createSef (); ;
    break;}
case 342:
{ yyval.typequal = qual_createUnused (); ;
    break;}
case 343:
{ yyval.typequal = qual_createExternal (); ;
    break;}
case 344:
{ yyval.typequal = qual_createTrueNull (); ;
    break;}
case 345:
{ yyval.typequal = qual_createFalseNull (); ;
    break;}
case 346:
{ yyval.typequal = qual_createAbstract (); ;
    break;}
case 347:
{ yyval.typequal = qual_createConcrete (); ;
    break;}
case 348:
{ yyval.typequal = qual_createMutable (); ;
    break;}
case 349:
{ yyval.typequal = qual_createImmutable (); ;
    break;}
case 350:
{ yyval.typequal = qual_createRefCounted (); ;
    break;}
case 351:
{ yyval.typequal = qual_createRefs (); ;
    break;}
case 352:
{ yyval.typequal = qual_createKillRef (); ;
    break;}
case 353:
{ yyval.typequal = qual_createRelDef (); ;
    break;}
case 354:
{ yyval.typequal = qual_createNewRef (); ;
    break;}
case 355:
{ yyval.typequal = qual_createTempRef (); ;
    break;}
case 356:
{ yyval.typequal = qual_createShort (); ;
    break;}
case 357:
{ yyval.typequal = qual_createLong (); ;
    break;}
case 358:
{ yyval.typequal = qual_createSigned (); ;
    break;}
case 359:
{ yyval.typequal = qual_createUnsigned (); ;
    break;}
case 360:
{ yyval.typequal = qual_createOut (); ;
    break;}
case 361:
{ yyval.typequal = qual_createIn (); ;
    break;}
case 362:
{ yyval.typequal = qual_createPartial (); ;
    break;}
case 363:
{ yyval.typequal = qual_createSpecial (); ;
    break;}
case 364:
{ yyval.typequal = qual_createConst (); ;
    break;}
case 365:
{ yyval.typequal = qual_createVolatile (); ;
    break;}
case 366:
{ yyval.typequal = qual_createRestrict (); ;
    break;}
case 367:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 368:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 369:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 370:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 371:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 372:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 373:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 374:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 375:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 382:
{ yyval.ctyp = ctype_makeAnytype (); ;
    break;}
case 383:
{ yyval.ctyp = ctype_anyintegral; ;
    break;}
case 384:
{ yyval.ctyp = ctype_unsignedintegral; ;
    break;}
case 385:
{ yyval.ctyp = ctype_signedintegral; ;
    break;}
case 389:
{ yyval.ctyp = ctype_fromQual (yyvsp[-1].typequal); ;
    break;}
case 390:
{ yyval.qtyp = qtype_resolve (yyvsp[-1].qtyp); ;
    break;}
case 391:
{ yyval.qtyp = yyvsp[0].qtyp; ;
    break;}
case 392:
{ yyval.qtyp = qtype_mergeAlt (yyvsp[-3].qtyp, yyvsp[-1].qtyp); ;
    break;}
case 394:
{ yyval.qtyp = qtype_mergeAlt (yyvsp[-2].qtyp, yyvsp[0].qtyp); ;
    break;}
case 395:
{ yyval.qtyp = qtype_addQual (yyvsp[0].qtyp, yyvsp[-1].typequal); ;
    break;}
case 396:
{ yyval.qtyp = qtype_addQual (yyvsp[0].qtyp, yyvsp[-1].typequal); ;
    break;}
case 397:
{ yyval.qtyp = qtype_combine (yyvsp[0].qtyp, yyvsp[-1].ctyp); ;
    break;}
case 398:
{ yyval.qtyp = qtype_unknown (); ;
    break;}
case 399:
{ yyval.qtyp = yyvsp[0].qtyp; ;
    break;}
case 400:
{ yyval.conL = constraintList_undefined; ;
    break;}
case 401:
{ sRef_setGlobalScopeSafe (); ;
    break;}
case 402:
{ sRef_clearGlobalScopeSafe (); ;
    break;}
case 403:
{ ctype ct; ct = declareStruct (yyvsp[-9].cname, yyvsp[-4].flist); context_setGlobalStructInfo(ct, yyvsp[0].conL); yyval.ctyp = ct; ;
    break;}
case 404:
{ sRef_setGlobalScopeSafe (); ;
    break;}
case 405:
{ sRef_clearGlobalScopeSafe (); ;
    break;}
case 406:
{ yyval.ctyp = declareUnion (yyvsp[-8].cname, yyvsp[-3].flist); ;
    break;}
case 407:
{ yyval.ctyp = declareStruct (yyvsp[-3].cname, uentryList_new ()); ;
    break;}
case 408:
{ yyval.ctyp = declareUnion (yyvsp[-3].cname, uentryList_new ()); ;
    break;}
case 409:
{ sRef_setGlobalScopeSafe (); ;
    break;}
case 410:
{ sRef_clearGlobalScopeSafe (); ;
    break;}
case 411:
{ yyval.ctyp = declareUnnamedStruct (yyvsp[-3].flist); ;
    break;}
case 412:
{ sRef_setGlobalScopeSafe (); ;
    break;}
case 413:
{ sRef_clearGlobalScopeSafe (); ;
    break;}
case 414:
{ yyval.ctyp = declareUnnamedUnion (yyvsp[-3].flist); ;
    break;}
case 415:
{ yyval.ctyp = ctype_createUnnamedStruct (uentryList_new ()); ;
    break;}
case 416:
{ yyval.ctyp = ctype_createUnnamedUnion (uentryList_new ()); ;
    break;}
case 417:
{ yyval.ctyp = handleStruct (yyvsp[-1].cname); ;
    break;}
case 418:
{ yyval.ctyp = handleUnion (yyvsp[-1].cname); ;
    break;}
case 419:
{ g_expectingTypeName = FALSE; ;
    break;}
case 421:
{ yyval.flist = uentryList_undefined; /* bogus! */ ;
    break;}
case 422:
{ yyval.flist = uentryList_mergeFields (yyvsp[-1].flist, yyvsp[0].flist); ;
    break;}
case 423:
{ yyval.flist = fixUentryList (yyvsp[-2].ntyplist, yyvsp[-4].qtyp); ;
    break;}
case 424:
{ yyval.flist = fixUnnamedDecl (yyvsp[-2].qtyp); ;
    break;}
case 425:
{ yyval.ntyplist = idDeclList_singleton (yyvsp[-1].ntyp); ;
    break;}
case 426:
{ yyval.ntyplist = idDeclList_add (yyvsp[-3].ntyplist, yyvsp[-1].ntyp); ;
    break;}
case 427:
{ yyval.ntyp = yyvsp[0].ntyp; ;
    break;}
case 428:
{ yyval.ntyp = idDecl_undefined; ;
    break;}
case 429:
{ yyval.ntyp = yyvsp[-3].ntyp; ;
    break;}
case 430:
{ yyval.ctyp = declareUnnamedEnum (yyvsp[-2].enumnamelist); ;
    break;}
case 431:
{ context_pushLoc (); ;
    break;}
case 432:
{ context_popLoc (); yyval.ctyp = declareEnum (yyvsp[-5].cname, yyvsp[-2].enumnamelist); ;
    break;}
case 433:
{ yyval.ctyp = handleEnum (yyvsp[-1].cname); ;
    break;}
case 434:
{ yyval.enumnamelist = enumNameList_single (yyvsp[0].cname); ;
    break;}
case 435:
{ yyval.enumnamelist = enumNameList_push (yyvsp[-2].enumnamelist, yyvsp[0].cname); ;
    break;}
case 437:
{ uentry ue = uentry_makeEnumConstant (yyvsp[0].cname, ctype_unknown);
     usymtab_supGlobalEntry (ue);
     yyval.cname = yyvsp[0].cname;
   ;
    break;}
case 438:
{ uentry ue = uentry_makeEnumInitializedConstant (yyvsp[-3].cname, ctype_unknown, yyvsp[0].expr);
     usymtab_supGlobalEntry (ue);
     yyval.cname = yyvsp[-3].cname; 
   ;
    break;}
case 440:
{ yyval.ntyp = idDecl_create (cstring_undefined, qtype_create (yyvsp[0].ctyp)); ;
    break;}
case 441:
{ 
     qtype qt = qtype_unknown ();
     qtype_adjustPointers (yyvsp[-1].pointers, qt);
     yyval.ntyp = idDecl_create (cstring_copy (cscanner_observeLastIdentifier ()), qt);
   ;
    break;}
case 442:
{ yyval.ntyp = yyvsp[0].ntyp; qtype_adjustPointers (yyvsp[-1].pointers, idDecl_getTyp (yyval.ntyp)); ;
    break;}
case 444:
{ yyval.ntyp = yyvsp[0].ntyp; qtype_adjustPointers (yyvsp[-1].pointers, idDecl_getTyp (yyval.ntyp)); ;
    break;}
case 445:
{ yyval.entrylist = handleParamTypeList (yyvsp[0].entrylist); ;
    break;}
case 446:
{ yyval.entrylist = handleParamIdList (yyvsp[0].entrylist); ;
    break;}
case 447:
{ yyval.typequal = qual_createConst (); ;
    break;}
case 448:
{ yyval.typequal = qual_createRestrict (); ;
    break;}
case 449:
{ yyval.typequal = qual_createVolatile (); ;
    break;}
case 450:
{ yyval.tquallist = qualList_single (yyvsp[0].typequal); ;
    break;}
case 451:
{ yyval.tquallist = qualList_add (yyvsp[-1].tquallist, yyvsp[0].typequal); ;
    break;}
case 452:
{ yyval.pointers = pointers_create (yyvsp[0].tok); ;
    break;}
case 453:
{ yyval.pointers = pointers_createMods (yyvsp[-1].tok, yyvsp[0].tquallist); ;
    break;}
case 454:
{ yyval.pointers = pointers_extend (pointers_create (yyvsp[-1].tok), yyvsp[0].pointers); ;
    break;}
case 455:
{ yyval.pointers = pointers_extend (pointers_createMods (yyvsp[-2].tok, yyvsp[-1].tquallist), yyvsp[0].pointers); ;
    break;}
case 457:
{ yyval.entrylist = uentryList_add (yyvsp[-2].entrylist, uentry_makeElipsisMarker ()); ;
    break;}
case 458:
{ yyval.entrylist = uentryList_single (uentry_makeVariableLoc (yyvsp[0].cname, ctype_int)); ;
    break;}
case 459:
{ yyval.entrylist = uentryList_add (yyvsp[-2].entrylist, uentry_makeVariableLoc (yyvsp[0].cname, ctype_int)); ;
    break;}
case 460:
{ yyval.entrylist = uentryList_single (uentry_makeElipsisMarker ()); ;
    break;}
case 462:
{ yyval.entrylist = uentryList_add (yyvsp[-2].entrylist, uentry_makeElipsisMarker ()); ;
    break;}
case 463:
{ storeLoc (); ;
    break;}
case 464:
{ yyval.entrylist = uentryList_single (yyvsp[0].oentry); ;
    break;}
case 465:
{ storeLoc (); ;
    break;}
case 466:
{ yyval.entrylist = uentryList_add (yyvsp[-3].entrylist, yyvsp[0].oentry); ;
    break;}
case 467:
{ 
     if (isFlipOldStyle ()) 
       { 
	 llparseerror (cstring_makeLiteral ("Inconsistent function parameter syntax (mixing old and new style declaration)")); 
       }
     else 
       { 
	 setNewStyle (); 
       }
     yyval.oentry = makeCurrentParam (idDecl_fixParamBase (yyvsp[-1].ntyp, yyvsp[-2].qtyp)); 
   ;
    break;}
case 468:
{ 
     idDecl tparam = idDecl_create (yyvsp[0].cname, qtype_unknown ());

     if (isNewStyle ()) 
       {
	 llparseerror (message ("Inconsistent function parameter syntax: %q",
				idDecl_unparse (tparam))); 
       }

     setFlipOldStyle ();
     yyval.oentry = makeCurrentParam (tparam);
     idDecl_free (tparam);
   ;
    break;}
case 470:
{ yyval.qtyp = qtype_newBase (yyvsp[-1].qtyp, yyvsp[0].ctyp); ;
    break;}
case 471:
{ yyval.ctyp = ctype_adjustPointers (yyvsp[0].pointers, ctype_unknown); ;
    break;}
case 473:
{ yyval.ctyp = ctype_adjustPointers (yyvsp[-1].pointers, yyvsp[0].ctyp); ;
    break;}
case 474:
{ yyval.ctyp = ctype_unknown; ;
    break;}
case 476:
{ yyval.ctyp = ctype_expectFunction (yyvsp[-1].ctyp); ;
    break;}
case 477:
{ yyval.ctyp = ctype_makeArray (ctype_unknown); ;
    break;}
case 478:
{ yyval.ctyp = ctype_makeFixedArray (ctype_unknown, exprNode_getLongValue (yyvsp[-1].expr)); ;
    break;}
case 479:
{ yyval.ctyp = ctype_makeInnerArray (yyvsp[-2].ctyp); ;
    break;}
case 480:
{ yyval.ctyp = ctype_makeInnerFixedArray (yyvsp[-3].ctyp, exprNode_getLongValue (yyvsp[-1].expr)); ;
    break;}
case 481:
{ yyval.ctyp = ctype_makeFunction (ctype_unknown, uentryList_makeMissingParams ()); ;
    break;}
case 482:
{ yyval.ctyp = ctype_makeParamsFunction (ctype_unknown, yyvsp[-1].entrylist); ;
    break;}
case 483:
{ yyval.ctyp = ctype_makeFunction (yyvsp[-3].ctyp, uentryList_makeMissingParams ()); ;
    break;}
case 484:
{ yyval.ctyp = ctype_makeParamsFunction (yyvsp[-4].ctyp, yyvsp[-1].entrylist); ;
    break;}
case 494:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 497:
{ yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 498:
{ yyval.expr = exprNode_while (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 499:
{ yyval.expr = exprNode_doWhile (yyvsp[-5].expr, yyvsp[-2].expr); ;
    break;}
case 500:
{ yyval.expr = exprNode_doWhile (yyvsp[-4].expr, yyvsp[-1].expr); ;
    break;}
case 501:
{ yyval.expr = exprNode_for (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 502:
{ context_setProtectVars (); ;
    break;}
case 503:
{ context_sizeofReleaseVars (); ;
    break;}
case 504:
{ yyval.expr = exprNode_forPred (yyvsp[-7].expr, yyvsp[-5].expr, yyvsp[-2].expr); 
     context_enterForClause (yyvsp[-5].expr); ;
    break;}
case 505:
{ setProcessingIterVars (yyvsp[-2].entry); ;
    break;}
case 506:
{ yyval.expr = exprNode_iterStart (yyvsp[-5].entry, yyvsp[-1].exprlist); ;
    break;}
case 507:
{ yyval.expr = exprNode_createId (yyvsp[0].entry); ;
    break;}
case 511:
{ yyval.expr = yyvsp[-1].expr; DPRINTF (("def stmt: %s", exprNode_unparse (yyval.expr))); ;
    break;}
case 519:
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 520:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 521:
{ exprNode_checkIfPred (yyvsp[0].expr); ;
    break;}
case 522:
{ /* don't: context_exitTrueClause ($1, $2); */
     yyval.expr = exprNode_if (yyvsp[-2].expr, yyvsp[0].expr); 
   ;
    break;}
case 523:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 524:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 535:
{ yyval.expr = exprNode_addParens (yyvsp[-2].tok, yyvsp[-1].expr); ;
    break;}
case 537:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 538:
{ yyval.expr = exprNode_labelMarker (yyvsp[-1].cname); ;
    break;}
case 539:
{ yyval.expr = exprNode_notReached (yyvsp[0].expr); ;
    break;}
case 540:
{ ; ;
    break;}
case 541:
{ ; ;
    break;}
case 542:
{ context_enterCaseClause (yyvsp[0].expr); ;
    break;}
case 543:
{ yyval.expr = exprNode_caseMarker (yyvsp[-2].expr, FALSE); ;
    break;}
case 544:
{ context_enterCaseClause (yyvsp[0].expr); ;
    break;}
case 545:
{ yyval.expr = exprNode_caseMarker (yyvsp[-2].expr, TRUE); ;
    break;}
case 546:
{ context_enterCaseClause (exprNode_undefined); ;
    break;}
case 547:
{ yyval.expr = exprNode_defaultMarker (yyvsp[-2].tok, FALSE); ;
    break;}
case 548:
{ context_enterCaseClause (exprNode_undefined); ;
    break;}
case 549:
{ yyval.expr = exprNode_defaultMarker (yyvsp[-2].tok, TRUE); ;
    break;}
case 550:
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 551:
{ yyval.expr = yyvsp[0].expr; context_exitInner (yyvsp[0].expr); ;
    break;}
case 552:
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 553:
{ context_enterInnerContext (); ;
    break;}
case 554:
{ context_exitInnerPlain (); ;
    break;}
case 555:
{ context_enterStructInnerContext (); ;
    break;}
case 556:
{ context_exitStructInnerContext (); ;
    break;}
case 557:
{ context_exitInnerSafe (); ;
    break;}
case 558:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 559:
{ yyval.expr = exprNode_notReached (exprNode_createTok (yyvsp[0].tok)); ;
    break;}
case 560:
{ yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 561:
{ yyval.expr = exprNode_notReached (exprNode_updateLocation (yyvsp[-2].expr, lltok_getLoc (yyvsp[0].tok))); ;
    break;}
case 562:
{ yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 563:
{ yyval.expr = exprNode_notReached (exprNode_updateLocation (yyvsp[-2].expr, lltok_getLoc (yyvsp[0].tok))); ;
    break;}
case 564:
{ yyval.expr = exprNode_updateLocation (exprNode_concat (yyvsp[-2].expr, yyvsp[-1].expr), lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 565:
{ yyval.expr = exprNode_notReached (exprNode_updateLocation (exprNode_concat (yyvsp[-3].expr, yyvsp[-2].expr), 
							lltok_getLoc (yyvsp[-1].tok))); 
   ;
    break;}
case 566:
{ yyval.expr = exprNode_makeBlock (yyvsp[0].expr); ;
    break;}
case 567:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 568:
{ yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 569:
{ yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 570:
{ yyval.expr = exprNode_updateLocation (exprNode_concat (yyvsp[-2].expr, yyvsp[-1].expr), lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 572:
{ yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 573:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 574:
{ yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 575:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 576:
{ yyval.expr = exprNode_concat (yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 577:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 578:
{ yyval.expr = yyvsp[-2].expr; ;
    break;}
case 579:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 580:
{ yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 581:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 582:
{ yyval.expr = exprNode_statement (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 583:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 584:
{ yyval.expr = exprNode_statement (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 585:
{ yyval.expr = exprNode_checkExpr (yyvsp[0].expr); ;
    break;}
case 586:
{ 
     exprNode_produceGuards (yyvsp[-1].expr); context_enterTrueClause (yyvsp[-1].expr); 
     exprNode_checkIfPred (yyvsp[-1].expr);
     yyval.expr = yyvsp[-1].expr;
   ;
    break;}
case 587:
{ 
     context_exitTrueClause (yyvsp[-1].expr, yyvsp[0].expr);
     yyval.expr = exprNode_if (yyvsp[-1].expr, yyvsp[0].expr); 
   ;
    break;}
case 588:
{ context_enterFalseClause (yyvsp[-2].expr); ;
    break;}
case 589:
{
     context_exitClause (yyvsp[-4].expr, yyvsp[-3].expr, yyvsp[0].expr);
     yyval.expr = exprNode_ifelse (yyvsp[-4].expr, yyvsp[-3].expr, yyvsp[0].expr); 
   ;
    break;}
case 590:
{ context_enterSwitch (yyvsp[0].expr); ;
    break;}
case 591:
{ yyval.expr = exprNode_switch (yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 592:
{ yyval.expr = exprNode_whilePred (yyvsp[-1].expr); context_enterWhileClause (yyvsp[-1].expr); ;
    break;}
case 593:
{ yyval.expr = exprNode_whilePred(yyvsp[-1].expr); ;
    break;}
case 594:
{ context_enterIterClause (); ;
    break;}
case 595:
{ setProcessingIterVars (yyvsp[-3].entry); ;
    break;}
case 596:
{ 
     yyval.expr = exprNode_iter (yyvsp[-9].entry, yyvsp[-4].exprlist, yyvsp[-2].expr, yyvsp[-1].entry); 

   ;
    break;}
case 597:
{ yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 598:
{ nextIterParam (); ;
    break;}
case 599:
{ yyval.exprlist = exprNodeList_push (yyvsp[-3].exprlist, yyvsp[0].expr); ;
    break;}
case 600:
{ yyval.expr = exprNode_iterExpr (yyvsp[0].expr); ;
    break;}
case 601:
{ yyval.expr = exprNode_iterId (yyvsp[0].entry); ;
    break;}
case 602:
{ uentry ue = coerceIterId (yyvsp[0].cname);

		      if (uentry_isValid (ue)) 
			{
			  yyval.expr = exprNode_iterId (ue);
			}
		      else
			{
			  yyval.expr = exprNode_iterNewId (cstring_copy (cscanner_observeLastIdentifier ()));
			}
		    ;
    break;}
case 603:
{ yyval.expr = exprNode_iterNewId (yyvsp[0].cname); ;
    break;}
case 605:
{ yyval.expr = exprNode_combineLiterals (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 607:
{ yyval.expr = exprNode_addParens (yyvsp[-2].tok, yyvsp[-1].expr); ;
    break;}
case 609:
{ yyval.expr = exprNode_arrayFetch (yyvsp[-3].expr, yyvsp[-1].expr); ;
    break;}
case 610:
{ yyval.expr = exprNode_functionCall (yyvsp[-2].expr, exprNodeList_new ()); ;
    break;}
case 611:
{ yyval.expr = exprNode_functionCall (yyvsp[-3].expr, yyvsp[-1].exprlist); ;
    break;}
case 612:
{ yyval.expr = exprNode_vaArg (yyvsp[-5].tok, yyvsp[-3].expr, yyvsp[-1].qtyp); ;
    break;}
case 613:
{ yyval.expr = exprNode_fieldAccess (yyvsp[-4].expr, yyvsp[-2].tok, yyvsp[-1].cname); ;
    break;}
case 614:
{ yyval.expr = exprNode_arrowAccess (yyvsp[-4].expr, yyvsp[-2].tok, yyvsp[-1].cname); ;
    break;}
case 615:
{ yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 616:
{ yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 618:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 619:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 620:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 621:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 622:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 623:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 624:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 625:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 626:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 628:
{ yyval.expr = exprNode_cast (yyvsp[-3].tok, yyvsp[0].expr, yyvsp[-2].qtyp); ;
    break;}
case 630:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 631:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 632:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 634:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 635:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 637:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 638:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 640:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 641:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 642:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 643:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 645:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 646:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 648:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 650:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 652:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 654:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 656:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 658:
{ context_enterTrueClause (yyvsp[-1].expr); ;
    break;}
case 659:
{ context_enterFalseClause (yyvsp[-4].expr); ;
    break;}
case 660:
{ yyval.expr = exprNode_cond (yyvsp[-6].expr, yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 662:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 663:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 664:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 665:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 666:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 667:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 668:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 669:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 670:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 671:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 672:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 673:
{ yyval.entry = yyvsp[0].entry; ;
    break;}
case 674:
{ yyval.entry = uentry_undefined; ;
    break;}
case 675:
{ context_enterDoWhileClause (); yyval.tok = yyvsp[0].tok; ;
    break;}
case 676:
{ yyval.expr = exprNode_while (yyvsp[-1].expr, yyvsp[0].expr); context_exitWhileClause (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 677:
{ yyval.expr = exprNode_statement (exprNode_doWhile (yyvsp[-5].expr, yyvsp[-2].expr), yyvsp[0].tok); ;
    break;}
case 678:
{ yyval.expr = exprNode_for (yyvsp[-1].expr, yyvsp[0].expr); context_exitForClause (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 679:
{ yyval.expr = exprNode_while (yyvsp[-1].expr, yyvsp[0].expr); context_exitWhileClause (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 680:
{ yyval.expr = exprNode_statement (exprNode_doWhile (yyvsp[-5].expr, yyvsp[-2].expr), yyvsp[0].tok); ;
    break;}
case 681:
{ yyval.expr = exprNode_doWhile (yyvsp[-4].expr, yyvsp[-1].expr); ;
    break;}
case 682:
{ yyval.expr = exprNode_for (yyvsp[-1].expr, yyvsp[0].expr); context_exitForClause (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 683:
{ yyval.expr = exprNode_goto (yyvsp[-1].cname); ;
    break;}
case 684:
{ yyval.expr = exprNode_continue (yyvsp[-1].tok, BADTOK); ;
    break;}
case 685:
{ yyval.expr = exprNode_continue (yyvsp[-2].tok, QINNERCONTINUE); ;
    break;}
case 686:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, BADTOK); ;
    break;}
case 687:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, QSWITCHBREAK); ;
    break;}
case 688:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, QLOOPBREAK); ;
    break;}
case 689:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, QINNERBREAK); ;
    break;}
case 690:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, QSAFEBREAK); ;
    break;}
case 691:
{ yyval.expr = exprNode_nullReturn (yyvsp[-1].tok); ;
    break;}
case 692:
{ yyval.expr = exprNode_return (yyvsp[-1].expr); ;
    break;}
case 694:
{ ; ;
    break;}
case 696:
{ ; ;
    break;}
case 699:
{ yyval.cname = uentry_getName (yyvsp[0].entry); ;
    break;}
case 700:
{ yyval.cname = uentry_getName (yyvsp[0].entry); ;
    break;}
case 701:
{ yyval.cname = uentry_getName (yyvsp[0].entry); ;
    break;}
case 702:
{ yyval.cname = yyvsp[0].cname; ;
    break;}
case 704:
{ yyval.ctyp = ctype_unknown; ;
    break;}
case 705:
{ yyval.ctyp = exprNode_getType (yyvsp[-1].expr); exprNode_free (yyvsp[-1].expr); ;
    break;}
case 706:
{ yyval.ctyp = qtype_getType (yyvsp[-1].qtyp); ;
    break;}
}



  yyvsp -= yylen;
  yyssp -= yylen;
#if YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;
#if YYLSP_NEEDED
  *++yylsp = yyloc;
#endif

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  YYSIZE_T yysize = 0;
	  char *yymsg;
	  int yyx, yycount;

	  yycount = 0;
	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  for (yyx = yyn < 0 ? -yyn : 0;
	       yyx < (int) (sizeof (yytname) / sizeof (char *)); yyx++)
	    if (yycheck[yyx + yyn] == yyx)
	      yysize += yystrlen (yytname[yyx]) + 15, yycount++;
	  yysize += yystrlen ("parse error, unexpected ") + 1;
	  yysize += yystrlen (yytname[YYTRANSLATE (yychar)]);
	  yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg != 0)
	    {
	      char *yyp = yystpcpy (yymsg, "parse error, unexpected ");
	      yyp = yystpcpy (yyp, yytname[YYTRANSLATE (yychar)]);

	      if (yycount < 5)
		{
		  yycount = 0;
		  for (yyx = yyn < 0 ? -yyn : 0;
		       yyx < (int) (sizeof (yytname) / sizeof (char *));
		       yyx++)
		    if (yycheck[yyx + yyn] == yyx)
		      {
			const char *yyq = ! yycount ? ", expecting " : " or ";
			yyp = yystpcpy (yyp, yyq);
			yyp = yystpcpy (yyp, yytname[yyx]);
			yycount++;
		      }
		}
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exhausted");
	}
      else
#endif /* defined (YYERROR_VERBOSE) */
	yyerror ("parse error");
    }
  goto yyerrlab1;


/*--------------------------------------------------.
| yyerrlab1 -- error raised explicitly by an action |
`--------------------------------------------------*/
yyerrlab1:
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;
      YYDPRINTF ((stderr, "Discarding token %d (%s).\n",
		  yychar, yytname[yychar1]));
      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;


/*-------------------------------------------------------------------.
| yyerrdefault -- current state does not do anything special for the |
| error token.                                                       |
`-------------------------------------------------------------------*/
yyerrdefault:
#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */

  /* If its default is to accept any token, ok.  Otherwise pop it.  */
  yyn = yydefact[yystate];
  if (yyn)
    goto yydefault;
#endif


/*---------------------------------------------------------------.
| yyerrpop -- pop the current state because it cannot handle the |
| error token                                                    |
`---------------------------------------------------------------*/
yyerrpop:
  if (yyssp == yyss)
    YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#if YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "Error: state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

/*--------------.
| yyerrhandle.  |
`--------------*/
yyerrhandle:
  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

  YYDPRINTF ((stderr, "Shifting error token, "));

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

/*---------------------------------------------.
| yyoverflowab -- parser overflow comes here.  |
`---------------------------------------------*/
yyoverflowlab:
  yyerror ("parser stack overflow");
  yyresult = 2;
  /* Fall through.  */

yyreturn:
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  return yyresult;
}


/*@-redecl@*/ /*@-namechecks@*/
extern char *yytext;
/*@=redecl@*/ /*@=namechecks@*/

# include "bison.reset"

void yyerror (/*@unused@*/ char *s) 
{
  static bool givehint = FALSE;

  if (context_inIterDef ())
    {
      llerror (FLG_SYNTAX, message ("Iter syntax not parseable: %s", 
				    context_inFunctionName ()));
    }
  else if (context_inIterEnd ())
    {
      llerror (FLG_SYNTAX, message ("Iter finalizer syntax not parseable: %s", 
				    context_inFunctionName ()));
    }
  else if (context_inMacro ())
    {
      llerror (FLG_SYNTAX, message ("Macro syntax not parseable: %s", 
				    context_inFunctionName ()));
      
      if (context_inUnknownMacro ())
	{
	  if (!givehint)
	    {
	      llhint (cstring_makeLiteral 
		     ("Precede macro definition with /*@notfunction@*/ "
		      "to suppress checking and force expansion"));
	      givehint = TRUE;
	    }
	}

      cscanner_swallowMacro ();
      context_exitAllClausesQuiet ();
    }
  else
    {
      llparseerror (cstring_undefined);
    }
}












/*
** Resets all flags in bison.head
*/


/*@=allmacros@*/
/*@=boolint@*/
/*@=charint@*/
/*@=macroparams@*/
/*@=macroundef@*/
/*@=unreachable@*/
/*@=macrospec@*/
/*@=varuse@*/
/*@=ignorequals@*/
/*@=macrostmt@*/
/*@=noeffect@*/
/*@=shadow@*/
/*@=exitarg@*/
/*@=macroredef@*/
/*@=uniondef@*/
/*@=compdef@*/
/*@=matchfields@*/
/*@=exportlocal@*/
/*@=evalorderuncon@*/
/*@=exportheader@*/
/*@=typeuse@*/
/*@=redecl@*/
/*@=redef@*/
/*@=noparams@*/
/*@=ansireserved@*/
/*@=fielduse@*/
/*@=ifblock@*/
/*@=elseifcomplete@*/
/*@=whileblock@*/
/*@=forblock@*/
/*@=branchstate@*/
/*@=readonlytrans@*/
/*@=namechecks@*/
/*@=usedef@*/
/*@=systemunrecog@*/
/*@=dependenttrans@*/
/*@=unqualifiedtrans@*/
/*@=declundef@*/


/*drl added 11/27/2001*/
/*@=bounds@*/

/*drl added 12/11/2002*/
/*@=type@*/
