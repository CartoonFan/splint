/*
** Inserted at beginning of c files generated by bison
** REMEMBER:  Change bison.reset too.
*/

/*@-allmacros@*/
/*@+boolint@*/
/*@+charint@*/
/*@-macroparams@*/
/*@-macroundef@*/
/*@-unreachable@*/
/*@-macrospec@*/
/*@-varuse@*/
/*@+ignorequals@*/
/*@-macrostmt@*/
/*@-noeffect@*/
/*@-shadow@*/
/*@-exitarg@*/
/*@-macroredef@*/
/*@-uniondef@*/
/*@-compdef@*/
/*@-matchfields@*/
/*@-exportlocal@*/
/*@-evalorderuncon@*/
/*@-exportheader@*/
/*@-typeuse@*/
/*@-redecl@*/
/*@-redef@*/
/*@-noparams@*/
/*@-ansireserved@*/
/*@-fielduse@*/
/*@-ifblock@*/
/*@-elseifcomplete@*/
/*@-whileblock@*/
/*@-forblock@*/
/*@-branchstate@*/
/*@-readonlytrans@*/
/*@-namechecks@*/
/*@-usedef@*/
/*@-systemunrecog@*/
/*@-dependenttrans@*/
/*@-unqualifiedtrans@*/
/*@-nullassign@*/
/*@-declundef@*/

/*drl added 11/27/2001*/
/*@-arraybounds@*/
/*@-arrayboundsread@*/
/* < end of bison.head > */


/*  A Bison parser, made from cgrammar.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	BADTOK	257
#define	SKIPTOK	258
#define	CTOK_ELIPSIS	259
#define	CASE	260
#define	DEFAULT	261
#define	CIF	262
#define	CELSE	263
#define	SWITCH	264
#define	WHILE	265
#define	DO	266
#define	CFOR	267
#define	GOTO	268
#define	CONTINUE	269
#define	BREAK	270
#define	RETURN	271
#define	TSEMI	272
#define	TLBRACE	273
#define	TRBRACE	274
#define	TCOMMA	275
#define	TCOLON	276
#define	TASSIGN	277
#define	TLPAREN	278
#define	TRPAREN	279
#define	TLSQBR	280
#define	TRSQBR	281
#define	TDOT	282
#define	TAMPERSAND	283
#define	TEXCL	284
#define	TTILDE	285
#define	TMINUS	286
#define	TPLUS	287
#define	TMULT	288
#define	TDIV	289
#define	TPERCENT	290
#define	TLT	291
#define	TGT	292
#define	TCIRC	293
#define	TBAR	294
#define	TQUEST	295
#define	CSIZEOF	296
#define	CALIGNOF	297
#define	ARROW_OP	298
#define	CTYPEDEF	299
#define	COFFSETOF	300
#define	INC_OP	301
#define	DEC_OP	302
#define	LEFT_OP	303
#define	RIGHT_OP	304
#define	LE_OP	305
#define	GE_OP	306
#define	EQ_OP	307
#define	NE_OP	308
#define	AND_OP	309
#define	OR_OP	310
#define	MUL_ASSIGN	311
#define	DIV_ASSIGN	312
#define	MOD_ASSIGN	313
#define	ADD_ASSIGN	314
#define	SUB_ASSIGN	315
#define	LEFT_ASSIGN	316
#define	RIGHT_ASSIGN	317
#define	AND_ASSIGN	318
#define	XOR_ASSIGN	319
#define	OR_ASSIGN	320
#define	CSTRUCT	321
#define	CUNION	322
#define	CENUM	323
#define	VA_ARG	324
#define	VA_DCL	325
#define	QWARN	326
#define	QGLOBALS	327
#define	QMODIFIES	328
#define	QNOMODS	329
#define	QCONSTANT	330
#define	QFUNCTION	331
#define	QITER	332
#define	QDEFINES	333
#define	QUSES	334
#define	QALLOCATES	335
#define	QSETS	336
#define	QRELEASES	337
#define	QPRECLAUSE	338
#define	QPOSTCLAUSE	339
#define	QALT	340
#define	QUNDEF	341
#define	QKILLED	342
#define	QENDMACRO	343
#define	LLMACRO	344
#define	LLMACROITER	345
#define	LLMACROEND	346
#define	TENDMACRO	347
#define	QSWITCHBREAK	348
#define	QLOOPBREAK	349
#define	QINNERBREAK	350
#define	QSAFEBREAK	351
#define	QINNERCONTINUE	352
#define	QFALLTHROUGH	353
#define	QLINTNOTREACHED	354
#define	QLINTFALLTHROUGH	355
#define	QLINTFALLTHRU	356
#define	QARGSUSED	357
#define	QPRINTFLIKE	358
#define	QLINTPRINTFLIKE	359
#define	QSCANFLIKE	360
#define	QMESSAGELIKE	361
#define	QNOTREACHED	362
#define	QCONST	363
#define	QVOLATILE	364
#define	QINLINE	365
#define	QEXTENSION	366
#define	QEXTERN	367
#define	QSTATIC	368
#define	QAUTO	369
#define	QREGISTER	370
#define	QOUT	371
#define	QIN	372
#define	QYIELD	373
#define	QONLY	374
#define	QTEMP	375
#define	QSHARED	376
#define	QREF	377
#define	QUNIQUE	378
#define	QCHECKED	379
#define	QUNCHECKED	380
#define	QCHECKEDSTRICT	381
#define	QCHECKMOD	382
#define	QKEEP	383
#define	QKEPT	384
#define	QPARTIAL	385
#define	QSPECIAL	386
#define	QOWNED	387
#define	QDEPENDENT	388
#define	QRETURNED	389
#define	QEXPOSED	390
#define	QNULL	391
#define	QOBSERVER	392
#define	QISNULL	393
#define	QEXITS	394
#define	QMAYEXIT	395
#define	QNEVEREXIT	396
#define	QTRUEEXIT	397
#define	QFALSEEXIT	398
#define	QLONG	399
#define	QSIGNED	400
#define	QUNSIGNED	401
#define	QSHORT	402
#define	QUNUSED	403
#define	QSEF	404
#define	QNOTNULL	405
#define	QRELNULL	406
#define	QABSTRACT	407
#define	QCONCRETE	408
#define	QMUTABLE	409
#define	QIMMUTABLE	410
#define	QTRUENULL	411
#define	QFALSENULL	412
#define	QEXTERNAL	413
#define	QREFCOUNTED	414
#define	QREFS	415
#define	QNEWREF	416
#define	QTEMPREF	417
#define	QKILLREF	418
#define	QRELDEF	419
#define	CGCHAR	420
#define	CBOOL	421
#define	CINT	422
#define	CGFLOAT	423
#define	CDOUBLE	424
#define	CVOID	425
#define	QANYTYPE	426
#define	QINTEGRALTYPE	427
#define	QUNSIGNEDINTEGRALTYPE	428
#define	QSIGNEDINTEGRALTYPE	429
#define	QNULLTERMINATED	430
#define	QSETBUFFERSIZE	431
#define	QSETSTRINGLENGTH	432
#define	QMAXSET	433
#define	QMAXREAD	434
#define	QTESTINRANGE	435
#define	TCAND	436
#define	IDENTIFIER	437
#define	NEW_IDENTIFIER	438
#define	TYPE_NAME_OR_ID	439
#define	CANNOTATION	440
#define	CCONSTANT	441
#define	ITER_NAME	442
#define	ITER_ENDNAME	443
#define	TYPE_NAME	444
#define	METASTATE_NAME	445


/*
**
** cgrammar.y
**
** Yacc/Bison grammar for extended ANSI C used by LCLint.
**
** original grammar by Nate Osgood ---
**    hacrat@catfish.lcs.mit.edu Mon Jun 14 13:06:32 1993
**
** changes for LCLint --- handle typedef names correctly
** fix struct/union parsing bug (empty struct is accepted)
** add productions to handle macros --- require
** error correction --- main source of conflicts in grammar.
** need to process initializations sequentially, L->R
**
** production names are cryptic, so more productions fit on one line
**
** conflicts:  87 shift/reduce, 18 reduce/reduce
** most of these are due to handling macros
** a few are due to handling type expressions
*/

/*@=allmacros@*/

extern int yylex ();
extern void swallowMacro (void);
extern void yyerror (char *);

# include "lclintMacros.nf"
# include "basic.h"
# include "cscanner.h"
# include "cgrammar.h"
# include "exprChecks.h"

/*@-allmacros@*/
/*@-matchfields@*/

# define SHOWCSYM FALSE

/*
** This is necessary, or else when the bison-generated code #include's malloc.h,
** there will be a parse error.
**
** Unfortunately, it means the error checking on malloc, etc. is lost for allocations
** in bison-generated files under Win32.
*/

# ifdef WIN32
# undef malloc
# undef calloc
# undef realloc
# endif


typedef union
{
  lltok tok;
  int count;
  qual typequal;
  qualList tquallist;
  ctype ctyp;
  /*@dependent@*/ sRef sr;
  /*@only@*/ sRef osr;

  /*@only@*/ functionClauseList funcclauselist;
  /*@only@*/ functionClause funcclause;  
  /*@only@*/ flagSpec flagspec;
  /*@only@*/ globalsClause globsclause;
  /*@only@*/ modifiesClause modsclause;
  /*@only@*/ warnClause warnclause;
  /*@only@*/ stateClause stateclause;

  /*@only@*/ functionConstraint fcnconstraint; 

  /*@only@*/ metaStateConstraint msconstraint;
  /*@only@*/ metaStateSpecifier msspec;
  /*@only@*/ metaStateExpression msexpr;
  /*@observer@*/ metaStateInfo msinfo;

  /*@only@*/ sRefList srlist;
  /*@only@*/ globSet globset;
  /*@only@*/ qtype qtyp;
  /*@only@*/ cstring cname;
  /*@observer@*/ annotationInfo annotation;
  /*@only@*/ idDecl ntyp;
  /*@only@*/ idDeclList ntyplist;
  /*@only@*/ uentryList flist;
  /*@owned@*/ uentryList entrylist;
  /*@observer@*/ /*@dependent@*/ uentry entry;
  /*@only@*/ uentry oentry;
  /*@only@*/ exprNode expr;
  /*@only@*/ enumNameList enumnamelist;
  /*@only@*/ exprNodeList exprlist;
  /*@only@*/ sRefSet srset; 
  /*@only@*/ cstringList cstringlist;

  /*drl
    added 1/19/2001
  */
  constraint con;
  constraintList conL;
  constraintExpr conE;
  /* drl */  
} YYSTYPE;
#ifndef YYDEBUG
#define YYDEBUG 1
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1192
#define	YYFLAG		-32768
#define	YYNTBASE	192

#define YYTRANSLATE(x) ((unsigned)(x) <= 445 ? yytranslate[x] : 447)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
   177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
   187,   188,   189,   190,   191
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     1,     3,     5,     8,    11,    13,    15,    17,    19,
    21,    23,    32,    44,    45,    51,    53,    57,    59,    62,
    64,    71,    75,    82,    83,    90,    91,    99,   101,   108,
   112,   119,   120,   127,   128,   136,   137,   138,   149,   153,
   157,   161,   164,   166,   170,   171,   176,   177,   182,   184,
   188,   190,   194,   196,   200,   202,   204,   206,   208,   210,
   212,   217,   223,   225,   227,   229,   231,   235,   240,   243,
   247,   251,   255,   257,   259,   261,   262,   265,   266,   269,
   271,   273,   275,   277,   279,   281,   283,   285,   287,   289,
   291,   293,   296,   297,   302,   304,   307,   308,   312,   314,
   318,   320,   322,   323,   326,   330,   333,   335,   339,   342,
   343,   346,   348,   350,   352,   354,   356,   358,   360,   362,
   364,   366,   368,   370,   372,   374,   376,   378,   382,   383,
   387,   388,   389,   394,   397,   400,   402,   404,   406,   410,
   415,   418,   422,   426,   430,   432,   434,   436,   440,   442,
   444,   448,   453,   456,   460,   464,   468,   469,   471,   473,
   477,   479,   481,   483,   487,   489,   491,   493,   498,   502,
   507,   514,   520,   526,   529,   532,   534,   538,   540,   543,
   546,   549,   552,   555,   558,   561,   564,   566,   568,   572,
   574,   584,   585,   589,   594,   597,   602,   605,   607,   612,
   614,   618,   622,   626,   628,   632,   636,   638,   642,   646,
   648,   652,   656,   660,   664,   666,   670,   674,   676,   680,
   682,   686,   688,   692,   694,   695,   700,   702,   703,   708,
   710,   711,   712,   720,   722,   726,   730,   734,   738,   742,
   746,   750,   754,   758,   762,   766,   768,   772,   773,   775,
   777,   779,   781,   783,   787,   788,   798,   799,   811,   814,
   815,   822,   823,   832,   837,   842,   843,   844,   847,   849,
   854,   855,   860,   862,   866,   871,   873,   877,   879,   881,
   883,   885,   887,   890,   893,   894,   901,   904,   907,   908,
   915,   916,   922,   924,   926,   928,   930,   932,   934,   936,
   938,   940,   942,   944,   946,   948,   950,   952,   954,   956,
   958,   960,   962,   964,   966,   968,   970,   972,   974,   976,
   978,   980,   982,   984,   986,   988,   990,   992,   994,   996,
   998,  1000,  1002,  1004,  1006,  1008,  1010,  1012,  1014,  1016,
  1018,  1020,  1022,  1024,  1026,  1029,  1032,  1035,  1038,  1041,
  1044,  1047,  1050,  1053,  1056,  1059,  1062,  1065,  1068,  1071,
  1074,  1077,  1080,  1083,  1086,  1089,  1092,  1095,  1098,  1101,
  1105,  1107,  1112,  1114,  1118,  1121,  1124,  1127,  1128,  1130,
  1131,  1132,  1144,  1145,  1146,  1158,  1165,  1172,  1173,  1174,
  1185,  1186,  1187,  1198,  1204,  1210,  1215,  1220,  1221,  1223,
  1225,  1228,  1234,  1238,  1241,  1246,  1248,  1252,  1257,  1264,
  1265,  1274,  1279,  1281,  1285,  1288,  1290,  1295,  1297,  1299,
  1302,  1305,  1307,  1310,  1312,  1315,  1317,  1319,  1321,  1324,
  1326,  1329,  1332,  1336,  1338,  1342,  1344,  1348,  1350,  1352,
  1356,  1357,  1360,  1361,  1366,  1371,  1373,  1375,  1378,  1380,
  1382,  1385,  1386,  1388,  1394,  1397,  1401,  1405,  1410,  1414,
  1419,  1424,  1430,  1432,  1434,  1436,  1438,  1440,  1442,  1444,
  1446,  1448,  1450,  1452,  1454,  1457,  1460,  1468,  1475,  1478,
  1479,  1480,  1491,  1492,  1499,  1501,  1503,  1505,  1507,  1510,
  1512,  1514,  1516,  1518,  1520,  1522,  1524,  1528,  1530,  1533,
  1536,  1539,  1541,  1543,  1545,  1547,  1549,  1551,  1553,  1555,
  1557,  1559,  1563,  1565,  1567,  1570,  1573,  1574,  1577,  1578,
  1583,  1584,  1591,  1592,  1596,  1597,  1603,  1607,  1610,  1614,
  1615,  1616,  1617,  1618,  1619,  1621,  1624,  1627,  1631,  1634,
  1638,  1642,  1647,  1650,  1653,  1657,  1661,  1666,  1668,  1671,
  1673,  1676,  1678,  1681,  1683,  1686,  1688,  1691,  1693,  1698,
  1701,  1702,  1708,  1709,  1716,  1721,  1726,  1727,  1728,  1739,
  1741,  1742,  1747,  1749,  1751,  1753,  1755,  1757,  1760,  1762,
  1766,  1768,  1773,  1777,  1782,  1789,  1795,  1801,  1804,  1807,
  1809,  1812,  1815,  1818,  1821,  1824,  1827,  1830,  1833,  1835,
  1837,  1842,  1844,  1848,  1852,  1856,  1858,  1862,  1866,  1868,
  1872,  1876,  1878,  1882,  1886,  1890,  1894,  1896,  1900,  1904,
  1906,  1910,  1912,  1916,  1918,  1922,  1924,  1928,  1930,  1934,
  1936,  1937,  1938,  1946,  1948,  1952,  1956,  1960,  1964,  1968,
  1972,  1976,  1980,  1984,  1988,  1992,  1994,  1995,  1997,  2000,
  2008,  2011,  2014,  2022,  2029,  2032,  2036,  2039,  2043,  2046,
  2050,  2054,  2058,  2062,  2065,  2069,  2070,  2072,  2074,  2076,
  2078,  2080,  2082,  2084,  2086
};

static const short yyrhs[] = {    -1,
   193,     0,   194,     0,   193,   194,     0,   254,   443,     0,
   195,     0,   196,     0,   206,     0,   209,     0,   291,     0,
     1,     0,    76,   329,   342,   352,   342,   443,   299,    89,
     0,    76,   329,   342,   352,   342,    23,   299,   304,   303,
   443,    89,     0,     0,    77,   197,   198,   443,    89,     0,
   199,     0,   329,   342,   199,     0,   203,     0,   356,   203,
     0,   445,     0,   299,    24,   342,   352,   299,    25,     0,
   200,    26,    27,     0,   200,    26,   299,   290,    27,   342,
     0,     0,   200,   300,    24,    25,   201,   226,     0,     0,
   200,   300,    24,   353,    25,   202,   226,     0,   445,     0,
   299,    24,   342,   199,   299,    25,     0,   203,    26,    27,
     0,   203,    26,   299,   290,    27,   342,     0,     0,   203,
   300,    24,    25,   204,   227,     0,     0,   203,   300,    24,
   353,    25,   205,   227,     0,     0,     0,    78,   445,    24,
   353,    25,   207,   227,   208,   443,    89,     0,    90,   382,
    93,     0,    91,   369,    93,     0,    92,   370,    93,     0,
    90,    93,     0,   249,     0,   212,    23,   215,     0,     0,
   223,   213,    22,   216,     0,     0,     5,   214,    22,   216,
     0,   212,     0,   212,    40,   215,     0,   191,     0,   218,
   182,   217,     0,   218,     0,   221,   220,   221,     0,   179,
     0,   180,     0,    52,     0,    51,     0,    53,     0,   222,
     0,   224,    24,   221,    25,     0,    24,   221,   225,   221,
    25,     0,   223,     0,   187,     0,   444,     0,   184,     0,
   223,    26,    27,     0,   223,    26,   187,    27,     0,    34,
   223,     0,    24,   223,    25,     0,   223,    28,   445,     0,
   223,    44,   445,     0,   219,     0,    33,     0,    32,     0,
     0,   228,   226,     0,     0,   229,   227,     0,   230,     0,
   234,     0,   233,     0,   307,     0,   310,     0,   240,     0,
   231,     0,   235,     0,   233,     0,   308,     0,   312,     0,
   241,     0,   231,    89,     0,     0,    73,   232,   242,   443,
     0,    75,     0,   235,    89,     0,     0,    74,   236,   255,
     0,   238,     0,   238,    40,   237,     0,   184,     0,   240,
     0,     0,   241,    89,     0,    72,   237,   419,     0,    72,
   237,     0,   243,     0,   242,    21,   243,     0,   244,   245,
     0,     0,   246,   244,     0,   444,     0,   184,     0,   291,
     0,    87,     0,    88,     0,   117,     0,   118,     0,   131,
     0,    79,     0,    80,     0,    81,     0,    82,     0,    83,
     0,    84,     0,    85,     0,   352,     0,   329,   342,   352,
     0,     0,    19,   251,   399,     0,     0,     0,   252,   403,
   253,   392,     0,   210,   250,     0,   258,   443,     0,   443,
     0,   444,     0,   184,     0,   256,    26,    27,     0,   256,
    26,   257,    27,     0,    34,   256,     0,    24,   256,    25,
     0,   256,    28,   445,     0,   256,    44,   445,     0,   256,
     0,   419,     0,   256,     0,   258,    21,   256,     0,   444,
     0,   184,     0,   259,    26,    27,     0,   259,    26,   257,
    27,     0,    34,   259,     0,    24,   259,    25,     0,   259,
    28,   445,     0,   259,    44,   445,     0,     0,   261,     0,
   259,     0,   261,    21,   259,     0,   444,     0,   184,     0,
   419,     0,    24,   288,    25,     0,   185,     0,   112,     0,
   262,     0,   263,    26,   288,    27,     0,   263,    24,    25,
     0,   263,    24,   264,    25,     0,    70,    24,   287,    21,
   364,    25,     0,   263,   342,    28,   445,   299,     0,   263,
   342,    44,   445,   299,     0,   263,    47,     0,   263,    48,
     0,   287,     0,   264,    21,   287,     0,   263,     0,    47,
   265,     0,    48,   265,     0,    29,   271,     0,    34,   271,
     0,    33,   271,     0,    32,   271,     0,    31,   271,     0,
    30,   271,     0,   268,     0,   267,     0,   266,    28,   445,
     0,   445,     0,    46,   299,    24,   364,   342,    21,   266,
    25,   299,     0,     0,   299,   269,   270,     0,    42,    24,
   364,    25,     0,    42,   265,     0,    43,    24,   364,    25,
     0,    43,   265,     0,   265,     0,    24,   364,    25,   271,
     0,   271,     0,   272,    34,   271,     0,   272,    35,   271,
     0,   272,    36,   271,     0,   272,     0,   273,    33,   272,
     0,   273,    32,   272,     0,   273,     0,   274,    49,   273,
     0,   274,    50,   273,     0,   274,     0,   275,    37,   274,
     0,   275,    38,   274,     0,   275,    51,   274,     0,   275,
    52,   274,     0,   275,     0,   276,    53,   275,     0,   276,
    54,   275,     0,   276,     0,   277,    29,   276,     0,   277,
     0,   278,    39,   277,     0,   278,     0,   279,    40,   278,
     0,   279,     0,     0,   280,    55,   281,   279,     0,   280,
     0,     0,   282,    56,   283,   280,     0,   282,     0,     0,
     0,   282,    41,   285,   288,    22,   286,   284,     0,   284,
     0,   265,    23,   287,     0,   265,    57,   287,     0,   265,
    58,   287,     0,   265,    59,   287,     0,   265,    60,   287,
     0,   265,    61,   287,     0,   265,    62,   287,     0,   265,
    63,   287,     0,   265,    64,   287,     0,   265,    65,   287,
     0,   265,    66,   287,     0,   287,     0,   288,    21,   287,
     0,     0,   288,     0,   284,     0,   292,     0,    71,     0,
   297,     0,   329,   299,    18,     0,     0,   329,   342,   352,
   342,   293,   299,   303,    18,   299,     0,     0,   329,   342,
   352,   342,    23,   294,   299,   304,   303,    18,   299,     0,
   352,   342,     0,     0,   352,   342,    23,   296,   299,   304,
     0,     0,    45,   329,   298,   342,   301,   299,   239,    18,
     0,    45,   329,   299,    18,     0,    45,   301,   299,    18,
     0,     0,     0,   302,   299,     0,   295,     0,   301,    21,
   342,   295,     0,     0,   303,    21,   342,   295,     0,   287,
     0,    19,   305,    20,     0,    19,   305,    21,    20,     0,
   304,     0,   305,    21,   304,     0,   113,     0,   111,     0,
   114,     0,   115,     0,   116,     0,   176,   299,     0,   308,
    89,     0,     0,   247,   342,   309,   261,   443,   299,     0,
   312,    89,     0,   248,   342,     0,     0,   311,   318,   313,
   260,   443,   299,     0,     0,   311,   314,   315,   443,   299,
     0,   217,     0,   211,     0,   140,     0,   141,     0,   143,
     0,   144,     0,   142,     0,   125,     0,   128,     0,   126,
     0,   127,     0,   133,     0,   134,     0,   119,     0,   121,
     0,   120,     0,   129,     0,   130,     0,   122,     0,   124,
     0,   137,     0,   139,     0,   152,     0,   151,     0,   136,
     0,   138,     0,   176,     0,   186,     0,   135,     0,   150,
     0,   149,     0,   159,     0,   157,     0,   158,     0,   153,
     0,   154,     0,   155,     0,   156,     0,   160,     0,   161,
     0,   164,     0,   165,     0,   162,     0,   163,     0,   148,
     0,   145,     0,   146,     0,   147,     0,   117,     0,   118,
     0,   131,     0,   132,     0,   109,   299,     0,   110,   299,
     0,   325,   299,     0,   318,   299,     0,   316,   299,     0,
   319,   299,     0,   317,   299,     0,   321,   299,     0,   320,
   299,     0,   322,   299,     0,   323,   299,     0,   166,   342,
     0,   168,   342,     0,   167,   342,     0,   169,   342,     0,
   170,   342,     0,   171,   342,     0,   172,   342,     0,   173,
   342,     0,   174,   342,     0,   175,   342,     0,   446,   342,
     0,   333,   342,     0,   347,   342,     0,   324,   342,     0,
   299,   329,   299,     0,   331,     0,   331,    86,   330,    89,
     0,   364,     0,   364,    21,   330,     0,   306,   332,     0,
   326,   332,     0,   327,   332,     0,     0,   329,     0,     0,
     0,   342,    67,   445,   299,    19,   334,   396,   343,   397,
   335,    20,     0,     0,     0,   342,    68,   445,   299,    19,
   336,   396,   343,   397,   337,    20,     0,   342,    67,   445,
   299,    19,    20,     0,   342,    68,   445,   299,    19,    20,
     0,     0,     0,   342,    67,   299,    19,   338,   396,   343,
   397,   339,    20,     0,     0,     0,   342,    68,   299,    19,
   340,   396,   343,   397,   341,    20,     0,   342,    67,   299,
    19,    20,     0,   342,    68,   299,    19,    20,     0,   342,
    67,   445,   342,     0,   342,    68,   445,   342,     0,     0,
   344,     0,   209,     0,   343,   344,     0,   329,   342,   345,
   299,    18,     0,   329,   299,    18,     0,   346,   342,     0,
   345,    21,   346,   342,     0,   352,     0,    22,   299,   290,
     0,   352,    22,   299,   290,     0,   342,    69,    19,   349,
    20,   299,     0,     0,   342,    69,   445,    19,   348,   349,
    20,   299,     0,   342,    69,   445,   299,     0,   350,     0,
   349,    21,   350,     0,   349,    21,     0,   445,     0,   445,
    23,   299,   290,     0,   200,     0,   366,     0,   356,   190,
     0,   356,   351,     0,   200,     0,   356,   200,     0,   359,
     0,   342,   357,     0,   109,     0,   110,     0,   354,     0,
   355,   354,     0,    34,     0,    34,   355,     0,    34,   356,
     0,    34,   355,   356,     0,   358,     0,   358,    21,     5,
     0,   445,     0,   358,    21,   445,     0,     5,     0,   360,
     0,   360,    21,     5,     0,     0,   361,   363,     0,     0,
   360,    21,   362,   363,     0,   299,   329,   351,   299,     0,
   445,     0,   328,     0,   328,   365,     0,   356,     0,   367,
     0,   356,   367,     0,     0,   367,     0,   299,    24,   342,
   365,    25,     0,    26,    27,     0,    26,   290,    27,     0,
   367,    26,    27,     0,   367,    26,   290,    27,     0,   299,
    24,    25,     0,   299,    24,   359,    25,     0,   367,   299,
    24,    25,     0,   367,   299,    24,   359,    25,     0,   384,
     0,   386,     0,   389,     0,   392,     0,   405,     0,   408,
     0,   440,     0,   413,     0,   442,     0,   371,     0,   369,
     0,   378,     0,   371,   378,     0,   412,   371,     0,   439,
   383,    11,    24,   288,    25,    18,     0,   439,   383,    11,
    24,   288,    25,     0,   373,   378,     0,     0,     0,    13,
    24,   289,    18,   289,    18,   374,   289,   375,    25,     0,
     0,   188,   394,    24,   377,   416,    25,     0,   189,     0,
   384,     0,   386,     0,   389,     0,   380,   403,     0,   380,
     0,   381,     0,   405,     0,   379,     0,   372,     0,   376,
     0,   442,     0,    24,   378,    25,     0,     1,     0,   407,
   378,     0,   394,    19,     0,   398,    20,     0,   383,     0,
   402,     0,   384,     0,   386,     0,   389,     0,   393,     0,
   406,     0,   408,     0,   413,     0,   441,     0,    24,   383,
    25,     0,   442,     0,     1,     0,   445,    22,     0,   108,
   368,     0,     0,    99,   385,     0,     0,     6,   290,   387,
    22,     0,     0,    99,   385,     6,   290,   388,    22,     0,
     0,     7,   390,    22,     0,     0,    99,   385,     7,   391,
    22,     0,    24,   392,    25,     0,   394,   400,     0,   394,
   401,   395,     0,     0,     0,     0,     0,     0,    20,     0,
   108,    20,     0,   404,    20,     0,   404,   108,    20,     0,
   403,    20,     0,   403,   108,    20,     0,   403,   404,    20,
     0,   403,   404,   108,    20,     0,    19,   399,     0,    19,
    20,     0,    19,   402,    20,     0,    19,   403,    20,     0,
    19,   403,   404,    20,     0,   383,     0,   402,   383,     0,
   291,     0,   403,   291,     0,   368,     0,   404,   368,     0,
    18,     0,   288,    18,     0,    18,     0,   288,    18,     0,
   288,     0,     8,    24,   288,    25,     0,   407,   368,     0,
     0,   407,   368,     9,   409,   368,     0,     0,    10,    24,
   288,   410,    25,   368,     0,    11,    24,   288,    25,     0,
    11,    24,   288,    25,     0,     0,     0,   188,   414,   394,
    24,   415,   416,    25,   392,   438,   395,     0,   418,     0,
     0,   416,   417,    21,   418,     0,   437,     0,   444,     0,
   185,     0,   184,     0,   187,     0,   419,   187,     0,   419,
     0,    24,   288,    25,     0,   420,     0,   263,    26,   288,
    27,     0,   263,    24,    25,     0,   263,    24,   264,    25,
     0,    70,    24,   287,    21,   364,    25,     0,   263,   342,
    28,   445,   299,     0,   263,   342,    44,   445,   299,     0,
   263,    47,     0,   263,    48,     0,   421,     0,    47,   265,
     0,    48,   265,     0,    29,   271,     0,    34,   271,     0,
    33,   271,     0,    32,   271,     0,    31,   271,     0,    30,
   271,     0,   268,     0,   422,     0,    24,   364,    25,   271,
     0,   423,     0,   272,    34,   271,     0,   272,    35,   271,
     0,   272,    36,   271,     0,   424,     0,   273,    33,   272,
     0,   273,    32,   272,     0,   425,     0,   274,    49,   273,
     0,   274,    50,   273,     0,   426,     0,   275,    37,   274,
     0,   275,    38,   274,     0,   275,    51,   274,     0,   275,
    52,   274,     0,   427,     0,   276,    53,   275,     0,   276,
    54,   275,     0,   428,     0,   277,    29,   276,     0,   429,
     0,   278,    39,   277,     0,   430,     0,   279,    40,   278,
     0,   431,     0,   280,    55,   279,     0,   432,     0,   282,
    56,   280,     0,   433,     0,     0,     0,   282,    41,   435,
   288,    22,   436,   284,     0,   434,     0,   265,    23,   287,
     0,   265,    57,   287,     0,   265,    58,   287,     0,   265,
    59,   287,     0,   265,    60,   287,     0,   265,    61,   287,
     0,   265,    62,   287,     0,   265,    63,   287,     0,   265,
    64,   287,     0,   265,    65,   287,     0,   265,    66,   287,
     0,   189,     0,     0,    12,     0,   411,   368,     0,   439,
   368,    11,    24,   288,    25,    18,     0,   373,   368,     0,
   411,   383,     0,   439,   383,    11,    24,   288,    25,    18,
     0,   439,   383,    11,    24,   288,    25,     0,   373,   383,
     0,    14,   445,    18,     0,    15,    18,     0,    98,    15,
    18,     0,    16,    18,     0,    94,    16,    18,     0,    95,
    16,    18,     0,    96,    16,    18,     0,    97,    16,    18,
     0,    17,    18,     0,    17,   288,    18,     0,     0,    18,
     0,   183,     0,   184,     0,   188,     0,   189,     0,   444,
     0,   185,     0,   190,     0,   185,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   318,   319,   322,   323,   326,   327,   328,   329,   330,   331,
   332,   335,   337,   341,   341,   348,   354,   358,   359,   363,
   364,   366,   368,   380,   383,   393,   396,   404,   405,   407,
   409,   425,   428,   436,   439,   447,   449,   449,   453,   454,
   455,   456,   459,   462,   466,   466,   469,   469,   474,   475,
   478,   483,   484,   487,   492,   493,   496,   497,   498,   501,
   502,   503,   508,   509,   512,   514,   516,   518,   527,   529,
   531,   533,   549,   553,   554,   561,   562,   570,   572,   576,
   577,   578,   579,   580,   581,   584,   585,   586,   587,   588,
   589,   592,   595,   596,   603,   606,   609,   615,   623,   625,
   629,   632,   633,   636,   639,   645,   649,   650,   653,   656,
   657,   660,   661,   662,   665,   666,   667,   668,   669,   672,
   673,   674,   675,   676,   679,   680,   683,   689,   693,   695,
   699,   700,   702,   709,   719,   720,   723,   724,   725,   726,
   727,   728,   729,   730,   734,   735,   739,   740,   743,   745,
   747,   748,   749,   750,   751,   753,   757,   758,   761,   765,
   777,   778,   779,   780,   781,   782,   785,   786,   787,   788,
   789,   790,   791,   792,   793,   796,   797,   800,   801,   802,
   803,   804,   805,   806,   807,   808,   809,   810,   813,   814,
   817,   821,   822,   825,   826,   827,   828,   831,   832,   836,
   837,   838,   839,   842,   843,   844,   847,   848,   849,   852,
   853,   854,   855,   856,   859,   860,   861,   864,   865,   868,
   869,   873,   874,   877,   878,   883,   889,   890,   896,   902,
   903,   903,   905,   908,   909,   910,   911,   912,   913,   914,
   915,   916,   917,   918,   919,   922,   923,   926,   927,   930,
   935,   936,   937,   940,   954,   959,   965,   967,   973,   978,
   978,   982,   983,   985,   986,   989,   992,   995,   998,   999,
  1002,  1003,  1006,  1007,  1008,  1012,  1014,  1023,  1024,  1025,
  1026,  1027,  1029,  1033,  1036,  1042,  1051,  1054,  1057,  1064,
  1071,  1077,  1102,  1103,  1106,  1107,  1108,  1109,  1110,  1113,
  1114,  1115,  1116,  1119,  1120,  1121,  1122,  1123,  1124,  1125,
  1126,  1127,  1128,  1129,  1130,  1131,  1132,  1133,  1134,  1135,
  1139,  1140,  1143,  1144,  1147,  1148,  1151,  1152,  1153,  1154,
  1157,  1158,  1159,  1160,  1161,  1162,  1165,  1166,  1167,  1168,
  1171,  1172,  1173,  1174,  1177,  1178,  1179,  1180,  1181,  1182,
  1183,  1184,  1185,  1186,  1187,  1194,  1195,  1196,  1197,  1198,
  1199,  1200,  1201,  1202,  1203,  1204,  1205,  1206,  1207,  1210,
  1214,  1215,  1219,  1220,  1224,  1225,  1226,  1229,  1230,  1233,
  1235,  1237,  1238,  1240,  1242,  1243,  1245,  1247,  1249,  1251,
  1252,  1253,  1256,  1257,  1259,  1261,  1262,  1265,  1268,  1269,
  1270,  1273,  1275,  1279,  1281,  1285,  1286,  1287,  1291,  1293,
  1293,  1295,  1298,  1300,  1302,  1305,  1310,  1317,  1318,  1319,
  1326,  1330,  1331,  1335,  1336,  1339,  1340,  1343,  1344,  1347,
  1348,  1349,  1350,  1353,  1354,  1357,  1358,  1361,  1362,  1363,
  1366,  1366,  1367,  1368,  1371,  1383,  1399,  1400,  1403,  1404,
  1405,  1408,  1409,  1412,  1414,  1415,  1417,  1418,  1420,  1422,
  1424,  1426,  1432,  1433,  1434,  1435,  1436,  1437,  1438,  1439,
  1440,  1455,  1458,  1461,  1462,  1466,  1468,  1470,  1472,  1476,
  1477,  1479,  1483,  1485,  1487,  1490,  1491,  1492,  1493,  1494,
  1495,  1496,  1497,  1498,  1499,  1500,  1501,  1502,  1505,  1511,
  1514,  1517,  1518,  1521,  1522,  1523,  1524,  1525,  1526,  1527,
  1528,  1529,  1530,  1531,  1534,  1535,  1542,  1543,  1549,  1550,
  1551,  1552,  1555,  1556,  1557,  1558,  1561,  1562,  1566,  1569,
  1572,  1575,  1578,  1581,  1584,  1585,  1586,  1587,  1589,  1590,
  1592,  1594,  1600,  1604,  1606,  1608,  1610,  1614,  1615,  1618,
  1619,  1622,  1623,  1626,  1627,  1630,  1631,  1632,  1635,  1643,
  1648,  1649,  1653,  1654,  1657,  1662,  1665,  1666,  1667,  1675,
  1676,  1676,  1680,  1681,  1682,  1693,  1700,  1701,  1704,  1705,
  1708,  1709,  1710,  1711,  1712,  1714,  1715,  1716,  1717,  1720,
  1721,  1722,  1723,  1724,  1725,  1726,  1727,  1728,  1729,  1732,
  1733,  1736,  1737,  1738,  1739,  1742,  1743,  1744,  1747,  1748,
  1749,  1752,  1753,  1754,  1755,  1756,  1759,  1760,  1761,  1764,
  1765,  1768,  1769,  1773,  1774,  1777,  1778,  1781,  1782,  1785,
  1786,  1787,  1788,  1791,  1792,  1793,  1794,  1795,  1796,  1797,
  1798,  1799,  1800,  1801,  1802,  1805,  1806,  1809,  1812,  1814,
  1816,  1820,  1821,  1823,  1825,  1828,  1829,  1830,  1832,  1833,
  1834,  1835,  1836,  1837,  1838,  1841,  1842,  1845,  1848,  1849,
  1850,  1851,  1852,  1855,  1856
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","BADTOK",
"SKIPTOK","CTOK_ELIPSIS","CASE","DEFAULT","CIF","CELSE","SWITCH","WHILE","DO",
"CFOR","GOTO","CONTINUE","BREAK","RETURN","TSEMI","TLBRACE","TRBRACE","TCOMMA",
"TCOLON","TASSIGN","TLPAREN","TRPAREN","TLSQBR","TRSQBR","TDOT","TAMPERSAND",
"TEXCL","TTILDE","TMINUS","TPLUS","TMULT","TDIV","TPERCENT","TLT","TGT","TCIRC",
"TBAR","TQUEST","CSIZEOF","CALIGNOF","ARROW_OP","CTYPEDEF","COFFSETOF","INC_OP",
"DEC_OP","LEFT_OP","RIGHT_OP","LE_OP","GE_OP","EQ_OP","NE_OP","AND_OP","OR_OP",
"MUL_ASSIGN","DIV_ASSIGN","MOD_ASSIGN","ADD_ASSIGN","SUB_ASSIGN","LEFT_ASSIGN",
"RIGHT_ASSIGN","AND_ASSIGN","XOR_ASSIGN","OR_ASSIGN","CSTRUCT","CUNION","CENUM",
"VA_ARG","VA_DCL","QWARN","QGLOBALS","QMODIFIES","QNOMODS","QCONSTANT","QFUNCTION",
"QITER","QDEFINES","QUSES","QALLOCATES","QSETS","QRELEASES","QPRECLAUSE","QPOSTCLAUSE",
"QALT","QUNDEF","QKILLED","QENDMACRO","LLMACRO","LLMACROITER","LLMACROEND","TENDMACRO",
"QSWITCHBREAK","QLOOPBREAK","QINNERBREAK","QSAFEBREAK","QINNERCONTINUE","QFALLTHROUGH",
"QLINTNOTREACHED","QLINTFALLTHROUGH","QLINTFALLTHRU","QARGSUSED","QPRINTFLIKE",
"QLINTPRINTFLIKE","QSCANFLIKE","QMESSAGELIKE","QNOTREACHED","QCONST","QVOLATILE",
"QINLINE","QEXTENSION","QEXTERN","QSTATIC","QAUTO","QREGISTER","QOUT","QIN",
"QYIELD","QONLY","QTEMP","QSHARED","QREF","QUNIQUE","QCHECKED","QUNCHECKED",
"QCHECKEDSTRICT","QCHECKMOD","QKEEP","QKEPT","QPARTIAL","QSPECIAL","QOWNED",
"QDEPENDENT","QRETURNED","QEXPOSED","QNULL","QOBSERVER","QISNULL","QEXITS","QMAYEXIT",
"QNEVEREXIT","QTRUEEXIT","QFALSEEXIT","QLONG","QSIGNED","QUNSIGNED","QSHORT",
"QUNUSED","QSEF","QNOTNULL","QRELNULL","QABSTRACT","QCONCRETE","QMUTABLE","QIMMUTABLE",
"QTRUENULL","QFALSENULL","QEXTERNAL","QREFCOUNTED","QREFS","QNEWREF","QTEMPREF",
"QKILLREF","QRELDEF","CGCHAR","CBOOL","CINT","CGFLOAT","CDOUBLE","CVOID","QANYTYPE",
"QINTEGRALTYPE","QUNSIGNEDINTEGRALTYPE","QSIGNEDINTEGRALTYPE","QNULLTERMINATED",
"QSETBUFFERSIZE","QSETSTRINGLENGTH","QMAXSET","QMAXREAD","QTESTINRANGE","TCAND",
"IDENTIFIER","NEW_IDENTIFIER","TYPE_NAME_OR_ID","CANNOTATION","CCONSTANT","ITER_NAME",
"ITER_ENDNAME","TYPE_NAME","METASTATE_NAME","file","externalDefs","externalDef",
"constantDecl","fcnDecl","@1","plainFcn","plainNamedDecl","namedDeclBase","@2",
"@3","plainNamedDeclBase","@4","@5","iterDecl","@6","@7","macroDef","fcnDefHdr",
"metaStateConstraint","metaStateSpecifier","@8","@9","metaStateExpression","metaStateName",
"BufConstraintList","BufConstraint","bufferModifier","relationalOp","BufConstraintExpr",
"BufConstraintTerm","BufConstraintSrefExpr","BufUnaryOp","BufBinaryOp","functionClauses",
"functionClausesPlain","functionClause","functionClausePlain","globalsClause",
"globalsClausePlain","@10","nomodsClause","modifiesClause","modifiesClausePlain",
"@11","flagSpec","flagId","optWarnClause","warnClause","warnClausePlain","globIdList",
"globIdListExpr","optGlobQuals","globId","globQual","stateTag","conditionTag",
"fcnDefHdrAux","fcnBody","@12","@13","@14","fcnDef","locModifies","modListExpr",
"mExpr","modList","specClauseListExpr","optSpecClauseList","specClauseList",
"primaryExpr","postfixExpr","argumentExprList","unaryExpr","fieldDesignator",
"offsetofExpr","sizeofExpr","@15","sizeofExprAux","castExpr","timesExpr","plusExpr",
"shiftExpr","relationalExpr","equalityExpr","bitandExpr","xorExpr","bitorExpr",
"andExpr","@16","orExpr","@17","conditionalExpr","@18","@19","assignExpr","expr",
"optExpr","constantExpr","initializer","instanceDecl","@20","@21","namedInitializer",
"@22","typeDecl","@23","IsType","PushType","namedInitializerList","namedInitializerListAux",
"optDeclarators","init","initList","storageSpecifier","stateClause","stateClausePlain",
"@24","conditionClause","startConditionClause","conditionClausePlain","@25",
"@26","functionConstraint","exitsQualifier","checkQualifier","stateQualifier",
"paramQualifier","visibilityQualifier","returnQualifier","typedefQualifier",
"refcountQualifier","typeModifier","definedQualifier","typeQualifier","typeSpecifier",
"completeType","completeTypeSpecifier","altType","completeTypeSpecifierAux",
"optCompleteType","suSpc","@27","@28","@29","@30","@31","@32","@33","@34","NotType",
"structDeclList","structDecl","structNamedDeclList","structNamedDecl","enumSpc",
"@35","enumeratorList","enumerator","optNamedDecl","namedDecl","genericParamList",
"innerMods","innerModsList","pointers","paramIdList","idList","paramTypeList",
"paramList","@36","@37","paramDecl","typeExpression","abstractDecl","optAbstractDeclBase",
"abstractDeclBase","stmt","iterBody","endBody","iterDefStmtList","iterDefIterationStmt",
"forPred","@38","@39","partialIterStmt","@40","iterDefStmt","iterSelectionStmt",
"openScope","closeScope","macroBody","stmtErr","labeledStmt","optExtraFallThroughs",
"caseStmt","@41","@42","defaultStmt","@43","@44","compoundStmt","compoundStmtErr",
"CreateInnerScope","DeleteInnerScope","CreateStructInnerScope","DeleteStructInnerScope",
"DeleteInnerScopeSafe","compoundStmtRest","compoundStmtAux","compoundStmtAuxErr",
"stmtListErr","initializerList","stmtList","expressionStmt","expressionStmtErr",
"ifPred","selectionStmt","@45","@46","whilePred","iterWhilePred","iterStmt",
"@47","@48","iterArgList","@49","iterArgExpr","cconstantExpr","primaryIterExpr",
"postfixIterExpr","unaryIterExpr","castIterExpr","timesIterExpr","plusIterExpr",
"shiftIterExpr","relationalIterExpr","equalityIterExpr","bitandIterExpr","xorIterExpr",
"bitorIterExpr","andIterExpr","orIterExpr","conditionalIterExpr","@50","@51",
"assignIterExpr","endIter","doHeader","iterationStmt","iterationStmtErr","jumpStmt",
"optSemi","id","newId","typeName", NULL
};
#endif

static const short yyr1[] = {     0,
   192,   192,   193,   193,   194,   194,   194,   194,   194,   194,
   194,   195,   195,   197,   196,   198,   198,   199,   199,   200,
   200,   200,   200,   201,   200,   202,   200,   203,   203,   203,
   203,   204,   203,   205,   203,   207,   208,   206,   209,   209,
   209,   209,   210,   211,   213,   212,   214,   212,   215,   215,
   216,   217,   217,   218,   219,   219,   220,   220,   220,   221,
   221,   221,   222,   222,   223,   223,   223,   223,   223,   223,
   223,   223,   224,   225,   225,   226,   226,   227,   227,   228,
   228,   228,   228,   228,   228,   229,   229,   229,   229,   229,
   229,   230,   232,   231,   233,   234,   236,   235,   237,   237,
   238,   239,   239,   240,   241,   241,   242,   242,   243,   244,
   244,   245,   245,   245,   246,   246,   246,   246,   246,   247,
   247,   247,   247,   247,   248,   248,   249,   249,   251,   250,
   252,   253,   250,   254,   255,   255,   256,   256,   256,   256,
   256,   256,   256,   256,   257,   257,   258,   258,   259,   259,
   259,   259,   259,   259,   259,   259,   260,   260,   261,   261,
   262,   262,   262,   262,   262,   262,   263,   263,   263,   263,
   263,   263,   263,   263,   263,   264,   264,   265,   265,   265,
   265,   265,   265,   265,   265,   265,   265,   265,   266,   266,
   267,   269,   268,   270,   270,   270,   270,   271,   271,   272,
   272,   272,   272,   273,   273,   273,   274,   274,   274,   275,
   275,   275,   275,   275,   276,   276,   276,   277,   277,   278,
   278,   279,   279,   280,   281,   280,   282,   283,   282,   284,
   285,   286,   284,   287,   287,   287,   287,   287,   287,   287,
   287,   287,   287,   287,   287,   288,   288,   289,   289,   290,
   291,   291,   291,   292,   293,   292,   294,   292,   295,   296,
   295,   298,   297,   297,   297,   299,   300,   301,   302,   302,
   303,   303,   304,   304,   304,   305,   305,   306,   306,   306,
   306,   306,    -1,   307,   309,   308,   310,   311,   313,   312,
   314,   312,   315,   315,   316,   316,   316,   316,   316,   317,
   317,   317,   317,   318,   318,   318,   318,   318,   318,   318,
   318,   318,   318,   318,   318,   318,   318,   318,   318,   318,
   319,   319,   320,   320,   321,   321,   322,   322,   322,   322,
   323,   323,   323,   323,   323,   323,   324,   324,   324,   324,
   325,   325,   325,   325,   326,   326,   326,   326,   326,   326,
   326,   326,   326,   326,   326,   327,   327,   327,   327,   327,
   327,   327,   327,   327,   327,   327,   327,   327,   327,   328,
   329,   329,   330,   330,   331,   331,   331,   332,   332,   334,
   335,   333,   336,   337,   333,   333,   333,   338,   339,   333,
   340,   341,   333,   333,   333,   333,   333,   342,   343,   343,
   343,   344,   344,   345,   345,   346,   346,   346,   347,   348,
   347,   347,   349,   349,   349,   350,   350,   351,   351,   351,
   351,   352,   352,   353,   353,   354,   354,   355,   355,   356,
   356,   356,   356,   357,   357,   358,   358,   359,   359,   359,
   361,   360,   362,   360,   363,   363,   364,   364,   365,   365,
   365,   366,   366,   367,   367,   367,   367,   367,   367,   367,
   367,   367,   368,   368,   368,   368,   368,   368,   368,   368,
   368,   369,   370,   371,   371,   372,   372,   372,   372,   374,
   375,   373,   377,   376,   376,   378,   378,   378,   378,   378,
   378,   378,   378,   378,   378,   378,   378,   378,   379,   380,
   381,   382,   382,   383,   383,   383,   383,   383,   383,   383,
   383,   383,   383,   383,   384,   384,   385,   385,   387,   386,
   388,   386,   390,   389,   391,   389,   392,   392,   393,   394,
   395,   396,   397,   398,   399,   399,   399,   399,   399,   399,
   399,   399,   400,   401,   401,   401,   401,   402,   402,   403,
   403,   404,   404,   405,   405,   406,   406,   406,   407,   408,
   409,   408,   410,   408,   411,   412,   414,   415,   413,   416,
   417,   416,   418,   418,   418,   418,   419,   419,   420,   420,
   421,   421,   421,   421,   421,   421,   421,   421,   421,   422,
   422,   422,   422,   422,   422,   422,   422,   422,   422,   423,
   423,   424,   424,   424,   424,   425,   425,   425,   426,   426,
   426,   427,   427,   427,   427,   427,   428,   428,   428,   429,
   429,   430,   430,   431,   431,   432,   432,   433,   433,   434,
   435,   436,   434,   437,   437,   437,   437,   437,   437,   437,
   437,   437,   437,   437,   437,   438,   438,   439,   440,   440,
   440,   441,   441,   441,   441,   442,   442,   442,   442,   442,
   442,   442,   442,   442,   442,   443,   443,   444,   445,   445,
   445,   445,   445,   446,   446
};

static const short yyr2[] = {     0,
     0,     1,     1,     2,     2,     1,     1,     1,     1,     1,
     1,     8,    11,     0,     5,     1,     3,     1,     2,     1,
     6,     3,     6,     0,     6,     0,     7,     1,     6,     3,
     6,     0,     6,     0,     7,     0,     0,    10,     3,     3,
     3,     2,     1,     3,     0,     4,     0,     4,     1,     3,
     1,     3,     1,     3,     1,     1,     1,     1,     1,     1,
     4,     5,     1,     1,     1,     1,     3,     4,     2,     3,
     3,     3,     1,     1,     1,     0,     2,     0,     2,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     2,     0,     4,     1,     2,     0,     3,     1,     3,
     1,     1,     0,     2,     3,     2,     1,     3,     2,     0,
     2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     3,     0,     3,
     0,     0,     4,     2,     2,     1,     1,     1,     3,     4,
     2,     3,     3,     3,     1,     1,     1,     3,     1,     1,
     3,     4,     2,     3,     3,     3,     0,     1,     1,     3,
     1,     1,     1,     3,     1,     1,     1,     4,     3,     4,
     6,     5,     5,     2,     2,     1,     3,     1,     2,     2,
     2,     2,     2,     2,     2,     2,     1,     1,     3,     1,
     9,     0,     3,     4,     2,     4,     2,     1,     4,     1,
     3,     3,     3,     1,     3,     3,     1,     3,     3,     1,
     3,     3,     3,     3,     1,     3,     3,     1,     3,     1,
     3,     1,     3,     1,     0,     4,     1,     0,     4,     1,
     0,     0,     7,     1,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     1,     3,     0,     1,     1,
     1,     1,     1,     3,     0,     9,     0,    11,     2,     0,
     6,     0,     8,     4,     4,     0,     0,     2,     1,     4,
     0,     4,     1,     3,     4,     1,     3,     1,     1,     1,
     1,     1,     2,     2,     0,     6,     2,     2,     0,     6,
     0,     5,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     3,
     1,     4,     1,     3,     2,     2,     2,     0,     1,     0,
     0,    11,     0,     0,    11,     6,     6,     0,     0,    10,
     0,     0,    10,     5,     5,     4,     4,     0,     1,     1,
     2,     5,     3,     2,     4,     1,     3,     4,     6,     0,
     8,     4,     1,     3,     2,     1,     4,     1,     1,     2,
     2,     1,     2,     1,     2,     1,     1,     1,     2,     1,
     2,     2,     3,     1,     3,     1,     3,     1,     1,     3,
     0,     2,     0,     4,     4,     1,     1,     2,     1,     1,
     2,     0,     1,     5,     2,     3,     3,     4,     3,     4,
     4,     5,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     2,     2,     7,     6,     2,     0,
     0,    10,     0,     6,     1,     1,     1,     1,     2,     1,
     1,     1,     1,     1,     1,     1,     3,     1,     2,     2,
     2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     3,     1,     1,     2,     2,     0,     2,     0,     4,
     0,     6,     0,     3,     0,     5,     3,     2,     3,     0,
     0,     0,     0,     0,     1,     2,     2,     3,     2,     3,
     3,     4,     2,     2,     3,     3,     4,     1,     2,     1,
     2,     1,     2,     1,     2,     1,     2,     1,     4,     2,
     0,     5,     0,     6,     4,     4,     0,     0,    10,     1,
     0,     4,     1,     1,     1,     1,     1,     2,     1,     3,
     1,     4,     3,     4,     6,     5,     5,     2,     2,     1,
     2,     2,     2,     2,     2,     2,     2,     2,     1,     1,
     4,     1,     3,     3,     3,     1,     3,     3,     1,     3,
     3,     1,     3,     3,     3,     3,     1,     3,     3,     1,
     3,     1,     3,     1,     3,     1,     3,     1,     3,     1,
     0,     0,     7,     1,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     1,     0,     1,     2,     7,
     2,     2,     7,     6,     2,     3,     2,     3,     2,     3,
     3,     3,     3,     2,     3,     0,     1,     1,     1,     1,
     1,     1,     1,     1,     1
};

static const short yydefact[] = {     0,
    11,   430,   398,   252,   398,    14,     0,     0,     0,     0,
   266,   266,   279,   278,   280,   281,   282,   341,   342,   306,
   308,   307,   311,   312,   300,   302,   303,   301,   309,   310,
   343,   344,   304,   305,   321,   317,   313,   318,   314,   295,
   296,   299,   297,   298,   338,   339,   340,   337,   323,   322,
   316,   315,   327,   328,   329,   330,   325,   326,   324,   331,
   332,   335,   336,   333,   334,   398,   398,   398,   398,   398,
   398,   398,   398,   398,   398,   319,   668,   669,   673,   320,
   670,   671,   674,     0,     3,     6,     7,   422,     8,     9,
   131,    43,   666,    10,   251,   253,     0,   378,   266,   266,
   266,   266,   266,   266,   266,   266,   398,   266,   378,   378,
   398,   371,   398,     0,   398,   127,   266,   672,    20,   398,
   426,   427,   428,   431,   432,   269,   266,   266,   262,   398,
   675,   398,   398,   673,     0,   514,   266,   523,     0,     0,
     0,   648,     0,     0,     0,     0,   266,   556,     0,   266,
   266,   266,   266,   266,   266,   266,   266,   266,     0,    42,
     0,     0,     0,     0,     0,   517,   266,   166,   162,   165,
   577,   567,   167,   178,   198,   188,   187,   200,   204,   207,
   210,   215,   218,   220,   222,   224,   227,   230,   234,   246,
   558,   192,     0,     0,   548,   504,   505,   506,   507,     0,
     0,   508,   266,   509,     0,   510,   163,     0,   511,   513,
   161,     0,   498,     0,   554,     0,   530,   485,     0,     0,
     0,   494,     0,   495,   474,   493,   490,   491,   486,   487,
   488,     0,     0,   492,     0,     0,     0,   496,   473,     0,
   345,   346,   356,   358,   357,   359,   360,   361,   362,   363,
   364,   365,     4,   266,     0,   129,   134,   398,   667,     5,
   398,   379,   375,   349,   351,   348,   350,   353,   352,   354,
   355,   369,   347,   376,   377,     0,   266,   266,   367,   266,
   266,     0,   368,   423,   366,   429,   433,   398,     0,   268,
   398,     0,   259,   266,   666,    16,    18,     0,   398,   266,
    28,   441,   266,   162,   165,   198,   250,   519,   161,     0,
   266,   266,   266,   266,     0,   657,   659,   664,     0,     0,
   398,   447,     0,     0,   181,   186,   185,   184,   183,   182,
     0,   266,   179,   180,   266,     0,     0,     0,     0,     0,
   517,     0,   266,   516,   266,   463,   464,   465,   466,     0,
   467,   468,   266,   470,   266,   469,   471,   530,   266,   266,
   174,   175,     0,   266,   266,   266,   266,   266,   266,   266,
   266,   266,   266,   266,   266,   266,   266,   266,   266,   266,
   266,   266,   266,   266,   266,   266,   266,   266,   266,   266,
   225,   231,   228,   557,   266,     0,   655,    39,     0,   531,
   549,   560,   652,   578,     0,   515,   266,     0,     0,     0,
   555,    40,   475,   479,   550,   398,   489,   500,   501,   499,
     0,     0,    41,    22,   266,   441,   398,   398,   266,   254,
   128,   398,     0,   373,     0,   398,     0,   398,     0,   266,
   266,   265,   266,   264,   260,   398,     0,   266,     0,   398,
   266,    19,   438,     0,     0,   424,   439,   266,     0,     0,
   524,     0,   563,     0,   249,     0,   656,   665,   164,   266,
   266,     0,   449,   448,   450,   266,   512,   266,     0,   660,
   661,   662,   663,   658,   518,   266,   525,     0,   651,   398,
   528,   649,     0,     0,   169,     0,   176,     0,     0,     0,
   235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
   245,   201,   202,   203,   206,   205,   208,   209,   211,   212,
   213,   214,   216,   217,   219,   221,   223,   266,   266,   266,
   247,   266,   266,   193,   544,   165,   548,     0,   398,   529,
   561,     0,     0,   497,   483,   266,   551,     0,     0,    24,
     0,   535,   266,   552,   130,   398,   266,   530,   266,   255,
   372,   266,   388,     0,   396,   391,     0,   397,     0,   413,
   416,   410,   412,   270,   266,   266,   666,    15,    30,   266,
   441,   266,    17,   425,   434,   436,    36,   443,   398,   442,
   446,   520,   559,     0,   565,   266,   370,   455,     0,   441,
   451,   266,     0,   199,   398,   266,   521,     0,   527,   543,
     0,   568,   266,   170,   168,   266,   266,   226,     0,   229,
   266,   195,   266,   197,   545,   546,   266,   266,   266,   566,
   266,   398,   266,   398,    76,    26,   536,   539,   266,   266,
   537,   266,   553,   530,   133,     0,   257,   266,   374,   394,
   532,   380,   395,   532,   383,   266,   415,   266,     0,   103,
   266,   266,   266,     0,    32,     0,   266,     0,    78,   440,
   266,   452,   266,     0,   456,   459,   266,     0,   457,     0,
   441,     0,     0,     0,   526,   266,   266,   177,   172,   173,
   232,     0,     0,   547,   562,     0,   266,   266,   266,   266,
   266,   266,   266,   266,   266,     0,   162,   165,   178,   198,
   187,   204,   207,   210,   215,   218,   220,   222,   224,   227,
     0,   571,   570,   163,   581,   590,   600,   602,   606,   609,
   612,   617,   620,   622,   624,   626,   628,   630,   634,   573,
   161,     0,    23,     0,    93,    97,    95,   120,   121,   122,
   123,   124,   125,   126,    25,    76,    80,     0,    82,    81,
     0,    85,     0,   398,   398,    83,     0,    84,   291,     0,
    76,   540,   541,   266,   538,    21,   266,   271,   398,   386,
   532,   398,   387,   532,   409,   414,   266,     0,     0,   102,
   266,   273,   261,   266,     0,   398,    78,    34,     0,   435,
   437,    37,    78,    86,    88,    87,    91,    89,    90,   444,
   418,     0,   266,   452,   419,   453,   564,   480,     0,   460,
   458,   461,     0,     0,   171,   522,     0,   571,   266,   194,
   196,   654,     0,     0,   181,   186,   185,   184,   183,   182,
   179,   180,   266,   266,   266,   174,   175,     0,   266,   266,
   266,   266,   266,   266,   266,   266,   266,   266,   266,   266,
   266,   266,   266,   266,   266,   266,   266,   266,   266,   266,
   266,   266,   266,   266,   266,   225,   631,   228,   484,     0,
   478,   101,   106,    99,   110,   666,    77,    92,    96,   104,
   285,   288,   284,     0,   289,   287,    27,   542,   266,     0,
   400,   398,   398,   399,   398,   398,   398,   417,   266,   263,
   276,     0,   271,    12,    31,    33,    78,    29,   666,    79,
   441,   445,   420,   421,   266,   454,   462,     0,   190,     0,
   530,   233,   653,   164,   266,     0,   169,     0,     0,     0,
     0,   635,   636,   637,   638,   639,   640,   641,   642,   643,
   644,   645,   201,   202,   203,   206,   205,   208,   209,   211,
   212,   213,   214,   216,   217,   219,   221,   223,   627,   266,
   629,   266,   477,   105,     0,   115,   116,   117,   118,   119,
   666,   107,   398,   110,     0,     0,   138,    98,   147,   666,
   136,   137,     0,    47,     0,     0,    55,    56,    66,    64,
   294,     0,   293,    53,    73,     0,    60,    63,     0,   666,
    65,   157,   271,   266,   398,     0,   266,   401,   389,   398,
   392,   398,   411,   274,   266,   666,    35,     0,   266,   481,
   266,     0,   650,   647,   199,   266,   170,   168,   266,   266,
     0,   572,   100,   110,    94,   113,   109,   114,   112,   111,
     0,   141,     0,     0,     0,     0,   135,     0,     0,   150,
   159,   666,   149,     0,     0,    63,     0,    69,     0,     0,
    58,    57,    59,     0,     0,     0,     0,     0,     0,   266,
   666,   158,     0,   256,   266,   403,   266,   266,   398,   406,
     0,   381,     0,   384,   275,   277,     0,    38,   266,     0,
   191,   189,   646,   531,     0,   172,   173,   632,   108,   142,
   139,   145,     0,   146,   143,   144,   148,     0,   153,     0,
     0,     0,     0,   266,     0,    75,    74,     0,    70,     0,
    49,    44,    45,    52,    63,    54,    67,     0,    71,    72,
     0,     0,   292,   266,   266,   272,   266,   266,     0,   404,
   266,   390,     0,   393,     0,    13,   482,   569,   171,   266,
   140,   154,   151,     0,   155,   156,   160,   286,    51,    48,
     0,     0,    68,    46,    61,   290,   258,   407,   398,   402,
   266,   382,   385,   633,   152,    62,    50,   405,   408,     0,
     0,     0
};

static const short yydefgoto[] = {  1190,
    84,    85,    86,    87,   133,   295,   296,    88,   635,   771,
   297,   797,   917,    89,   669,   919,   901,    91,  1001,  1131,
  1078,  1064,  1132,  1170,  1003,  1004,  1005,  1074,  1006,  1007,
  1135,  1009,  1128,   755,   802,   756,   803,   757,   804,   885,
   805,   760,   806,   886,   883,   884,   789,   762,   763,   981,
   982,   983,  1047,   984,   764,   765,    92,   257,   427,   258,
   558,    93,   988,  1112,  1113,   990,  1061,  1081,  1062,   173,
   174,   496,   175,   928,   176,   177,   396,   534,   178,   179,
   180,   181,   182,   183,   184,   185,   186,   187,   528,   188,
   530,   189,   529,   829,   190,   219,   466,   308,   415,    95,
   648,   777,   126,   576,    96,   291,   192,   255,   127,   128,
   900,   793,   912,    98,   766,   808,   993,   768,   769,   809,
  1012,   894,  1010,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   322,   416,   433,   112,   263,
   113,   781,  1153,   784,  1155,   651,  1091,   654,  1093,   114,
   903,   904,  1088,  1089,   115,   659,   569,   570,   813,   130,
   455,   123,   124,   117,   584,   585,   456,   457,   458,   671,
   590,   323,   819,   815,   475,   344,   220,   240,   221,   222,
   345,   925,  1100,   224,   631,   225,   226,   227,   228,   194,
   401,   346,   342,   347,   460,   684,   348,   310,   608,   349,
   199,   350,   540,   779,  1019,   233,   555,   491,   400,   201,
   556,   557,   351,   202,   203,   352,   628,   594,   353,   236,
   354,   358,   687,   722,   880,   723,   207,   725,   726,   727,
   728,   729,   730,   731,   732,   733,   734,   735,   736,   737,
   738,   739,   970,  1160,   740,  1104,   355,   356,   209,   357,
   260,   309,   212,   120
};

static const short yypact[] = {  1940,
-32768,    44,  5141,-32768,  6239,-32768,   777,  2916,  3298,  3298,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   618,-32768,
-32768,-32768,-32768,  2117,-32768,-32768,-32768,   517,-32768,-32768,
    83,-32768,   119,-32768,-32768,-32768,   142,  6074,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  6074,  6074,
   133,    22,-32768,   931,-32768,-32768,   777,-32768,-32768,-32768,
-32768,-32768,-32768,    44,-32768,-32768,   155,-32768,   133,-32768,
-32768,-32768,  5141,-32768,   163,-32768,  5370,-32768,   200,   241,
   262,-32768,   279,   777,   293,   331,  1396,-32768,  2493,  5370,
  5370,  5370,  5370,  5370,  5370,-32768,  5399,  5399,   340,-32768,
   374,   388,   410,   417,   433,   351,  4585,-32768,   440,   446,
-32768,   459,-32768,   810,  1052,-32768,-32768,-32768,  1005,   127,
    65,   514,   461,   428,   448,   456,   519,    84,-32768,-32768,
   302,-32768,  3446,   490,   495,-32768,-32768,-32768,-32768,   484,
  3064,-32768,  4585,-32768,  3446,-32768,   429,  3446,-32768,-32768,
   582,   589,-32768,   599,-32768,  2683,   459,   634,   336,   542,
  3107,-32768,  3298,-32768,-32768,-32768,  5700,-32768,-32768,-32768,
-32768,   642,   647,-32768,  3298,  3298,  3446,-32768,-32768,   607,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   714,   689,-32768,-32768,  5964,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   725,   667,-32768,-32768,   777,
   777,    11,-32768,   517,-32768,-32768,-32768,-32768,   747,-32768,
-32768,   766,   767,   667,   119,-32768,   571,   763,-32768,   777,
-32768,   287,  5370,-32768,-32768,-32768,-32768,-32768,-32768,   795,
  5370,  5370,  5370,  1711,   804,-32768,-32768,-32768,   391,   164,
  5568,   363,   800,   802,-32768,-32768,-32768,-32768,-32768,-32768,
   806,  5370,-32768,-32768,  5370,   814,   817,   835,   886,   893,
   351,   728,  3402,-32768,  4585,-32768,-32768,-32768,-32768,   898,
-32768,-32768,  4585,-32768,  4585,-32768,-32768,-32768,  1859,  5370,
-32768,-32768,    46,  5370,  5370,  5370,  5370,  5370,  5370,  5370,
  5370,  5370,  5370,  5370,  5370,  5370,  5370,  5370,  5370,  5370,
  5370,  5370,  5370,  5370,  5370,  5370,  5370,  5370,  5370,  5370,
-32768,-32768,-32768,-32768,  5370,   635,-32768,-32768,  2303,-32768,
-32768,   861,-32768,-32768,   945,-32768,  5370,   367,   938,   839,
-32768,-32768,-32768,-32768,-32768,   133,  5700,-32768,-32768,-32768,
  2873,   997,-32768,-32768,  5370,   125,  3549,  4666,   667,-32768,
   319,  6239,   879,   992,  1001,  1006,  1014,  1006,   777,  1030,
   667,-32768,   667,-32768,-32768,-32768,   962,  1036,  1033,-32768,
   667,   571,-32768,   777,  1039,-32768,  1045,   777,   226,  1046,
-32768,   266,  1057,   394,  1057,  1064,-32768,-32768,-32768,-32768,
  5152,  1060,   617,-32768,   695,  5370,-32768,-32768,  1065,-32768,
-32768,-32768,-32768,-32768,-32768,  5370,-32768,  1067,-32768,  3549,
-32768,-32768,  1078,  1066,-32768,   403,-32768,    58,   777,   777,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  1005,  1005,   127,   127,    65,    65,
    65,    65,   514,   514,   461,   428,   448,  5370,  5370,  5370,
-32768,  5419,  5430,-32768,-32768,  4899,-32768,  3255,  3734,-32768,
-32768,  1073,   424,-32768,-32768,   667,-32768,  1076,  1074,-32768,
  1077,-32768,  4104,-32768,-32768,  3919,  4147,  1079,-32768,  1081,
-32768,-32768,  1085,  1087,-32768,  1088,  1100,-32768,   752,-32768,
  1101,-32768,-32768,-32768,   155,-32768,   225,-32768,-32768,  5370,
   481,   667,-32768,-32768,  1104,-32768,-32768,  1122,  6239,-32768,
-32768,-32768,-32768,  1107,-32768,  1711,-32768,-32768,  1099,    67,
   695,  5314,  1109,-32768,-32768,-32768,-32768,  1112,-32768,-32768,
  1111,-32768,  5370,-32768,-32768,-32768,-32768,   456,   778,   519,
  5370,-32768,  5370,-32768,-32768,-32768,  4250,  4585,  5370,-32768,
  5489,-32768,  5370,-32768,  1083,-32768,-32768,-32768,  4293,  4396,
-32768,  4439,-32768,  1079,-32768,  1113,-32768,-32768,-32768,-32768,
-32768,  1116,-32768,-32768,  1119,-32768,   777,-32768,   777,  1068,
  5062,-32768,-32768,  1114,-32768,  1117,-32768,   496,  1083,-32768,
   777,   396,  4585,  1125,-32768,-32768,   204,  1129,-32768,  1120,
    82,  1123,  1134,  1124,-32768,  5370,  5489,-32768,-32768,-32768,
-32768,  1145,  1146,-32768,-32768,   457,  5370,  5370,  5370,  5370,
  5370,  5370,  5370,  5399,  5399,  1126,   512,   537,   888,  1310,
   551,  1037,   779,   811,   840,   845,  1148,  1135,  1138,  1127,
   105,  1154,-32768,    10,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   552,   584,-32768,   996,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  1083,-32768,  1094,-32768,-32768,
  1096,-32768,  1102,-32768,-32768,-32768,  1103,-32768,  1824,  1105,
  1083,-32768,-32768,  4542,-32768,-32768,-32768,-32768,  6161,-32768,
-32768,  6161,-32768,-32768,-32768,-32768,  5370,   906,  1172,-32768,
  5062,-32768,-32768,  5062,  1106,-32768,  1083,-32768,  1168,-32768,
-32768,-32768,  1083,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   517,  1174,-32768,   838,-32768,   695,-32768,-32768,  1171,-32768,
-32768,-32768,  1175,   777,-32768,-32768,   673,  1177,  5370,-32768,
-32768,  1185,   674,  1180,   723,   729,   730,   750,   764,   798,
   854,   855,  5370,  5325,  5370,   860,   872,    78,  5370,  5370,
  5370,  5370,  5370,  5370,  5370,  5370,  5370,  5370,  5370,  5370,
  5370,  5370,  5370,  5370,  5370,  5370,  5370,  5370,  5370,  5370,
  5370,  5370,  5370,  5370,  5370,  5370,-32768,  5370,-32768,  1186,
  1188,-32768,  1021,  1169,    -7,    23,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   544,-32768,-32768,-32768,-32768,  5062,   585,
-32768,   133,  4744,-32768,  6161,  4744,  6161,-32768,-32768,-32768,
-32768,   922,-32768,-32768,-32768,-32768,  1083,-32768,   119,-32768,
   620,-32768,-32768,-32768,  5345,-32768,-32768,   593,-32768,  1193,
  1079,-32768,-32768,   897,  5370,  1191,   903,   928,    61,   777,
   777,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   933,   948,   950,   812,   912,   300,   875,    79,
   382,   505,   613,   701,   743,   102,   114,   147,   456,  5370,
   519,  5489,-32768,   429,   996,-32768,-32768,-32768,-32768,-32768,
   632,-32768,  5832,    -7,    62,    62,-32768,-32768,   412,   637,
-32768,-32768,    85,-32768,   797,    92,-32768,-32768,-32768,-32768,
-32768,  1190,-32768,  1032,-32768,  1043,-32768,    77,  1202,   119,
-32768,    85,-32768,-32768,-32768,  1225,   309,-32768,-32768,  4744,
-32768,  4744,-32768,-32768,  1732,   671,-32768,  1155,   656,-32768,
-32768,   777,-32768,  1056,   967,-32768,   976,   993,-32768,-32768,
   957,-32768,-32768,    -7,-32768,-32768,-32768,-32768,-32768,-32768,
   435,   412,   682,   777,   777,    62,-32768,    85,    85,-32768,
   492,   711,-32768,  1226,   958,   506,    92,   543,    49,   797,
-32768,-32768,-32768,   797,    15,   777,   777,  1227,   797,-32768,
   119,  1229,   745,-32768,   667,-32768,-32768,  1230,-32768,  1237,
  1240,-32768,  1241,-32768,-32768,-32768,  1176,-32768,   594,  1242,
-32768,-32768,-32768,-32768,  1243,  1010,  1025,-32768,-32768,-32768,
-32768,   412,  1239,   429,-32768,-32768,   412,   686,   492,   722,
   777,   777,    85,-32768,  1082,-32768,-32768,   797,-32768,   506,
  1232,-32768,   543,-32768,   543,-32768,-32768,  1247,-32768,-32768,
  1082,  1253,-32768,-32768,-32768,-32768,  5370,   309,  1251,-32768,
-32768,-32768,  1259,-32768,  1260,-32768,-32768,-32768,  1027,  5370,
-32768,-32768,-32768,  1255,-32768,-32768,   492,-32768,-32768,-32768,
  1258,    49,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  5370,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1285,
  1286,-32768
};

static const short yypgoto[] = {-32768,
-32768,  1204,-32768,-32768,-32768,-32768,  -405,  -112,-32768,-32768,
   989,-32768,-32768,-32768,-32768,-32768,    68,-32768,-32768,   397,
-32768,-32768,   118,   151,   223,-32768,-32768,-32768,  -661,-32768,
  -825,-32768,-32768,  -608,  -744,-32768,-32768,-32768,  -573,-32768,
  -373,-32768,  -287,-32768,   320,-32768,-32768,   639,  -613,-32768,
   250,   313,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  -828,   180,-32768,  -982,-32768,   289,-32768,
  -616,   458,   852,-32768,-32768,  -593,-32768,-32768,    59,  -359,
  -358,  -357,  -343,  -382,  -365,  -335,  -499,  -513,-32768,  -592,
-32768,  -136,-32768,-32768,   851,   944,  -584,  -411,    36,-32768,
-32768,-32768,  -437,-32768,-32768,-32768,   267,  -230,   862,-32768,
  -848,  -754,-32768,-32768,-32768,  -276,-32768,-32768,-32768,  -254,
-32768,-32768,-32768,-32768,-32768,   539,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   131,   748,-32768,   951,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   186,
  -590,  -495,-32768,   161,-32768,-32768,   652,   655,   499,    13,
  -356,  1192,-32768,    14,-32768,-32768,  -539,-32768,-32768,-32768,
   644,  -260,   995,-32768,  -452,   844,  1308,-32768,  1084,-32768,
   666,-32768,-32768,-32768,-32768,  -171,-32768,-32768,-32768,-32768,
    90,  1121,   978,  1254,-32768,-32768,  1389,-32768,-32768,  -332,
-32768,  1244,   217,  -603,  -858,-32768,   834,-32768,-32768,   926,
  -195,  -490,   103,-32768,   170,    26,-32768,-32768,   209,-32768,
   393,-32768,-32768,   640,-32768,   359,  -598,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  1398,-32768,-32768,  1642,
  -293,     0,   516,-32768
};


#define	YYLAST		6429


static const short yytable[] = {   118,
   307,   447,   118,   574,   284,   525,   118,   211,   211,   211,
   488,   674,   116,   549,   709,   125,   620,   434,   515,   516,
   601,   517,   518,   526,   519,   520,   521,   522,   618,   439,
  -579,   417,   724,   204,  -579,    94,   911,   711,   721,   913,
   259,  1137,   523,   524,   409,   583,   985,  1021,   627,   413,
   782,   414,   916,   994,   527,   807,   986,   989,   920,   599,
   678,   758,   428,   420,  1026,   640,   449,    90,  1008,   551,
   709,   453,  1067,   499,   607,  1118,  1119,     2,   395,   976,
   977,   395,   996,   118,   615,   985,   453,  1038,   724,   500,
  -398,   676,  -398,   711,   721,   986,   116,   195,   -45,  -613,
  -398,   256,  1075,  -613,  1076,   940,   822,   278,  1058,   978,
   979,   234,   234,   380,   381,  1067,   118,   720,  1059,    94,
  1077,   941,  -621,   980,   392,   996,  -621,   380,   381,   453,
   111,   719,   118,   129,  -623,   132,   259,   287,  -623,   393,
  1167,   823,   388,   118,  1013,   877,   300,   887,   211,   550,
  -266,    90,   121,   122,   386,   387,  1051,  1052,   378,   379,
   878,  1092,   897,  1094,  1083,   261,   211,  -625,   664,  1066,
  1068,  -625,  1027,   720,   204,   288,   667,   905,   235,   235,
   907,   394,   758,   807,   395,   389,   302,   719,   469,   807,
   680,   906,   211,    77,    78,   134,   404,   758,    81,    82,
   211,  1138,   211,   539,   211,    77,   987,   211,   325,   326,
   327,   328,   329,   330,   111,   211,   205,   605,   204,   816,
   211,   449,   211,   311,   666,   645,   204,  1117,   262,   471,
   204,    77,   999,   204,   211,   211,   211,     2,   324,   262,
   262,  1130,   259,  1133,    77,   987,   395,   662,   716,   413,
   469,   243,   244,   245,   246,   247,   248,   249,   250,   251,
   252,   759,   204,   299,   312,   717,    97,    77,  1060,    97,
  1096,   712,   713,   714,    77,   999,   118,   241,   242,   118,
   118,   118,   397,   663,   974,   313,   395,   715,   307,   431,
   593,   453,   272,   118,   403,   718,   277,   405,   279,   118,
   283,   434,   314,   807,   716,   285,   446,  -398,  -398,  -398,
   316,   488,  -398,  -398,  1020,   293,  1022,   294,   234,   394,
  -610,   717,   395,   234,  -610,   234,   422,   712,   713,   714,
  1087,   378,   379,  1065,   307,   473,  -398,   234,   234,  -398,
  1030,  -398,     2,   715,   211,   683,  1133,   761,   317,   307,
    97,   718,   211,   411,   211,   709,   395,   205,   767,   363,
   692,   816,   693,   335,   971,   264,   265,   266,   267,   268,
   269,   270,   271,   724,   273,   908,   969,   276,   711,   721,
   770,   678,   759,    97,   411,   235,  -266,   395,   471,   336,
   235,   469,   235,   289,   290,   292,     2,   759,   211,   298,
   206,   205,  -614,   337,   235,   235,  -614,  1018,   468,   205,
  1018,   395,  1136,   205,   395,   321,   205,  1142,   595,  -266,
   211,   471,   331,   613,   204,   338,   211,   614,   118,     2,
   380,   381,   339,   512,   513,   514,   834,  1053,   118,  1054,
   118,   559,   118,   307,   395,   205,   429,   340,   630,   341,
   118,   470,   547,   118,  1114,  1055,   388,   118,   720,  1110,
  1053,  -669,  1054,   547,   300,   307,  1171,  -673,   761,  -398,
  -398,  -398,   719,   441,  -398,  -398,   443,   395,  1055,   767,
  -670,   832,   321,   761,   451,   453,   389,   454,   537,   211,
   966,    77,    78,   134,   767,   390,    81,    82,   118,   118,
   800,   770,   399,   956,   957,   665,   958,   959,   967,   960,
   961,   962,   963,   386,   387,   119,   770,  1120,   119,  1121,
   425,  1114,   135,   234,  1018,  -615,  1018,   964,   965,  -615,
  1129,  1075,  -576,  1076,   604,  1122,  -576,   211,   211,   968,
  -267,   206,   254,    97,   432,   118,   435,   437,   994,  1077,
   382,   383,   211,   380,   381,   211,   211,  -575,   632,   811,
    97,  -575,   470,   204,   384,   385,   298,   995,  1075,   321,
  1076,  -599,  -574,   391,   547,  -599,  -574,   996,    77,    78,
   134,   118,   398,    81,    82,   206,  1077,  -502,   472,   716,
   235,   547,   991,   206,  -267,   300,   448,   206,  1034,   119,
   206,   546,  1014,  -672,   395,  1015,   717,   205,   881,   321,
   406,   454,   712,   713,   714,   404,   560,  1031,  -449,   471,
  1032,   565,   407,   568,   453,  1028,   211,   211,   715,   206,
   741,   577,   119,  -616,   412,   582,   718,  -616,   211,   211,
  -266,   211,   471,  -398,   676,  -398,   601,  1146,   301,   259,
   307,  -675,  1044,  -398,   259,  -671,   118,  1056,   118,   315,
   418,   380,   381,  -398,  -398,  -398,   419,   118,  -398,  -398,
   118,   118,   211,   193,   223,   223,   532,   533,    77,    78,
   134,   471,   276,    81,    82,   814,   741,  1045,   259,     2,
   473,  1015,   932,   395,   395,    97,  1057,   930,   934,   423,
     2,   811,   564,  -675,   567,   985,   573,    97,  1111,    97,
  1162,  1120,   426,  1121,   580,   986,  1080,   298,  -266,   672,
   602,  -618,   997,   998,   589,  -618,    77,   999,   259,  1122,
  1000,  1123,  1097,   486,   487,  1178,   597,   382,   383,   472,
   424,   603,   430,  -593,   432,   985,   205,  -593,  1163,  -598,
  -597,   384,   385,  -598,  -597,   986,   835,   836,   837,   838,
   839,   840,  1145,  -619,   442,  1015,   454,  -619,  1124,  1189,
  -596,   656,   657,   211,  -596,  1105,    77,    78,   134,   382,
   383,    81,    82,   444,  -595,   677,   450,  1144,  -595,   445,
   682,   206,   119,   384,   385,   436,   438,   440,   395,   691,
  -675,  -675,  -398,  -398,  -398,  -675,  -675,  -398,  -398,   119,
   863,   864,    97,   118,   193,   301,   461,   560,  -594,   743,
   995,   467,  -594,   118,   476,   646,   477,   814,   432,   478,
   996,   480,  -608,   359,   481,   360,  -608,  -398,    77,    78,
   134,   660,   661,    81,    82,   375,   376,   377,   298,    77,
    78,   134,   482,  -398,    81,    82,   361,   362,   193,   865,
   866,  -266,   545,   471,    77,   987,   193,   603,   171,   541,
   193,     2,   432,   193,  -591,  -592,   867,   868,  -591,  -592,
  -588,   223,   689,   690,  -588,   992,   223,   321,   223,   321,
   869,   870,  -589,  1011,   848,  -611,  -589,   871,   872,  -611,
   223,   223,   193,   483,    77,   987,   378,   379,   171,   902,
   484,   844,   902,   845,   778,  -398,   490,  -580,   953,   954,
   955,  -580,   785,  -583,   787,   909,   657,  -583,   794,   795,
   206,  -398,  -607,   799,   846,   847,  -607,   589,   812,   118,
   118,  1024,  1025,   472,   119,   375,   376,   377,   613,   891,
   892,   191,  1037,  -603,   571,   542,   119,  -603,   119,    77,
    78,   134,   544,   321,    81,    82,   301,   561,  -604,   586,
  -605,   741,  -604,   591,  -605,   997,   998,   395,  1108,    77,
   999,   915,  1049,  1000,   992,   992,   284,  -601,   306,  1126,
  1127,  -601,  1063,  1035,  1011,  1011,  -584,   280,   281,   282,
  -584,   306,   306,   306,   306,   306,   306,   548,   333,   334,
   307,  1063,   562,  -582,   616,   617,   118,  -582,  1048,   563,
    77,    78,   134,  1184,  -266,    81,    82,   923,   118,  1090,
  -586,   118,   566,   902,  -586,   902,   902,   902,   375,   376,
   377,   559,  1099,   899,   307,  -587,   402,  -585,   572,  -587,
   578,  -585,   992,   118,   118,   992,   581,  1063,  1063,   274,
   275,   119,   579,   587,   193,   588,  1011,   592,  1011,  1011,
   860,   861,   862,  1011,   364,   118,   118,   395,  1011,   922,
   812,   596,   603,   600,   118,   606,   223,  1017,   611,   612,
   319,   609,   320,  1071,  1072,  1073,   629,   301,   118,   633,
   634,   636,   644,   647,   650,   652,  1029,   653,   365,   366,
   367,   368,   369,   370,   371,   372,   373,   374,   655,   992,
   118,   118,  1063,   658,   668,   675,   670,  1011,   196,   229,
   229,   673,   681,   685,   686,   780,   191,   776,   783,   744,
   796,   798,   818,   824,   191,   826,   821,   118,   191,   843,
   902,   191,   902,   820,   744,   745,   746,   747,   825,   408,
  1090,   748,   749,   750,   751,   752,   753,   754,  1016,   830,
   831,  1011,   571,   874,   571,  1023,   873,   875,   879,   882,
   191,   876,   888,   801,   889,   479,   591,   119,   489,   910,
   890,   893,   918,   896,   914,   926,   492,   921,   493,   927,
  1085,   931,   933,   193,   935,   973,   972,   171,   975,   497,
  1033,  1036,  1069,  1070,   501,   502,   503,   504,   505,   506,
   507,   508,   509,   510,   511,  1079,   306,   306,   306,   306,
   306,   306,   306,   306,   306,   306,   306,   306,   306,   306,
   306,   306,  1086,  1098,  1103,   531,   459,  1125,  1141,  1123,
  1148,   200,   232,   232,   462,   463,   464,   465,  1151,  1152,
  1154,   197,   230,   230,  1156,  1161,  1157,  1159,  1180,   196,
   554,  1172,  1169,  1173,  1150,   459,   306,  1175,  1182,  1183,
  1084,  1185,  1186,    97,  1191,  1192,   459,   253,   452,  1187,
  1002,  1174,  1134,  1109,  1043,   812,  1050,  1101,   790,  1164,
  1082,   938,   432,   498,   575,  1106,  1107,   895,  1179,   649,
   788,   786,   924,   196,   810,   286,   474,   239,   485,   421,
  1158,   196,   306,   610,   538,   196,   828,   306,   196,   119,
  1042,     0,   849,   554,     0,     0,   229,   306,     0,   929,
     0,   229,   191,   229,     0,     0,  1143,     0,     0,     0,
   543,    97,     0,  1147,  1149,   229,   229,   196,     0,     0,
     0,     0,     0,     0,  1188,   812,   850,   851,   852,   853,
   854,   855,   856,   857,   858,   859,     0,     0,     0,   306,
     0,   306,   554,   622,   624,     0,     0,     0,     0,     0,
  1168,     0,   200,     0,     0,     0,   198,   231,   231,   554,
   643,     0,   197,     0,     0,   208,   237,   237,     0,     0,
  1176,  1177,     0,   318,    97,     0,     0,  1181,     0,   303,
     0,     0,     0,     0,   150,   151,   152,   153,   154,   155,
     0,   306,     0,     0,     0,     0,   200,     0,     0,     0,
     0,   156,   157,   158,   200,     0,   197,     0,   200,     0,
     0,   200,     0,   306,   197,  1039,  1040,     0,   197,   232,
   410,   197,     0,   688,   232,   159,   232,     0,     0,   230,
   643,   695,   619,     0,   230,     0,   230,     0,   232,   232,
   200,   191,   710,   643,     0,     0,     0,     0,   230,   230,
   197,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   168,     0,     0,
     0,   792,     0,     0,     0,     0,   817,     0,     0,   196,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   119,     0,     0,     0,     0,   198,   710,   465,
     0,   229,     0,     0,   119,     0,   208,  1102,     0,   306,
   306,   306,   306,   306,   306,   841,   842,     0,     0,     0,
     0,     0,     0,     0,   459,     0,   459,     0,     0,  1115,
  1116,     0,   696,     0,     0,     0,   742,     0,    77,   304,
   305,   198,   171,     0,     0,     0,     0,     0,     0,   198,
   208,  1139,  1140,   198,     0,     0,   198,     0,   208,     0,
   119,   494,   208,     0,   231,   208,     0,     0,     0,   231,
     0,   231,     0,   237,   119,     0,     0,     0,   237,     0,
   237,     0,     0,   231,   231,   198,     0,     0,     0,   827,
     0,     0,   237,   237,   208,     0,  1165,  1166,   306,     0,
   833,   792,   200,     0,   792,     0,     0,     0,     0,   210,
   238,   238,   197,     0,     0,     0,     0,     0,   196,     0,
     0,     0,     0,   119,   232,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   230,     0,     0,     0,     0,     0,
   306,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   936,   497,     0,     0,     0,     0,   942,
   943,   944,   945,   946,   947,   948,   949,   950,   951,   952,
     0,   306,   306,   306,   306,   306,   306,   306,   306,   306,
   306,   306,   306,   306,   306,   306,   306,   306,  -248,   306,
     0,     0,     0,     0,   303,     0,     0,     0,     0,   150,
   151,   152,   153,   154,   155,     0,     0,     0,     0,   792,
   791,  1095,     0,     0,     0,   303,   156,   157,   158,     0,
   150,   151,   152,   153,   154,   155,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   156,   157,   158,
   159,   200,     0,     0,     0,     0,   306,   198,   939,     0,
   210,   197,     0,     0,     0,     0,   208,     0,     0,     0,
     0,   159,     0,     0,     0,     0,     0,     0,     0,   231,
     0,     0,     0,     0,     0,     0,     0,     0,   237,     0,
     0,     0,   168,   710,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   210,     0,     0,     0,     0,     0,
     0,     0,   210,   168,     0,     0,   210,     0,     0,   210,
     0,     0,     0,     0,     0,     0,     0,   238,     0,     0,
     0,     0,   238,     0,   238,     0,     0,     0,   465,     0,
     0,     0,     0,     0,     0,   792,   238,   238,   210,     0,
     0,     0,   303,   495,     0,     0,     0,   150,   151,   152,
   153,   154,   155,    77,   304,   305,     0,   171,     0,     0,
     0,     0,     0,     0,   156,   157,   158,     0,     0,     0,
     0,     0,     0,  1041,    77,   304,   305,     0,   171,     0,
     0,     0,     0,     0,     0,     0,   198,     0,   159,     0,
     0,     0,     0,     0,     0,   208,     0,     0,     0,    -1,
     1,     0,    20,    21,    22,    23,     0,    24,     0,     0,
     0,     0,    29,    30,     0,     0,    33,    34,     0,    36,
    37,    38,    39,  -266,     0,     0,     0,     0,     0,     0,
   168,     0,     0,     2,    51,    52,     0,     0,     0,     0,
     0,     0,     0,     0,     3,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   306,    76,
     0,     0,     0,     0,     0,     0,  -398,  -398,  -398,    80,
     4,   306,     0,     0,     0,     5,     6,     7,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     8,
     9,    10,   306,     0,     0,     0,     0,     0,     0,     0,
   210,    77,   304,   305,     0,   171,     0,     0,    11,    12,
    13,     0,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,   238,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
    51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
    61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
    71,    72,    73,    74,    75,    76,    -2,     1,     0,     0,
     0,     0,    77,    78,    79,    80,     0,    81,    82,    83,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
  -266,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     2,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     3,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   210,
     0,     0,     0,  -398,  -398,  -398,     0,     4,     0,     0,
     0,     0,     5,     6,     7,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     8,     9,    10,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    11,    12,    13,     0,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,     0,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
    34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
    74,    75,    76,     0,     0,     0,     0,     0,     0,    77,
    78,    79,    80,   136,    81,    82,    83,     0,   137,   138,
   139,     0,   140,   141,   142,   143,   144,   145,   146,   147,
   148,  -530,   535,     0,     0,     0,   149,     0,     0,     0,
     0,   150,   151,   152,   153,   154,   155,     0,     0,     0,
     0,     0,     0,     0,  -266,  -266,     0,     3,   156,   157,
   158,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,  -398,
  -398,  -398,   159,     4,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   161,   162,   163,   164,
   165,   166,     0,     0,     0,     0,     0,     0,     0,     0,
   167,    11,    12,    13,   168,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,     0,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,     0,
     0,     0,     0,     0,     0,    77,   169,   536,    80,   171,
   172,    82,    83,   136,     0,     0,     0,     0,   137,   138,
   139,     0,   140,   141,   142,   143,   144,   145,   146,   147,
   148,  -530,     0,     0,     0,     0,   149,     0,     0,     0,
     0,   150,   151,   152,   153,   154,   155,     0,     0,     0,
     0,     0,     0,     0,  -266,  -266,     0,     0,   156,   157,
   158,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,  -266,
  -266,  -266,   159,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   161,   162,   163,   164,
   165,   166,     0,     0,     0,     0,     0,     0,     0,     0,
   167,  -266,  -266,  -266,   168,  -266,  -266,  -266,  -266,  -266,
  -266,  -266,  -266,  -266,  -266,     0,  -266,  -266,  -266,  -266,
  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,
  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,
  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,
  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,
  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,     0,
     0,     0,     0,     0,     0,    77,   169,   170,  -266,   171,
   172,    82,  -266,   213,     0,     0,     0,     0,   137,   138,
   139,     0,     0,   214,   142,   143,   144,   145,   146,   147,
   215,  -530,  -534,     0,     0,     0,   216,     0,     0,     0,
     0,   150,   151,   152,   153,   154,   155,     0,     0,     0,
     0,     0,     0,     0,  -266,  -266,     0,     0,   156,   157,
   158,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,  -266,
  -266,  -266,   159,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   161,   162,   163,   164,
   165,   166,     0,     0,     0,     0,     0,     0,     0,     0,
   167,  -266,  -266,  -266,   168,  -266,  -266,  -266,  -266,  -266,
  -266,  -266,  -266,  -266,  -266,     0,  -266,  -266,  -266,  -266,
  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,
  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,
  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,
  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,
  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,  -266,     0,
     0,     0,     0,     0,     0,    77,   169,   170,  -266,   171,
   217,   218,  -266,   213,     0,     0,     0,     0,   137,   138,
   139,     0,     0,   214,   142,   143,   144,   145,   146,   147,
   215,  -476,  -476,     0,     0,     0,   216,  -476,     0,     0,
     0,   150,   151,   152,   153,   154,   155,     0,     0,     0,
     0,     0,     0,     0,  -266,  -266,   136,     0,   156,   157,
   158,   137,   138,   139,     0,   140,   141,   142,   143,   144,
   145,   146,   147,   148,  -530,     0,     0,     0,     0,   149,
     0,     0,   159,     0,   150,   151,   152,   153,   154,   155,
     0,     0,     0,     0,     0,     0,     0,  -266,  -266,     0,
     0,   156,   157,   158,     0,  -476,   161,   162,   163,   164,
   165,   166,     0,     0,     0,     0,     0,     0,     0,     0,
   167,     0,     0,     0,   168,   159,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   160,   161,
   162,   163,   164,   165,   166,     0,     0,     0,     0,     0,
     0,     0,     0,   167,     0,     0,     0,   168,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    77,   169,   170,     0,   171,
   217,   218,     0,     0,   136,     0,     0,     0,     0,   137,
   138,   139,     0,   140,   141,   142,   143,   144,   145,   146,
   147,   148,  -530,     0,     0,     0,     0,   149,     0,     0,
     0,     0,   150,   151,   152,   153,   154,   155,    77,   169,
   170,     0,   171,   172,    82,  -266,  -266,   213,     0,   156,
   157,   158,   137,   138,   139,     0,     0,   214,   142,   143,
   144,   145,   146,   147,   215,  -530,  -534,     0,     0,     0,
   216,     0,     0,   159,     0,   150,   151,   152,   153,   154,
   155,     0,     0,     0,     0,     0,     0,     0,  -266,  -266,
     0,     0,   156,   157,   158,     0,  -503,   161,   162,   163,
   164,   165,   166,     0,     0,     0,     0,     0,     0,     0,
     0,   167,     0,     0,     0,   168,   159,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,  -472,
   161,   162,   163,   164,   165,   166,     0,     0,     0,     0,
     0,     0,     0,     0,   167,     0,     0,     0,   168,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    77,   169,   170,     0,
   171,   172,    82,     0,     0,   136,     0,     0,     0,     0,
   137,   138,   139,     0,   140,   141,   142,   143,   144,   145,
   146,   147,   148,  -530,   625,     0,     0,     0,   149,     0,
     0,     0,     0,   150,   151,   152,   153,   154,   155,    77,
   169,   170,     0,   171,   217,   218,  -266,  -266,   213,     0,
   156,   157,   158,   137,   138,   139,     0,     0,   214,   142,
   143,   144,   145,   146,   147,   215,  -530,  -534,     0,     0,
     0,   216,     0,     0,   159,     0,   150,   151,   152,   153,
   154,   155,     0,     0,     0,     0,     0,     0,     0,  -266,
  -266,     0,     0,   156,   157,   158,     0,     0,   161,   162,
   163,   164,   165,   166,     0,     0,     0,     0,     0,     0,
     0,     0,   167,     0,     0,     0,   168,   159,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   161,   162,   163,   164,   165,   166,     0,     0,     0,
     0,     0,     0,     0,     0,   167,     0,     0,     0,   168,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
  -530,     0,     0,     0,     0,   343,     0,     0,     0,     0,
   150,   151,   152,   153,   154,   155,     0,    77,   169,   170,
     0,   171,   172,    82,     0,     0,   136,   156,   157,   158,
     0,   137,   138,   139,     0,   140,   141,   142,   143,   144,
   145,   146,   147,   148,  -530,     0,     0,     0,     0,   149,
     0,   159,     0,     0,   150,   151,   152,   153,   154,   155,
    77,   169,   170,     0,   171,   217,   218,  -266,  -266,     0,
     0,   156,   157,   158,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   168,     0,   159,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   161,
   162,   163,   164,   165,   166,     0,     0,     0,     0,     0,
     0,     0,     0,   167,   137,   138,   139,   168,   140,   141,
   142,   143,   144,   145,   146,   147,   215,  -530,   552,     0,
     0,     0,   343,     0,     0,     0,     0,   150,   151,   152,
   153,   154,   155,     0,    77,   304,   305,     0,   171,     0,
  -266,  -266,     0,     3,   156,   157,   158,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   159,     4,
     0,     0,     0,     0,     0,     0,     0,     0,    77,   169,
   170,     0,   171,   172,    82,     0,     0,     0,     0,     0,
     0,     0,   161,   162,   163,   164,   165,   166,     0,     0,
     0,     0,     0,     0,     0,     0,   553,    11,    12,    13,
   168,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,     0,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
    62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
    72,    73,    74,    75,    76,     0,     0,     0,     0,     0,
     0,    77,   169,   536,    80,   171,   172,    82,    83,   137,
   138,   139,     0,   140,   141,   142,   143,   144,   145,   146,
   147,   215,  -530,   626,     0,     0,     0,   343,     0,     0,
     0,     0,   150,   151,   152,   153,   154,   155,     0,     0,
     0,     0,     0,     0,     0,  -266,  -266,     0,     3,   156,
   157,   158,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   159,     4,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   161,   162,   163,
   164,   165,   166,     0,     0,     0,     0,     0,     0,     0,
     0,   167,    11,    12,    13,   168,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,     0,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
     0,     0,     0,     0,     0,     0,    77,   169,   536,    80,
   171,   172,    82,    83,   137,   138,   139,     0,   140,   141,
   142,   143,   144,   145,   146,   147,   215,  -530,   638,     0,
     0,     0,   343,     0,     0,     0,     0,   150,   151,   152,
   153,   154,   155,     0,     0,     0,     0,     0,     0,     0,
  -266,  -266,     0,     3,   156,   157,   158,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   159,     4,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   161,   162,   163,   164,   165,   166,     0,     0,
     0,     0,     0,     0,     0,     0,   639,    11,    12,    13,
   168,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,     0,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
    62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
    72,    73,    74,    75,    76,     0,     0,     0,     0,     0,
     0,    77,   169,   536,    80,   171,   172,    82,    83,   137,
   138,   139,     0,   140,   141,   142,   143,   144,   145,   146,
   147,   215,  -530,   637,     0,     0,     0,   343,     0,     0,
     0,     0,   150,   151,   152,   153,   154,   155,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   156,
   157,   158,   137,   138,   139,     0,   140,   141,   142,   143,
   144,   145,   146,   147,   215,  -530,   641,     0,     0,     0,
   343,     0,     0,   159,     0,   150,   151,   152,   153,   154,
   155,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   156,   157,   158,     0,     0,   161,   162,   163,
   164,   165,   166,     0,     0,     0,     0,     0,     0,     0,
     0,   167,     0,     0,     0,   168,   159,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   161,   162,   163,   164,   165,   166,     0,     0,     0,     0,
     0,     0,     0,     0,   642,   137,   138,   139,   168,   140,
   141,   142,   143,   144,   145,   146,   147,   215,  -530,   694,
     0,     0,     0,   343,     0,     0,     0,     0,   150,   151,
   152,   153,   154,   155,     0,     0,    77,   169,   170,     0,
   171,   172,    82,     0,     0,   156,   157,   158,   137,   138,
   139,     0,   140,   141,   142,   143,   144,   145,   146,   147,
   215,  -530,   772,     0,     0,     0,   343,     0,     0,   159,
     0,   150,   151,   152,   153,   154,   155,     0,     0,    77,
   169,   170,     0,   171,   172,    82,     0,     0,   156,   157,
   158,     0,     0,   161,   162,   163,   164,   165,   166,     0,
     0,     0,     0,     0,     0,     0,     0,   167,     0,     0,
     0,   168,   159,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   161,   162,   163,   164,
   165,   166,     0,     0,     0,     0,     0,     0,     0,     0,
   167,   137,   138,   139,   168,   140,   141,   142,   143,   144,
   145,   146,   147,   215,  -530,   773,     0,     0,     0,   343,
     0,     0,     0,     0,   150,   151,   152,   153,   154,   155,
     0,     0,    77,   169,   170,     0,   171,   172,    82,     0,
     0,   156,   157,   158,   137,   138,   139,     0,   140,   141,
   142,   143,   144,   145,   146,   147,   215,  -530,   775,     0,
     0,     0,   343,     0,     0,   159,     0,   150,   151,   152,
   153,   154,   155,     0,     0,    77,   169,   170,     0,   171,
   172,    82,     0,     0,   156,   157,   158,     0,     0,   161,
   162,   163,   164,   165,   166,     0,     0,     0,     0,     0,
     0,     0,     0,   774,     0,     0,     0,   168,   159,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   161,   162,   163,   164,   165,   166,     0,     0,
     0,     0,     0,     0,     0,     0,   167,   137,   138,   139,
   168,   140,   141,   142,   143,   144,   145,   146,   147,   215,
  -530,   898,     0,     0,     0,   343,     0,     0,     0,     0,
   150,   151,   152,   153,   154,   155,     0,     0,    77,   169,
   170,     0,   171,   172,    82,     0,     0,   156,   157,   158,
   137,   138,   139,     0,   140,   141,   142,   143,   144,   145,
   146,   147,   215,  -530,     0,     0,     0,     0,   343,     0,
     0,   159,     0,   150,   151,   152,   153,   154,   155,     0,
     0,    77,   169,   170,     0,   171,   172,    82,     0,     0,
   156,   157,   158,     0,     0,   161,   162,   163,   164,   165,
   166,     0,     0,     0,     0,     0,     0,     0,     0,   167,
     0,     0,     0,   168,   159,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   161,   162,
   163,   164,   165,   166,  -132,     0,     0,     0,     0,  -132,
     0,     0,   167,     0,     0,     0,   168,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     3,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    77,   169,   170,     0,   171,   172,
    82,     0,     0,     0,     0,     0,     4,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,  -533,     0,     0,     0,    77,   169,   170,
     0,   171,   172,    82,    11,    12,    13,     0,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,     0,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
    65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
    75,    76,     0,     0,     0,     0,     0,     0,     0,     0,
   131,    80,    11,    12,    13,    83,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,     0,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
  -673,     0,     0,     0,     0,     0,     0,     0,   131,    80,
     0,     0,     0,    83,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,  -675,  -675,  -675,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,  -675,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,  -675,  -675,  -675,
     0,  -675,  -675,  -675,  -675,  -675,  -675,  -675,  -675,  -675,
  -675,     0,  -675,  -675,  -675,  -675,  -675,  -675,  -675,  -675,
  -675,  -675,  -675,  -675,  -675,  -675,  -675,  -675,  -675,  -675,
  -675,  -675,  -675,  -675,  -675,  -675,  -675,  -675,  -675,  -675,
  -675,  -675,  -675,  -675,  -675,  -675,  -675,  -675,  -675,  -675,
  -675,  -675,  -675,  -675,  -675,  -675,  -675,  -675,  -675,  -675,
  -675,  -675,  -675,  -675,  -675,     0,     0,     0,     0,     0,
   791,     0,     0,     0,  -675,   303,     0,     0,  -675,     0,
   150,   151,   152,   153,   154,   155,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   156,   157,   158,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   159,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,  -266,     0,     0,     0,     0,     0,
     0,     0,     0,   168,     2,   303,     0,     0,   598,     0,
   150,   151,   152,   153,   154,   155,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   156,   157,   158,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   159,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    77,   304,   305,     0,   171,    11,
    12,    13,     0,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,   168,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
    70,    71,    72,    73,    74,    75,    76,     0,     0,     0,
     0,     0,     0,    77,    78,    79,    80,     0,    81,    82,
    83,     0,     0,     0,    77,   304,   305,   303,   171,     0,
   679,     0,   150,   151,   152,   153,   154,   155,   303,   937,
     0,     0,     0,   150,   151,   152,   153,   154,   155,   156,
   157,   158,     0,     0,     0,     0,     0,     0,   303,  -248,
   156,   157,   158,   150,   151,   152,   153,   154,   155,     0,
     0,     0,     0,   159,     0,     0,     0,     0,     0,     0,
   156,   157,   158,   303,   159,     0,     0,     0,   150,   151,
   152,   153,   154,   155,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   159,   156,   157,   158,     0,     0,
     0,     0,   332,     0,     0,   168,     0,   150,   151,   152,
   153,   154,   155,     0,     0,     0,   168,     0,     0,   159,
     0,     0,   621,     0,   156,   157,   158,   150,   151,   152,
   153,   154,   155,   623,     0,     0,   168,     0,   150,   151,
   152,   153,   154,   155,   156,   157,   158,     0,   159,     0,
     0,     0,     0,     0,     0,   156,   157,   158,     0,     0,
     0,   168,     0,     0,     0,     0,     0,     0,   159,     0,
     0,     0,     0,     0,     0,     0,    77,   304,   305,   159,
   171,     0,     0,     0,     0,     0,     0,    77,   304,   305,
   168,   171,   697,     0,     0,     0,     0,   698,   699,   700,
   701,   702,   703,     0,     0,     0,     0,    77,   304,   305,
   168,   171,     0,     0,   156,   704,   705,     0,     0,     0,
     0,   168,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    77,   304,   305,     0,   171,     0,   706,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    77,   304,   305,     0,   171,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   168,    77,   304,   305,     0,   171,     0,     0,     0,  -192,
  -192,     0,    77,   304,   305,     0,   171,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    77,   707,   708,     0,   171,    11,    12,    13,     0,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
     0,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
    73,    74,    75,    76,     3,     0,     0,     0,     0,     0,
     0,     0,   131,    80,     0,     0,     0,    83,     0,     0,
     0,     0,     0,     0,     0,     0,  -398,  -398,  -398,     0,
     4,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    11,    12,
    13,     0,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,     0,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
    51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
    61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
    71,    72,    73,    74,    75,    76,     3,     0,     0,     0,
     0,     0,     0,     0,   131,    80,     0,     0,     0,    83,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     4,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    11,    12,    13,     0,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,     0,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    73,    74,    75,    76,     3,     0,
     0,     0,     0,     0,    77,  1046,   131,    80,     0,     0,
     0,    83,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     4,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    11,    12,    13,     0,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,     0,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
  -398,  -398,  -398,     0,     0,     0,     0,     0,   131,    80,
     0,     0,     0,    83,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    11,    12,    13,     0,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,     0,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
     8,     9,    10,     0,     0,     0,     0,     0,   131,    80,
     0,     0,     0,    83,     0,     0,     0,     0,     0,    11,
    12,    13,     0,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,     0,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
    70,    71,    72,    73,    74,    75,    76,     0,     0,     0,
     0,     0,     0,     0,     0,   131,    80,    11,    12,    13,
    83,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,     0,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
    62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
    72,    73,    74,    75,    76,     0,     0,     0,     0,     0,
     0,     0,     0,   131,    80,     0,     0,     0,    83
};

static const short yycheck[] = {     0,
   137,   295,     3,   441,   117,   388,     7,     8,     9,    10,
   343,   596,     0,   425,   631,     2,   530,   278,   378,   379,
   473,   380,   381,   389,   382,   383,   384,   385,   528,    19,
    21,   227,   631,     8,    25,     0,   791,   631,   631,   794,
    18,    27,   386,   387,   216,   451,    24,   906,   539,   221,
   654,   223,   797,     5,   390,   669,    34,   886,   803,   471,
   600,   635,   258,   235,   913,   556,   297,     0,   894,   426,
   687,     5,    24,    28,   486,  1058,  1059,    34,    21,    87,
    88,    21,    34,    84,    27,    24,     5,    27,   687,    44,
    24,    25,    26,   687,   687,    34,    84,     8,    22,    21,
    34,    19,    26,    25,    28,    28,    25,    86,    24,   117,
   118,     9,    10,    49,    50,    24,   117,   631,    34,    84,
    44,    44,    21,   131,    41,    34,    25,    49,    50,     5,
     0,   631,   133,     3,    21,     5,    18,   124,    25,    56,
  1123,   681,    29,   144,   899,    41,   133,   756,   149,    25,
    18,    84,   109,   110,    53,    54,   985,   986,    32,    33,
    56,  1020,   771,  1022,  1013,    24,   167,    21,   580,   995,
   996,    25,   917,   687,   149,    21,   582,   781,     9,    10,
   784,    18,   756,   797,    21,    39,    24,   687,    25,   803,
   602,   782,   193,   183,   184,   185,   187,   771,   188,   189,
   201,   187,   203,   399,   205,   183,   184,   208,   150,   151,
   152,   153,   154,   155,    84,   216,     8,   478,   193,   672,
   221,   452,   223,    24,   581,   558,   201,  1056,    98,    26,
   205,   183,   184,   208,   235,   236,   237,    34,   149,   109,
   110,  1067,    18,  1069,   183,   184,    21,    23,   631,   421,
    25,    66,    67,    68,    69,    70,    71,    72,    73,    74,
    75,   635,   237,   133,    24,   631,     0,   183,   184,     3,
  1025,   631,   631,   631,   183,   184,   277,    11,    12,   280,
   281,   282,   193,   577,   883,    24,    21,   631,   425,   277,
    25,     5,   107,   294,   205,   631,   111,   208,   113,   300,
   115,   562,    24,   917,   687,   120,   294,   183,   184,   185,
    18,   644,   188,   189,   905,   130,   907,   132,   216,    18,
    21,   687,    21,   221,    25,   223,   237,   687,   687,   687,
    22,    32,    33,   995,   471,   322,    18,   235,   236,    21,
   925,    23,    34,   687,   345,   606,  1172,   635,    18,   486,
    84,   687,   353,    18,   355,   972,    21,   149,   635,   174,
   621,   814,   623,    24,   878,    99,   100,   101,   102,   103,
   104,   105,   106,   972,   108,   787,   876,   111,   972,   972,
   635,   921,   756,   117,    18,   216,    24,    21,    26,    16,
   221,    25,   223,   127,   128,   129,    34,   771,   399,   133,
     8,   193,    21,    16,   235,   236,    25,   903,    18,   201,
   906,    21,  1074,   205,    21,   149,   208,  1079,    25,    24,
   421,    26,   156,    21,   399,    16,   427,    25,   429,    34,
    49,    50,    16,   375,   376,   377,   697,    26,   439,    28,
   441,   429,   443,   580,    21,   237,   261,    15,    25,    99,
   451,   321,   417,   454,  1053,    44,    29,   458,   972,    25,
    26,    22,    28,   428,   451,   602,  1128,    22,   756,   183,
   184,   185,   972,   288,   188,   189,   291,    21,    44,   756,
    22,    25,   216,   771,   299,     5,    39,   302,   399,   490,
   873,   183,   184,   185,   771,    40,   188,   189,   499,   500,
     5,   756,    19,   863,   864,    25,   865,   866,   874,   867,
   868,   869,   870,    53,    54,     0,   771,    26,     3,    28,
   254,  1120,     7,   421,  1020,    21,  1022,   871,   872,    25,
    25,    26,    21,    28,   476,    44,    25,   538,   539,   875,
    24,   149,    26,   277,   278,   546,   280,   281,     5,    44,
    37,    38,   553,    49,    50,   556,   557,    21,   546,   672,
   294,    25,   432,   538,    51,    52,   300,    24,    26,   303,
    28,    21,    21,    55,   539,    25,    25,    34,   183,   184,
   185,   582,    93,   188,   189,   193,    44,    93,   322,   972,
   421,   556,   886,   201,    24,   582,    26,   205,   931,    84,
   208,   416,    18,    22,    21,    21,   972,   399,    25,   343,
    22,   426,   972,   972,   972,   187,   431,    25,    25,    26,
    28,   436,    24,   438,     5,   919,   627,   628,   972,   237,
   631,   446,   117,    21,    93,   450,   972,    25,   639,   640,
    24,   642,    26,    24,    25,    26,  1099,  1085,   133,    18,
   787,    34,    21,    34,    18,    22,   657,    21,   659,   144,
    19,    49,    50,   183,   184,   185,    20,   668,   188,   189,
   671,   672,   673,     8,     9,    10,    42,    43,   183,   184,
   185,    26,   416,   188,   189,   672,   687,   981,    18,    34,
   677,    21,   829,    21,    21,   429,   990,    25,    25,    93,
    34,   814,   436,    86,   438,    24,   440,   441,    27,   443,
    25,    26,    24,    28,   448,    34,  1010,   451,    24,   589,
    26,    21,   179,   180,   458,    25,   183,   184,    18,    44,
   187,    21,  1026,     6,     7,  1147,   470,    37,    38,   473,
    27,   475,    18,    21,   478,    24,   538,    25,    27,    21,
    21,    51,    52,    25,    25,    34,   698,   699,   700,   701,
   702,   703,    18,    21,    18,    21,   581,    25,  1062,  1181,
    21,    20,    21,   774,    25,  1036,   183,   184,   185,    37,
    38,   188,   189,    18,    21,   600,    24,  1081,    25,    23,
   605,   399,   277,    51,    52,   280,   281,   282,    21,    22,
   183,   184,   183,   184,   185,   188,   189,   188,   189,   294,
    32,    33,   546,   814,   149,   300,    22,   632,    21,   634,
    24,    18,    25,   824,    25,   559,    25,   814,   562,    24,
    34,    18,    21,    24,    18,    26,    25,    28,   183,   184,
   185,   575,   576,   188,   189,    34,    35,    36,   582,   183,
   184,   185,    18,    44,   188,   189,    47,    48,   193,    49,
    50,    24,    24,    26,   183,   184,   201,   601,   187,     9,
   205,    34,   606,   208,    21,    21,    37,    38,    25,    25,
    21,   216,   616,   617,    25,   886,   221,   621,   223,   623,
    51,    52,    21,   894,   709,    21,    25,    53,    54,    25,
   235,   236,   237,    18,   183,   184,    32,    33,   187,   779,
    18,    24,   782,    26,   648,    28,    19,    21,   860,   861,
   862,    25,   656,    21,   658,    20,    21,    25,   662,   663,
   538,    44,    21,   667,    47,    48,    25,   671,   672,   940,
   941,    20,    21,   677,   429,    34,    35,    36,    21,   764,
   765,     8,    25,    21,   439,    11,   441,    25,   443,   183,
   184,   185,    25,   697,   188,   189,   451,    89,    21,   454,
    21,   972,    25,   458,    25,   179,   180,    21,    22,   183,
   184,   796,   983,   187,   985,   986,  1099,    21,   137,    32,
    33,    25,   993,   935,   995,   996,    21,    67,    68,    69,
    25,   150,   151,   152,   153,   154,   155,    11,   157,   158,
  1147,  1012,    21,    21,   499,   500,  1017,    25,   983,    19,
   183,   184,   185,  1160,    19,   188,   189,   190,  1029,  1017,
    21,  1032,    19,   903,    25,   905,   906,   907,    34,    35,
    36,  1029,  1029,   777,  1181,    21,   203,    21,    19,    25,
    89,    25,  1053,  1054,  1055,  1056,    24,  1058,  1059,   109,
   110,   546,    27,    25,   399,    21,  1067,    22,  1069,  1070,
    34,    35,    36,  1074,    23,  1076,  1077,    21,  1079,   813,
   814,    18,   816,    24,  1085,    21,   421,   902,    11,    24,
   147,    25,   149,    51,    52,    53,    24,   582,  1099,    24,
    27,    25,    24,    23,    20,    19,   921,    20,    57,    58,
    59,    60,    61,    62,    63,    64,    65,    66,    19,  1120,
  1121,  1122,  1123,    23,    21,    27,     5,  1128,     8,     9,
    10,    25,    24,    22,    24,    20,   193,    25,    20,    72,
    27,    25,    18,    21,   201,    22,    27,  1148,   205,    24,
  1020,   208,  1022,    25,    72,    73,    74,    75,    25,   216,
  1148,    79,    80,    81,    82,    83,    84,    85,   902,    25,
    25,  1172,   657,    39,   659,   909,    29,    40,    25,   184,
   237,    55,    89,   668,    89,   335,   671,   672,   345,    18,
    89,    89,    25,    89,    89,    25,   353,    24,   355,    25,
  1015,    25,    18,   538,    25,    18,    21,   187,    40,   359,
    18,    21,    23,   182,   364,   365,   366,   367,   368,   369,
   370,   371,   372,   373,   374,    24,   375,   376,   377,   378,
   379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
   389,   390,    18,    89,   189,   395,   303,    22,    22,    21,
    21,     8,     9,    10,   311,   312,   313,   314,    22,    20,
    20,     8,     9,    10,    89,    27,    25,    25,    18,   149,
   427,    40,   191,    27,  1089,   332,   425,    25,    20,    20,
  1014,    27,    25,  1017,     0,     0,   343,    84,   300,  1172,
   894,  1141,  1070,  1044,   975,  1029,   984,  1031,   660,  1120,
  1012,   844,  1036,   360,   443,  1039,  1040,   769,  1148,   562,
   659,   657,   814,   193,   671,   124,   322,    10,   341,   236,
  1104,   201,   471,   490,   399,   205,   687,   476,   208,   814,
   972,    -1,    23,   490,    -1,    -1,   216,   486,    -1,   824,
    -1,   221,   399,   223,    -1,    -1,  1080,    -1,    -1,    -1,
   407,  1085,    -1,  1087,  1088,   235,   236,   237,    -1,    -1,
    -1,    -1,    -1,    -1,  1179,  1099,    57,    58,    59,    60,
    61,    62,    63,    64,    65,    66,    -1,    -1,    -1,   528,
    -1,   530,   539,   532,   533,    -1,    -1,    -1,    -1,    -1,
  1124,    -1,   149,    -1,    -1,    -1,     8,     9,    10,   556,
   557,    -1,   149,    -1,    -1,     8,     9,    10,    -1,    -1,
  1144,  1145,    -1,    18,  1148,    -1,    -1,  1151,    -1,    24,
    -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,
    -1,   580,    -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,
    -1,    46,    47,    48,   201,    -1,   193,    -1,   205,    -1,
    -1,   208,    -1,   602,   201,   940,   941,    -1,   205,   216,
   217,   208,    -1,   613,   221,    70,   223,    -1,    -1,   216,
   627,   628,   529,    -1,   221,    -1,   223,    -1,   235,   236,
   237,   538,   631,   640,    -1,    -1,    -1,    -1,   235,   236,
   237,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,    -1,    -1,
    -1,   661,    -1,    -1,    -1,    -1,   673,    -1,    -1,   399,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,  1017,    -1,    -1,    -1,    -1,   149,   687,   596,
    -1,   421,    -1,    -1,  1029,    -1,   149,  1032,    -1,   698,
   699,   700,   701,   702,   703,   704,   705,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   621,    -1,   623,    -1,    -1,  1054,
  1055,    -1,   629,    -1,    -1,    -1,   633,    -1,   183,   184,
   185,   193,   187,    -1,    -1,    -1,    -1,    -1,    -1,   201,
   193,  1076,  1077,   205,    -1,    -1,   208,    -1,   201,    -1,
  1085,   358,   205,    -1,   216,   208,    -1,    -1,    -1,   221,
    -1,   223,    -1,   216,  1099,    -1,    -1,    -1,   221,    -1,
   223,    -1,    -1,   235,   236,   237,    -1,    -1,    -1,   686,
    -1,    -1,   235,   236,   237,    -1,  1121,  1122,   787,    -1,
   697,   791,   399,    -1,   794,    -1,    -1,    -1,    -1,     8,
     9,    10,   399,    -1,    -1,    -1,    -1,    -1,   538,    -1,
    -1,    -1,    -1,  1148,   421,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   421,    -1,    -1,    -1,    -1,    -1,
   829,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   843,   844,    -1,    -1,    -1,    -1,   849,
   850,   851,   852,   853,   854,   855,   856,   857,   858,   859,
    -1,   860,   861,   862,   863,   864,   865,   866,   867,   868,
   869,   870,   871,   872,   873,   874,   875,   876,    18,   878,
    -1,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,
    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,   899,
    19,    20,    -1,    -1,    -1,    24,    46,    47,    48,    -1,
    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    47,    48,
    70,   538,    -1,    -1,    -1,    -1,   935,   399,   845,    -1,
   149,   538,    -1,    -1,    -1,    -1,   399,    -1,    -1,    -1,
    -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   421,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   421,    -1,
    -1,    -1,   112,   972,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   201,   112,    -1,    -1,   205,    -1,    -1,   208,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   216,    -1,    -1,
    -1,    -1,   221,    -1,   223,    -1,    -1,    -1,   925,    -1,
    -1,    -1,    -1,    -1,    -1,  1025,   235,   236,   237,    -1,
    -1,    -1,    24,    25,    -1,    -1,    -1,    29,    30,    31,
    32,    33,    34,   183,   184,   185,    -1,   187,    -1,    -1,
    -1,    -1,    -1,    -1,    46,    47,    48,    -1,    -1,    -1,
    -1,    -1,    -1,   970,   183,   184,   185,    -1,   187,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   538,    -1,    70,    -1,
    -1,    -1,    -1,    -1,    -1,   538,    -1,    -1,    -1,     0,
     1,    -1,   119,   120,   121,   122,    -1,   124,    -1,    -1,
    -1,    -1,   129,   130,    -1,    -1,   133,   134,    -1,   136,
   137,   138,   139,    24,    -1,    -1,    -1,    -1,    -1,    -1,
   112,    -1,    -1,    34,   151,   152,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    45,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1147,   176,
    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,   186,
    71,  1160,    -1,    -1,    -1,    76,    77,    78,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    90,
    91,    92,  1181,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   399,   183,   184,   185,    -1,   187,    -1,    -1,   109,   110,
   111,    -1,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   421,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
   161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
   171,   172,   173,   174,   175,   176,     0,     1,    -1,    -1,
    -1,    -1,   183,   184,   185,   186,    -1,   188,   189,   190,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    24,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   538,
    -1,    -1,    -1,    67,    68,    69,    -1,    71,    -1,    -1,
    -1,    -1,    76,    77,    78,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    90,    91,    92,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   109,   110,   111,    -1,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,    -1,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
   154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
   164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
   174,   175,   176,    -1,    -1,    -1,    -1,    -1,    -1,   183,
   184,   185,   186,     1,   188,   189,   190,    -1,     6,     7,
     8,    -1,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    -1,    -1,    -1,    24,    -1,    -1,    -1,
    -1,    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    42,    43,    -1,    45,    46,    47,
    48,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
    68,    69,    70,    71,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    94,    95,    96,    97,
    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,    -1,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
   158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
   168,   169,   170,   171,   172,   173,   174,   175,   176,    -1,
    -1,    -1,    -1,    -1,    -1,   183,   184,   185,   186,   187,
   188,   189,   190,     1,    -1,    -1,    -1,    -1,     6,     7,
     8,    -1,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    -1,    -1,    -1,    -1,    24,    -1,    -1,    -1,
    -1,    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    42,    43,    -1,    -1,    46,    47,
    48,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
    68,    69,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    94,    95,    96,    97,
    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,    -1,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
   158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
   168,   169,   170,   171,   172,   173,   174,   175,   176,    -1,
    -1,    -1,    -1,    -1,    -1,   183,   184,   185,   186,   187,
   188,   189,   190,     1,    -1,    -1,    -1,    -1,     6,     7,
     8,    -1,    -1,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    -1,    -1,    -1,    24,    -1,    -1,    -1,
    -1,    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    42,    43,    -1,    -1,    46,    47,
    48,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
    68,    69,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    94,    95,    96,    97,
    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,    -1,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
   158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
   168,   169,   170,   171,   172,   173,   174,   175,   176,    -1,
    -1,    -1,    -1,    -1,    -1,   183,   184,   185,   186,   187,
   188,   189,   190,     1,    -1,    -1,    -1,    -1,     6,     7,
     8,    -1,    -1,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    -1,    -1,    -1,    24,    25,    -1,    -1,
    -1,    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    42,    43,     1,    -1,    46,    47,
    48,     6,     7,     8,    -1,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    -1,    -1,    -1,    -1,    24,
    -1,    -1,    70,    -1,    29,    30,    31,    32,    33,    34,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,
    -1,    46,    47,    48,    -1,    93,    94,    95,    96,    97,
    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   108,    -1,    -1,    -1,   112,    70,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,    94,
    95,    96,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   108,    -1,    -1,    -1,   112,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   183,   184,   185,    -1,   187,
   188,   189,    -1,    -1,     1,    -1,    -1,    -1,    -1,     6,
     7,     8,    -1,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    -1,    -1,    -1,    -1,    24,    -1,    -1,
    -1,    -1,    29,    30,    31,    32,    33,    34,   183,   184,
   185,    -1,   187,   188,   189,    42,    43,     1,    -1,    46,
    47,    48,     6,     7,     8,    -1,    -1,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
    24,    -1,    -1,    70,    -1,    29,    30,    31,    32,    33,
    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,
    -1,    -1,    46,    47,    48,    -1,    93,    94,    95,    96,
    97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   108,    -1,    -1,    -1,   112,    70,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,
    94,    95,    96,    97,    98,    99,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,   112,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   183,   184,   185,    -1,
   187,   188,   189,    -1,    -1,     1,    -1,    -1,    -1,    -1,
     6,     7,     8,    -1,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    -1,    -1,    -1,    24,    -1,
    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,   183,
   184,   185,    -1,   187,   188,   189,    42,    43,     1,    -1,
    46,    47,    48,     6,     7,     8,    -1,    -1,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    -1,    -1,
    -1,    24,    -1,    -1,    70,    -1,    29,    30,    31,    32,
    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
    43,    -1,    -1,    46,    47,    48,    -1,    -1,    94,    95,
    96,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   108,    -1,    -1,    -1,   112,    70,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,   112,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    19,    -1,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,
    29,    30,    31,    32,    33,    34,    -1,   183,   184,   185,
    -1,   187,   188,   189,    -1,    -1,     1,    46,    47,    48,
    -1,     6,     7,     8,    -1,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    -1,    -1,    -1,    -1,    24,
    -1,    70,    -1,    -1,    29,    30,    31,    32,    33,    34,
   183,   184,   185,    -1,   187,   188,   189,    42,    43,    -1,
    -1,    46,    47,    48,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   112,    -1,    70,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    94,
    95,    96,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   108,     6,     7,     8,   112,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    -1,
    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,
    32,    33,    34,    -1,   183,   184,   185,    -1,   187,    -1,
    42,    43,    -1,    45,    46,    47,    48,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   183,   184,
   185,    -1,   187,   188,   189,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,    -1,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
   152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
   162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
   172,   173,   174,   175,   176,    -1,    -1,    -1,    -1,    -1,
    -1,   183,   184,   185,   186,   187,   188,   189,   190,     6,
     7,     8,    -1,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    -1,    -1,    -1,    24,    -1,    -1,
    -1,    -1,    29,    30,    31,    32,    33,    34,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,    45,    46,
    47,    48,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    70,    71,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    94,    95,    96,
    97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,    -1,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
    -1,    -1,    -1,    -1,    -1,    -1,   183,   184,   185,   186,
   187,   188,   189,   190,     6,     7,     8,    -1,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    -1,
    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,
    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    42,    43,    -1,    45,    46,    47,    48,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,    -1,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
   152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
   162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
   172,   173,   174,   175,   176,    -1,    -1,    -1,    -1,    -1,
    -1,   183,   184,   185,   186,   187,   188,   189,   190,     6,
     7,     8,    -1,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    -1,    -1,    -1,    24,    -1,    -1,
    -1,    -1,    29,    30,    31,    32,    33,    34,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,
    47,    48,     6,     7,     8,    -1,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
    24,    -1,    -1,    70,    -1,    29,    30,    31,    32,    33,
    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    46,    47,    48,    -1,    -1,    94,    95,    96,
    97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   108,    -1,    -1,    -1,   112,    70,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    94,    95,    96,    97,    98,    99,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   108,     6,     7,     8,   112,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,
    31,    32,    33,    34,    -1,    -1,   183,   184,   185,    -1,
   187,   188,   189,    -1,    -1,    46,    47,    48,     6,     7,
     8,    -1,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    -1,    -1,    -1,    24,    -1,    -1,    70,
    -1,    29,    30,    31,    32,    33,    34,    -1,    -1,   183,
   184,   185,    -1,   187,   188,   189,    -1,    -1,    46,    47,
    48,    -1,    -1,    94,    95,    96,    97,    98,    99,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,
    -1,   112,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    94,    95,    96,    97,
    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   108,     6,     7,     8,   112,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    24,
    -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,
    -1,    -1,   183,   184,   185,    -1,   187,   188,   189,    -1,
    -1,    46,    47,    48,     6,     7,     8,    -1,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    -1,
    -1,    -1,    24,    -1,    -1,    70,    -1,    29,    30,    31,
    32,    33,    34,    -1,    -1,   183,   184,   185,    -1,   187,
   188,   189,    -1,    -1,    46,    47,    48,    -1,    -1,    94,
    95,    96,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   108,    -1,    -1,    -1,   112,    70,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   108,     6,     7,     8,
   112,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,
    29,    30,    31,    32,    33,    34,    -1,    -1,   183,   184,
   185,    -1,   187,   188,   189,    -1,    -1,    46,    47,    48,
     6,     7,     8,    -1,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    -1,    -1,    -1,    -1,    24,    -1,
    -1,    70,    -1,    29,    30,    31,    32,    33,    34,    -1,
    -1,   183,   184,   185,    -1,   187,   188,   189,    -1,    -1,
    46,    47,    48,    -1,    -1,    94,    95,    96,    97,    98,
    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   108,
    -1,    -1,    -1,   112,    70,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    94,    95,
    96,    97,    98,    99,    19,    -1,    -1,    -1,    -1,    24,
    -1,    -1,   108,    -1,    -1,    -1,   112,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   183,   184,   185,    -1,   187,   188,
   189,    -1,    -1,    -1,    -1,    -1,    71,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    20,    -1,    -1,    -1,   183,   184,   185,
    -1,   187,   188,   189,   109,   110,   111,    -1,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,    -1,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
   155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
   165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
   175,   176,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   185,   186,   109,   110,   111,   190,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,    -1,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
    22,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,   186,
    -1,    -1,    -1,   190,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    86,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,   110,   111,
    -1,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,    -1,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
   152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
   162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
   172,   173,   174,   175,   176,    -1,    -1,    -1,    -1,    -1,
    19,    -1,    -1,    -1,   186,    24,    -1,    -1,   190,    -1,
    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    47,    48,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   112,    34,    24,    -1,    -1,    27,    -1,
    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    47,    48,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   183,   184,   185,    -1,   187,   109,
   110,   111,    -1,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   112,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
   150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
   160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
   170,   171,   172,   173,   174,   175,   176,    -1,    -1,    -1,
    -1,    -1,    -1,   183,   184,   185,   186,    -1,   188,   189,
   190,    -1,    -1,    -1,   183,   184,   185,    24,   187,    -1,
    27,    -1,    29,    30,    31,    32,    33,    34,    24,    25,
    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,    46,
    47,    48,    -1,    -1,    -1,    -1,    -1,    -1,    24,    25,
    46,    47,    48,    29,    30,    31,    32,    33,    34,    -1,
    -1,    -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,
    46,    47,    48,    24,    70,    -1,    -1,    -1,    29,    30,
    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    70,    46,    47,    48,    -1,    -1,
    -1,    -1,    24,    -1,    -1,   112,    -1,    29,    30,    31,
    32,    33,    34,    -1,    -1,    -1,   112,    -1,    -1,    70,
    -1,    -1,    24,    -1,    46,    47,    48,    29,    30,    31,
    32,    33,    34,    24,    -1,    -1,   112,    -1,    29,    30,
    31,    32,    33,    34,    46,    47,    48,    -1,    70,    -1,
    -1,    -1,    -1,    -1,    -1,    46,    47,    48,    -1,    -1,
    -1,   112,    -1,    -1,    -1,    -1,    -1,    -1,    70,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   183,   184,   185,    70,
   187,    -1,    -1,    -1,    -1,    -1,    -1,   183,   184,   185,
   112,   187,    24,    -1,    -1,    -1,    -1,    29,    30,    31,
    32,    33,    34,    -1,    -1,    -1,    -1,   183,   184,   185,
   112,   187,    -1,    -1,    46,    47,    48,    -1,    -1,    -1,
    -1,   112,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   183,   184,   185,    -1,   187,    -1,    70,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   183,   184,   185,    -1,   187,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   112,   183,   184,   185,    -1,   187,    -1,    -1,    -1,    42,
    43,    -1,   183,   184,   185,    -1,   187,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   183,   184,   185,    -1,   187,   109,   110,   111,    -1,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
    -1,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
   163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
   173,   174,   175,   176,    45,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   185,   186,    -1,    -1,    -1,   190,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,
    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,   110,
   111,    -1,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,    -1,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
   161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
   171,   172,   173,   174,   175,   176,    45,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   185,   186,    -1,    -1,    -1,   190,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   109,   110,   111,    -1,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,    -1,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
   159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
   169,   170,   171,   172,   173,   174,   175,   176,    45,    -1,
    -1,    -1,    -1,    -1,   183,   184,   185,   186,    -1,    -1,
    -1,   190,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    71,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   109,   110,   111,    -1,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,    -1,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
    67,    68,    69,    -1,    -1,    -1,    -1,    -1,   185,   186,
    -1,    -1,    -1,   190,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   109,   110,   111,    -1,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,    -1,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
    90,    91,    92,    -1,    -1,    -1,    -1,    -1,   185,   186,
    -1,    -1,    -1,   190,    -1,    -1,    -1,    -1,    -1,   109,
   110,   111,    -1,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,    -1,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
   150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
   160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
   170,   171,   172,   173,   174,   175,   176,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   185,   186,   109,   110,   111,
   190,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,    -1,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
   152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
   162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
   172,   173,   174,   175,   176,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   185,   186,    -1,    -1,    -1,   190
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */

/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif



/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 3:
{ context_checkGlobalScope (); ;
    break;}
case 4:
{ context_checkGlobalScope (); ;
    break;}
case 5:
{ uentry_clearDecl (); ;
    break;}
case 6:
{ uentry_clearDecl (); ;
    break;}
case 7:
{ uentry_clearDecl (); ;
    break;}
case 8:
{ uentry_clearDecl (); ;
    break;}
case 9:
{ uentry_clearDecl (); ;
    break;}
case 10:
{ uentry_checkDecl (); exprNode_free (yyvsp[0].expr); ;
    break;}
case 11:
{ uentry_clearDecl (); ;
    break;}
case 12:
{ checkConstant (yyvsp[-6].qtyp, yyvsp[-4].ntyp); ;
    break;}
case 13:
{ checkValueConstant (yyvsp[-9].qtyp, yyvsp[-7].ntyp, yyvsp[-3].expr) ; ;
    break;}
case 14:
{ context_enterFunctionHeader (); ;
    break;}
case 15:
{ 
     declareStaticFunction (yyvsp[-2].ntyp); context_quietExitFunction (); 
     context_exitFunctionHeader (); 
   ;
    break;}
case 16:
{ 
     qtype qint = qtype_create (ctype_int);
     yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, qint);
     qtype_free (qint);
   ;
    break;}
case 17:
{ yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, yyvsp[-2].qtyp); ;
    break;}
case 19:
{ yyval.ntyp = yyvsp[0].ntyp; qtype_adjustPointers (yyvsp[-1].count, idDecl_getTyp (yyval.ntyp)); ;
    break;}
case 20:
{ yyval.ntyp = idDecl_create (yyvsp[0].cname, qtype_unknown ()); ;
    break;}
case 21:
{ yyval.ntyp = idDecl_expectFunction (yyvsp[-2].ntyp); ;
    break;}
case 22:
{ yyval.ntyp = idDecl_replaceCtype (yyvsp[-2].ntyp, ctype_makeArray (idDecl_getCtype (yyvsp[-2].ntyp))); ;
    break;}
case 23:
{
     exprNode_findValue(yyvsp[-2].expr);
     if (exprNode_hasValue (yyvsp[-2].expr)) 
       {
	 yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ctype_makeFixedArray (idDecl_getCtype (yyvsp[-5].ntyp), exprNode_getLongValue (yyvsp[-2].expr)));
       } 
     else
       {
	 yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ctype_makeArray (idDecl_getCtype (yyvsp[-5].ntyp))); 
       }
   ;
    break;}
case 24:
{ setCurrentParams (uentryList_missingParams); ;
    break;}
case 25:
{ /* need to support globals and modifies here! */
     ctype ct = ctype_makeFunction (idDecl_getCtype (yyvsp[-5].ntyp), 
				    uentryList_makeMissingParams ());
     
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ct);
     idDecl_addClauses (yyval.ntyp, yyvsp[0].funcclauselist);
     context_popLoc ();
     /*drl 7/25/01 added*/
     setImplictfcnConstraints();
   ;
    break;}
case 26:
{ setCurrentParams (yyvsp[-1].entrylist); ;
    break;}
case 27:
{ setImplictfcnConstraints ();
     clearCurrentParams ();
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-6].ntyp, ctype_makeFunction (idDecl_getCtype (yyvsp[-6].ntyp), yyvsp[-3].entrylist));
     idDecl_addClauses (yyval.ntyp, yyvsp[0].funcclauselist);
     context_popLoc (); 
   ;
    break;}
case 28:
{ yyval.ntyp = idDecl_create (yyvsp[0].cname, qtype_unknown ()); ;
    break;}
case 29:
{ yyval.ntyp = idDecl_expectFunction (yyvsp[-2].ntyp); ;
    break;}
case 30:
{ yyval.ntyp = idDecl_replaceCtype (yyvsp[-2].ntyp, ctype_makeArray (idDecl_getCtype (yyvsp[-2].ntyp))); ;
    break;}
case 31:
{ 
     int value;

     if (exprNode_hasValue (yyvsp[-2].expr) 
	 && multiVal_isInt (exprNode_getValue (yyvsp[-2].expr)))
       {
	 value = (int) multiVal_forceInt (exprNode_getValue (yyvsp[-2].expr));
       }
     else
       {
	 value = 0;
       }

     yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ctype_makeFixedArray (idDecl_getCtype (yyvsp[-5].ntyp), value));
   ;
    break;}
case 32:
{ setCurrentParams (uentryList_missingParams); ;
    break;}
case 33:
{
     ctype ct = ctype_makeFunction (idDecl_getCtype (yyvsp[-5].ntyp), 
				    uentryList_makeMissingParams ());
     
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ct);
     idDecl_addClauses (yyval.ntyp, yyvsp[0].funcclauselist);
     context_popLoc (); 
   ;
    break;}
case 34:
{ setCurrentParams (yyvsp[-1].entrylist); ;
    break;}
case 35:
{ 
     clearCurrentParams ();
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-6].ntyp, ctype_makeFunction (idDecl_getCtype (yyvsp[-6].ntyp), yyvsp[-3].entrylist));
     idDecl_addClauses (yyval.ntyp, yyvsp[0].funcclauselist);
     context_popLoc (); 
   ;
    break;}
case 36:
{ setCurrentParams (yyvsp[-1].entrylist); ;
    break;}
case 37:
{ clearCurrentParams (); ;
    break;}
case 38:
{ declareCIter (yyvsp[-8].cname, yyvsp[-6].entrylist); ;
    break;}
case 39:
{ exprNode_checkMacroBody (yyvsp[-1].expr); ;
    break;}
case 40:
{ exprNode_checkIterBody (yyvsp[-1].expr); ;
    break;}
case 41:
{ exprNode_checkIterEnd (yyvsp[-1].expr); ;
    break;}
case 42:
{ exprChecks_checkEmptyMacroBody (); ;
    break;}
case 43:
{ clabstract_declareFunction (yyvsp[0].ntyp); ;
    break;}
case 44:
{ yyval.msconstraint = metaStateConstraint_create (yyvsp[-2].msspec, yyvsp[0].msexpr); ;
    break;}
case 45:
{ cscanner_expectingMetaStateName (); ;
    break;}
case 46:
{ cscanner_clearExpectingMetaStateName ();
      yyval.msspec = metaStateSpecifier_create (yyvsp[-3].sr, yyvsp[0].msinfo); ;
    break;}
case 47:
{ cscanner_expectingMetaStateName (); ;
    break;}
case 48:
{ cscanner_clearExpectingMetaStateName ();
      yyval.msspec = metaStateSpecifier_createElipsis (yyvsp[0].msinfo); ;
    break;}
case 49:
{ yyval.msexpr = metaStateExpression_create (yyvsp[0].msspec); ;
    break;}
case 50:
{ yyval.msexpr = metaStateExpression_createMerge (yyvsp[-2].msspec, yyvsp[0].msexpr); ;
    break;}
case 52:
{ yyval.conL = constraintList_add (yyvsp[0].conL, yyvsp[-2].con); ;
    break;}
case 53:
{ yyval.conL = constraintList_single (yyvsp[0].con); ;
    break;}
case 54:
{
 yyval.con = makeConstraintParse3 (yyvsp[-2].conE, yyvsp[-1].tok, yyvsp[0].conE);
 DPRINTF(("Done BufConstraint1\n")); ;
    break;}
case 61:
{yyval.conE = constraintExpr_parseMakeUnaryOp (yyvsp[-3].tok, yyvsp[-1].conE);  DPRINTF( ("Got BufConstraintExpr UNary Op ") ); ;
    break;}
case 62:
{
   DPRINTF( ("Got BufConstraintExpr BINary Op ") );
   yyval.conE = constraintExpr_parseMakeBinaryOp (yyvsp[-3].conE, yyvsp[-2].tok, yyvsp[-1].conE); ;
    break;}
case 63:
{ yyval.conE =  constraintExpr_makeTermsRef (yyvsp[0].sr);;
    break;}
case 64:
{ yyval.conE = constraintExpr_makeIntLiteral (exprNode_getLongValue (yyvsp[0].expr)); ;
    break;}
case 65:
{ /*@-onlytrans@*/ yyval.sr = checkbufferConstraintClausesId (yyvsp[0].entry); /*@=onlytrans@*/ /*@i523@*/ ;
    break;}
case 66:
{ yyval.sr = fixStateClausesId (yyvsp[0].cname); ;
    break;}
case 67:
{ yyval.sr = sRef_makeAnyArrayFetch (yyvsp[-2].sr); ;
    break;}
case 68:
{
    /*
    char *t; int c; 
    t =  cstring_toCharsSafe (exprNode_unparse($3)); 
    c = atoi( t );
    */
    yyval.sr = sRef_makeArrayFetchKnown (yyvsp[-3].sr, exprNode_getLongValue (yyvsp[-1].expr));
  ;
    break;}
case 69:
{ yyval.sr = sRef_constructPointer (yyvsp[0].sr); ;
    break;}
case 70:
{ yyval.sr = yyvsp[-1].sr; ;
    break;}
case 71:
{ cstring_markOwned (yyvsp[0].cname); yyval.sr = sRef_buildField (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 72:
{ cstring_markOwned (yyvsp[0].cname); yyval.sr = sRef_makeArrow (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 76:
{ yyval.funcclauselist = functionClauseList_new (); ;
    break;}
case 77:
{ yyval.funcclauselist = functionClauseList_prepend (yyvsp[0].funcclauselist, yyvsp[-1].funcclause); ;
    break;}
case 78:
{ yyval.funcclauselist = functionClauseList_new (); ;
    break;}
case 79:
{ yyval.funcclauselist = functionClauseList_prepend (yyvsp[0].funcclauselist, yyvsp[-1].funcclause); ;
    break;}
case 80:
{ yyval.funcclause = functionClause_createGlobals (yyvsp[0].globsclause); ;
    break;}
case 81:
{ yyval.funcclause = functionClause_createModifies (yyvsp[0].modsclause); ;
    break;}
case 82:
{ yyval.funcclause = functionClause_createModifies (yyvsp[0].modsclause); ;
    break;}
case 83:
{ yyval.funcclause = functionClause_createState (yyvsp[0].stateclause); ;
    break;}
case 84:
{ yyval.funcclause = yyvsp[0].funcclause; ;
    break;}
case 85:
{ yyval.funcclause = functionClause_createWarn (yyvsp[0].warnclause); ;
    break;}
case 86:
{ yyval.funcclause = functionClause_createGlobals (yyvsp[0].globsclause); ;
    break;}
case 87:
{ yyval.funcclause = functionClause_createModifies (yyvsp[0].modsclause); ;
    break;}
case 88:
{ yyval.funcclause = functionClause_createModifies (yyvsp[0].modsclause); ;
    break;}
case 89:
{ yyval.funcclause = functionClause_createState (yyvsp[0].stateclause); ;
    break;}
case 90:
{ yyval.funcclause = yyvsp[0].funcclause; ;
    break;}
case 91:
{ yyval.funcclause = functionClause_createWarn (yyvsp[0].warnclause); ;
    break;}
case 92:
{ yyval.globsclause = yyvsp[-1].globsclause; ;
    break;}
case 93:
{ setProcessingGlobalsList (); ;
    break;}
case 94:
{ 
     unsetProcessingGlobals (); 
     yyval.globsclause = globalsClause_create (yyvsp[-3].tok, yyvsp[-1].globset); 
   ;
    break;}
case 95:
{ yyval.modsclause = modifiesClause_createNoMods (yyvsp[0].tok); ;
    break;}
case 96:
{ yyval.modsclause = yyvsp[-1].modsclause; ;
    break;}
case 97:
{
     context_setProtectVars (); enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;
    break;}
case 98:
{ 
     exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
     yyval.modsclause = modifiesClause_create (yyvsp[-2].tok, yyvsp[0].srset);
   ;
    break;}
case 99:
{ yyval.flagspec = flagSpec_createPlain (yyvsp[0].cname); ;
    break;}
case 100:
{ yyval.flagspec = flagSpec_createOr (yyvsp[-2].cname, yyvsp[0].flagspec); ;
    break;}
case 103:
{ yyval.warnclause = warnClause_undefined; ;
    break;}
case 104:
{ yyval.warnclause = yyvsp[-1].warnclause; ;
    break;}
case 105:
{      
     llassert (exprNode_knownStringValue (yyvsp[0].expr));
     yyval.warnclause = warnClause_create (yyvsp[-2].tok, yyvsp[-1].flagspec, cstring_copy (multiVal_forceString (exprNode_getValue (yyvsp[0].expr)))); 
     exprNode_free (yyvsp[0].expr);
   ;
    break;}
case 106:
{ yyval.warnclause = warnClause_create (yyvsp[-1].tok, yyvsp[0].flagspec, cstring_undefined); ;
    break;}
case 107:
{ yyval.globset = globSet_single (yyvsp[0].sr); ;
    break;}
case 108:
{ yyval.globset = globSet_insert (yyvsp[-2].globset, yyvsp[0].sr); ;
    break;}
case 109:
{ yyval.sr = clabstract_createGlobal (yyvsp[0].sr, yyvsp[-1].tquallist); ;
    break;}
case 110:
{ yyval.tquallist = qualList_undefined; ;
    break;}
case 111:
{ yyval.tquallist = qualList_add (yyvsp[0].tquallist, yyvsp[-1].typequal); ;
    break;}
case 112:
{ yyval.sr = uentry_getSref (yyvsp[0].entry); ;
    break;}
case 113:
{ yyval.sr = clabstract_unrecognizedGlobal (yyvsp[0].cname); ;
    break;}
case 114:
{ yyval.sr = clabstract_checkGlobal (yyvsp[0].expr); ;
    break;}
case 115:
{ yyval.typequal = qual_createUndef (); ;
    break;}
case 116:
{ yyval.typequal = qual_createKilled (); ;
    break;}
case 117:
{ yyval.typequal = qual_createOut (); ;
    break;}
case 118:
{ yyval.typequal = qual_createIn (); ;
    break;}
case 119:
{ yyval.typequal = qual_createPartial (); ;
    break;}
case 127:
{ 
     qtype qint = qtype_create (ctype_int);
     yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, qint);
     qtype_free (qint);
   ;
    break;}
case 128:
{ yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, yyvsp[-2].qtyp); ;
    break;}
case 129:
{ checkDoneParams (); context_enterInnerContext (); ;
    break;}
case 130:
{  
     exprNode_checkFunctionBody (yyvsp[0].expr); yyval.expr = yyvsp[0].expr; 
     context_exitInner (yyvsp[0].expr); 
   ;
    break;}
case 131:
{ context_enterOldStyleScope (); ;
    break;}
case 132:
{ oldStyleDoneParams (); context_enterInnerContext (); ;
    break;}
case 133:
{
     exprNode_checkFunctionBody (yyvsp[0].expr); 
     yyval.expr = yyvsp[0].expr; /* oldstyle */ 
     context_exitInner (yyvsp[0].expr);
   ;
    break;}
case 134:
{ 
     context_setFunctionDefined (exprNode_loc (yyvsp[0].expr)); 
     exprNode_checkFunction (context_getHeader (),  yyvsp[0].expr); 
     /* DRL 8 8 2000 */
     
     context_exitFunction ();
   ;
    break;}
case 135:
{ yyval.srset = yyvsp[-1].srset; ;
    break;}
case 136:
{ yyval.srset = sRefSet_new (); ;
    break;}
case 137:
{ yyval.sr = uentry_getSref (yyvsp[0].entry); checkModifiesId (yyvsp[0].entry); ;
    break;}
case 138:
{ yyval.sr = fixModifiesId (yyvsp[0].cname); ;
    break;}
case 139:
{ yyval.sr = modListArrayFetch (yyvsp[-2].sr, sRef_undefined); ;
    break;}
case 140:
{ yyval.sr = modListArrayFetch (yyvsp[-3].sr, yyvsp[-1].sr); ;
    break;}
case 141:
{ yyval.sr = modListPointer (yyvsp[0].sr); ;
    break;}
case 142:
{ yyval.sr = yyvsp[-1].sr; ;
    break;}
case 143:
{ yyval.sr = modListFieldAccess (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 144:
{ yyval.sr = modListArrowAccess (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 145:
{ yyval.sr = yyvsp[0].sr; ;
    break;}
case 146:
{ yyval.sr = sRef_makeUnknown (); /* sRef_makeConstant ($1); ? */ ;
    break;}
case 147:
{ yyval.srset = sRefSet_single (yyvsp[0].sr); ;
    break;}
case 148:
{ yyval.srset = sRefSet_insert (yyvsp[-2].srset, yyvsp[0].sr); ;
    break;}
case 149:
{ yyval.sr = checkStateClausesId (yyvsp[0].entry); ;
    break;}
case 150:
{ yyval.sr = fixStateClausesId (yyvsp[0].cname); ;
    break;}
case 151:
{ yyval.sr = sRef_makeAnyArrayFetch (yyvsp[-2].sr); ;
    break;}
case 152:
{ yyval.sr = sRef_makeAnyArrayFetch (yyvsp[-3].sr); ;
    break;}
case 153:
{ yyval.sr = sRef_constructPointer (yyvsp[0].sr); ;
    break;}
case 154:
{ yyval.sr = yyvsp[-1].sr; ;
    break;}
case 155:
{ cstring_markOwned (yyvsp[0].cname);
					    yyval.sr = sRef_buildField (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 156:
{ cstring_markOwned (yyvsp[0].cname);
                                            yyval.sr = sRef_makeArrow (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 157:
{ yyval.srset = sRefSet_undefined ;
    break;}
case 159:
{ if (sRef_isValid (yyvsp[0].sr)) { yyval.srset = sRefSet_single (yyvsp[0].sr); } 
      else { yyval.srset = sRefSet_undefined; } 
    ;
    break;}
case 160:
{ if (sRef_isValid (yyvsp[0].sr))
	{
	  yyval.srset = sRefSet_insert (yyvsp[-2].srset, yyvsp[0].sr); 
	}
      else
	{
	  yyval.srset = yyvsp[-2].srset;
	}
    ;
    break;}
case 161:
{ yyval.expr = exprNode_fromIdentifier (yyvsp[0].entry); ;
    break;}
case 162:
{ yyval.expr = exprNode_fromUIO (yyvsp[0].cname); ;
    break;}
case 164:
{ yyval.expr = exprNode_addParens (yyvsp[-2].tok, yyvsp[-1].expr); ;
    break;}
case 165:
{ yyval.expr = exprNode_fromIdentifier (coerceId (yyvsp[0].cname)); ;
    break;}
case 166:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 168:
{ yyval.expr = exprNode_arrayFetch (yyvsp[-3].expr, yyvsp[-1].expr); ;
    break;}
case 169:
{ yyval.expr = exprNode_functionCall (yyvsp[-2].expr, exprNodeList_new ()); ;
    break;}
case 170:
{ yyval.expr = exprNode_functionCall (yyvsp[-3].expr, yyvsp[-1].exprlist); ;
    break;}
case 171:
{ yyval.expr = exprNode_vaArg (yyvsp[-5].tok, yyvsp[-3].expr, yyvsp[-1].qtyp); ;
    break;}
case 172:
{ yyval.expr = exprNode_fieldAccess (yyvsp[-4].expr, yyvsp[-2].tok, yyvsp[-1].cname); ;
    break;}
case 173:
{ yyval.expr = exprNode_arrowAccess (yyvsp[-4].expr, yyvsp[-2].tok, yyvsp[-1].cname); ;
    break;}
case 174:
{ yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 175:
{ yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 176:
{ yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 177:
{ yyval.exprlist = exprNodeList_push (yyvsp[-2].exprlist, yyvsp[0].expr); ;
    break;}
case 179:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 180:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 181:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 182:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 183:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 184:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 185:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 186:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 187:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 188:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 189:
{ yyval.cstringlist = cstringList_add (yyvsp[-2].cstringlist, yyvsp[0].cname); ;
    break;}
case 190:
{ yyval.cstringlist = cstringList_single (yyvsp[0].cname); ;
    break;}
case 191:
{ yyval.expr = exprNode_offsetof (yyvsp[-5].qtyp, yyvsp[-2].cstringlist); ;
    break;}
case 192:
{ context_setProtectVars (); ;
    break;}
case 193:
{ context_sizeofReleaseVars (); yyval.expr = yyvsp[0].expr; ;
    break;}
case 194:
{ yyval.expr = exprNode_sizeofType (yyvsp[-1].qtyp); ;
    break;}
case 195:
{ yyval.expr = exprNode_sizeofExpr (yyvsp[0].expr); ;
    break;}
case 196:
{ yyval.expr = exprNode_alignofType (yyvsp[-1].qtyp); ;
    break;}
case 197:
{ yyval.expr = exprNode_alignofExpr (yyvsp[0].expr); ;
    break;}
case 199:
{ yyval.expr = exprNode_cast (yyvsp[-3].tok, yyvsp[0].expr, yyvsp[-2].qtyp); ;
    break;}
case 201:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 202:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 203:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 205:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 206:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 208:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 209:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 211:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 212:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 213:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 214:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 216:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 217:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 219:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 221:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 223:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 225:
{ exprNode_produceGuards (yyvsp[-1].expr); 
     context_enterAndClause (yyvsp[-1].expr); 
   ;
    break;}
case 226:
{ 
     yyval.expr = exprNode_op (yyvsp[-3].expr, yyvsp[0].expr, yyvsp[-2].tok); 
     context_exitAndClause (yyval.expr, yyvsp[0].expr);
   ;
    break;}
case 228:
{ 
     exprNode_produceGuards (yyvsp[-1].expr);
     context_enterOrClause (yyvsp[-1].expr); 
   ;
    break;}
case 229:
{ 
     yyval.expr = exprNode_op (yyvsp[-3].expr, yyvsp[0].expr, yyvsp[-2].tok); 
     context_exitOrClause (yyval.expr, yyvsp[0].expr);
   ;
    break;}
case 231:
{ exprNode_produceGuards (yyvsp[-1].expr); context_enterTrueClause (yyvsp[-1].expr); ;
    break;}
case 232:
{ context_enterFalseClause (yyvsp[-4].expr); ;
    break;}
case 233:
{ yyval.expr = exprNode_cond (yyvsp[-6].expr, yyvsp[-3].expr, yyvsp[0].expr); context_exitClause (yyvsp[-6].expr, yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 235:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 236:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 237:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 238:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 239:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 240:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 241:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 242:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 243:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 244:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 245:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 247:
{ yyval.expr = exprNode_comma (yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 248:
{ yyval.expr = exprNode_undefined; ;
    break;}
case 251:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 252:
{ doVaDcl (); yyval.expr = exprNode_makeError (); ;
    break;}
case 253:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 254:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 255:
{
     setProcessingVars (yyvsp[-3].qtyp); 
     processNamedDecl (yyvsp[-1].ntyp); 
   ;
    break;}
case 256:
{ 
     unsetProcessingVars (); 
     yyval.expr = exprNode_makeEmptyInitialization (yyvsp[-6].ntyp); 
     DPRINTF (("Empty initialization: %s", exprNode_unparse (yyval.expr)));
   ;
    break;}
case 257:
{ setProcessingVars (yyvsp[-4].qtyp); processNamedDecl (yyvsp[-2].ntyp); ;
    break;}
case 258:
{ yyval.expr = exprNode_concat (yyvsp[-2].expr, exprNode_makeInitialization (yyvsp[-8].ntyp, yyvsp[-3].expr)); 
     unsetProcessingVars ();
   ;
    break;}
case 259:
{ 
     processNamedDecl (yyvsp[-1].ntyp); 
     yyval.expr = exprNode_makeEmptyInitialization (yyvsp[-1].ntyp);
   ;
    break;}
case 260:
{ processNamedDecl (yyvsp[-2].ntyp); ;
    break;}
case 261:
{ yyval.expr = exprNode_makeInitialization (yyvsp[-5].ntyp, yyvsp[0].expr); ;
    break;}
case 262:
{ setProcessingTypedef (yyvsp[0].qtyp); ;
    break;}
case 263:
{ clabstract_declareType (yyvsp[-3].exprlist, yyvsp[-1].warnclause); ;
    break;}
case 264:
{ /* in the ANSI grammar, semantics unclear */ ;
    break;}
case 265:
{ /* in the ANSI grammar, semantics unclear */ ;
    break;}
case 266:
{ g_expectingTypeName = TRUE; ;
    break;}
case 267:
{ g_expectingTypeName = TRUE; context_pushLoc (); ;
    break;}
case 268:
{ yyval.exprlist = yyvsp[-1].exprlist; ;
    break;}
case 269:
{ yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 270:
{ yyval.exprlist = exprNodeList_push (yyvsp[-3].exprlist, yyvsp[0].expr); ;
    break;}
case 271:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 272:
{ yyval.expr = exprNode_concat (yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 274:
{ yyval.expr = exprNode_makeInitBlock (yyvsp[-2].tok, yyvsp[-1].exprlist); ;
    break;}
case 275:
{ yyval.expr = exprNode_makeInitBlock (yyvsp[-3].tok, yyvsp[-2].exprlist); ;
    break;}
case 276:
{ yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 277:
{ yyval.exprlist = exprNodeList_push (yyvsp[-2].exprlist, yyvsp[0].expr); ;
    break;}
case 278:
{ setStorageClass (SCEXTERN); yyval.typequal = qual_createExtern (); ;
    break;}
case 279:
{ yyval.typequal = qual_createInline (); ;
    break;}
case 280:
{ setStorageClass (SCSTATIC); yyval.typequal = qual_createStatic (); ;
    break;}
case 281:
{ yyval.typequal = qual_createAuto (); ;
    break;}
case 282:
{ yyval.typequal = qual_createRegister (); ;
    break;}
case 283:
{ yyval.typequal = qual_createNullTerminated (); ;
    break;}
case 284:
{ yyval.stateclause = yyvsp[-1].stateclause; ;
    break;}
case 285:
{
     context_setProtectVars (); 
     enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;
    break;}
case 286:
{ 
     exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
     yyval.stateclause = stateClause_createPlain (yyvsp[-5].tok, yyvsp[-2].srset);
   ;
    break;}
case 287:
{ yyval.funcclause = yyvsp[-1].funcclause; ;
    break;}
case 288:
{ yyval.tok = yyvsp[-1].tok; context_enterFunctionHeader (); ;
    break;}
case 289:
{
     context_exitFunctionHeader ();
     context_setProtectVars (); 
     enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;
    break;}
case 290:
{ 
     exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
     yyval.funcclause = functionClause_createState (stateClause_create (yyvsp[-5].tok, yyvsp[-4].typequal, yyvsp[-2].srset));
   ;
    break;}
case 291:
{
     context_setProtectVars (); 
     enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;
    break;}
case 292:
{
     context_exitFunctionHeader ();
     exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
     DPRINTF (("done optGlobBufConstraintsAux\n"));

     if (lltok_isEnsures (yyvsp[-4].tok)) 
       {
	 yyval.funcclause = functionClause_createEnsures (yyvsp[-2].fcnconstraint);
       }
     else if (lltok_isRequires (yyvsp[-4].tok))
       {
	 yyval.funcclause = functionClause_createRequires (yyvsp[-2].fcnconstraint);
       }
     else
       {
	 BADBRANCH;
       }

     DPRINTF (("FunctionclauseS: %s", functionClause_unparse (yyval.funcclause)));
   ;
    break;}
case 293:
{ yyval.fcnconstraint = functionConstraint_createBufferConstraint (yyvsp[0].conL); ;
    break;}
case 294:
{ yyval.fcnconstraint = functionConstraint_createMetaStateConstraint (yyvsp[0].msconstraint); DPRINTF (("Made constraint: %s", functionConstraint_unparse (yyval.fcnconstraint))); ;
    break;}
case 295:
{ yyval.typequal = qual_createExits (); ;
    break;}
case 296:
{ yyval.typequal = qual_createMayExit (); ;
    break;}
case 297:
{ yyval.typequal = qual_createTrueExit (); ;
    break;}
case 298:
{ yyval.typequal = qual_createFalseExit (); ;
    break;}
case 299:
{ yyval.typequal = qual_createNeverExit (); ;
    break;}
case 300:
{ yyval.typequal = qual_createChecked (); ;
    break;}
case 301:
{ yyval.typequal = qual_createCheckMod (); ;
    break;}
case 302:
{ yyval.typequal = qual_createUnchecked (); ;
    break;}
case 303:
{ yyval.typequal = qual_createCheckedStrict (); ;
    break;}
case 304:
{ yyval.typequal = qual_createOwned (); ;
    break;}
case 305:
{ yyval.typequal = qual_createDependent (); ;
    break;}
case 306:
{ yyval.typequal = qual_createYield (); ;
    break;}
case 307:
{ yyval.typequal = qual_createTemp (); ;
    break;}
case 308:
{ yyval.typequal = qual_createOnly (); ;
    break;}
case 309:
{ yyval.typequal = qual_createKeep (); ;
    break;}
case 310:
{ yyval.typequal = qual_createKept (); ;
    break;}
case 311:
{ yyval.typequal = qual_createShared (); ;
    break;}
case 312:
{ yyval.typequal = qual_createUnique (); ;
    break;}
case 313:
{ yyval.typequal = qual_createNull (); ;
    break;}
case 314:
{ yyval.typequal = qual_createIsNull (); ;
    break;}
case 315:
{ yyval.typequal = qual_createRelNull (); ;
    break;}
case 316:
{ yyval.typequal = qual_createNotNull (); ;
    break;}
case 317:
{ yyval.typequal = qual_createExposed (); ;
    break;}
case 318:
{ yyval.typequal = qual_createObserver (); ;
    break;}
case 319:
{ yyval.typequal = qual_createNullTerminated (); ;
    break;}
case 320:
{ yyval.typequal = qual_createMetaState (yyvsp[0].annotation); ;
    break;}
case 321:
{ yyval.typequal = qual_createReturned (); ;
    break;}
case 322:
{ yyval.typequal = qual_createSef (); ;
    break;}
case 323:
{ yyval.typequal = qual_createUnused (); ;
    break;}
case 324:
{ yyval.typequal = qual_createExternal (); ;
    break;}
case 325:
{ yyval.typequal = qual_createTrueNull (); ;
    break;}
case 326:
{ yyval.typequal = qual_createFalseNull (); ;
    break;}
case 327:
{ yyval.typequal = qual_createAbstract (); ;
    break;}
case 328:
{ yyval.typequal = qual_createConcrete (); ;
    break;}
case 329:
{ yyval.typequal = qual_createMutable (); ;
    break;}
case 330:
{ yyval.typequal = qual_createImmutable (); ;
    break;}
case 331:
{ yyval.typequal = qual_createRefCounted (); ;
    break;}
case 332:
{ yyval.typequal = qual_createRefs (); ;
    break;}
case 333:
{ yyval.typequal = qual_createKillRef (); ;
    break;}
case 334:
{ yyval.typequal = qual_createRelDef (); ;
    break;}
case 335:
{ yyval.typequal = qual_createNewRef (); ;
    break;}
case 336:
{ yyval.typequal = qual_createTempRef (); ;
    break;}
case 337:
{ yyval.typequal = qual_createShort (); ;
    break;}
case 338:
{ yyval.typequal = qual_createLong (); ;
    break;}
case 339:
{ yyval.typequal = qual_createSigned (); ;
    break;}
case 340:
{ yyval.typequal = qual_createUnsigned (); ;
    break;}
case 341:
{ yyval.typequal = qual_createOut (); ;
    break;}
case 342:
{ yyval.typequal = qual_createIn (); ;
    break;}
case 343:
{ yyval.typequal = qual_createPartial (); ;
    break;}
case 344:
{ yyval.typequal = qual_createSpecial (); ;
    break;}
case 345:
{ yyval.typequal = qual_createConst (); ;
    break;}
case 346:
{ yyval.typequal = qual_createVolatile (); ;
    break;}
case 347:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 348:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 349:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 350:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 351:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 352:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 353:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 354:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 355:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 362:
{ yyval.ctyp = ctype_unknown; ;
    break;}
case 363:
{ yyval.ctyp = ctype_anyintegral; ;
    break;}
case 364:
{ yyval.ctyp = ctype_unsignedintegral; ;
    break;}
case 365:
{ yyval.ctyp = ctype_signedintegral; ;
    break;}
case 369:
{ yyval.ctyp = ctype_fromQual (yyvsp[-1].typequal); ;
    break;}
case 370:
{ yyval.qtyp = qtype_resolve (yyvsp[-1].qtyp); ;
    break;}
case 371:
{ yyval.qtyp = yyvsp[0].qtyp; ;
    break;}
case 372:
{ yyval.qtyp = qtype_mergeAlt (yyvsp[-3].qtyp, yyvsp[-1].qtyp); ;
    break;}
case 374:
{ yyval.qtyp = qtype_mergeAlt (yyvsp[-2].qtyp, yyvsp[0].qtyp); ;
    break;}
case 375:
{ yyval.qtyp = qtype_addQual (yyvsp[0].qtyp, yyvsp[-1].typequal); ;
    break;}
case 376:
{ yyval.qtyp = qtype_addQual (yyvsp[0].qtyp, yyvsp[-1].typequal); ;
    break;}
case 377:
{ yyval.qtyp = qtype_combine (yyvsp[0].qtyp, yyvsp[-1].ctyp); ;
    break;}
case 378:
{ yyval.qtyp = qtype_unknown (); ;
    break;}
case 379:
{ yyval.qtyp = yyvsp[0].qtyp; ;
    break;}
case 380:
{ sRef_setGlobalScopeSafe (); ;
    break;}
case 381:
{ sRef_clearGlobalScopeSafe (); ;
    break;}
case 382:
{ yyval.ctyp = declareStruct (yyvsp[-8].cname, yyvsp[-3].flist); ;
    break;}
case 383:
{ sRef_setGlobalScopeSafe (); ;
    break;}
case 384:
{ sRef_clearGlobalScopeSafe (); ;
    break;}
case 385:
{ yyval.ctyp = declareUnion (yyvsp[-8].cname, yyvsp[-3].flist); ;
    break;}
case 386:
{ yyval.ctyp = declareStruct (yyvsp[-3].cname, uentryList_new ()); ;
    break;}
case 387:
{ yyval.ctyp = declareUnion (yyvsp[-3].cname, uentryList_new ()); ;
    break;}
case 388:
{ sRef_setGlobalScopeSafe (); ;
    break;}
case 389:
{ sRef_clearGlobalScopeSafe (); ;
    break;}
case 390:
{ yyval.ctyp = declareUnnamedStruct (yyvsp[-3].flist); ;
    break;}
case 391:
{ sRef_setGlobalScopeSafe (); ;
    break;}
case 392:
{ sRef_clearGlobalScopeSafe (); ;
    break;}
case 393:
{ yyval.ctyp = declareUnnamedUnion (yyvsp[-3].flist); ;
    break;}
case 394:
{ yyval.ctyp = ctype_createUnnamedStruct (uentryList_new ()); ;
    break;}
case 395:
{ yyval.ctyp = ctype_createUnnamedUnion (uentryList_new ()); ;
    break;}
case 396:
{ yyval.ctyp = handleStruct (yyvsp[-1].cname); ;
    break;}
case 397:
{ yyval.ctyp = handleUnion (yyvsp[-1].cname); ;
    break;}
case 398:
{ g_expectingTypeName = FALSE; ;
    break;}
case 400:
{ yyval.flist = uentryList_undefined; /* bogus! */ ;
    break;}
case 401:
{ yyval.flist = uentryList_mergeFields (yyvsp[-1].flist, yyvsp[0].flist); ;
    break;}
case 402:
{ yyval.flist = fixUentryList (yyvsp[-2].ntyplist, yyvsp[-4].qtyp); ;
    break;}
case 403:
{ yyval.flist = fixUnnamedDecl (yyvsp[-2].qtyp); ;
    break;}
case 404:
{ yyval.ntyplist = idDeclList_singleton (yyvsp[-1].ntyp); ;
    break;}
case 405:
{ yyval.ntyplist = idDeclList_add (yyvsp[-3].ntyplist, yyvsp[-1].ntyp); ;
    break;}
case 406:
{ yyval.ntyp = yyvsp[0].ntyp; ;
    break;}
case 407:
{ yyval.ntyp = idDecl_undefined; ;
    break;}
case 408:
{ yyval.ntyp = yyvsp[-3].ntyp; ;
    break;}
case 409:
{ yyval.ctyp = declareUnnamedEnum (yyvsp[-2].enumnamelist); ;
    break;}
case 410:
{ context_pushLoc (); ;
    break;}
case 411:
{ context_popLoc (); yyval.ctyp = declareEnum (yyvsp[-5].cname, yyvsp[-2].enumnamelist); ;
    break;}
case 412:
{ yyval.ctyp = handleEnum (yyvsp[-1].cname); ;
    break;}
case 413:
{ yyval.enumnamelist = enumNameList_single (yyvsp[0].cname); ;
    break;}
case 414:
{ yyval.enumnamelist = enumNameList_push (yyvsp[-2].enumnamelist, yyvsp[0].cname); ;
    break;}
case 416:
{ uentry ue = uentry_makeEnumConstant (yyvsp[0].cname, ctype_unknown);
     usymtab_supGlobalEntry (ue);
     yyval.cname = yyvsp[0].cname;
   ;
    break;}
case 417:
{ uentry ue = uentry_makeEnumInitializedConstant (yyvsp[-3].cname, ctype_unknown, yyvsp[0].expr);
     usymtab_supGlobalEntry (ue);
     yyval.cname = yyvsp[-3].cname; 
   ;
    break;}
case 419:
{ yyval.ntyp = idDecl_create (cstring_undefined, qtype_create (yyvsp[0].ctyp)); ;
    break;}
case 420:
{ 
     qtype qt = qtype_unknown ();

     qtype_adjustPointers (yyvsp[-1].count, qt);
     yyval.ntyp = idDecl_create (cstring_copy (LastIdentifier ()), qt);
   ;
    break;}
case 421:
{ yyval.ntyp = yyvsp[0].ntyp; qtype_adjustPointers (yyvsp[-1].count, idDecl_getTyp (yyval.ntyp)); ;
    break;}
case 423:
{ yyval.ntyp = yyvsp[0].ntyp; qtype_adjustPointers (yyvsp[-1].count, idDecl_getTyp (yyval.ntyp)); ;
    break;}
case 424:
{ yyval.entrylist = handleParamTypeList (yyvsp[0].entrylist); ;
    break;}
case 425:
{ yyval.entrylist = handleParamIdList (yyvsp[0].entrylist); ;
    break;}
case 426:
{ /* ignored for now */; ;
    break;}
case 427:
{ ; ;
    break;}
case 428:
{ ; ;
    break;}
case 429:
{ ; ;
    break;}
case 430:
{ yyval.count = 1; ;
    break;}
case 431:
{ yyval.count = 1; ;
    break;}
case 432:
{ yyval.count = 1 + yyvsp[0].count; ;
    break;}
case 433:
{ yyval.count = 1 + yyvsp[0].count; ;
    break;}
case 435:
{ yyval.entrylist = uentryList_add (yyvsp[-2].entrylist, uentry_makeElipsisMarker ()); ;
    break;}
case 436:
{ yyval.entrylist = uentryList_single (uentry_makeVariableLoc (yyvsp[0].cname, ctype_int)); ;
    break;}
case 437:
{ yyval.entrylist = uentryList_add (yyvsp[-2].entrylist, uentry_makeVariableLoc (yyvsp[0].cname, ctype_int)); ;
    break;}
case 438:
{ yyval.entrylist = uentryList_single (uentry_makeElipsisMarker ()); ;
    break;}
case 440:
{ yyval.entrylist = uentryList_add (yyvsp[-2].entrylist, uentry_makeElipsisMarker ()); ;
    break;}
case 441:
{ storeLoc (); ;
    break;}
case 442:
{ yyval.entrylist = uentryList_single (yyvsp[0].oentry); ;
    break;}
case 443:
{ storeLoc (); ;
    break;}
case 444:
{ yyval.entrylist = uentryList_add (yyvsp[-3].entrylist, yyvsp[0].oentry); ;
    break;}
case 445:
{ 
     if (isFlipOldStyle ()) 
       { 
	 llparseerror (cstring_makeLiteral ("Inconsistent function parameter syntax (mixing old and new style declaration)")); 
       }
     else 
       { 
	 setNewStyle (); 
       }
     yyval.oentry = makeCurrentParam (idDecl_fixParamBase (yyvsp[-1].ntyp, yyvsp[-2].qtyp)); 
   ;
    break;}
case 446:
{ 
     idDecl tparam = idDecl_create (yyvsp[0].cname, qtype_unknown ());

     if (isNewStyle ()) 
       {
	 llparseerror (message ("Inconsistent function parameter syntax: %q",
				idDecl_unparse (tparam))); 
       }

     setFlipOldStyle ();
     yyval.oentry = makeCurrentParam (tparam);
     idDecl_free (tparam);
   ;
    break;}
case 448:
{ yyval.qtyp = qtype_newBase (yyvsp[-1].qtyp, yyvsp[0].ctyp); ;
    break;}
case 449:
{ yyval.ctyp = ctype_adjustPointers (yyvsp[0].count, ctype_unknown); ;
    break;}
case 451:
{ yyval.ctyp = ctype_adjustPointers (yyvsp[-1].count, yyvsp[0].ctyp); ;
    break;}
case 452:
{ yyval.ctyp = ctype_unknown; ;
    break;}
case 454:
{ yyval.ctyp = ctype_expectFunction (yyvsp[-1].ctyp); ;
    break;}
case 455:
{ yyval.ctyp = ctype_makeArray (ctype_unknown); ;
    break;}
case 456:
{ yyval.ctyp = ctype_makeFixedArray (ctype_unknown, exprNode_getLongValue (yyvsp[-1].expr)); ;
    break;}
case 457:
{ yyval.ctyp = ctype_makeArray (yyvsp[-2].ctyp); ;
    break;}
case 458:
{ yyval.ctyp = ctype_makeFixedArray (yyvsp[-3].ctyp, exprNode_getLongValue (yyvsp[-1].expr)); ;
    break;}
case 459:
{ yyval.ctyp = ctype_makeFunction (ctype_unknown, uentryList_makeMissingParams ()); ;
    break;}
case 460:
{ yyval.ctyp = ctype_makeParamsFunction (ctype_unknown, yyvsp[-1].entrylist); ;
    break;}
case 461:
{ yyval.ctyp = ctype_makeFunction (yyvsp[-3].ctyp, uentryList_makeMissingParams ()); ;
    break;}
case 462:
{ yyval.ctyp = ctype_makeParamsFunction (yyvsp[-4].ctyp, yyvsp[-1].entrylist); ;
    break;}
case 472:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 475:
{ yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 476:
{ yyval.expr = exprNode_while (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 477:
{ yyval.expr = exprNode_doWhile (yyvsp[-5].expr, yyvsp[-2].expr); ;
    break;}
case 478:
{ yyval.expr = exprNode_doWhile (yyvsp[-4].expr, yyvsp[-1].expr); ;
    break;}
case 479:
{ yyval.expr = exprNode_for (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 480:
{ context_setProtectVars (); ;
    break;}
case 481:
{ context_sizeofReleaseVars (); ;
    break;}
case 482:
{ yyval.expr = exprNode_forPred (yyvsp[-7].expr, yyvsp[-5].expr, yyvsp[-2].expr); 
     context_enterForClause (yyvsp[-5].expr); ;
    break;}
case 483:
{ setProcessingIterVars (yyvsp[-2].entry); ;
    break;}
case 484:
{ yyval.expr = exprNode_iterStart (yyvsp[-5].entry, yyvsp[-1].exprlist); ;
    break;}
case 485:
{ yyval.expr = exprNode_createId (yyvsp[0].entry); ;
    break;}
case 489:
{ yyval.expr = yyvsp[-1].expr; DPRINTF (("def stmt: %s", exprNode_unparse (yyval.expr))); ;
    break;}
case 497:
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 498:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 499:
{ /* don't: context_exitTrueClause ($1, $2); */
     yyval.expr = exprNode_if (yyvsp[-1].expr, yyvsp[0].expr); 
   ;
    break;}
case 500:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 501:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 512:
{ yyval.expr = exprNode_addParens (yyvsp[-2].tok, yyvsp[-1].expr); ;
    break;}
case 514:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 515:
{ yyval.expr = exprNode_labelMarker (yyvsp[-1].cname); ;
    break;}
case 516:
{ yyval.expr = exprNode_notReached (yyvsp[0].expr); ;
    break;}
case 517:
{ ; ;
    break;}
case 518:
{ ; ;
    break;}
case 519:
{ context_enterCaseClause (yyvsp[0].expr); ;
    break;}
case 520:
{ yyval.expr = exprNode_caseMarker (yyvsp[-2].expr, FALSE); ;
    break;}
case 521:
{ context_enterCaseClause (yyvsp[0].expr); ;
    break;}
case 522:
{ yyval.expr = exprNode_caseMarker (yyvsp[-2].expr, TRUE); ;
    break;}
case 523:
{ context_enterCaseClause (exprNode_undefined); ;
    break;}
case 524:
{ yyval.expr = exprNode_defaultMarker (yyvsp[-2].tok, FALSE); ;
    break;}
case 525:
{ context_enterCaseClause (exprNode_undefined); ;
    break;}
case 526:
{ yyval.expr = exprNode_defaultMarker (yyvsp[-2].tok, TRUE); ;
    break;}
case 527:
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 528:
{ yyval.expr = yyvsp[0].expr; context_exitInner (yyvsp[0].expr); ;
    break;}
case 529:
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 530:
{ context_enterInnerContext (); ;
    break;}
case 531:
{ context_exitInnerPlain (); ;
    break;}
case 532:
{ context_enterStructInnerContext (); ;
    break;}
case 533:
{ context_exitStructInnerContext (); ;
    break;}
case 534:
{ context_exitInnerSafe (); ;
    break;}
case 535:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 536:
{ yyval.expr = exprNode_notReached (exprNode_createTok (yyvsp[0].tok)); ;
    break;}
case 537:
{ yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 538:
{ yyval.expr = exprNode_notReached (exprNode_updateLocation (yyvsp[-2].expr, lltok_getLoc (yyvsp[0].tok))); ;
    break;}
case 539:
{ yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 540:
{ yyval.expr = exprNode_notReached (exprNode_updateLocation (yyvsp[-2].expr, lltok_getLoc (yyvsp[0].tok))); ;
    break;}
case 541:
{ yyval.expr = exprNode_updateLocation (exprNode_concat (yyvsp[-2].expr, yyvsp[-1].expr), lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 542:
{ yyval.expr = exprNode_notReached (exprNode_updateLocation (exprNode_concat (yyvsp[-3].expr, yyvsp[-2].expr), 
							lltok_getLoc (yyvsp[-1].tok))); 
   ;
    break;}
case 543:
{ yyval.expr = exprNode_makeBlock (yyvsp[0].expr); ;
    break;}
case 544:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 545:
{ yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 546:
{ yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 547:
{ yyval.expr = exprNode_updateLocation (exprNode_concat (yyvsp[-2].expr, yyvsp[-1].expr), lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 549:
{ yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 550:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 551:
{ yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 552:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 553:
{ yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 554:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 555:
{ yyval.expr = exprNode_statement (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 556:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 557:
{ yyval.expr = exprNode_statement (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 558:
{ yyval.expr = exprNode_checkExpr (yyvsp[0].expr); ;
    break;}
case 559:
{ yyval.expr = yyvsp[-1].expr; exprNode_produceGuards (yyvsp[-1].expr); context_enterTrueClause (yyvsp[-1].expr); ;
    break;}
case 560:
{ 
     context_exitTrueClause (yyvsp[-1].expr, yyvsp[0].expr);
     yyval.expr = exprNode_if (yyvsp[-1].expr, yyvsp[0].expr); 
   ;
    break;}
case 561:
{ context_enterFalseClause (yyvsp[-2].expr); ;
    break;}
case 562:
{
     context_exitClause (yyvsp[-4].expr, yyvsp[-3].expr, yyvsp[0].expr);
     yyval.expr = exprNode_ifelse (yyvsp[-4].expr, yyvsp[-3].expr, yyvsp[0].expr); 
   ;
    break;}
case 563:
{ context_enterSwitch (yyvsp[0].expr); ;
    break;}
case 564:
{ yyval.expr = exprNode_switch (yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 565:
{ yyval.expr = exprNode_whilePred (yyvsp[-1].expr); context_enterWhileClause (yyvsp[-1].expr); ;
    break;}
case 566:
{ yyval.expr = exprNode_whilePred(yyvsp[-1].expr); ;
    break;}
case 567:
{ context_enterIterClause (); ;
    break;}
case 568:
{ setProcessingIterVars (yyvsp[-3].entry); ;
    break;}
case 569:
{ 
     yyval.expr = exprNode_iter (yyvsp[-9].entry, yyvsp[-4].exprlist, yyvsp[-2].expr, yyvsp[-1].entry); 

   ;
    break;}
case 570:
{ yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 571:
{ nextIterParam (); ;
    break;}
case 572:
{ yyval.exprlist = exprNodeList_push (yyvsp[-3].exprlist, yyvsp[0].expr); ;
    break;}
case 573:
{ yyval.expr = exprNode_iterExpr (yyvsp[0].expr); ;
    break;}
case 574:
{ yyval.expr = exprNode_iterId (yyvsp[0].entry); ;
    break;}
case 575:
{ uentry ue = coerceIterId (yyvsp[0].cname);

		      if (uentry_isValid (ue)) 
			{
			  yyval.expr = exprNode_iterId (ue);
			}
		      else
			{
			  yyval.expr = exprNode_iterNewId (cstring_copy (LastIdentifier ()));
			}
		    ;
    break;}
case 576:
{ yyval.expr = exprNode_iterNewId (yyvsp[0].cname); ;
    break;}
case 578:
{ yyval.expr = exprNode_combineLiterals (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 580:
{ yyval.expr = exprNode_addParens (yyvsp[-2].tok, yyvsp[-1].expr); ;
    break;}
case 582:
{ yyval.expr = exprNode_arrayFetch (yyvsp[-3].expr, yyvsp[-1].expr); ;
    break;}
case 583:
{ yyval.expr = exprNode_functionCall (yyvsp[-2].expr, exprNodeList_new ()); ;
    break;}
case 584:
{ yyval.expr = exprNode_functionCall (yyvsp[-3].expr, yyvsp[-1].exprlist); ;
    break;}
case 585:
{ yyval.expr = exprNode_vaArg (yyvsp[-5].tok, yyvsp[-3].expr, yyvsp[-1].qtyp); ;
    break;}
case 586:
{ yyval.expr = exprNode_fieldAccess (yyvsp[-4].expr, yyvsp[-2].tok, yyvsp[-1].cname); ;
    break;}
case 587:
{ yyval.expr = exprNode_arrowAccess (yyvsp[-4].expr, yyvsp[-2].tok, yyvsp[-1].cname); ;
    break;}
case 588:
{ yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 589:
{ yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 591:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 592:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 593:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 594:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 595:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 596:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 597:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 598:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 599:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 601:
{ yyval.expr = exprNode_cast (yyvsp[-3].tok, yyvsp[0].expr, yyvsp[-2].qtyp); ;
    break;}
case 603:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 604:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 605:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 607:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 608:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 610:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 611:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 613:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 614:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 615:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 616:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 618:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 619:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 621:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 623:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 625:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 627:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 629:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 631:
{ context_enterTrueClause (yyvsp[-1].expr); ;
    break;}
case 632:
{ context_enterFalseClause (yyvsp[-4].expr); ;
    break;}
case 633:
{ yyval.expr = exprNode_cond (yyvsp[-6].expr, yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 635:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 636:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 637:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 638:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 639:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 640:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 641:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 642:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 643:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 644:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 645:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 646:
{ yyval.entry = yyvsp[0].entry; ;
    break;}
case 647:
{ yyval.entry = uentry_undefined; ;
    break;}
case 648:
{ context_enterDoWhileClause (); yyval.tok = yyvsp[0].tok; ;
    break;}
case 649:
{ yyval.expr = exprNode_while (yyvsp[-1].expr, yyvsp[0].expr); context_exitWhileClause (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 650:
{ yyval.expr = exprNode_statement (exprNode_doWhile (yyvsp[-5].expr, yyvsp[-2].expr), yyvsp[0].tok); ;
    break;}
case 651:
{ yyval.expr = exprNode_for (yyvsp[-1].expr, yyvsp[0].expr); context_exitForClause (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 652:
{ yyval.expr = exprNode_while (yyvsp[-1].expr, yyvsp[0].expr); context_exitWhileClause (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 653:
{ yyval.expr = exprNode_statement (exprNode_doWhile (yyvsp[-5].expr, yyvsp[-2].expr), yyvsp[0].tok); ;
    break;}
case 654:
{ yyval.expr = exprNode_doWhile (yyvsp[-4].expr, yyvsp[-1].expr); ;
    break;}
case 655:
{ yyval.expr = exprNode_for (yyvsp[-1].expr, yyvsp[0].expr); context_exitForClause (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 656:
{ yyval.expr = exprNode_goto (yyvsp[-1].cname); ;
    break;}
case 657:
{ yyval.expr = exprNode_continue (yyvsp[-1].tok, BADTOK); ;
    break;}
case 658:
{ yyval.expr = exprNode_continue (yyvsp[-2].tok, QINNERCONTINUE); ;
    break;}
case 659:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, BADTOK); ;
    break;}
case 660:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, QSWITCHBREAK); ;
    break;}
case 661:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, QLOOPBREAK); ;
    break;}
case 662:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, QINNERBREAK); ;
    break;}
case 663:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, QSAFEBREAK); ;
    break;}
case 664:
{ yyval.expr = exprNode_nullReturn (yyvsp[-1].tok); ;
    break;}
case 665:
{ yyval.expr = exprNode_return (yyvsp[-1].expr); ;
    break;}
case 667:
{ ; ;
    break;}
case 670:
{ yyval.cname = uentry_getName (yyvsp[0].entry); ;
    break;}
case 671:
{ yyval.cname = uentry_getName (yyvsp[0].entry); ;
    break;}
case 672:
{ yyval.cname = uentry_getName (yyvsp[0].entry); ;
    break;}
case 673:
{ yyval.cname = yyvsp[0].cname; ;
    break;}
case 675:
{ yyval.ctyp = ctype_unknown; ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */


  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}


/*@-redecl@*/ /*@-namechecks@*/
extern char *yytext;
/*@=redecl@*/ /*@=namechecks@*/

# include "bison.reset"

void yyerror (/*@unused@*/ char *s) 
{
  static bool givehint = FALSE;

  if (context_inIterDef ())
    {
      llerror (FLG_SYNTAX, message ("Iter syntax not parseable: %s", 
				    context_inFunctionName ()));
    }
  else if (context_inIterEnd ())
    {
      llerror (FLG_SYNTAX, message ("Iter finalizer syntax not parseable: %s", 
				    context_inFunctionName ()));
    }
  else if (context_inMacro ())
    {
      llerror (FLG_SYNTAX, message ("Macro syntax not parseable: %s", 
				    context_inFunctionName ()));
      
      if (context_inUnknownMacro ())
	{
	  if (!givehint)
	    {
	      llhint (cstring_makeLiteral 
		     ("Precede macro definition with /*@notfunction@*/ "
		      "to suppress checking and force expansion"));
	      givehint = TRUE;
	    }
	}

      swallowMacro ();
      context_exitAllClausesQuiet ();
    }
  else
    {
      llparseerror (cstring_undefined);
    }
}












/*
** Resets all flags in bison.head
*/


/*@=allmacros@*/
/*@=boolint@*/
/*@=charint@*/
/*@=macroparams@*/
/*@=macroundef@*/
/*@=unreachable@*/
/*@=macrospec@*/
/*@=varuse@*/
/*@=ignorequals@*/
/*@=macrostmt@*/
/*@=noeffect@*/
/*@=shadow@*/
/*@=exitarg@*/
/*@=macroredef@*/
/*@=uniondef@*/
/*@=compdef@*/
/*@=matchfields@*/
/*@=exportlocal@*/
/*@=evalorderuncon@*/
/*@=exportheader@*/
/*@=typeuse@*/
/*@=redecl@*/
/*@=redef@*/
/*@=noparams@*/
/*@=ansireserved@*/
/*@=fielduse@*/
/*@=ifblock@*/
/*@=elseifcomplete@*/
/*@=whileblock@*/
/*@=forblock@*/
/*@=branchstate@*/
/*@=readonlytrans@*/
/*@=namechecks@*/
/*@=usedef@*/
/*@=systemunrecog@*/
/*@=dependenttrans@*/
/*@=unqualifiedtrans@*/
/*@=declundef@*/


/*drl added 11/27/2001*/
/*@=arraybounds@*/
/*@=arrayboundsread@*/
