/*
** Inserted at beginning of c files generated by bison
** REMEMBER:  Change bison.reset too.
*/

/*@-allmacros@*/
/*@+boolint@*/
/*@+charint@*/
/*@-macroparams@*/
/*@-macroundef@*/
/*@-unreachable@*/
/*@-macrospec@*/
/*@-varuse@*/
/*@+ignorequals@*/
/*@-macrostmt@*/
/*@-noeffect@*/
/*@-shadow@*/
/*@-exitarg@*/
/*@-macroredef@*/
/*@-uniondef@*/
/*@-compdef@*/
/*@-matchfields@*/
/*@-exportlocal@*/
/*@-evalorderuncon@*/
/*@-exportheader@*/
/*@-typeuse@*/
/*@-redecl@*/
/*@-redef@*/
/*@-noparams@*/
/*@-ansireserved@*/
/*@-fielduse@*/
/*@-ifblock@*/
/*@-elseifcomplete@*/
/*@-whileblock@*/
/*@-forblock@*/
/*@-branchstate@*/
/*@-readonlytrans@*/
/*@-namechecks@*/
/*@-usedef@*/
/*@-systemunrecog@*/
/*@-dependenttrans@*/
/*@-unqualifiedtrans@*/
/*@-nullassign@*/
/*@-nullpass@*/
/*@-nullptrarith*/
/*@-usereleased@*/
/*@-declundef@*/

/*drl added 11/27/2001*/
/*@-bounds@*/
/* < end of bison.head > */


/*  A Bison parser, made from cgrammar.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	BADTOK	257
#define	SKIPTOK	258
#define	CTOK_ELIPSIS	259
#define	CASE	260
#define	DEFAULT	261
#define	CIF	262
#define	CELSE	263
#define	SWITCH	264
#define	WHILE	265
#define	DO	266
#define	CFOR	267
#define	GOTO	268
#define	CONTINUE	269
#define	BREAK	270
#define	RETURN	271
#define	TSEMI	272
#define	TLBRACE	273
#define	TRBRACE	274
#define	TCOMMA	275
#define	TCOLON	276
#define	TASSIGN	277
#define	TLPAREN	278
#define	TRPAREN	279
#define	TLSQBR	280
#define	TRSQBR	281
#define	TDOT	282
#define	TAMPERSAND	283
#define	TEXCL	284
#define	TTILDE	285
#define	TMINUS	286
#define	TPLUS	287
#define	TMULT	288
#define	TDIV	289
#define	TPERCENT	290
#define	TLT	291
#define	TGT	292
#define	TCIRC	293
#define	TBAR	294
#define	TQUEST	295
#define	CSIZEOF	296
#define	CALIGNOF	297
#define	CTYPEOF	298
#define	ARROW_OP	299
#define	CTYPEDEF	300
#define	COFFSETOF	301
#define	INC_OP	302
#define	DEC_OP	303
#define	LEFT_OP	304
#define	RIGHT_OP	305
#define	LE_OP	306
#define	GE_OP	307
#define	EQ_OP	308
#define	NE_OP	309
#define	AND_OP	310
#define	OR_OP	311
#define	MUL_ASSIGN	312
#define	DIV_ASSIGN	313
#define	MOD_ASSIGN	314
#define	ADD_ASSIGN	315
#define	SUB_ASSIGN	316
#define	LEFT_ASSIGN	317
#define	RIGHT_ASSIGN	318
#define	AND_ASSIGN	319
#define	XOR_ASSIGN	320
#define	OR_ASSIGN	321
#define	CSTRUCT	322
#define	CUNION	323
#define	CENUM	324
#define	VA_ARG	325
#define	VA_DCL	326
#define	QWARN	327
#define	QGLOBALS	328
#define	QMODIFIES	329
#define	QNOMODS	330
#define	QCONSTANT	331
#define	QFUNCTION	332
#define	QITER	333
#define	QDEFINES	334
#define	QUSES	335
#define	QALLOCATES	336
#define	QSETS	337
#define	QRELEASES	338
#define	QPRECLAUSE	339
#define	QPOSTCLAUSE	340
#define	QINVARIANT	341
#define	QALT	342
#define	QUNDEF	343
#define	QKILLED	344
#define	QENDMACRO	345
#define	LLMACRO	346
#define	LLMACROITER	347
#define	LLMACROEND	348
#define	TENDMACRO	349
#define	QSWITCHBREAK	350
#define	QLOOPBREAK	351
#define	QINNERBREAK	352
#define	QSAFEBREAK	353
#define	QINNERCONTINUE	354
#define	QFALLTHROUGH	355
#define	QLINTNOTREACHED	356
#define	QLINTFALLTHROUGH	357
#define	QLINTFALLTHRU	358
#define	QARGSUSED	359
#define	QPRINTFLIKE	360
#define	QLINTPRINTFLIKE	361
#define	QSCANFLIKE	362
#define	QMESSAGELIKE	363
#define	QNOTREACHED	364
#define	QCONST	365
#define	QVOLATILE	366
#define	QINLINE	367
#define	QEXTENSION	368
#define	QEXTERN	369
#define	QSTATIC	370
#define	QAUTO	371
#define	QREGISTER	372
#define	QOUT	373
#define	QIN	374
#define	QYIELD	375
#define	QONLY	376
#define	QTEMP	377
#define	QSHARED	378
#define	QREF	379
#define	QUNIQUE	380
#define	QCHECKED	381
#define	QUNCHECKED	382
#define	QCHECKEDSTRICT	383
#define	QCHECKMOD	384
#define	QKEEP	385
#define	QKEPT	386
#define	QPARTIAL	387
#define	QSPECIAL	388
#define	QOWNED	389
#define	QDEPENDENT	390
#define	QRETURNED	391
#define	QEXPOSED	392
#define	QNULL	393
#define	QOBSERVER	394
#define	QISNULL	395
#define	QEXITS	396
#define	QMAYEXIT	397
#define	QNEVEREXIT	398
#define	QTRUEEXIT	399
#define	QFALSEEXIT	400
#define	QLONG	401
#define	QSIGNED	402
#define	QUNSIGNED	403
#define	QSHORT	404
#define	QUNUSED	405
#define	QSEF	406
#define	QNOTNULL	407
#define	QRELNULL	408
#define	QABSTRACT	409
#define	QCONCRETE	410
#define	QMUTABLE	411
#define	QIMMUTABLE	412
#define	QTRUENULL	413
#define	QFALSENULL	414
#define	QEXTERNAL	415
#define	QREFCOUNTED	416
#define	QREFS	417
#define	QNEWREF	418
#define	QTEMPREF	419
#define	QKILLREF	420
#define	QRELDEF	421
#define	CGCHAR	422
#define	CBOOL	423
#define	CINT	424
#define	CGFLOAT	425
#define	CDOUBLE	426
#define	CVOID	427
#define	QANYTYPE	428
#define	QINTEGRALTYPE	429
#define	QUNSIGNEDINTEGRALTYPE	430
#define	QSIGNEDINTEGRALTYPE	431
#define	QNULLTERMINATED	432
#define	QSETBUFFERSIZE	433
#define	QSETSTRINGLENGTH	434
#define	QMAXSET	435
#define	QMAXREAD	436
#define	QTESTINRANGE	437
#define	TCAND	438
#define	IDENTIFIER	439
#define	NEW_IDENTIFIER	440
#define	TYPE_NAME_OR_ID	441
#define	CANNOTATION	442
#define	CCONSTANT	443
#define	ITER_NAME	444
#define	ITER_ENDNAME	445
#define	TYPE_NAME	446
#define	METASTATE_NAME	447


/*
**
** cgrammar.y
**
** Yacc/Bison grammar for extended ANSI C used by Splint.
**
** original grammar by Nate Osgood ---
**    hacrat@catfish.lcs.mit.edu Mon Jun 14 13:06:32 1993
**
** changes for Splint --- handle typedef names correctly
** fix struct/union parsing bug (empty struct is accepted)
** add productions to handle macros --- require
** error correction --- main source of conflicts in grammar.
** need to process initializations sequentially, L->R
**
** production names are cryptic, so more productions fit on one line
**
** conflicts:  87 shift/reduce, 18 reduce/reduce
** most of these are due to handling macros
** a few are due to handling type expressions
*/

/*@=allmacros@*/

extern int yylex ();
extern void swallowMacro (void);
extern void yyerror (char *);

# include "splintMacros.nf"
# include "basic.h"
# include "cscanner.h"
# include "cgrammar.h"
# include "exprChecks.h"

/*@-allmacros@*/
/*@-matchfields@*/

# define SHOWCSYM FALSE

/*
** This is necessary, or else when the bison-generated code #include's malloc.h,
** there will be a parse error.
**
** Unfortunately, it means the error checking on malloc, etc. is lost for allocations
** in bison-generated files under Win32.
*/

# ifdef WIN32
# undef malloc
# undef calloc
# undef realloc
# endif


typedef union
{
  lltok tok;
  int count;
  qual typequal;
  qualList tquallist;
  ctype ctyp;
  /*@dependent@*/ sRef sr;
  /*@only@*/ sRef osr;

  /*@only@*/ functionClauseList funcclauselist;
  /*@only@*/ functionClause funcclause;  
  /*@only@*/ flagSpec flagspec;
  /*@only@*/ globalsClause globsclause;
  /*@only@*/ modifiesClause modsclause;
  /*@only@*/ warnClause warnclause;
  /*@only@*/ stateClause stateclause;

  /*@only@*/ functionConstraint fcnconstraint; 

  /*@only@*/ metaStateConstraint msconstraint;
  /*@only@*/ metaStateSpecifier msspec;
  /*@only@*/ metaStateExpression msexpr;
  /*@observer@*/ metaStateInfo msinfo;

  /*@only@*/ sRefList srlist;
  /*@only@*/ globSet globset;
  /*@only@*/ qtype qtyp;
  /*@only@*/ cstring cname;
  /*@observer@*/ annotationInfo annotation;
  /*@only@*/ idDecl ntyp;
  /*@only@*/ idDeclList ntyplist;
  /*@only@*/ uentryList flist;
  /*@owned@*/ uentryList entrylist;
  /*@observer@*/ /*@dependent@*/ uentry entry;
  /*@only@*/ uentry oentry;
  /*@only@*/ exprNode expr;
  /*@only@*/ enumNameList enumnamelist;
  /*@only@*/ exprNodeList exprlist;
  /*@only@*/ sRefSet srset; 
  /*@only@*/ cstringList cstringlist;

  /*drl
    added 1/19/2001
  */
  constraint con;
  constraintList conL;
  constraintExpr conE;
  /* drl */  
} YYSTYPE;
#ifndef YYDEBUG
#define YYDEBUG 1
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1236
#define	YYFLAG		-32768
#define	YYNTBASE	194

#define YYTRANSLATE(x) ((unsigned)(x) <= 447 ? yytranslate[x] : 459)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
   177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
   187,   188,   189,   190,   191,   192,   193
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     1,     3,     5,     8,    11,    13,    15,    17,    19,
    21,    23,    25,    34,    46,    47,    53,    55,    59,    61,
    64,    66,    73,    77,    84,    85,    92,    93,   101,   103,
   110,   114,   121,   122,   129,   130,   138,   139,   140,   151,
   155,   159,   163,   166,   168,   172,   173,   178,   179,   184,
   186,   190,   192,   194,   196,   200,   202,   206,   208,   210,
   212,   214,   216,   218,   223,   229,   231,   233,   235,   237,
   241,   246,   249,   253,   257,   261,   263,   265,   267,   268,
   271,   272,   275,   277,   279,   281,   283,   285,   287,   289,
   291,   293,   295,   297,   299,   302,   303,   308,   310,   313,
   314,   318,   320,   324,   326,   328,   329,   332,   336,   339,
   341,   345,   348,   349,   352,   354,   356,   358,   360,   362,
   364,   366,   368,   370,   372,   374,   376,   378,   380,   382,
   384,   388,   389,   393,   394,   395,   400,   403,   406,   408,
   410,   412,   416,   421,   424,   428,   432,   436,   438,   440,
   442,   446,   448,   450,   454,   459,   462,   466,   470,   474,
   475,   477,   479,   483,   485,   487,   489,   493,   495,   497,
   498,   503,   505,   510,   514,   519,   526,   532,   538,   541,
   544,   552,   554,   558,   560,   563,   566,   569,   572,   575,
   578,   581,   584,   586,   588,   592,   597,   599,   609,   610,
   614,   619,   622,   627,   630,   632,   637,   639,   643,   647,
   651,   653,   657,   661,   663,   667,   671,   673,   677,   681,
   685,   689,   691,   695,   699,   701,   705,   707,   711,   713,
   717,   719,   720,   725,   727,   728,   733,   735,   736,   737,
   745,   747,   751,   755,   759,   763,   767,   771,   775,   779,
   783,   787,   791,   793,   797,   798,   800,   802,   804,   806,
   808,   812,   813,   823,   824,   836,   839,   840,   847,   848,
   857,   862,   867,   868,   869,   872,   874,   879,   880,   885,
   887,   891,   896,   899,   902,   905,   907,   910,   914,   917,
   919,   923,   925,   927,   929,   931,   933,   936,   937,   944,
   947,   950,   951,   958,   959,   965,   967,   969,   971,   973,
   975,   977,   979,   981,   983,   985,   987,   989,   991,   993,
   995,   997,   999,  1001,  1003,  1005,  1007,  1009,  1011,  1013,
  1015,  1017,  1019,  1021,  1023,  1025,  1027,  1029,  1031,  1033,
  1035,  1037,  1039,  1041,  1043,  1045,  1047,  1049,  1051,  1053,
  1055,  1057,  1059,  1061,  1063,  1065,  1067,  1069,  1072,  1075,
  1078,  1081,  1084,  1087,  1090,  1093,  1096,  1099,  1102,  1105,
  1108,  1111,  1114,  1117,  1120,  1123,  1126,  1129,  1132,  1135,
  1138,  1141,  1144,  1148,  1150,  1155,  1157,  1161,  1164,  1167,
  1170,  1171,  1173,  1174,  1175,  1176,  1189,  1190,  1191,  1203,
  1210,  1217,  1218,  1219,  1230,  1231,  1232,  1243,  1249,  1255,
  1260,  1265,  1266,  1268,  1270,  1273,  1279,  1283,  1286,  1291,
  1293,  1297,  1302,  1309,  1310,  1319,  1324,  1326,  1330,  1333,
  1335,  1340,  1342,  1344,  1347,  1350,  1352,  1355,  1357,  1360,
  1362,  1364,  1366,  1369,  1371,  1374,  1377,  1381,  1383,  1387,
  1389,  1393,  1395,  1397,  1401,  1402,  1405,  1406,  1411,  1416,
  1418,  1420,  1423,  1425,  1427,  1430,  1431,  1433,  1439,  1442,
  1446,  1450,  1455,  1459,  1464,  1469,  1475,  1477,  1479,  1481,
  1483,  1485,  1487,  1489,  1491,  1493,  1495,  1497,  1499,  1502,
  1505,  1513,  1520,  1523,  1524,  1525,  1536,  1537,  1544,  1546,
  1548,  1550,  1552,  1555,  1557,  1559,  1561,  1563,  1565,  1567,
  1569,  1573,  1575,  1576,  1580,  1583,  1586,  1588,  1590,  1592,
  1594,  1596,  1598,  1600,  1602,  1604,  1606,  1610,  1612,  1614,
  1617,  1620,  1621,  1624,  1625,  1630,  1631,  1638,  1639,  1643,
  1644,  1650,  1654,  1657,  1661,  1662,  1663,  1664,  1665,  1666,
  1668,  1671,  1674,  1678,  1681,  1685,  1689,  1694,  1697,  1700,
  1704,  1708,  1713,  1715,  1718,  1720,  1723,  1725,  1729,  1731,
  1736,  1738,  1741,  1743,  1746,  1748,  1751,  1753,  1758,  1761,
  1762,  1768,  1769,  1776,  1781,  1786,  1787,  1788,  1799,  1801,
  1802,  1807,  1809,  1811,  1813,  1815,  1817,  1820,  1822,  1826,
  1828,  1833,  1837,  1842,  1849,  1855,  1861,  1864,  1867,  1869,
  1872,  1875,  1878,  1881,  1884,  1887,  1890,  1893,  1895,  1897,
  1902,  1904,  1908,  1912,  1916,  1918,  1922,  1926,  1928,  1932,
  1936,  1938,  1942,  1946,  1950,  1954,  1956,  1960,  1964,  1966,
  1970,  1972,  1976,  1978,  1982,  1984,  1988,  1990,  1994,  1996,
  1997,  1998,  2006,  2008,  2012,  2016,  2020,  2024,  2028,  2032,
  2036,  2040,  2044,  2048,  2052,  2054,  2055,  2057,  2060,  2068,
  2071,  2074,  2082,  2089,  2092,  2096,  2099,  2103,  2106,  2110,
  2114,  2118,  2122,  2125,  2129,  2130,  2132,  2133,  2135,  2137,
  2139,  2141,  2143,  2145,  2147,  2149,  2151,  2156
};

static const short yyrhs[] = {    -1,
   195,     0,   196,     0,   195,   196,     0,   257,   454,     0,
   197,     0,   198,     0,   208,     0,   211,     0,   295,     0,
    18,     0,     1,     0,    77,   336,   350,   360,   350,   454,
   303,    91,     0,    77,   336,   350,   360,   350,    23,   303,
   308,   307,   454,    91,     0,     0,    78,   199,   200,   454,
    91,     0,   201,     0,   336,   350,   201,     0,   205,     0,
   364,   205,     0,   457,     0,   303,    24,   350,   360,   303,
    25,     0,   202,    26,    27,     0,   202,    26,   303,   294,
    27,   350,     0,     0,   202,   304,    24,    25,   203,   229,
     0,     0,   202,   304,    24,   361,    25,   204,   229,     0,
   457,     0,   303,    24,   350,   201,   303,    25,     0,   205,
    26,    27,     0,   205,    26,   303,   294,    27,   350,     0,
     0,   205,   304,    24,    25,   206,   230,     0,     0,   205,
   304,    24,   361,    25,   207,   230,     0,     0,     0,    79,
   457,    24,   361,    25,   209,   230,   210,   454,    91,     0,
    92,   391,    95,     0,    93,   377,    95,     0,    94,   378,
    95,     0,    92,    95,     0,   252,     0,   214,    23,   217,
     0,     0,   226,   215,    22,   218,     0,     0,     5,   216,
    22,   218,     0,   214,     0,   214,    40,   217,     0,   193,
     0,   184,     0,    56,     0,   221,   219,   220,     0,   221,
     0,   224,   223,   224,     0,   181,     0,   182,     0,    53,
     0,    52,     0,    54,     0,   225,     0,   227,    24,   224,
    25,     0,    24,   224,   228,   224,    25,     0,   226,     0,
   189,     0,   456,     0,   186,     0,   226,    26,    27,     0,
   226,    26,   189,    27,     0,    34,   226,     0,    24,   226,
    25,     0,   226,    28,   457,     0,   226,    45,   457,     0,
   222,     0,    33,     0,    32,     0,     0,   231,   229,     0,
     0,   232,   230,     0,   233,     0,   237,     0,   236,     0,
   314,     0,   317,     0,   243,     0,   234,     0,   238,     0,
   236,     0,   315,     0,   319,     0,   244,     0,   234,    91,
     0,     0,    74,   235,   245,   454,     0,    76,     0,   238,
    91,     0,     0,    75,   239,   258,     0,   241,     0,   241,
    40,   240,     0,   186,     0,   243,     0,     0,   244,    91,
     0,    73,   240,   430,     0,    73,   240,     0,   246,     0,
   245,    21,   246,     0,   247,   248,     0,     0,   249,   247,
     0,   456,     0,   186,     0,   295,     0,    89,     0,    90,
     0,   119,     0,   120,     0,   133,     0,    80,     0,    81,
     0,    82,     0,    83,     0,    84,     0,    85,     0,    86,
     0,   360,     0,   336,   350,   360,     0,     0,    19,   254,
   408,     0,     0,     0,   255,   412,   256,   401,     0,   212,
   253,     0,   261,   454,     0,   454,     0,   456,     0,   186,
     0,   259,    26,    27,     0,   259,    26,   260,    27,     0,
    34,   259,     0,    24,   259,    25,     0,   259,    28,   457,
     0,   259,    45,   457,     0,   259,     0,   430,     0,   259,
     0,   261,    21,   259,     0,   456,     0,   186,     0,   262,
    26,    27,     0,   262,    26,   260,    27,     0,    34,   262,
     0,    24,   262,    25,     0,   262,    28,   457,     0,   262,
    45,   457,     0,     0,   264,     0,   262,     0,   264,    21,
   262,     0,   456,     0,   186,     0,   430,     0,    24,   292,
    25,     0,   187,     0,   114,     0,     0,    24,   266,   401,
    25,     0,   265,     0,   267,    26,   292,    27,     0,   267,
    24,    25,     0,   267,    24,   268,    25,     0,    71,    24,
   291,    21,   372,    25,     0,   267,   350,    28,   457,   303,
     0,   267,   350,    45,   457,   303,     0,   267,    48,     0,
   267,    49,     0,    24,   372,    25,    19,   413,   455,    20,
     0,   291,     0,   268,    21,   291,     0,   267,     0,    48,
   269,     0,    49,   269,     0,    29,   275,     0,    34,   275,
     0,    33,   275,     0,    32,   275,     0,    31,   275,     0,
    30,   275,     0,   272,     0,   271,     0,   270,    28,   457,
     0,   270,    26,   292,    27,     0,   457,     0,    47,   303,
    24,   372,   350,    21,   270,    25,   303,     0,     0,   303,
   273,   274,     0,    42,    24,   372,    25,     0,    42,   269,
     0,    43,    24,   372,    25,     0,    43,   269,     0,   269,
     0,    24,   372,    25,   275,     0,   275,     0,   276,    34,
   275,     0,   276,    35,   275,     0,   276,    36,   275,     0,
   276,     0,   277,    33,   276,     0,   277,    32,   276,     0,
   277,     0,   278,    50,   277,     0,   278,    51,   277,     0,
   278,     0,   279,    37,   278,     0,   279,    38,   278,     0,
   279,    52,   278,     0,   279,    53,   278,     0,   279,     0,
   280,    54,   279,     0,   280,    55,   279,     0,   280,     0,
   281,    29,   280,     0,   281,     0,   282,    39,   281,     0,
   282,     0,   283,    40,   282,     0,   283,     0,     0,   284,
    56,   285,   283,     0,   284,     0,     0,   286,    57,   287,
   284,     0,   286,     0,     0,     0,   286,    41,   289,   292,
    22,   290,   288,     0,   288,     0,   269,    23,   291,     0,
   269,    58,   291,     0,   269,    59,   291,     0,   269,    60,
   291,     0,   269,    61,   291,     0,   269,    62,   291,     0,
   269,    63,   291,     0,   269,    64,   291,     0,   269,    65,
   291,     0,   269,    66,   291,     0,   269,    67,   291,     0,
   291,     0,   292,    21,   291,     0,     0,   292,     0,   288,
     0,   296,     0,    72,     0,   301,     0,   336,   303,    18,
     0,     0,   336,   350,   360,   350,   297,   303,   307,    18,
   303,     0,     0,   336,   350,   360,   350,    23,   298,   303,
   308,   307,    18,   303,     0,   360,   350,     0,     0,   360,
   350,    23,   300,   303,   308,     0,     0,    46,   336,   302,
   350,   305,   303,   242,    18,     0,    46,   336,   303,    18,
     0,    46,   305,   303,    18,     0,     0,     0,   306,   303,
     0,   299,     0,   305,    21,   350,   299,     0,     0,   307,
    21,   350,   299,     0,   291,     0,    19,   312,    20,     0,
    19,   312,    21,    20,     0,   309,   308,     0,   310,    23,
     0,   457,    22,     0,   311,     0,   310,   311,     0,    26,
   294,    27,     0,    28,   457,     0,   308,     0,   312,    21,
   308,     0,   115,     0,   113,     0,   116,     0,   117,     0,
   118,     0,   315,    91,     0,     0,   250,   350,   316,   264,
   454,   303,     0,   319,    91,     0,   251,   350,     0,     0,
   318,   325,   320,   263,   454,   303,     0,     0,   318,   321,
   322,   454,   303,     0,   220,     0,   213,     0,   142,     0,
   143,     0,   145,     0,   146,     0,   144,     0,   127,     0,
   130,     0,   128,     0,   129,     0,   135,     0,   136,     0,
   121,     0,   123,     0,   122,     0,   131,     0,   132,     0,
   124,     0,   126,     0,   139,     0,   141,     0,   154,     0,
   153,     0,   138,     0,   140,     0,   178,     0,   188,     0,
   137,     0,   152,     0,   151,     0,   161,     0,   159,     0,
   160,     0,   155,     0,   156,     0,   157,     0,   158,     0,
   162,     0,   163,     0,   166,     0,   167,     0,   164,     0,
   165,     0,   150,     0,   147,     0,   148,     0,   149,     0,
   119,     0,   120,     0,   133,     0,   134,     0,   111,   303,
     0,   112,   303,     0,   332,   303,     0,   325,   303,     0,
   323,   303,     0,   326,   303,     0,   324,   303,     0,   328,
   303,     0,   327,   303,     0,   329,   303,     0,   330,   303,
     0,   168,   350,     0,   170,   350,     0,   169,   350,     0,
   171,   350,     0,   172,   350,     0,   173,   350,     0,   174,
   350,     0,   175,   350,     0,   176,   350,     0,   177,   350,
     0,   458,   350,     0,   341,   350,     0,   355,   350,     0,
   331,   350,     0,   303,   336,   303,     0,   338,     0,   338,
    88,   337,    91,     0,   372,     0,   372,    21,   337,     0,
   313,   339,     0,   333,   339,     0,   334,   339,     0,     0,
   336,     0,     0,     0,     0,   350,    68,   457,   303,    19,
   342,   405,   351,   406,   343,    20,   340,     0,     0,     0,
   350,    69,   457,   303,    19,   344,   405,   351,   406,   345,
    20,     0,   350,    68,   457,   303,    19,    20,     0,   350,
    69,   457,   303,    19,    20,     0,     0,     0,   350,    68,
   303,    19,   346,   405,   351,   406,   347,    20,     0,     0,
     0,   350,    69,   303,    19,   348,   405,   351,   406,   349,
    20,     0,   350,    68,   303,    19,    20,     0,   350,    69,
   303,    19,    20,     0,   350,    68,   457,   350,     0,   350,
    69,   457,   350,     0,     0,   352,     0,   211,     0,   351,
   352,     0,   336,   350,   353,   303,    18,     0,   336,   303,
    18,     0,   354,   350,     0,   353,    21,   354,   350,     0,
   360,     0,    22,   303,   294,     0,   360,    22,   303,   294,
     0,   350,    70,    19,   357,    20,   303,     0,     0,   350,
    70,   457,    19,   356,   357,    20,   303,     0,   350,    70,
   457,   303,     0,   358,     0,   357,    21,   358,     0,   357,
    21,     0,   457,     0,   457,    23,   303,   294,     0,   202,
     0,   374,     0,   364,   192,     0,   364,   359,     0,   202,
     0,   364,   202,     0,   367,     0,   350,   365,     0,   111,
     0,   112,     0,   362,     0,   363,   362,     0,    34,     0,
    34,   363,     0,    34,   364,     0,    34,   363,   364,     0,
   366,     0,   366,    21,     5,     0,   457,     0,   366,    21,
   457,     0,     5,     0,   368,     0,   368,    21,     5,     0,
     0,   369,   371,     0,     0,   368,    21,   370,   371,     0,
   303,   336,   359,   303,     0,   457,     0,   335,     0,   335,
   373,     0,   364,     0,   375,     0,   364,   375,     0,     0,
   375,     0,   303,    24,   350,   373,    25,     0,    26,    27,
     0,    26,   294,    27,     0,   375,    26,    27,     0,   375,
    26,   294,    27,     0,   303,    24,    25,     0,   303,    24,
   367,    25,     0,   375,   303,    24,    25,     0,   375,   303,
    24,   367,    25,     0,   393,     0,   395,     0,   398,     0,
   401,     0,   416,     0,   419,     0,   451,     0,   424,     0,
   453,     0,   379,     0,   377,     0,   386,     0,   379,   386,
     0,   423,   379,     0,   450,   392,    11,    24,   292,    25,
    18,     0,   450,   392,    11,    24,   292,    25,     0,   381,
   386,     0,     0,     0,    13,    24,   293,    18,   293,    18,
   382,   293,   383,    25,     0,     0,   190,   403,    24,   385,
   427,    25,     0,   191,     0,   393,     0,   395,     0,   398,
     0,   389,   412,     0,   389,     0,   390,     0,   416,     0,
   387,     0,   380,     0,   384,     0,   453,     0,    24,   386,
    25,     0,     1,     0,     0,   418,   388,   386,     0,   403,
    19,     0,   407,    20,     0,   392,     0,   411,     0,   393,
     0,   395,     0,   398,     0,   402,     0,   417,     0,   419,
     0,   424,     0,   452,     0,    24,   392,    25,     0,   453,
     0,     1,     0,   457,    22,     0,   110,   376,     0,     0,
   101,   394,     0,     0,     6,   294,   396,    22,     0,     0,
   101,   394,     6,   294,   397,    22,     0,     0,     7,   399,
    22,     0,     0,   101,   394,     7,   400,    22,     0,    24,
   401,    25,     0,   403,   409,     0,   403,   410,   404,     0,
     0,     0,     0,     0,     0,    20,     0,   110,    20,     0,
   415,    20,     0,   415,   110,    20,     0,   412,    20,     0,
   412,   110,    20,     0,   412,   415,    20,     0,   412,   415,
   110,    20,     0,    19,   408,     0,    19,    20,     0,    19,
   411,    20,     0,    19,   412,    20,     0,    19,   412,   415,
    20,     0,   392,     0,   411,   392,     0,   295,     0,   412,
   295,     0,   414,     0,   413,    21,   414,     0,   291,     0,
    19,   413,   455,    20,     0,   376,     0,   415,   376,     0,
    18,     0,   292,    18,     0,    18,     0,   292,    18,     0,
   292,     0,     8,    24,   292,    25,     0,   418,   376,     0,
     0,   418,   376,     9,   420,   376,     0,     0,    10,    24,
   292,   421,    25,   376,     0,    11,    24,   292,    25,     0,
    11,    24,   292,    25,     0,     0,     0,   190,   425,   403,
    24,   426,   427,    25,   401,   449,   404,     0,   429,     0,
     0,   427,   428,    21,   429,     0,   448,     0,   456,     0,
   187,     0,   186,     0,   189,     0,   430,   189,     0,   430,
     0,    24,   292,    25,     0,   431,     0,   267,    26,   292,
    27,     0,   267,    24,    25,     0,   267,    24,   268,    25,
     0,    71,    24,   291,    21,   372,    25,     0,   267,   350,
    28,   457,   303,     0,   267,   350,    45,   457,   303,     0,
   267,    48,     0,   267,    49,     0,   432,     0,    48,   269,
     0,    49,   269,     0,    29,   275,     0,    34,   275,     0,
    33,   275,     0,    32,   275,     0,    31,   275,     0,    30,
   275,     0,   272,     0,   433,     0,    24,   372,    25,   275,
     0,   434,     0,   276,    34,   275,     0,   276,    35,   275,
     0,   276,    36,   275,     0,   435,     0,   277,    33,   276,
     0,   277,    32,   276,     0,   436,     0,   278,    50,   277,
     0,   278,    51,   277,     0,   437,     0,   279,    37,   278,
     0,   279,    38,   278,     0,   279,    52,   278,     0,   279,
    53,   278,     0,   438,     0,   280,    54,   279,     0,   280,
    55,   279,     0,   439,     0,   281,    29,   280,     0,   440,
     0,   282,    39,   281,     0,   441,     0,   283,    40,   282,
     0,   442,     0,   284,    56,   283,     0,   443,     0,   286,
    57,   284,     0,   444,     0,     0,     0,   286,    41,   446,
   292,    22,   447,   288,     0,   445,     0,   269,    23,   291,
     0,   269,    58,   291,     0,   269,    59,   291,     0,   269,
    60,   291,     0,   269,    61,   291,     0,   269,    62,   291,
     0,   269,    63,   291,     0,   269,    64,   291,     0,   269,
    65,   291,     0,   269,    66,   291,     0,   269,    67,   291,
     0,   191,     0,     0,    12,     0,   422,   376,     0,   450,
   376,    11,    24,   292,    25,    18,     0,   381,   376,     0,
   422,   392,     0,   450,   392,    11,    24,   292,    25,    18,
     0,   450,   392,    11,    24,   292,    25,     0,   381,   392,
     0,    14,   457,    18,     0,    15,    18,     0,   100,    15,
    18,     0,    16,    18,     0,    96,    16,    18,     0,    97,
    16,    18,     0,    98,    16,    18,     0,    99,    16,    18,
     0,    17,    18,     0,    17,   292,    18,     0,     0,    18,
     0,     0,    21,     0,   185,     0,   186,     0,   190,     0,
   191,     0,   456,     0,   187,     0,   192,     0,   187,     0,
    44,    24,   292,    25,     0,    44,    24,   372,    25,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   325,   326,   329,   330,   333,   334,   335,   336,   337,   338,
   339,   340,   343,   345,   349,   349,   356,   362,   366,   367,
   371,   372,   374,   376,   391,   394,   404,   407,   415,   416,
   418,   420,   436,   439,   447,   450,   458,   460,   460,   464,
   465,   466,   467,   470,   473,   477,   477,   480,   480,   485,
   486,   489,   494,   495,   498,   499,   502,   507,   508,   511,
   512,   513,   516,   517,   518,   523,   524,   527,   529,   531,
   533,   542,   544,   546,   548,   564,   568,   569,   576,   577,
   585,   587,   591,   592,   593,   594,   595,   596,   599,   600,
   601,   602,   603,   604,   607,   610,   611,   618,   621,   624,
   630,   638,   640,   644,   647,   648,   651,   654,   660,   664,
   665,   668,   671,   672,   675,   676,   677,   680,   681,   682,
   683,   684,   687,   688,   689,   690,   691,   694,   695,   698,
   705,   709,   711,   715,   716,   718,   725,   735,   736,   739,
   740,   741,   742,   743,   744,   745,   746,   750,   751,   755,
   756,   759,   761,   763,   764,   765,   766,   767,   769,   773,
   774,   777,   781,   793,   794,   795,   796,   797,   798,   799,
   800,   804,   805,   806,   807,   808,   809,   810,   811,   812,
   813,   817,   818,   821,   822,   823,   824,   825,   826,   827,
   828,   829,   830,   831,   834,   835,   837,   840,   844,   845,
   848,   849,   850,   851,   854,   855,   859,   860,   861,   862,
   865,   866,   867,   870,   871,   872,   875,   876,   877,   878,
   879,   882,   883,   884,   887,   888,   891,   892,   896,   897,
   900,   901,   906,   912,   913,   919,   925,   926,   926,   928,
   931,   932,   933,   934,   935,   936,   937,   938,   939,   940,
   941,   942,   945,   946,   949,   950,   953,   958,   959,   960,
   963,   977,   982,   988,   990,   996,  1001,  1001,  1005,  1006,
  1008,  1009,  1012,  1015,  1018,  1021,  1022,  1025,  1026,  1029,
  1030,  1031,  1032,  1039,  1040,  1044,  1045,  1048,  1049,  1052,
  1054,  1063,  1064,  1065,  1066,  1067,  1070,  1073,  1079,  1088,
  1091,  1094,  1101,  1108,  1114,  1139,  1140,  1143,  1144,  1145,
  1146,  1147,  1150,  1151,  1152,  1153,  1156,  1157,  1158,  1159,
  1160,  1161,  1162,  1163,  1164,  1165,  1166,  1167,  1168,  1169,
  1170,  1171,  1172,  1176,  1177,  1180,  1181,  1184,  1185,  1188,
  1189,  1190,  1191,  1194,  1195,  1196,  1197,  1198,  1199,  1202,
  1203,  1204,  1205,  1208,  1209,  1210,  1211,  1214,  1215,  1216,
  1217,  1218,  1219,  1220,  1221,  1222,  1223,  1224,  1231,  1232,
  1233,  1234,  1235,  1236,  1237,  1238,  1239,  1240,  1241,  1242,
  1243,  1244,  1247,  1251,  1252,  1256,  1257,  1261,  1262,  1263,
  1266,  1267,  1271,  1278,  1280,  1282,  1284,  1286,  1288,  1289,
  1291,  1293,  1295,  1297,  1298,  1299,  1302,  1303,  1305,  1307,
  1308,  1311,  1314,  1315,  1316,  1319,  1321,  1325,  1327,  1331,
  1332,  1333,  1337,  1339,  1339,  1341,  1344,  1346,  1348,  1351,
  1356,  1363,  1364,  1365,  1372,  1376,  1377,  1381,  1382,  1385,
  1386,  1389,  1390,  1393,  1394,  1395,  1396,  1399,  1400,  1403,
  1404,  1407,  1408,  1409,  1412,  1412,  1413,  1414,  1417,  1429,
  1445,  1446,  1449,  1450,  1451,  1454,  1455,  1458,  1460,  1461,
  1463,  1464,  1466,  1468,  1470,  1472,  1478,  1479,  1480,  1481,
  1482,  1483,  1484,  1485,  1486,  1490,  1493,  1496,  1497,  1501,
  1503,  1505,  1507,  1511,  1512,  1514,  1518,  1520,  1522,  1525,
  1526,  1527,  1528,  1529,  1530,  1531,  1532,  1533,  1534,  1535,
  1536,  1537,  1540,  1541,  1546,  1549,  1552,  1553,  1556,  1557,
  1558,  1559,  1560,  1561,  1562,  1563,  1564,  1565,  1566,  1569,
  1570,  1577,  1578,  1584,  1585,  1586,  1587,  1590,  1591,  1592,
  1593,  1596,  1597,  1601,  1604,  1607,  1610,  1613,  1616,  1619,
  1620,  1621,  1622,  1624,  1625,  1627,  1629,  1635,  1639,  1641,
  1643,  1645,  1649,  1650,  1653,  1654,  1657,  1658,  1661,  1662,
  1665,  1666,  1669,  1670,  1673,  1674,  1675,  1678,  1691,  1696,
  1697,  1701,  1702,  1705,  1710,  1713,  1714,  1715,  1723,  1724,
  1724,  1728,  1729,  1730,  1741,  1748,  1749,  1752,  1753,  1756,
  1757,  1758,  1759,  1760,  1762,  1763,  1764,  1765,  1768,  1769,
  1770,  1771,  1772,  1773,  1774,  1775,  1776,  1777,  1780,  1781,
  1784,  1785,  1786,  1787,  1790,  1791,  1792,  1795,  1796,  1797,
  1800,  1801,  1802,  1803,  1804,  1807,  1808,  1809,  1812,  1813,
  1816,  1817,  1821,  1822,  1825,  1826,  1829,  1830,  1833,  1834,
  1835,  1836,  1839,  1840,  1841,  1842,  1843,  1844,  1845,  1846,
  1847,  1848,  1849,  1850,  1853,  1854,  1857,  1860,  1862,  1864,
  1868,  1869,  1871,  1873,  1876,  1877,  1878,  1880,  1881,  1882,
  1883,  1884,  1885,  1886,  1889,  1890,  1893,  1894,  1897,  1900,
  1901,  1902,  1903,  1904,  1907,  1908,  1909,  1910
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","BADTOK",
"SKIPTOK","CTOK_ELIPSIS","CASE","DEFAULT","CIF","CELSE","SWITCH","WHILE","DO",
"CFOR","GOTO","CONTINUE","BREAK","RETURN","TSEMI","TLBRACE","TRBRACE","TCOMMA",
"TCOLON","TASSIGN","TLPAREN","TRPAREN","TLSQBR","TRSQBR","TDOT","TAMPERSAND",
"TEXCL","TTILDE","TMINUS","TPLUS","TMULT","TDIV","TPERCENT","TLT","TGT","TCIRC",
"TBAR","TQUEST","CSIZEOF","CALIGNOF","CTYPEOF","ARROW_OP","CTYPEDEF","COFFSETOF",
"INC_OP","DEC_OP","LEFT_OP","RIGHT_OP","LE_OP","GE_OP","EQ_OP","NE_OP","AND_OP",
"OR_OP","MUL_ASSIGN","DIV_ASSIGN","MOD_ASSIGN","ADD_ASSIGN","SUB_ASSIGN","LEFT_ASSIGN",
"RIGHT_ASSIGN","AND_ASSIGN","XOR_ASSIGN","OR_ASSIGN","CSTRUCT","CUNION","CENUM",
"VA_ARG","VA_DCL","QWARN","QGLOBALS","QMODIFIES","QNOMODS","QCONSTANT","QFUNCTION",
"QITER","QDEFINES","QUSES","QALLOCATES","QSETS","QRELEASES","QPRECLAUSE","QPOSTCLAUSE",
"QINVARIANT","QALT","QUNDEF","QKILLED","QENDMACRO","LLMACRO","LLMACROITER","LLMACROEND",
"TENDMACRO","QSWITCHBREAK","QLOOPBREAK","QINNERBREAK","QSAFEBREAK","QINNERCONTINUE",
"QFALLTHROUGH","QLINTNOTREACHED","QLINTFALLTHROUGH","QLINTFALLTHRU","QARGSUSED",
"QPRINTFLIKE","QLINTPRINTFLIKE","QSCANFLIKE","QMESSAGELIKE","QNOTREACHED","QCONST",
"QVOLATILE","QINLINE","QEXTENSION","QEXTERN","QSTATIC","QAUTO","QREGISTER","QOUT",
"QIN","QYIELD","QONLY","QTEMP","QSHARED","QREF","QUNIQUE","QCHECKED","QUNCHECKED",
"QCHECKEDSTRICT","QCHECKMOD","QKEEP","QKEPT","QPARTIAL","QSPECIAL","QOWNED",
"QDEPENDENT","QRETURNED","QEXPOSED","QNULL","QOBSERVER","QISNULL","QEXITS","QMAYEXIT",
"QNEVEREXIT","QTRUEEXIT","QFALSEEXIT","QLONG","QSIGNED","QUNSIGNED","QSHORT",
"QUNUSED","QSEF","QNOTNULL","QRELNULL","QABSTRACT","QCONCRETE","QMUTABLE","QIMMUTABLE",
"QTRUENULL","QFALSENULL","QEXTERNAL","QREFCOUNTED","QREFS","QNEWREF","QTEMPREF",
"QKILLREF","QRELDEF","CGCHAR","CBOOL","CINT","CGFLOAT","CDOUBLE","CVOID","QANYTYPE",
"QINTEGRALTYPE","QUNSIGNEDINTEGRALTYPE","QSIGNEDINTEGRALTYPE","QNULLTERMINATED",
"QSETBUFFERSIZE","QSETSTRINGLENGTH","QMAXSET","QMAXREAD","QTESTINRANGE","TCAND",
"IDENTIFIER","NEW_IDENTIFIER","TYPE_NAME_OR_ID","CANNOTATION","CCONSTANT","ITER_NAME",
"ITER_ENDNAME","TYPE_NAME","METASTATE_NAME","file","externalDefs","externalDef",
"constantDecl","fcnDecl","@1","plainFcn","plainNamedDecl","namedDeclBase","@2",
"@3","plainNamedDeclBase","@4","@5","iterDecl","@6","@7","macroDef","fcnDefHdr",
"metaStateConstraint","metaStateSpecifier","@8","@9","metaStateExpression","metaStateName",
"constraintSeperator","BufConstraintList","BufConstraint","bufferModifier","relationalOp",
"BufConstraintExpr","BufConstraintTerm","BufConstraintSrefExpr","BufUnaryOp",
"BufBinaryOp","functionClauses","functionClausesPlain","functionClause","functionClausePlain",
"globalsClause","globalsClausePlain","@10","nomodsClause","modifiesClause","modifiesClausePlain",
"@11","flagSpec","flagId","optWarnClause","warnClause","warnClausePlain","globIdList",
"globIdListExpr","optGlobQuals","globId","globQual","stateTag","conditionTag",
"fcnDefHdrAux","fcnBody","@12","@13","@14","fcnDef","locModifies","modListExpr",
"mExpr","modList","specClauseListExpr","optSpecClauseList","specClauseList",
"primaryExpr","@15","postfixExpr","argumentExprList","unaryExpr","fieldDesignator",
"offsetofExpr","sizeofExpr","@16","sizeofExprAux","castExpr","timesExpr","plusExpr",
"shiftExpr","relationalExpr","equalityExpr","bitandExpr","xorExpr","bitorExpr",
"andExpr","@17","orExpr","@18","conditionalExpr","@19","@20","assignExpr","expr",
"optExpr","constantExpr","initializer","instanceDecl","@21","@22","namedInitializer",
"@23","typeDecl","@24","IsType","PushType","namedInitializerList","namedInitializerListAux",
"optDeclarators","init","designation","designatorList","designator","initList",
"storageSpecifier","stateClause","stateClausePlain","@25","conditionClause",
"startConditionClause","conditionClausePlain","@26","@27","functionConstraint",
"exitsQualifier","checkQualifier","stateQualifier","paramQualifier","visibilityQualifier",
"returnQualifier","typedefQualifier","refcountQualifier","typeModifier","definedQualifier",
"typeQualifier","typeSpecifier","completeType","completeTypeSpecifier","altType",
"completeTypeSpecifierAux","optCompleteType","optStructInvariant","suSpc","@28",
"@29","@30","@31","@32","@33","@34","@35","NotType","structDeclList","structDecl",
"structNamedDeclList","structNamedDecl","enumSpc","@36","enumeratorList","enumerator",
"optNamedDecl","namedDecl","genericParamList","innerMods","innerModsList","pointers",
"paramIdList","idList","paramTypeList","paramList","@37","@38","paramDecl","typeExpression",
"abstractDecl","optAbstractDeclBase","abstractDeclBase","stmt","iterBody","endBody",
"iterDefStmtList","iterDefIterationStmt","forPred","@39","@40","partialIterStmt",
"@41","iterDefStmt","iterSelectionStmt","@42","openScope","closeScope","macroBody",
"stmtErr","labeledStmt","optExtraFallThroughs","caseStmt","@43","@44","defaultStmt",
"@45","@46","compoundStmt","compoundStmtErr","CreateInnerScope","DeleteInnerScope",
"CreateStructInnerScope","DeleteStructInnerScope","DeleteInnerScopeSafe","compoundStmtRest",
"compoundStmtAux","compoundStmtAuxErr","stmtListErr","initializerList","typeInitializerList",
"typeInitializer","stmtList","expressionStmt","expressionStmtErr","ifPred","selectionStmt",
"@47","@48","whilePred","iterWhilePred","iterStmt","@49","@50","iterArgList",
"@51","iterArgExpr","cconstantExpr","primaryIterExpr","postfixIterExpr","unaryIterExpr",
"castIterExpr","timesIterExpr","plusIterExpr","shiftIterExpr","relationalIterExpr",
"equalityIterExpr","bitandIterExpr","xorIterExpr","bitorIterExpr","andIterExpr",
"orIterExpr","conditionalIterExpr","@52","@53","assignIterExpr","endIter","doHeader",
"iterationStmt","iterationStmtErr","jumpStmt","optSemi","optComma","id","newId",
"typeName", NULL
};
#endif

static const short yyr1[] = {     0,
   194,   194,   195,   195,   196,   196,   196,   196,   196,   196,
   196,   196,   197,   197,   199,   198,   200,   200,   201,   201,
   202,   202,   202,   202,   203,   202,   204,   202,   205,   205,
   205,   205,   206,   205,   207,   205,   209,   210,   208,   211,
   211,   211,   211,   212,   213,   215,   214,   216,   214,   217,
   217,   218,   219,   219,   220,   220,   221,   222,   222,   223,
   223,   223,   224,   224,   224,   225,   225,   226,   226,   226,
   226,   226,   226,   226,   226,   227,   228,   228,   229,   229,
   230,   230,   231,   231,   231,   231,   231,   231,   232,   232,
   232,   232,   232,   232,   233,   235,   234,   236,   237,   239,
   238,   240,   240,   241,   242,   242,   243,   244,   244,   245,
   245,   246,   247,   247,   248,   248,   248,   249,   249,   249,
   249,   249,   250,   250,   250,   250,   250,   251,   251,   252,
   252,   254,   253,   255,   256,   253,   257,   258,   258,   259,
   259,   259,   259,   259,   259,   259,   259,   260,   260,   261,
   261,   262,   262,   262,   262,   262,   262,   262,   262,   263,
   263,   264,   264,   265,   265,   265,   265,   265,   265,   266,
   265,   267,   267,   267,   267,   267,   267,   267,   267,   267,
   267,   268,   268,   269,   269,   269,   269,   269,   269,   269,
   269,   269,   269,   269,   270,   270,   270,   271,   273,   272,
   274,   274,   274,   274,   275,   275,   276,   276,   276,   276,
   277,   277,   277,   278,   278,   278,   279,   279,   279,   279,
   279,   280,   280,   280,   281,   281,   282,   282,   283,   283,
   284,   285,   284,   286,   287,   286,   288,   289,   290,   288,
   291,   291,   291,   291,   291,   291,   291,   291,   291,   291,
   291,   291,   292,   292,   293,   293,   294,   295,   295,   295,
   296,   297,   296,   298,   296,   299,   300,   299,   302,   301,
   301,   301,   303,   304,   305,   306,   306,   307,   307,   308,
   308,   308,   308,   309,   309,   310,   310,   311,   311,   312,
   312,   313,   313,   313,   313,   313,   314,   316,   315,   317,
   318,   320,   319,   321,   319,   322,   322,   323,   323,   323,
   323,   323,   324,   324,   324,   324,   325,   325,   325,   325,
   325,   325,   325,   325,   325,   325,   325,   325,   325,   325,
   325,   325,   325,   326,   326,   327,   327,   328,   328,   329,
   329,   329,   329,   330,   330,   330,   330,   330,   330,   331,
   331,   331,   331,   332,   332,   332,   332,   333,   333,   333,
   333,   333,   333,   333,   333,   333,   333,   333,   334,   334,
   334,   334,   334,   334,   334,   334,   334,   334,   334,   334,
   334,   334,   335,   336,   336,   337,   337,   338,   338,   338,
   339,   339,   340,   342,   343,   341,   344,   345,   341,   341,
   341,   346,   347,   341,   348,   349,   341,   341,   341,   341,
   341,   350,   351,   351,   351,   352,   352,   353,   353,   354,
   354,   354,   355,   356,   355,   355,   357,   357,   357,   358,
   358,   359,   359,   359,   359,   360,   360,   361,   361,   362,
   362,   363,   363,   364,   364,   364,   364,   365,   365,   366,
   366,   367,   367,   367,   369,   368,   370,   368,   371,   371,
   372,   372,   373,   373,   373,   374,   374,   375,   375,   375,
   375,   375,   375,   375,   375,   375,   376,   376,   376,   376,
   376,   376,   376,   376,   376,   377,   378,   379,   379,   380,
   380,   380,   380,   382,   383,   381,   385,   384,   384,   386,
   386,   386,   386,   386,   386,   386,   386,   386,   386,   386,
   386,   386,   388,   387,   389,   390,   391,   391,   392,   392,
   392,   392,   392,   392,   392,   392,   392,   392,   392,   393,
   393,   394,   394,   396,   395,   397,   395,   399,   398,   400,
   398,   401,   401,   402,   403,   404,   405,   406,   407,   408,
   408,   408,   408,   408,   408,   408,   408,   409,   410,   410,
   410,   410,   411,   411,   412,   412,   413,   413,   414,   414,
   415,   415,   416,   416,   417,   417,   417,   418,   419,   420,
   419,   421,   419,   422,   423,   425,   426,   424,   427,   428,
   427,   429,   429,   429,   429,   430,   430,   431,   431,   432,
   432,   432,   432,   432,   432,   432,   432,   432,   433,   433,
   433,   433,   433,   433,   433,   433,   433,   433,   434,   434,
   435,   435,   435,   435,   436,   436,   436,   437,   437,   437,
   438,   438,   438,   438,   438,   439,   439,   439,   440,   440,
   441,   441,   442,   442,   443,   443,   444,   444,   445,   446,
   447,   445,   448,   448,   448,   448,   448,   448,   448,   448,
   448,   448,   448,   448,   449,   449,   450,   451,   451,   451,
   452,   452,   452,   452,   453,   453,   453,   453,   453,   453,
   453,   453,   453,   453,   454,   454,   455,   455,   456,   457,
   457,   457,   457,   457,   458,   458,   458,   458
};

static const short yyr2[] = {     0,
     0,     1,     1,     2,     2,     1,     1,     1,     1,     1,
     1,     1,     8,    11,     0,     5,     1,     3,     1,     2,
     1,     6,     3,     6,     0,     6,     0,     7,     1,     6,
     3,     6,     0,     6,     0,     7,     0,     0,    10,     3,
     3,     3,     2,     1,     3,     0,     4,     0,     4,     1,
     3,     1,     1,     1,     3,     1,     3,     1,     1,     1,
     1,     1,     1,     4,     5,     1,     1,     1,     1,     3,
     4,     2,     3,     3,     3,     1,     1,     1,     0,     2,
     0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     2,     0,     4,     1,     2,     0,
     3,     1,     3,     1,     1,     0,     2,     3,     2,     1,
     3,     2,     0,     2,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     3,     0,     3,     0,     0,     4,     2,     2,     1,     1,
     1,     3,     4,     2,     3,     3,     3,     1,     1,     1,
     3,     1,     1,     3,     4,     2,     3,     3,     3,     0,
     1,     1,     3,     1,     1,     1,     3,     1,     1,     0,
     4,     1,     4,     3,     4,     6,     5,     5,     2,     2,
     7,     1,     3,     1,     2,     2,     2,     2,     2,     2,
     2,     2,     1,     1,     3,     4,     1,     9,     0,     3,
     4,     2,     4,     2,     1,     4,     1,     3,     3,     3,
     1,     3,     3,     1,     3,     3,     1,     3,     3,     3,
     3,     1,     3,     3,     1,     3,     1,     3,     1,     3,
     1,     0,     4,     1,     0,     4,     1,     0,     0,     7,
     1,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     1,     3,     0,     1,     1,     1,     1,     1,
     3,     0,     9,     0,    11,     2,     0,     6,     0,     8,
     4,     4,     0,     0,     2,     1,     4,     0,     4,     1,
     3,     4,     2,     2,     2,     1,     2,     3,     2,     1,
     3,     1,     1,     1,     1,     1,     2,     0,     6,     2,
     2,     0,     6,     0,     5,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     3,     1,     4,     1,     3,     2,     2,     2,
     0,     1,     0,     0,     0,    12,     0,     0,    11,     6,
     6,     0,     0,    10,     0,     0,    10,     5,     5,     4,
     4,     0,     1,     1,     2,     5,     3,     2,     4,     1,
     3,     4,     6,     0,     8,     4,     1,     3,     2,     1,
     4,     1,     1,     2,     2,     1,     2,     1,     2,     1,
     1,     1,     2,     1,     2,     2,     3,     1,     3,     1,
     3,     1,     1,     3,     0,     2,     0,     4,     4,     1,
     1,     2,     1,     1,     2,     0,     1,     5,     2,     3,
     3,     4,     3,     4,     4,     5,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     2,     2,
     7,     6,     2,     0,     0,    10,     0,     6,     1,     1,
     1,     1,     2,     1,     1,     1,     1,     1,     1,     1,
     3,     1,     0,     3,     2,     2,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     3,     1,     1,     2,
     2,     0,     2,     0,     4,     0,     6,     0,     3,     0,
     5,     3,     2,     3,     0,     0,     0,     0,     0,     1,
     2,     2,     3,     2,     3,     3,     4,     2,     2,     3,
     3,     4,     1,     2,     1,     2,     1,     3,     1,     4,
     1,     2,     1,     2,     1,     2,     1,     4,     2,     0,
     5,     0,     6,     4,     4,     0,     0,    10,     1,     0,
     4,     1,     1,     1,     1,     1,     2,     1,     3,     1,
     4,     3,     4,     6,     5,     5,     2,     2,     1,     2,
     2,     2,     2,     2,     2,     2,     2,     1,     1,     4,
     1,     3,     3,     3,     1,     3,     3,     1,     3,     3,
     1,     3,     3,     3,     3,     1,     3,     3,     1,     3,
     1,     3,     1,     3,     1,     3,     1,     3,     1,     0,
     0,     7,     1,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     1,     0,     1,     2,     7,     2,
     2,     7,     6,     2,     3,     2,     3,     2,     3,     3,
     3,     3,     2,     3,     0,     1,     0,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     4,     4
};

static const short yydefact[] = {     0,
    12,    11,   444,     0,   412,   259,   412,    15,     0,     0,
     0,     0,   273,   273,   293,   292,   294,   295,   296,   354,
   355,   319,   321,   320,   324,   325,   313,   315,   316,   314,
   322,   323,   356,   357,   317,   318,   334,   330,   326,   331,
   327,   308,   309,   312,   310,   311,   351,   352,   353,   350,
   336,   335,   329,   328,   340,   341,   342,   343,   338,   339,
   337,   344,   345,   348,   349,   346,   347,   412,   412,   412,
   412,   412,   412,   412,   412,   412,   412,   332,   689,   690,
   694,   333,   691,   692,   695,     0,     3,     6,     7,   436,
     8,     9,   134,    44,   685,    10,   258,   260,     0,   391,
   273,   273,   273,   273,   273,   273,   273,   273,   412,   273,
   391,   391,   412,   384,   412,     0,   412,   130,   273,   693,
    21,   412,   440,   441,   442,   445,   446,   273,   276,   273,
   273,   269,   412,   696,   412,   412,   694,     0,   529,   273,
   538,     0,     0,     0,   667,     0,     0,     0,     0,   273,
   575,     0,   273,   273,   273,   273,   273,   273,   273,   273,
   273,     0,    43,     0,     0,     0,     0,     0,   532,   273,
   169,   165,   168,   596,   586,   172,   184,   205,   194,   193,
   207,   211,   214,   217,   222,   225,   227,   229,   231,   234,
   237,   241,   253,   577,   199,     0,     0,   563,   519,   520,
   521,   522,     0,     0,   523,   273,   524,     0,   525,   166,
     0,   526,   528,   164,     0,   512,     0,   573,     0,   545,
   499,     0,     0,     0,   508,     0,   509,   488,   507,   504,
   505,   500,   501,   502,     0,     0,   506,   513,     0,     0,
   510,   487,     0,   358,   359,   369,   371,   370,   372,   373,
   374,   375,   376,   377,   378,     4,   273,     0,   132,   137,
   412,   686,     5,   412,   392,   388,   362,   364,   361,   363,
   366,   365,   367,   368,   382,   360,   389,   390,     0,   273,
   273,   380,   273,   273,     0,   381,   437,   379,   443,   447,
   273,   165,   168,     0,   412,   461,     0,   164,   412,     0,
   275,   412,     0,   266,   273,   685,    17,    19,     0,   412,
   273,    29,   455,   205,   257,   534,     0,   273,   273,   273,
   273,     0,   676,   678,   683,     0,   545,     0,     0,     0,
   187,   192,   191,   190,   189,   188,     0,   273,   185,   186,
   273,     0,     0,     0,     0,     0,   532,     0,   273,   531,
   273,   477,   478,   479,   480,     0,   481,   482,   273,   484,
   273,   483,   485,   545,   273,   273,   179,   180,     0,   273,
   273,   273,   273,   273,   273,   273,   273,   273,   273,   273,
   273,   273,   273,   273,   273,   273,   273,   273,   273,   273,
   273,   273,   273,   273,   273,   273,   232,   238,   235,   576,
   273,     0,   674,    40,     0,   546,   564,   579,   671,   597,
     0,   530,   273,     0,     0,     0,   574,    41,   489,   493,
   565,   412,   503,   515,   516,     0,     0,     0,    42,    23,
   273,   455,   412,   412,   273,   261,   131,   412,     0,   386,
     0,   412,     0,   412,     0,   273,     0,   697,   273,   273,
     0,   463,   462,   464,   698,   273,   272,   273,   271,   267,
   412,     0,   273,     0,   412,   273,    20,   452,     0,     0,
   438,   453,   273,     0,   539,     0,   582,     0,   256,     0,
   675,   684,   545,     0,   167,   273,   527,   273,     0,     0,
   679,   680,   681,   682,   677,   533,   273,   540,     0,   670,
   412,   543,   668,     0,     0,   174,     0,   182,     0,     0,
     0,   242,   243,   244,   245,   246,   247,   248,   249,   250,
   251,   252,   208,   209,   210,   213,   212,   215,   216,   218,
   219,   220,   221,   223,   224,   226,   228,   230,   273,   273,
   273,   254,   273,   273,   200,   559,   696,   563,     0,   412,
   544,   580,     0,     0,   511,   497,   273,   566,   514,     0,
     0,    25,     0,   550,   273,   571,   133,   412,   273,   545,
   273,   262,   385,   273,   402,     0,   410,   405,     0,   411,
     0,   427,   430,   424,   426,   383,   469,     0,   455,   465,
   273,     0,   277,   273,   273,   685,    16,    31,   273,   455,
   273,    18,   439,   448,   450,    37,   457,   412,   456,   460,
   535,   578,     0,   584,   273,   171,   273,   206,   412,     0,
   273,   536,     0,   542,   558,     0,   587,   273,   175,   173,
   273,   273,   233,     0,   236,   273,   202,   273,   204,   560,
   561,   273,   273,   273,   585,   273,   412,   273,   412,    79,
    27,   551,   554,   273,   273,   552,   273,   572,   136,     0,
   264,   273,   387,   408,   547,   394,   409,   547,   397,   273,
   429,   273,     0,   470,   473,   273,     0,   471,     0,   455,
   106,   273,   273,   273,     0,    33,     0,   273,     0,    81,
   454,   273,   466,   273,     0,   273,   569,   687,   567,     0,
     0,     0,   541,   273,   273,   183,   177,   178,   239,     0,
     0,   562,   581,     0,   273,   273,   273,   273,   273,   273,
   273,   273,   273,     0,   165,   168,   184,   205,   193,   211,
   214,   217,   222,   225,   227,   229,   231,   234,     0,   590,
   589,   166,   600,   609,   619,   621,   625,   628,   631,   636,
   639,   641,   643,   645,   647,   649,   653,   592,   164,     0,
    24,     0,    96,   100,    98,   123,   124,   125,   126,   127,
   128,   129,    26,    79,    83,     0,    85,    84,     0,    88,
     0,   412,   412,    86,     0,    87,   304,     0,    79,   555,
   556,   273,   553,    22,   273,   278,   412,   400,   547,   412,
   401,   547,   423,   428,   273,     0,     0,   474,   472,   475,
     0,     0,   105,   273,   273,     0,   280,   268,   273,     0,
   286,     0,   273,     0,   412,    81,    35,     0,   449,   451,
    38,    81,    89,    91,    90,    94,    92,    93,   458,   432,
     0,   273,   466,   433,   467,   583,   494,   687,   273,     0,
     0,   176,   537,     0,   590,   273,   201,   203,   673,     0,
     0,   187,   192,   191,   190,   189,   188,   185,   186,   273,
   273,   273,   179,   180,     0,   273,   273,   273,   273,   273,
   273,   273,   273,   273,   273,   273,   273,   273,   273,   273,
   273,   273,   273,   273,   273,   273,   273,   273,   273,   273,
   273,   273,   232,   650,   235,   498,     0,   492,   104,   109,
   102,   113,   685,    80,    95,    99,   107,   298,   301,   297,
     0,   302,   300,    28,   557,   273,     0,   414,   412,   412,
   413,   412,   412,   412,   431,   273,   468,   476,   270,   290,
     0,     0,   289,   283,   284,   287,   285,   278,    13,    32,
    34,    81,    30,   685,    82,   455,   459,   434,   435,   273,
     0,   568,   181,     0,   197,     0,   545,   240,   672,   167,
   273,     0,   174,     0,     0,     0,     0,   654,   655,   656,
   657,   658,   659,   660,   661,   662,   663,   664,   208,   209,
   210,   213,   212,   215,   216,   218,   219,   220,   221,   223,
   224,   226,   228,   230,   646,   273,   648,   273,   491,   108,
     0,   118,   119,   120,   121,   122,   685,   110,   412,   113,
     0,     0,   141,   101,   150,   685,   139,   140,     0,    48,
     0,     0,    58,    59,    69,    67,   307,     0,   306,    56,
    76,     0,    63,    66,     0,   685,    68,   160,   278,   273,
   412,     0,   273,   415,   403,   412,   406,   412,   425,   281,
   273,   288,   685,    36,     0,   273,   495,   570,   273,   273,
     0,   669,   666,   206,   273,   175,   173,   273,   273,     0,
   591,   103,   113,    97,   116,   112,   117,   115,   114,     0,
   144,     0,     0,     0,     0,   138,     0,     0,   153,   162,
   685,   152,     0,     0,    66,     0,    72,     0,    54,    53,
     0,    61,    60,    62,     0,     0,     0,     0,     0,     0,
   273,   685,   161,     0,   263,   273,   417,   273,   273,   412,
   420,     0,   395,     0,   398,   282,   291,     0,    39,   273,
     0,   198,     0,   195,   665,   546,     0,   177,   178,   651,
   111,   145,   142,   148,     0,   149,   146,   147,   151,     0,
   156,     0,     0,     0,     0,   273,     0,    78,    77,     0,
    73,     0,    50,    45,    46,    55,    66,    57,    70,     0,
    74,    75,     0,     0,   305,   273,   273,   279,   273,   273,
     0,   418,   273,   404,     0,   407,     0,    14,   496,   196,
   588,   176,   273,   143,   157,   154,     0,   158,   159,   163,
   299,    52,    49,     0,     0,    71,    47,    64,   303,   265,
   421,   412,   416,   273,   393,   399,   652,   155,    65,    51,
   419,   422,   396,     0,     0,     0
};

static const short yydefgoto[] = {  1234,
    86,    87,    88,    89,   136,   306,   307,    90,   650,   789,
   308,   826,   952,    91,   690,   954,   928,    93,  1037,  1173,
  1119,  1103,  1174,  1213,  1111,  1039,  1040,  1041,  1115,  1042,
  1043,  1177,  1045,  1170,   773,   831,   774,   832,   775,   833,
   912,   834,   778,   835,   913,   910,   911,   812,   780,   781,
  1017,  1018,  1019,  1086,  1020,   782,   783,    94,   260,   433,
   261,   570,    95,  1024,  1154,  1155,  1026,  1100,  1122,  1101,
   176,   327,   177,   507,   178,   964,   179,   180,   402,   545,
   181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
   539,   191,   541,   192,   540,   856,   193,   222,   480,   316,
   421,    97,   662,   795,   129,   595,    98,   302,   195,   258,
   130,   131,   927,   818,   819,   820,   821,   941,   100,   784,
   837,  1029,   786,   787,   838,  1048,   921,  1046,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   296,   422,   439,   114,   266,  1233,   115,   799,  1195,   802,
  1197,   665,  1132,   668,  1134,   116,   930,   931,  1129,  1130,
   117,   673,   581,   582,   842,   133,   470,   125,   126,   119,
   603,   604,   471,   472,   473,   692,   609,   329,   807,   844,
   454,   350,   223,   243,   224,   225,   351,   960,  1141,   227,
   646,   228,   229,   426,   230,   231,   197,   407,   352,   348,
   353,   474,   702,   354,   317,   623,   355,   202,   356,   551,
   797,  1055,   236,   567,   502,   406,   204,   568,   698,   699,
   569,   357,   205,   206,   358,   643,   613,   359,   239,   360,
   364,   705,   740,   907,   741,   210,   743,   744,   745,   746,
   747,   748,   749,   750,   751,   752,   753,   754,   755,   756,
   757,  1006,  1203,   758,  1146,   361,   362,   212,   363,   263,
   850,   298,   215,   122
};

static const short yypact[] = {  2011,
-32768,-32768,    26,    33,  5183,-32768,  6373,-32768,   864,  3073,
  3373,  3373,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   258,-32768,-32768,-32768,-32768,  2204,-32768,-32768,-32768,   250,
-32768,-32768,    12,-32768,    50,-32768,-32768,-32768,    52,  5968,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  5968,  5968,    65,    57,-32768,   904,-32768,-32768,   864,-32768,
-32768,-32768,-32768,-32768,-32768,    26,-32768,  5396,-32768,   161,
-32768,    65,-32768,-32768,-32768,  5183,-32768,   206,-32768,  5396,
-32768,   218,   243,   283,-32768,   321,   864,   202,   308,  1881,
-32768,  2584,  5396,  5396,  5396,  5396,  5396,  5396,-32768,  5440,
  5440,   334,-32768,   360,   367,   379,   423,   445,   378,  4575,
-32768,   448,   468,-32768,   483,-32768,   697,   977,-32768,-32768,
-32768,   960,   384,   509,   372,   532,   485,   491,   527,   467,
    37,-32768,-32768,   416,-32768,  3418,   478,   519,-32768,-32768,
-32768,-32768,   576,  3118,-32768,  4575,-32768,  3418,-32768,   431,
  3418,-32768,-32768,   627,   636,-32768,   643,-32768,  2776,   483,
   647,   470,   583,  3223,-32768,  3373,-32768,-32768,-32768,  5698,
-32768,-32768,-32768,-32768,   661,   666,-32768,-32768,  3373,  3418,
-32768,-32768,   609,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   705,   727,-32768,-32768,
  6238,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   791,   407,
-32768,-32768,   864,   864,   143,-32768,   250,-32768,-32768,-32768,
  4481,-32768,-32768,   383,  5563,   404,   758,-32768,-32768,   797,
-32768,-32768,   835,   822,   407,    50,-32768,   291,   757,-32768,
   864,-32768,    46,-32768,-32768,-32768,   795,  5396,  5396,  5396,
  1925,   873,-32768,-32768,-32768,   587,   869,    80,   875,   885,
-32768,-32768,-32768,-32768,-32768,-32768,   874,  4481,-32768,-32768,
  5396,   920,   922,   926,   936,   972,   378,   754,  5035,-32768,
  4575,-32768,-32768,-32768,-32768,   945,-32768,-32768,  4575,-32768,
  4575,-32768,-32768,-32768,  5068,  5396,-32768,-32768,   199,  5396,
  5396,  5396,  5396,  5396,  5396,  5396,  5396,  5396,  5396,  5396,
  5396,  5396,  5396,  5396,  5396,  5396,  5396,  5396,  5396,  5396,
  5396,  5396,  5396,  5396,  5396,  5396,-32768,-32768,-32768,-32768,
  5396,   823,-32768,-32768,  2392,-32768,-32768,   995,-32768,-32768,
  1002,-32768,  5396,   597,   999,   993,-32768,-32768,-32768,-32768,
-32768,    65,  5698,-32768,-32768,  3373,  1836,  1009,-32768,-32768,
  5396,   398,  3523,  4658,   407,-32768,   112,  6373,   939,  1031,
  1037,  1039,  1043,  1039,   864,  1048,   425,-32768,-32768,  1536,
  1045,   553,-32768,   614,-32768,   407,-32768,   407,-32768,-32768,
-32768,   986,  1057,  1058,-32768,   407,   291,-32768,   864,  1062,
-32768,  1068,   864,  1074,-32768,   447,  1083,   500,  1083,  1092,
-32768,-32768,   869,  1077,-32768,  5056,-32768,-32768,  1094,  1100,
-32768,-32768,-32768,-32768,-32768,-32768,  5396,-32768,  1108,-32768,
  3523,-32768,-32768,  1123,  1115,-32768,   526,-32768,   140,   864,
   864,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   960,   960,   384,   384,   509,
   509,   509,   509,   372,   372,   532,   485,   491,  5396,  5396,
  5396,-32768,  5452,  5473,-32768,-32768,  2968,-32768,  3268,  3710,
-32768,-32768,  1117,   582,-32768,-32768,   407,-32768,-32768,  1118,
  1119,-32768,  1120,-32768,  4084,-32768,-32768,  3897,  4128,   869,
-32768,  1121,-32768,-32768,  1127,  1130,-32768,  1132,  1131,-32768,
   908,-32768,  1133,-32768,-32768,-32768,-32768,  1126,   482,   614,
  5352,  1134,-32768,   161,-32768,   331,-32768,-32768,  5396,   577,
   407,-32768,-32768,  1138,-32768,-32768,  1149,  6373,-32768,-32768,
-32768,-32768,  1142,-32768,  1925,-32768,  5104,-32768,-32768,  1136,
-32768,-32768,  1146,-32768,-32768,  1147,-32768,  5396,-32768,-32768,
-32768,-32768,   527,   946,   467,  4481,-32768,  4481,-32768,-32768,
-32768,  4233,  4575,  5396,-32768,  5484,-32768,  5396,-32768,  1150,
-32768,-32768,-32768,  4277,  4382,-32768,  4426,-32768,-32768,  1148,
-32768,-32768,-32768,-32768,-32768,  1154,-32768,-32768,  1155,-32768,
   864,-32768,   864,-32768,-32768,   316,  1151,-32768,  1152,    56,
  1104,  5008,-32768,-32768,  1157,-32768,  1153,-32768,   475,  1150,
-32768,   864,   765,  4575,  1163,  5104,-32768,  1161,-32768,  1167,
  1164,  1169,-32768,  5396,  5484,-32768,-32768,-32768,-32768,  1170,
  1171,-32768,-32768,   638,  4481,  5396,  5396,  5396,  5396,  5396,
  5396,  5440,  5440,  1168,   654,   660,  1079,  1379,   674,   992,
   949,   959,   748,   979,  1172,  1159,  1160,  1143,    58,  1177,
-32768,    18,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   676,   681,
-32768,  1020,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  1150,-32768,  1113,-32768,-32768,  1137,-32768,
  1162,-32768,-32768,-32768,  1165,-32768,  2922,  1166,  1150,-32768,
-32768,  4531,-32768,-32768,-32768,-32768,  6103,-32768,-32768,  6103,
-32768,-32768,-32768,-32768,  5396,  1025,  1184,-32768,-32768,-32768,
  1187,  1196,-32768,  5008,  5396,   864,-32768,-32768,  5008,   552,
-32768,  1195,  5008,  1173,-32768,  1150,-32768,  1202,-32768,-32768,
-32768,  1150,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   250,
  1197,-32768,   756,-32768,   614,-32768,-32768,  1161,  3324,  1217,
   864,-32768,-32768,   690,  1214,  5396,  1136,  1136,  1222,   691,
  1216,   709,   712,   714,   728,   763,   777,   799,   801,  5396,
  5363,  5396,   808,   810,   329,  5396,  5396,  5396,  5396,  5396,
  5396,  5396,  5396,  5396,  5396,  5396,  5396,  5396,  5396,  5396,
  5396,  5396,  5396,  5396,  5396,  5396,  5396,  5396,  5396,  5396,
  5396,  5396,  5396,-32768,  5396,-32768,  1231,  1236,-32768,  1066,
  1218,   281,    66,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   723,-32768,-32768,-32768,-32768,  5008,   629,-32768,    65,  4817,
-32768,  6103,  4817,  6103,-32768,-32768,-32768,-32768,-32768,-32768,
  1059,  1233,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  1150,-32768,    50,-32768,   683,-32768,-32768,-32768,  5384,
  1241,-32768,-32768,   782,-32768,  1244,   869,-32768,-32768,   819,
  5056,  1246,   827,   846,   369,   864,   864,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   851,   857,
   890,   854,   980,   121,   460,   302,   356,   411,   512,   106,
  1038,   364,   575,   196,   527,  5396,   467,  5484,-32768,   431,
  1020,-32768,-32768,-32768,-32768,-32768,   722,-32768,  5833,   281,
    86,    86,-32768,-32768,    95,   821,-32768,-32768,   297,-32768,
   803,   313,-32768,-32768,-32768,-32768,-32768,  1242,-32768,   -34,
-32768,  1084,-32768,   129,  1247,    50,-32768,   297,-32768,-32768,
-32768,  1255,   716,-32768,-32768,  4817,-32768,  4817,-32768,-32768,
  4982,-32768,   829,-32768,  1185,   812,-32768,-32768,-32768,  5396,
   864,-32768,  1086,   895,-32768,   897,   909,-32768,-32768,  1078,
-32768,-32768,   281,-32768,-32768,-32768,-32768,-32768,-32768,   585,
    95,   695,   864,   864,    86,-32768,   297,   297,-32768,   487,
   865,-32768,  1257,  1081,   600,   313,   494,    83,-32768,-32768,
   803,-32768,-32768,-32768,   803,   -12,   864,   864,  1259,   803,
-32768,    50,  1261,   944,-32768,   407,-32768,-32768,  1263,-32768,
  1264,  1267,-32768,  1268,-32768,-32768,-32768,  1198,-32768,   746,
  1265,-32768,   436,-32768,-32768,-32768,  1266,   914,   924,-32768,
-32768,-32768,-32768,    95,  1269,   431,-32768,-32768,    95,   768,
   487,   794,   864,   864,   297,-32768,  1099,-32768,-32768,   803,
-32768,   600,  1253,-32768,   494,-32768,   494,-32768,-32768,  1270,
-32768,-32768,  1099,  1274,-32768,-32768,-32768,-32768,  5396,   716,
  1282,-32768,-32768,-32768,  1286,-32768,  1288,-32768,-32768,-32768,
-32768,   932,  5396,-32768,-32768,-32768,  1275,-32768,-32768,   487,
-32768,-32768,-32768,  1284,    83,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  5396,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  1311,  1312,-32768
};

static const short yypgoto[] = {-32768,
-32768,  1224,-32768,-32768,-32768,-32768,  -408,  -117,-32768,-32768,
  1003,-32768,-32768,-32768,-32768,-32768,    53,-32768,-32768,   392,
-32768,-32768,   100,   135,-32768,   208,-32768,-32768,-32768, -1007,
-32768,  -883,-32768,-32768,  -710,  -457,-32768,-32768,-32768,  -609,
-32768,  -608,-32768,  -546,-32768,   312,-32768,-32768,   644,  -657,
-32768,   241,   306,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  -896,   166,-32768, -1043,-32768,   282,
-32768,-32768,  -628,   458,  1089,-32768,-32768,  -616,-32768,-32768,
   -84,  -338,  -321,    64,  -357,  -381,  -392,  -367,  -490,  -514,
-32768,  -614,-32768,  -115,-32768,-32768,   484,  1055,  -592,  -394,
     6,-32768,-32768,-32768,  -442,-32768,-32768,-32768,    82,  -288,
   876,-32768,  -908,  -717,-32768,-32768,   511,-32768,-32768,-32768,
  -486,-32768,-32768,-32768,  -434,-32768,-32768,-32768,-32768,-32768,
   545,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   286,   761,-32768,  1018,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   187,  -756,  -885,-32768,   146,
-32768,-32768,   664,   667,   496,     7,  -398,  1215,-32768,    -2,
-32768,-32768,  -568,-32768,-32768,-32768,   648,  -109,  1047,-32768,
  -444,   919,  1333,-32768,  1109,-32768,  1175,-32768,-32768,-32768,
-32768,  -108,-32768,-32768,-32768,-32768,-32768,    70,  1310,  1000,
  1395,-32768,-32768,  1412,-32768,-32768,  -323,-32768,   767,   203,
  -554,  -858,-32768,   849,-32768,-32768,   948,  -202,   655,   507,
  -483,    51,-32768,   117,    42,-32768,-32768,   263,-32768,   350,
-32768,-32768,   652,-32768,   351,  -596,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  1493,-32768,-32768,  1543,  -290,
   510,     0,   612,-32768
};


#define	YYLAST		6565


static const short yytable[] = {   120,
   127,   287,   537,   484,   120,    96,   118,   590,   120,   214,
   214,   214,   536,   593,  1179,   462,  1025,   727,   297,   464,
   677,  1109,   695,  1104,   315,   499,   635,   423,   538,   729,
   259,   739,   836,   563,   534,   535,   561,  1044,  -598,  1063,
   776,   777,  -598,   933,  1054,   526,   527,  1054,   633,   742,
   468,   207,    92,  1160,  1161,   588,   128,   602,   434,     3,
   468,   237,   237,   914,   528,   529,   642,   262,   331,   332,
   333,   334,   335,   336,  1057,   264,   727,   398,   924,   198,
   810,    99,  -273,   262,   655,   120,    99,  1030,   729,  1021,
   739,    96,   118,   399,   244,   245,   940,   400,   904,  1022,
   401,   944,   622,   779,   485,   948,  1106,  1178,   742,  1021,
   415,   811,  1184,   800,   905,   419,  1032,   420,   120,  1022,
  1092,  1210,  1093,   290,  1090,  1091,  -637,   238,   238,  -412,
  -637,   738,  -412,   311,  -412,   120,   123,   124,    92,  1094,
  1124,  -629,   388,   389,   281,  -629,   120,  1105,  1107,  1110,
   -46,   214,   384,   385,  1116,   737,  1117,   390,   391,   499,
   401,   445,  1214,   785,   776,   777,   630,    99,   836,   214,
  1054,   440,  1054,  1118,   836,  1056,  1180,  1058,   464,   776,
   777,   299,   267,   268,   269,   270,   271,   272,   273,   274,
   738,   276,   688,   207,   279,   214,   679,  1133,  1159,  1135,
    99,   687,   550,   214,   685,   214,   410,   214,  1049,   295,
   214,   300,   301,   303,   737,   788,  -644,   309,   214,   323,
  -644,   330,  1172,   214,  1175,   214,   510,   779,   489,   313,
  -412,  -412,  -412,   295,   395,  -412,  -412,   207,   214,   214,
   337,   318,   779,   511,   932,   207,   659,   934,   845,   207,
    79,  1023,   207,   735,   246,   247,   248,   249,   250,   251,
   252,   253,   254,   255,   734,   403,   319,    79,  1035,   237,
    79,  1023,   208,  -274,   237,   257,   237,   409,   736,   120,
   411,   207,   120,   120,   120,   113,   437,   785,   733,   237,
   132,  -696,   135,   452,   836,   275,   523,   524,   525,   280,
   295,   282,   785,   286,   120,   684,   320,   730,   288,   428,
   120,   461,   735,  1010,  -274,   315,   463,   559,   419,   304,
  1097,   305,  -632,   734,   731,   324,  -632,    79,    80,   137,
  1098,  1175,    83,    84,   315,   238,  1106,   736,   431,   788,
   238,   450,   238,  1137,   321,  -696,  1032,   733,   262,     3,
   214,   386,   387,   683,   788,   238,   976,   341,   214,   209,
   214,    99,   438,   369,   441,   443,   730,  1067,   951,  1012,
  1013,   113,   295,   977,   955,   342,  -633,   451,   619,   727,
  -633,   315,   343,   731,  -640,   265,    99,   677,  -640,   401,
  1007,   729,   309,   739,   344,  1077,   265,   265,   845,  1014,
  1015,   618,   468,   401,   214,   386,   387,   448,   388,   389,
   935,   742,  1005,  1016,   208,   384,   385,   392,   393,   295,
   942,   310,   562,   390,   391,   214,   214,  -273,   558,   450,
   295,  -634,   214,   400,   120,  -634,   401,     3,   345,   558,
     3,   571,  -696,  -696,   120,   401,   207,  -696,  -696,   485,
   435,   530,   531,   532,   533,   120,   401,   120,   208,   346,
   386,   387,  1200,   311,   440,   120,   208,   401,   120,  -690,
   208,   612,   120,   208,   548,   315,   237,   237,   347,   829,
  -630,    79,  1099,   315,  -630,   456,   468,   417,   458,  -694,
   401,   384,   385,   738,  1064,  1156,   466,    79,  1035,   469,
   214,   209,   208,   279,  -691,  -412,   675,  -412,  1003,   120,
   120,   701,  1162,   394,  1163,  -412,    99,   737,  1002,  1116,
   401,  1117,   397,   576,   614,   579,   710,   585,   711,   395,
   586,  1164,  -635,   451,  1004,   592,  -635,    99,  1118,    99,
  1000,  1001,   238,   238,   599,   209,   628,   309,   214,   214,
   629,   992,   993,   209,   608,   558,   120,   209,   386,   387,
   209,   386,   387,   647,   214,  1156,   396,   214,   214,   438,
   994,   995,   404,   558,   945,   840,  -273,   815,   450,   816,
   449,   468,  -412,  -412,  -412,   392,   393,  -412,  -412,   209,
   207,    79,    80,   137,   405,  -642,    83,    84,   311,  -642,
   120,   686,   401,   394,   482,   861,   645,   401,   557,  1152,
  1092,   121,  1093,  -517,   417,   735,   121,   401,   469,   410,
   138,   485,  1027,   572,  1171,  1116,   734,  1117,   577,  1094,
   580,   862,   863,   864,   865,   866,   867,  -273,    99,   591,
   736,   214,   214,  1073,  1118,   759,  1050,   596,  -693,  1051,
   733,   601,   660,   214,   214,   438,   214,   412,   401,    79,
    80,   137,   859,  1065,    83,    84,   413,   208,  -692,   730,
   120,   592,   120,   452,  -595,   681,   682,   418,  -595,   424,
  -594,   214,   309,  1188,  -594,   425,   731,   468,   120,   315,
   843,   120,   120,   214,  -618,   590,  -593,   121,  -618,   315,
  -593,   401,   438,   429,   759,   908,  -412,   675,  -412,   732,
   401,   401,   707,   708,   966,   970,  -412,   295,  1021,   295,
   365,  1153,   366,   449,  -412,   840,  1084,  1030,  1022,  -612,
   121,   430,  -617,  -612,  -616,  1096,  -617,  1128,  -616,   262,
   968,  -412,  1083,   796,   367,   368,  1031,   312,  -615,     3,
   432,   803,  -615,   805,   209,  1121,  1032,   451,   322,   497,
   498,  -412,  -412,  -412,   823,   824,  -412,  -412,   732,   828,
  -463,   450,  1138,   608,   841,   676,   203,   235,   235,  -273,
   465,   450,   455,  -614,   894,   895,   469,  -614,  -273,     3,
   450,   214,  1205,  1162,  1221,  1163,   295,  -613,     3,   896,
   897,  -613,   989,   990,   991,   700,  1069,  1070,   436,  1071,
  1166,   208,  1164,   214,   457,   120,   475,  1021,   214,  -610,
  1206,  -611,   214,  -610,   490,  -611,  1031,  1022,  -607,  1232,
  -608,  1186,  -607,   572,  -608,   761,  1032,   450,   262,  -599,
   843,  1095,   120,  -599,   460,     3,   262,  -602,   508,  1051,
   120,  -602,   459,   512,   513,   514,   515,   516,   517,   518,
   519,   520,   521,   522,   543,   544,   628,  -412,  -412,  -412,
  1076,  -622,  -412,  -412,  -627,  -622,   926,  -623,  -627,    79,
  1023,  -623,   262,   174,   542,  1165,  1074,   381,   382,   383,
   481,   121,   483,   693,   442,   444,   446,   488,   209,   486,
    79,    80,   137,  1033,  1034,    83,    84,    79,  1035,   487,
  -624,  1036,  1028,   875,  -624,  -620,   121,  -603,   203,  -620,
  1047,  -603,   312,   957,   841,   214,   592,   670,   671,  -601,
    79,    80,   137,  -601,  -605,    83,    84,   491,  -605,   492,
    79,    80,   137,   493,  -606,    83,    84,   958,  -606,    79,
    80,   137,  -604,   494,    83,    84,  -604,   996,   997,   998,
   999,  1187,   203,   501,  1051,  1147,   401,   709,   918,   919,
   203,   283,   284,   285,   203,   120,   120,   203,    79,  1023,
   890,   891,   174,  1033,  1034,   235,   416,    79,  1035,   495,
   235,  1036,   235,   381,   382,   383,    79,    80,   137,   370,
  -626,    83,    84,   552,  -626,   235,   203,   759,   892,   893,
  1052,   950,   553,   381,   382,   383,   556,  1059,  1088,   560,
  1028,  1028,   287,   555,  1087,   887,   888,   889,  1102,   573,
  1047,  1047,   898,   899,   371,   372,   373,   374,   375,   376,
   377,   378,   379,   380,   936,   671,   121,  1102,    79,    80,
   137,   574,   120,    83,    84,   575,   583,  -273,  -638,  1131,
   214,   578,  -638,  1140,   194,   120,   584,   121,   589,   121,
   120,   732,   571,   315,   388,   389,   597,   312,  1060,  1061,
   605,   600,   929,   598,   610,   929,   606,  1227,   607,   390,
   391,  1028,   120,   120,  1028,   611,  1102,  1102,   401,  1150,
   697,   616,   871,   401,   872,  1047,  -412,  1047,   315,   615,
  1047,   706,  1168,  1169,  1047,  1053,   120,   120,   620,  1047,
   621,   631,   632,  -412,   408,   120,   873,   874,   277,   278,
   505,  1125,   624,   626,    99,  1112,  1113,  1114,   627,   120,
   644,   648,  1066,   661,   651,   649,   664,   841,   666,   669,
  1142,   667,   674,   691,   617,   672,   438,   680,   689,  1148,
  1149,  1028,   120,   120,  1102,   817,   694,   703,   121,  1047,
   704,   203,   794,   798,   801,   808,   762,   827,   809,   697,
   847,   849,   294,   825,   196,   226,   226,   851,   852,   120,
   853,   870,   235,   235,   857,   858,  1131,   901,   903,   902,
   900,   906,  1185,   915,   326,   909,   328,    99,   937,  1189,
  1191,   938,   312,   939,  1047,   929,   947,   929,   929,   929,
   956,   841,   762,   763,   764,   765,   953,   916,   314,   766,
   767,   768,   769,   770,   771,   772,   963,  1126,   967,   969,
   971,   314,   314,   314,   314,   314,   314,  1211,   339,   340,
   194,  1008,   917,  1009,   174,   920,   923,  1011,   194,  1062,
  1068,  1072,   194,   949,  1108,   194,  1075,  1219,  1220,   500,
  1120,    99,  1127,   414,  1224,  1139,  1145,   503,  1167,   504,
  1183,  1165,   583,  1190,   583,  1193,  1194,  1196,  1198,  1199,
  1202,  1212,  1215,   822,   194,  1204,  1216,   817,  1218,  1223,
   830,  1228,   817,   610,   121,  1225,   817,  1226,  1229,   256,
  1235,  1236,  1038,   467,  1230,   203,  1192,  1217,  1176,   199,
   232,   232,  1082,  1151,   813,  1089,   196,  1207,   974,  1123,
   946,   922,   697,   594,   663,  1222,   806,   804,   959,   839,
   289,   929,   453,   929,   242,   447,   496,   427,  1201,   625,
   848,   566,   549,   972,   508,   962,   855,   961,  1081,   978,
   979,   980,   981,   982,   983,   984,   985,   986,   987,   988,
   196,     0,   476,   477,   478,   479,     0,     0,   196,     0,
     0,     0,   196,     0,     0,   196,     0,     0,     0,     0,
     0,     0,   447,   226,     0,     0,     0,     0,   226,     0,
   226,   876,     0,   447,   200,   233,   233,     0,  1231,   817,
     0,     0,     0,   226,   196,     0,     0,     0,     0,   566,
   509,   201,   234,   234,     0,   822,     0,   943,     0,     0,
   822,     0,     0,     0,   822,     0,   877,   878,   879,   880,
   881,   882,   883,   884,   885,   886,     0,     0,     0,     0,
     0,     0,     0,     0,   121,     0,     0,     0,     0,   194,
     0,   199,   965,     0,     0,     0,     0,   554,   566,   314,
   314,   314,   314,   314,   314,   314,   314,   314,   314,   314,
   314,   314,   314,   314,   314,     0,   566,   658,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   211,   240,   240,   199,     0,     0,     0,     0,
     0,     0,     0,   199,     0,     0,     0,   199,     0,   314,
   199,     0,     0,     0,     0,     0,     0,     0,   232,     0,
     0,     0,     0,   232,     0,   232,     0,   822,   314,     0,
     0,     0,     0,     0,   817,     0,   200,     0,   232,   199,
     0,     0,   213,   241,   241,     0,     0,     0,     0,   291,
   658,   713,   587,   201,   153,   154,   155,   156,   157,   158,
     0,     0,     0,   658,   314,     0,     0,     0,     0,   196,
     0,     0,   159,   160,   161,   314,     0,  1078,  1079,     0,
   200,     0,     0,     0,   634,     0,     0,     0,   200,     0,
   226,   226,   200,   194,     0,   200,   162,   201,     0,     0,
     0,     0,   846,   233,     0,   201,     0,     0,   233,   201,
   233,     0,   201,     0,     0,     0,     0,   314,     0,   314,
   234,   637,   639,   233,   200,   234,     0,   234,     0,     0,
     0,     0,     0,     0,   211,     0,     0,     0,     0,   171,
   234,   201,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   121,     0,     0,     0,     0,   479,
     0,     0,   822,     0,     0,     0,     0,   121,     0,   314,
     0,     0,  1144,     0,     0,     0,     0,   314,   211,     0,
   447,     0,   447,     0,   213,     0,   211,     0,   714,     0,
   211,     0,   760,   211,  1157,  1158,     0,     0,     0,     0,
     0,   240,     0,     0,   199,     0,   240,     0,   240,     0,
    79,   292,   293,   196,   174,     0,     0,     0,  1181,  1182,
     0,   240,   211,     0,   728,   232,   232,   121,   213,     0,
     0,     0,     0,     0,     0,     0,   213,     0,     0,     0,
   213,   121,     0,   213,     0,     0,     0,     0,   854,     0,
     0,   241,     0,     0,     0,     0,   241,     0,   241,   860,
     0,     0,     0,     0,  1208,  1209,     0,     0,     0,     0,
     0,   241,   213,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   728,     0,     0,     0,     0,     0,   200,
     0,   121,     0,     0,   314,   314,   314,   314,   314,   314,
   868,   869,     0,     0,     0,     0,   201,     0,     0,     0,
   233,   233,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   216,   234,   234,     0,
     0,   140,   141,   142,     0,     0,   217,   145,   146,   147,
   148,   149,   150,   218,  -490,  -490,     0,     0,   199,   219,
  -490,     0,     0,     0,   153,   154,   155,   156,   157,   158,
     0,     0,     0,     0,     0,     0,     0,  -273,  -273,     0,
     0,     0,   159,   160,   161,     0,     0,     0,     0,     0,
     0,     0,     0,   314,     0,     0,     0,   211,   325,     0,
     0,     0,     0,   314,   291,     0,   162,     0,     0,   153,
   154,   155,   156,   157,   158,     0,     0,     0,   240,   240,
     0,     0,     0,     0,     0,     0,   975,   159,   160,   161,
  -490,   164,   165,   166,   167,   168,   169,     0,     0,     0,
     0,     0,  -255,   200,   314,   170,     0,   213,   291,   171,
     0,   162,     0,   153,   154,   155,   156,   157,   158,     0,
   201,     0,     0,     0,     0,     0,     0,     0,   241,   241,
     0,   159,   160,   161,     0,   314,   314,   314,   314,   314,
   314,   314,   314,   314,   314,   314,   314,   314,   314,   314,
   314,   314,     0,   314,   171,   162,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -1,     1,     0,     0,   479,     0,     0,     0,     0,     0,
    79,   172,   173,     0,   174,   220,   221,     0,     2,     0,
     0,     0,     0,     0,  -273,     0,     0,     0,   171,     0,
     0,   211,     0,     0,     3,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     4,     0,     5,     0,     0,   314,
  1080,     0,     0,     0,     0,    79,   292,   293,     0,   174,
     0,     0,     0,     0,     0,     0,     0,     0,  -412,  -412,
  -412,     0,     6,     0,     0,     0,     0,     7,     8,     9,
     0,   213,     0,     0,     0,     0,   728,     0,     0,     0,
     0,     0,    10,    11,    12,     0,     0,     0,     0,    79,
   292,   293,     0,   174,     0,     0,     0,     0,     0,     0,
     0,    13,    14,    15,  1143,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,     0,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
    70,    71,    72,    73,    74,    75,    76,    77,    78,     0,
     0,     0,     0,     0,     0,    79,    80,    81,    82,     0,
    83,    84,    85,    -2,     1,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     2,     0,     0,     0,     0,     0,  -273,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     3,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     4,     0,     5,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,  -412,  -412,  -412,     0,     6,     0,   314,     0,     0,
     7,     8,     9,     0,     0,     0,     0,     0,     0,     0,
     0,   314,     0,     0,     0,    10,    11,    12,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   314,     0,    13,    14,    15,     0,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,     0,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,     0,     0,     0,     0,     0,     0,    79,    80,
    81,    82,   139,    83,    84,    85,     0,   140,   141,   142,
     0,   143,   144,   145,   146,   147,   148,   149,   150,   151,
  -545,   546,     0,     0,     0,   152,     0,     0,     0,     0,
   153,   154,   155,   156,   157,   158,     0,     0,     0,     0,
     0,     0,     0,  -273,  -273,     4,     0,     5,   159,   160,
   161,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,  -412,
  -412,  -412,   162,     6,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   164,   165,   166,
   167,   168,   169,     0,     0,     0,     0,     0,     0,     0,
     0,   170,    13,    14,    15,   171,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,     0,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
     0,     0,     0,     0,     0,     0,    79,   172,   547,    82,
   174,   175,    84,    85,   139,     0,     0,     0,     0,   140,
   141,   142,     0,   143,   144,   145,   146,   147,   148,   149,
   150,   151,  -170,     0,     0,     0,     0,   152,     0,     0,
     0,     0,   153,   154,   155,   156,   157,   158,     0,     0,
     0,     0,     0,     0,     0,  -273,  -273,  -273,     0,     0,
   159,   160,   161,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,  -273,  -273,  -273,   162,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   164,
   165,   166,   167,   168,   169,     0,     0,     0,     0,     0,
     0,     0,     0,   170,  -273,  -273,  -273,   171,  -273,  -273,
  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,     0,  -273,
  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,
  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,
  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,
  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,
  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,
  -273,  -273,     0,     0,     0,     0,     0,     0,    79,   172,
   173,  -273,   174,   175,    84,  -273,   216,     0,     0,     0,
     0,   140,   141,   142,     0,     0,   217,   145,   146,   147,
   148,   149,   150,   218,  -170,  -549,     0,     0,     0,   219,
     0,     0,     0,     0,   153,   154,   155,   156,   157,   158,
     0,     0,     0,     0,     0,     0,     0,  -273,  -273,  -273,
     0,     0,   159,   160,   161,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,  -273,  -273,  -273,   162,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   164,   165,   166,   167,   168,   169,     0,     0,     0,
     0,     0,     0,     0,     0,   170,  -273,  -273,  -273,   171,
  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,
     0,  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,
  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,
  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,
  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,
  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,  -273,
  -273,  -273,  -273,  -273,     0,     0,     0,     0,     0,     0,
    79,   172,   173,  -273,   174,   220,   221,  -273,  -168,     0,
     0,     0,     0,  -168,  -168,  -168,     0,  -168,  -168,  -168,
  -168,  -168,  -168,  -168,  -168,  -168,  -168,  -168,  -168,  -694,
  -168,  -168,     0,  -168,     0,  -168,  -168,  -168,  -168,  -168,
  -168,  -168,  -168,  -168,  -168,  -168,  -168,  -168,  -168,  -168,
  -168,     0,  -168,     0,  -168,  -168,  -168,  -168,  -168,  -168,
  -168,  -168,  -168,  -168,  -168,  -168,  -168,  -168,  -168,  -168,
  -168,  -168,  -168,  -168,  -168,     0,     0,     0,  -168,     0,
     0,     0,    22,    23,    24,    25,     0,    26,     0,     0,
     0,     0,    31,    32,     0,     0,    35,    36,     0,    38,
    39,    40,    41,  -168,  -168,  -168,  -168,  -168,  -168,     0,
     0,     0,     0,   139,    53,    54,     0,  -168,   140,   141,
   142,  -168,   143,   144,   145,   146,   147,   148,   149,   150,
   151,  -545,     0,     0,     0,     0,   152,     0,     0,    78,
     0,   153,   154,   155,   156,   157,   158,     0,     0,    82,
     0,     0,     0,     0,  -273,  -273,     0,     0,   139,   159,
   160,   161,     0,   140,   141,   142,     0,   143,   144,   145,
   146,   147,   148,   149,   150,   151,  -545,     0,     0,     0,
     0,   152,     0,   162,     0,     0,   153,   154,   155,   156,
   157,   158,  -168,  -168,  -168,     0,  -168,  -168,  -168,  -273,
  -273,     0,     0,     0,   159,   160,   161,   163,   164,   165,
   166,   167,   168,   169,     0,     0,     0,     0,     0,     0,
     0,     0,   170,     0,     0,     0,   171,     0,   162,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,  -518,   164,   165,   166,   167,   168,   169,     0,
     0,     0,     0,   216,     0,     0,     0,   170,   140,   141,
   142,   171,     0,   217,   145,   146,   147,   148,   149,   150,
   218,  -545,  -549,     0,     0,     0,   219,     0,     0,     0,
     0,   153,   154,   155,   156,   157,   158,    79,   172,   173,
     0,   174,   175,    84,  -273,  -273,     0,     0,   139,   159,
   160,   161,     0,   140,   141,   142,     0,   143,   144,   145,
   146,   147,   148,   149,   150,   151,  -545,   640,     0,     0,
     0,   152,     0,   162,     0,     0,   153,   154,   155,   156,
   157,   158,    79,   172,   173,     0,   174,   175,    84,  -273,
  -273,     0,     0,     0,   159,   160,   161,  -486,   164,   165,
   166,   167,   168,   169,     0,     0,     0,     0,     0,     0,
     0,     0,   170,     0,     0,     0,   171,     0,   162,     0,
     0,     0,   696,  -688,     0,     0,     0,   291,     0,     0,
     0,     0,   153,   154,   155,   156,   157,   158,     0,     0,
     0,     0,     0,   164,   165,   166,   167,   168,   169,     0,
   159,   160,   161,   216,     0,     0,     0,   170,   140,   141,
   142,   171,     0,   217,   145,   146,   147,   148,   149,   150,
   218,  -545,  -549,     0,   162,     0,   219,     0,     0,     0,
     0,   153,   154,   155,   156,   157,   158,    79,   172,   173,
     0,   174,   220,   221,  -273,  -273,     0,     0,   139,   159,
   160,   161,     0,   140,   141,   142,     0,   143,   144,   145,
   146,   147,   148,   149,   150,   151,  -545,   171,     0,     0,
     0,   152,     0,   162,     0,     0,   153,   154,   155,   156,
   157,   158,    79,   172,   173,     0,   174,   175,    84,  -273,
  -273,     0,     0,     0,   159,   160,   161,     0,   164,   165,
   166,   167,   168,   169,     0,     0,     0,     0,     0,     0,
     0,     0,   170,     0,     0,     0,   171,     0,   162,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    79,   292,
   293,     0,   174,   164,   165,   166,   167,   168,   169,     0,
     0,     0,     0,     0,     0,     0,     0,   170,   140,   141,
   142,   171,   143,   144,   145,   146,   147,   148,   149,   150,
   218,  -545,   564,     0,     0,     0,   349,     0,     0,     0,
     0,   153,   154,   155,   156,   157,   158,    79,   172,   173,
     0,   174,   220,   221,  -273,  -273,     4,     0,     5,   159,
   160,   161,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   162,     6,     0,     0,     0,     0,     0,
     0,     0,    79,   172,   173,     0,   174,   175,    84,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   164,   165,
   166,   167,   168,   169,     0,     0,     0,     0,     0,     0,
     0,     0,   565,    13,    14,    15,   171,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,     0,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,     0,     0,     0,     0,     0,     0,    79,   172,   547,
    82,   174,   175,    84,    85,   140,   141,   142,     0,   143,
   144,   145,   146,   147,   148,   149,   150,   218,  -545,   641,
     0,     0,     0,   349,     0,     0,     0,     0,   153,   154,
   155,   156,   157,   158,     0,     0,     0,     0,     0,     0,
     0,  -273,  -273,     4,     0,     5,   159,   160,   161,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   162,     6,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   164,   165,   166,   167,   168,
   169,     0,     0,     0,     0,     0,     0,     0,     0,   170,
    13,    14,    15,   171,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,     0,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
    51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
    61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
    71,    72,    73,    74,    75,    76,    77,    78,     0,     0,
     0,     0,     0,     0,    79,   172,   547,    82,   174,   175,
    84,    85,   140,   141,   142,     0,   143,   144,   145,   146,
   147,   148,   149,   150,   218,  -545,   653,     0,     0,     0,
   349,     0,     0,     0,     0,   153,   154,   155,   156,   157,
   158,     0,     0,     0,     0,     0,     0,     0,  -273,  -273,
     4,     0,     5,   159,   160,   161,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   162,     6,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   164,   165,   166,   167,   168,   169,     0,     0,
     0,     0,     0,     0,     0,     0,   654,    13,    14,    15,
   171,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,     0,    26,    27,    28,    29,    30,    31,    32,    33,
    34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
    74,    75,    76,    77,    78,     0,     0,     0,     0,     0,
     0,    79,   172,   547,    82,   174,   175,    84,    85,   140,
   141,   142,     0,   143,   144,   145,   146,   147,   148,   149,
   150,   218,  -545,   652,     0,     0,     0,   349,     0,     0,
     0,     0,   153,   154,   155,   156,   157,   158,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   159,   160,   161,   140,   141,   142,     0,   143,   144,   145,
   146,   147,   148,   149,   150,   218,  -545,   656,     0,     0,
     0,   349,     0,     0,   162,     0,   153,   154,   155,   156,
   157,   158,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   159,   160,   161,     0,     0,   164,
   165,   166,   167,   168,   169,     0,     0,     0,     0,     0,
     0,     0,     0,   170,     0,     0,     0,   171,   162,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   164,   165,   166,   167,   168,   169,     0,
     0,     0,     0,     0,     0,     0,     0,   657,   140,   141,
   142,   171,   143,   144,   145,   146,   147,   148,   149,   150,
   218,  -545,   712,     0,     0,     0,   349,     0,     0,     0,
     0,   153,   154,   155,   156,   157,   158,     0,    79,   172,
   173,     0,   174,   175,    84,     0,     0,     0,     0,   159,
   160,   161,   140,   141,   142,     0,   143,   144,   145,   146,
   147,   148,   149,   150,   218,  -545,   790,     0,     0,     0,
   349,     0,     0,   162,     0,   153,   154,   155,   156,   157,
   158,     0,    79,   172,   173,     0,   174,   175,    84,     0,
     0,     0,     0,   159,   160,   161,     0,     0,   164,   165,
   166,   167,   168,   169,     0,     0,     0,     0,     0,     0,
     0,     0,   170,     0,     0,     0,   171,   162,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   164,   165,   166,   167,   168,   169,     0,     0,
     0,     0,     0,     0,     0,     0,   170,   140,   141,   142,
   171,   143,   144,   145,   146,   147,   148,   149,   150,   218,
  -545,   791,     0,     0,     0,   349,     0,     0,     0,     0,
   153,   154,   155,   156,   157,   158,     0,    79,   172,   173,
     0,   174,   175,    84,     0,     0,     0,     0,   159,   160,
   161,   140,   141,   142,     0,   143,   144,   145,   146,   147,
   148,   149,   150,   218,  -545,   793,     0,     0,     0,   349,
     0,     0,   162,     0,   153,   154,   155,   156,   157,   158,
     0,    79,   172,   173,     0,   174,   175,    84,     0,     0,
     0,     0,   159,   160,   161,     0,     0,   164,   165,   166,
   167,   168,   169,     0,     0,     0,     0,     0,     0,     0,
     0,   792,     0,     0,     0,   171,   162,     0,     0,  -170,
     0,     0,     0,     0,   291,     0,     0,     0,     0,   153,
   154,   155,   156,   157,   158,     0,     0,     0,     0,     0,
     0,   164,   165,   166,   167,   168,   169,   159,   160,   161,
     0,     0,     0,     0,     0,   170,   140,   141,   142,   171,
   143,   144,   145,   146,   147,   148,   149,   150,   218,  -545,
   925,   162,     0,     0,   349,     0,     0,     0,     0,   153,
   154,   155,   156,   157,   158,     0,    79,   172,   173,     0,
   174,   175,    84,     0,     0,     0,     0,   159,   160,   161,
   140,   141,   142,     0,   143,   144,   145,   146,   147,   148,
   149,   150,   218,  -545,   171,     0,     0,     0,   349,     0,
     0,   162,     0,   153,   154,   155,   156,   157,   158,     0,
    79,   172,   173,     0,   174,   175,    84,     0,     0,     0,
     0,   159,   160,   161,     0,     0,   164,   165,   166,   167,
   168,   169,     0,     0,     0,     0,     0,     0,     0,     0,
   170,     0,     0,     0,   171,   162,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    79,   292,   293,     0,   174,
   164,   165,   166,   167,   168,   169,  -135,     0,     0,     0,
     0,  -135,     0,     0,   170,     0,     0,     0,   171,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     4,     0,     5,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    79,   172,   173,     0,   174,
   175,    84,     0,     0,     0,     0,     0,     0,     0,     6,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    79,
   172,   173,     0,   174,   175,    84,     0,     0,    13,    14,
    15,     0,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,     0,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
    73,    74,    75,    76,    77,    78,  -548,     0,     0,     0,
     0,     0,     0,     0,   134,    82,     0,     0,     0,    85,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     4,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    13,    14,    15,
     0,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,     0,    26,    27,    28,    29,    30,    31,    32,    33,
    34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
    74,    75,    76,    77,    78,     0,     0,     0,     0,     0,
   814,  1136,     0,   134,    82,   291,     0,   815,    85,   816,
   153,   154,   155,   156,   157,   158,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   814,     0,   159,   160,
   161,   291,     0,   815,     0,   816,   153,   154,   155,   156,
   157,   158,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   162,  -170,   159,   160,   161,     0,   349,     0,
     0,     0,     0,   153,   154,   155,   156,   157,   158,     0,
     0,     0,     0,     0,   617,     0,     0,     0,   162,   291,
     0,   159,   160,   161,   153,   154,   155,   156,   157,   158,
     0,   291,   506,     0,     0,   171,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,     0,     0,     0,     0,
     0,     0,     0,     0,   159,   160,   161,     0,     0,     0,
     0,   171,   696,     0,     0,     0,   162,   291,     0,     0,
     0,     0,   153,   154,   155,   156,   157,   158,   162,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   171,     0,
   159,   160,   161,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    79,   172,   173,   171,
   174,    83,    84,     0,   162,     0,     0,     0,     0,     0,
     0,   171,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    79,   172,   173,     0,   174,    83,    84,     0,
     0,     0,     0,     0,     0,     0,  -273,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     3,   171,     0,    79,
   292,   293,     0,   174,     0,     0,     4,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    79,   292,   293,     0,   174,     0,     0,     0,     0,     0,
     0,     0,    79,   292,   293,     0,   174,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    79,   292,
   293,     0,   174,    13,    14,    15,     0,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,     0,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,     0,     0,     0,     0,     0,     0,    79,    80,    81,
    82,     0,    83,    84,    85,   291,     0,     0,   678,     0,
   153,   154,   155,   156,   157,   158,   291,   973,     0,     0,
     0,   153,   154,   155,   156,   157,   158,     0,   159,   160,
   161,     0,     0,     0,     0,     0,     0,   291,  -255,   159,
   160,   161,   153,   154,   155,   156,   157,   158,     0,   291,
     0,     0,   162,     0,   153,   154,   155,   156,   157,   158,
   159,   160,   161,   162,     0,     0,     0,     0,     0,     0,
     0,     0,   159,   160,   161,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   162,     0,     0,     0,     0,     0,
     0,     0,     0,   338,     0,   171,   162,     0,   153,   154,
   155,   156,   157,   158,     0,   636,   171,     0,     0,     0,
   153,   154,   155,   156,   157,   158,   159,   160,   161,     0,
     0,     0,     0,     0,     0,     0,   638,   171,   159,   160,
   161,   153,   154,   155,   156,   157,   158,   715,     0,   171,
   162,     0,   716,   717,   718,   719,   720,   721,     0,   159,
   160,   161,   162,     0,     0,     0,     0,     0,     0,     0,
   159,   722,   723,     0,     0,     0,    79,   292,   293,     0,
   174,     0,     0,   162,     0,     0,     0,    79,   292,   293,
     0,   174,     0,   171,   724,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   171,     0,     0,    79,   292,
   293,     0,   174,     0,     0,     0,     0,     0,     0,     0,
    79,   292,   293,     0,   174,     0,   171,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   171,     0,     0,
     0,     0,     0,     0,  -199,  -199,     4,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    79,   292,   293,     0,   174,     0,
     0,     0,     0,     0,     0,     0,    79,   292,   293,     0,
   174,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    79,   292,   293,
     0,   174,     0,     0,     0,     0,     0,     0,    79,   725,
   726,     0,   174,    13,    14,    15,     0,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,     0,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,     4,     0,     5,     0,     0,     0,     0,     0,   134,
    82,     0,     0,     0,    85,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,  -412,  -412,  -412,     0,     6,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    13,    14,
    15,     0,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,     0,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
    73,    74,    75,    76,    77,    78,     4,     0,     5,     0,
     0,     0,     0,     0,   134,    82,     0,     0,     0,    85,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     6,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    13,    14,    15,     0,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,     0,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,     4,     0,     0,     0,     0,     0,    79,  1085,   134,
    82,     0,     0,     0,    85,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,  -412,  -412,  -412,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    13,    14,
    15,     0,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,     0,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
    73,    74,    75,    76,    77,    78,     4,     0,     0,     0,
     0,     0,     0,     0,   134,    82,     0,     0,     0,    85,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    10,    11,    12,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    13,    14,    15,     0,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,     0,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,     4,     0,     5,     0,     0,     0,     0,     0,   134,
    82,     0,     0,     0,    85,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     6,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    13,    14,
    15,     0,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,     0,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
    73,    74,    75,    76,    77,    78,     4,     0,     0,     0,
     0,     0,     0,     0,   134,    82,     0,     0,     0,    85,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    13,    14,    15,     0,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,     0,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,     0,     0,     0,     0,     0,     0,     0,     0,   134,
    82,     0,     0,     0,    85
};

static const short yycheck[] = {     0,
     3,   119,   395,   327,     5,     0,     0,   452,     9,    10,
    11,    12,   394,   456,    27,   306,   913,   646,   128,   308,
   589,    56,   615,  1031,   140,   349,   541,   230,   396,   646,
    19,   646,   690,   432,   392,   393,   431,   921,    21,   948,
   650,   650,    25,   800,   930,   384,   385,   933,   539,   646,
     5,    10,     0,  1097,  1098,   450,    24,   466,   261,    34,
     5,    11,    12,   774,   386,   387,   550,    18,   153,   154,
   155,   156,   157,   158,   933,    24,   705,    41,   789,    10,
    25,     0,    18,    18,   568,    86,     5,     5,   705,    24,
   705,    86,    86,    57,    13,    14,   814,    18,    41,    34,
    21,   819,   497,   650,    25,   823,    24,  1115,   705,    24,
   219,   680,  1120,   668,    57,   224,    34,   226,   119,    34,
    26,  1165,    28,   126,  1021,  1022,    21,    11,    12,    18,
    25,   646,    21,   136,    23,   136,   111,   112,    86,    45,
  1049,    21,    37,    38,    88,    25,   147,  1031,  1032,   184,
    22,   152,    32,    33,    26,   646,    28,    52,    53,   483,
    21,    19,  1170,   650,   774,   774,    27,    86,   826,   170,
  1056,   281,  1058,    45,   832,   932,   189,   934,   467,   789,
   789,    21,   101,   102,   103,   104,   105,   106,   107,   108,
   705,   110,   601,   152,   113,   196,   591,  1056,  1095,  1058,
   119,   600,   405,   204,   599,   206,   189,   208,   926,   128,
   211,   130,   131,   132,   705,   650,    21,   136,   219,    18,
    25,   152,  1106,   224,  1108,   226,    28,   774,   338,    24,
   185,   186,   187,   152,    39,   190,   191,   196,   239,   240,
   159,    24,   789,    45,   799,   204,   570,   802,   693,   208,
   185,   186,   211,   646,    68,    69,    70,    71,    72,    73,
    74,    75,    76,    77,   646,   196,    24,   185,   186,   219,
   185,   186,    10,    24,   224,    26,   226,   208,   646,   280,
   211,   240,   283,   284,   285,     0,   280,   774,   646,   239,
     5,    34,     7,   296,   952,   109,   381,   382,   383,   113,
   219,   115,   789,   117,   305,   596,    24,   646,   122,   240,
   311,   305,   705,   910,    24,   431,    26,   426,   427,   133,
    24,   135,    21,   705,   646,    18,    25,   185,   186,   187,
    34,  1215,   190,   191,   450,   219,    24,   705,   257,   774,
   224,    26,   226,  1061,    24,    88,    34,   705,    18,    34,
   351,    50,    51,    23,   789,   239,    28,    24,   359,    10,
   361,   280,   281,   177,   283,   284,   705,   960,   826,    89,
    90,    86,   291,    45,   832,    16,    21,   296,   488,  1008,
    25,   497,    16,   705,    21,   100,   305,   956,    25,    21,
   905,  1008,   311,  1008,    16,    27,   111,   112,   843,   119,
   120,   486,     5,    21,   405,    50,    51,    25,    37,    38,
   805,  1008,   903,   133,   152,    32,    33,    54,    55,   338,
   815,   136,    25,    52,    53,   426,   427,    24,   423,    26,
   349,    21,   433,    18,   435,    25,    21,    34,    16,   434,
    34,   435,   185,   186,   445,    21,   405,   190,   191,    25,
   264,   388,   389,   390,   391,   456,    21,   458,   196,    15,
    50,    51,    27,   466,   574,   466,   204,    21,   469,    22,
   208,    25,   473,   211,   405,   591,   426,   427,   101,     5,
    21,   185,   186,   599,    25,   299,     5,    18,   302,    22,
    21,    32,    33,  1008,   952,  1092,   310,   185,   186,   313,
   501,   152,   240,   422,    22,    24,    25,    26,   901,   510,
   511,   621,    26,    29,    28,    34,   435,  1008,   900,    26,
    21,    28,    56,   442,    25,   444,   636,   446,   638,    39,
   449,    45,    21,   452,   902,   454,    25,   456,    45,   458,
   898,   899,   426,   427,   463,   196,    21,   466,   549,   550,
    25,   890,   891,   204,   473,   550,   557,   208,    50,    51,
   211,    50,    51,   557,   565,  1162,    40,   568,   569,   488,
   892,   893,    95,   568,    23,   693,    24,    26,    26,    28,
   295,     5,   185,   186,   187,    54,    55,   190,   191,   240,
   549,   185,   186,   187,    19,    21,   190,   191,   601,    25,
   601,    25,    21,    29,    18,   715,    25,    21,   422,    25,
    26,     0,    28,    95,    18,  1008,     5,    21,   432,   189,
     9,    25,   913,   437,    25,    26,  1008,    28,   442,    45,
   444,   716,   717,   718,   719,   720,   721,    24,   557,    26,
  1008,   642,   643,   967,    45,   646,    18,   461,    22,    21,
  1008,   465,   571,   654,   655,   574,   657,    22,    21,   185,
   186,   187,    25,   954,   190,   191,    24,   405,    22,  1008,
   671,   590,   673,   676,    21,   594,   595,    95,    25,    19,
    21,   682,   601,  1126,    25,    20,  1008,     5,   689,   805,
   693,   692,   693,   694,    21,  1140,    21,    86,    25,   815,
    25,    21,   621,    95,   705,    25,    24,    25,    26,   646,
    21,    21,   631,   632,    25,    25,    34,   636,    24,   638,
    24,    27,    26,   438,    28,   843,  1017,     5,    34,    21,
   119,    27,    21,    25,    21,  1026,    25,    22,    25,    18,
   856,    45,    21,   662,    48,    49,    24,   136,    21,    34,
    24,   670,    25,   672,   405,  1046,    34,   676,   147,     6,
     7,   185,   186,   187,   683,   684,   190,   191,   705,   688,
    25,    26,  1063,   692,   693,   589,    10,    11,    12,    24,
    24,    26,    25,    21,    37,    38,   600,    25,    24,    34,
    26,   792,    25,    26,  1189,    28,   715,    21,    34,    52,
    53,    25,   887,   888,   889,   619,    25,    26,    18,    28,
  1101,   549,    45,   814,    18,   816,    22,    24,   819,    21,
    27,    21,   823,    25,   341,    25,    24,    34,    21,  1224,
    21,  1122,    25,   647,    25,   649,    34,    26,    18,    21,
   843,    21,   843,    25,    23,    34,    18,    21,   365,    21,
   851,    25,    18,   370,   371,   372,   373,   374,   375,   376,
   377,   378,   379,   380,    42,    43,    21,   185,   186,   187,
    25,    21,   190,   191,    21,    25,   795,    21,    25,   185,
   186,    25,    18,   189,   401,    21,   971,    34,    35,    36,
    18,   280,    24,   608,   283,   284,   285,    24,   549,    25,
   185,   186,   187,   181,   182,   190,   191,   185,   186,    25,
    21,   189,   913,   727,    25,    21,   305,    21,   152,    25,
   921,    25,   311,   842,   843,   926,   845,    20,    21,    21,
   185,   186,   187,    25,    21,   190,   191,    18,    25,    18,
   185,   186,   187,    18,    21,   190,   191,   192,    25,   185,
   186,   187,    21,    18,   190,   191,    25,   894,   895,   896,
   897,    18,   196,    19,    21,  1075,    21,    22,   782,   783,
   204,    68,    69,    70,   208,   976,   977,   211,   185,   186,
    32,    33,   189,   181,   182,   219,   220,   185,   186,    18,
   224,   189,   226,    34,    35,    36,   185,   186,   187,    23,
    21,   190,   191,     9,    25,   239,   240,  1008,    50,    51,
   929,   825,    11,    34,    35,    36,    24,   936,  1019,    11,
  1021,  1022,  1140,    25,  1019,    34,    35,    36,  1029,    91,
  1031,  1032,    54,    55,    58,    59,    60,    61,    62,    63,
    64,    65,    66,    67,    20,    21,   435,  1048,   185,   186,
   187,    21,  1053,   190,   191,    19,   445,    19,    21,  1053,
  1061,    19,    25,  1066,    10,  1066,    19,   456,    24,   458,
  1071,  1008,  1066,  1189,    37,    38,    91,   466,    20,    21,
   469,    24,   797,    27,   473,   800,    25,  1203,    21,    52,
    53,  1092,  1093,  1094,  1095,    22,  1097,  1098,    21,    22,
   617,    25,    24,    21,    26,  1106,    28,  1108,  1224,    18,
  1111,   628,    32,    33,  1115,   929,  1117,  1118,    25,  1120,
    21,   510,   511,    45,   206,  1126,    48,    49,   111,   112,
   364,  1050,    25,    11,  1053,    52,    53,    54,    24,  1140,
    24,    24,   956,    23,    25,    27,    20,  1066,    19,    19,
  1069,    20,    27,     5,    19,    23,  1075,    24,    21,  1078,
  1079,  1162,  1163,  1164,  1165,   682,    25,    22,   557,  1170,
    24,   405,    25,    20,    20,    25,    73,    25,    27,   696,
    18,    21,   128,    27,    10,    11,    12,    21,    25,  1190,
    22,    24,   426,   427,    25,    25,  1190,    39,    56,    40,
    29,    25,  1121,    91,   150,   186,   152,  1126,    25,  1128,
  1129,    25,   601,    18,  1215,   930,    22,   932,   933,   934,
    24,  1140,    73,    74,    75,    76,    25,    91,   140,    80,
    81,    82,    83,    84,    85,    86,    20,  1051,    25,    18,
    25,   153,   154,   155,   156,   157,   158,  1166,   160,   161,
   196,    21,    91,    18,   189,    91,    91,    40,   204,    27,
    20,    18,   208,    91,    23,   211,    21,  1186,  1187,   351,
    24,  1190,    18,   219,  1193,    91,   191,   359,    22,   361,
    22,    21,   671,    21,   673,    22,    20,    20,    91,    25,
    25,   193,    40,   682,   240,    27,    27,   814,    25,    18,
   689,    27,   819,   692,   693,    20,   823,    20,    25,    86,
     0,     0,   921,   311,  1215,   549,  1130,  1183,  1111,    10,
    11,    12,  1011,  1083,   681,  1020,   152,  1162,   871,  1048,
   820,   787,   849,   458,   574,  1190,   673,   671,   843,   692,
   126,  1056,   296,  1058,    12,   291,   347,   239,  1146,   501,
   696,   433,   405,   870,   871,   849,   705,   848,  1008,   876,
   877,   878,   879,   880,   881,   882,   883,   884,   885,   886,
   196,    -1,   318,   319,   320,   321,    -1,    -1,   204,    -1,
    -1,    -1,   208,    -1,    -1,   211,    -1,    -1,    -1,    -1,
    -1,    -1,   338,   219,    -1,    -1,    -1,    -1,   224,    -1,
   226,    23,    -1,   349,    10,    11,    12,    -1,  1222,   926,
    -1,    -1,    -1,   239,   240,    -1,    -1,    -1,    -1,   501,
   366,    10,    11,    12,    -1,   814,    -1,   816,    -1,    -1,
   819,    -1,    -1,    -1,   823,    -1,    58,    59,    60,    61,
    62,    63,    64,    65,    66,    67,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   843,    -1,    -1,    -1,    -1,   405,
    -1,   152,   851,    -1,    -1,    -1,    -1,   413,   550,   381,
   382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
   392,   393,   394,   395,   396,    -1,   568,   569,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    10,    11,    12,   196,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   204,    -1,    -1,    -1,   208,    -1,   431,
   211,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   219,    -1,
    -1,    -1,    -1,   224,    -1,   226,    -1,   926,   450,    -1,
    -1,    -1,    -1,    -1,  1061,    -1,   152,    -1,   239,   240,
    -1,    -1,    10,    11,    12,    -1,    -1,    -1,    -1,    24,
   642,   643,    27,   152,    29,    30,    31,    32,    33,    34,
    -1,    -1,    -1,   655,   486,    -1,    -1,    -1,    -1,   405,
    -1,    -1,    47,    48,    49,   497,    -1,   976,   977,    -1,
   196,    -1,    -1,    -1,   540,    -1,    -1,    -1,   204,    -1,
   426,   427,   208,   549,    -1,   211,    71,   196,    -1,    -1,
    -1,    -1,   694,   219,    -1,   204,    -1,    -1,   224,   208,
   226,    -1,   211,    -1,    -1,    -1,    -1,   539,    -1,   541,
   219,   543,   544,   239,   240,   224,    -1,   226,    -1,    -1,
    -1,    -1,    -1,    -1,   152,    -1,    -1,    -1,    -1,   114,
   239,   240,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,  1053,    -1,    -1,    -1,    -1,   615,
    -1,    -1,  1061,    -1,    -1,    -1,    -1,  1066,    -1,   591,
    -1,    -1,  1071,    -1,    -1,    -1,    -1,   599,   196,    -1,
   636,    -1,   638,    -1,   152,    -1,   204,    -1,   644,    -1,
   208,    -1,   648,   211,  1093,  1094,    -1,    -1,    -1,    -1,
    -1,   219,    -1,    -1,   405,    -1,   224,    -1,   226,    -1,
   185,   186,   187,   549,   189,    -1,    -1,    -1,  1117,  1118,
    -1,   239,   240,    -1,   646,   426,   427,  1126,   196,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   204,    -1,    -1,    -1,
   208,  1140,    -1,   211,    -1,    -1,    -1,    -1,   704,    -1,
    -1,   219,    -1,    -1,    -1,    -1,   224,    -1,   226,   715,
    -1,    -1,    -1,    -1,  1163,  1164,    -1,    -1,    -1,    -1,
    -1,   239,   240,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   705,    -1,    -1,    -1,    -1,    -1,   405,
    -1,  1190,    -1,    -1,   716,   717,   718,   719,   720,   721,
   722,   723,    -1,    -1,    -1,    -1,   405,    -1,    -1,    -1,
   426,   427,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,     1,   426,   427,    -1,
    -1,     6,     7,     8,    -1,    -1,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    -1,    -1,   549,    24,
    25,    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,
    -1,    -1,    47,    48,    49,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   805,    -1,    -1,    -1,   405,    18,    -1,
    -1,    -1,    -1,   815,    24,    -1,    71,    -1,    -1,    29,
    30,    31,    32,    33,    34,    -1,    -1,    -1,   426,   427,
    -1,    -1,    -1,    -1,    -1,    -1,   872,    47,    48,    49,
    95,    96,    97,    98,    99,   100,   101,    -1,    -1,    -1,
    -1,    -1,    18,   549,   856,   110,    -1,   405,    24,   114,
    -1,    71,    -1,    29,    30,    31,    32,    33,    34,    -1,
   549,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   426,   427,
    -1,    47,    48,    49,    -1,   887,   888,   889,   890,   891,
   892,   893,   894,   895,   896,   897,   898,   899,   900,   901,
   902,   903,    -1,   905,   114,    71,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     0,     1,    -1,    -1,   960,    -1,    -1,    -1,    -1,    -1,
   185,   186,   187,    -1,   189,   190,   191,    -1,    18,    -1,
    -1,    -1,    -1,    -1,    24,    -1,    -1,    -1,   114,    -1,
    -1,   549,    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    44,    -1,    46,    -1,    -1,   971,
  1006,    -1,    -1,    -1,    -1,   185,   186,   187,    -1,   189,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,
    70,    -1,    72,    -1,    -1,    -1,    -1,    77,    78,    79,
    -1,   549,    -1,    -1,    -1,    -1,  1008,    -1,    -1,    -1,
    -1,    -1,    92,    93,    94,    -1,    -1,    -1,    -1,   185,
   186,   187,    -1,   189,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   111,   112,   113,  1070,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,    -1,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
   150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
   160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
   170,   171,   172,   173,   174,   175,   176,   177,   178,    -1,
    -1,    -1,    -1,    -1,    -1,   185,   186,   187,   188,    -1,
   190,   191,   192,     0,     1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    18,    -1,    -1,    -1,    -1,    -1,    24,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,    -1,    46,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    68,    69,    70,    -1,    72,    -1,  1189,    -1,    -1,
    77,    78,    79,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,  1203,    -1,    -1,    -1,    92,    93,    94,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,  1224,    -1,   111,   112,   113,    -1,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,    -1,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
   177,   178,    -1,    -1,    -1,    -1,    -1,    -1,   185,   186,
   187,   188,     1,   190,   191,   192,    -1,     6,     7,     8,
    -1,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,
    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
    69,    70,    71,    72,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    96,    97,    98,
    99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,    -1,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
   159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
   169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
    -1,    -1,    -1,    -1,    -1,    -1,   185,   186,   187,   188,
   189,   190,   191,   192,     1,    -1,    -1,    -1,    -1,     6,
     7,     8,    -1,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    -1,    -1,    -1,    -1,    24,    -1,    -1,
    -1,    -1,    29,    30,    31,    32,    33,    34,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    -1,
    47,    48,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    68,    69,    70,    71,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    96,
    97,    98,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,    -1,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
   177,   178,    -1,    -1,    -1,    -1,    -1,    -1,   185,   186,
   187,   188,   189,   190,   191,   192,     1,    -1,    -1,    -1,
    -1,     6,     7,     8,    -1,    -1,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    24,
    -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    44,
    -1,    -1,    47,    48,    49,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    68,    69,    70,    71,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    96,    97,    98,    99,   100,   101,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
    -1,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
   155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
   165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
   175,   176,   177,   178,    -1,    -1,    -1,    -1,    -1,    -1,
   185,   186,   187,   188,   189,   190,   191,   192,     1,    -1,
    -1,    -1,    -1,     6,     7,     8,    -1,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    -1,    26,    -1,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    -1,    45,    -1,    47,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
    63,    64,    65,    66,    67,    -1,    -1,    -1,    71,    -1,
    -1,    -1,   121,   122,   123,   124,    -1,   126,    -1,    -1,
    -1,    -1,   131,   132,    -1,    -1,   135,   136,    -1,   138,
   139,   140,   141,    96,    97,    98,    99,   100,   101,    -1,
    -1,    -1,    -1,     1,   153,   154,    -1,   110,     6,     7,
     8,   114,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    -1,    -1,    -1,    -1,    24,    -1,    -1,   178,
    -1,    29,    30,    31,    32,    33,    34,    -1,    -1,   188,
    -1,    -1,    -1,    -1,    42,    43,    -1,    -1,     1,    47,
    48,    49,    -1,     6,     7,     8,    -1,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    -1,    -1,    -1,
    -1,    24,    -1,    71,    -1,    -1,    29,    30,    31,    32,
    33,    34,   185,   186,   187,    -1,   189,   190,   191,    42,
    43,    -1,    -1,    -1,    47,    48,    49,    95,    96,    97,
    98,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   110,    -1,    -1,    -1,   114,    -1,    71,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    95,    96,    97,    98,    99,   100,   101,    -1,
    -1,    -1,    -1,     1,    -1,    -1,    -1,   110,     6,     7,
     8,   114,    -1,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    -1,    -1,    -1,    24,    -1,    -1,    -1,
    -1,    29,    30,    31,    32,    33,    34,   185,   186,   187,
    -1,   189,   190,   191,    42,    43,    -1,    -1,     1,    47,
    48,    49,    -1,     6,     7,     8,    -1,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    -1,    -1,
    -1,    24,    -1,    71,    -1,    -1,    29,    30,    31,    32,
    33,    34,   185,   186,   187,    -1,   189,   190,   191,    42,
    43,    -1,    -1,    -1,    47,    48,    49,    95,    96,    97,
    98,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   110,    -1,    -1,    -1,   114,    -1,    71,    -1,
    -1,    -1,    19,    20,    -1,    -1,    -1,    24,    -1,    -1,
    -1,    -1,    29,    30,    31,    32,    33,    34,    -1,    -1,
    -1,    -1,    -1,    96,    97,    98,    99,   100,   101,    -1,
    47,    48,    49,     1,    -1,    -1,    -1,   110,     6,     7,
     8,   114,    -1,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    -1,    71,    -1,    24,    -1,    -1,    -1,
    -1,    29,    30,    31,    32,    33,    34,   185,   186,   187,
    -1,   189,   190,   191,    42,    43,    -1,    -1,     1,    47,
    48,    49,    -1,     6,     7,     8,    -1,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,   114,    -1,    -1,
    -1,    24,    -1,    71,    -1,    -1,    29,    30,    31,    32,
    33,    34,   185,   186,   187,    -1,   189,   190,   191,    42,
    43,    -1,    -1,    -1,    47,    48,    49,    -1,    96,    97,
    98,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   110,    -1,    -1,    -1,   114,    -1,    71,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,   186,
   187,    -1,   189,    96,    97,    98,    99,   100,   101,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,     6,     7,
     8,   114,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    -1,    -1,    -1,    24,    -1,    -1,    -1,
    -1,    29,    30,    31,    32,    33,    34,   185,   186,   187,
    -1,   189,   190,   191,    42,    43,    44,    -1,    46,    47,
    48,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    71,    72,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   185,   186,   187,    -1,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    96,    97,
    98,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,    -1,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
   158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
   168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
   178,    -1,    -1,    -1,    -1,    -1,    -1,   185,   186,   187,
   188,   189,   190,   191,   192,     6,     7,     8,    -1,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,
    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    42,    43,    44,    -1,    46,    47,    48,    49,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    71,    72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    96,    97,    98,    99,   100,
   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,    -1,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
   161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
   171,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
    -1,    -1,    -1,    -1,   185,   186,   187,   188,   189,   190,
   191,   192,     6,     7,     8,    -1,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
    24,    -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,
    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,
    44,    -1,    46,    47,    48,    49,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,    72,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    96,    97,    98,    99,   100,   101,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,    -1,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
   154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
   164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
   174,   175,   176,   177,   178,    -1,    -1,    -1,    -1,    -1,
    -1,   185,   186,   187,   188,   189,   190,   191,   192,     6,
     7,     8,    -1,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    -1,    -1,    -1,    24,    -1,    -1,
    -1,    -1,    29,    30,    31,    32,    33,    34,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    47,    48,    49,     6,     7,     8,    -1,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    -1,    -1,
    -1,    24,    -1,    -1,    71,    -1,    29,    30,    31,    32,
    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    47,    48,    49,    -1,    -1,    96,
    97,    98,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   110,    -1,    -1,    -1,   114,    71,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    96,    97,    98,    99,   100,   101,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,     6,     7,
     8,   114,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    -1,    -1,    -1,    24,    -1,    -1,    -1,
    -1,    29,    30,    31,    32,    33,    34,    -1,   185,   186,
   187,    -1,   189,   190,   191,    -1,    -1,    -1,    -1,    47,
    48,    49,     6,     7,     8,    -1,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
    24,    -1,    -1,    71,    -1,    29,    30,    31,    32,    33,
    34,    -1,   185,   186,   187,    -1,   189,   190,   191,    -1,
    -1,    -1,    -1,    47,    48,    49,    -1,    -1,    96,    97,
    98,    99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   110,    -1,    -1,    -1,   114,    71,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    96,    97,    98,    99,   100,   101,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   110,     6,     7,     8,
   114,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,
    29,    30,    31,    32,    33,    34,    -1,   185,   186,   187,
    -1,   189,   190,   191,    -1,    -1,    -1,    -1,    47,    48,
    49,     6,     7,     8,    -1,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    24,
    -1,    -1,    71,    -1,    29,    30,    31,    32,    33,    34,
    -1,   185,   186,   187,    -1,   189,   190,   191,    -1,    -1,
    -1,    -1,    47,    48,    49,    -1,    -1,    96,    97,    98,
    99,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   110,    -1,    -1,    -1,   114,    71,    -1,    -1,    19,
    -1,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,
    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
    -1,    96,    97,    98,    99,   100,   101,    47,    48,    49,
    -1,    -1,    -1,    -1,    -1,   110,     6,     7,     8,   114,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    71,    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,
    30,    31,    32,    33,    34,    -1,   185,   186,   187,    -1,
   189,   190,   191,    -1,    -1,    -1,    -1,    47,    48,    49,
     6,     7,     8,    -1,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,   114,    -1,    -1,    -1,    24,    -1,
    -1,    71,    -1,    29,    30,    31,    32,    33,    34,    -1,
   185,   186,   187,    -1,   189,   190,   191,    -1,    -1,    -1,
    -1,    47,    48,    49,    -1,    -1,    96,    97,    98,    99,
   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   110,    -1,    -1,    -1,   114,    71,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   185,   186,   187,    -1,   189,
    96,    97,    98,    99,   100,   101,    19,    -1,    -1,    -1,
    -1,    24,    -1,    -1,   110,    -1,    -1,    -1,   114,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    44,    -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   185,   186,   187,    -1,   189,
   190,   191,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,
   186,   187,    -1,   189,   190,   191,    -1,    -1,   111,   112,
   113,    -1,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,    -1,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
   163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
   173,   174,   175,   176,   177,   178,    20,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   187,   188,    -1,    -1,    -1,   192,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,
    -1,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,    -1,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
   154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
   164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
   174,   175,   176,   177,   178,    -1,    -1,    -1,    -1,    -1,
    19,    20,    -1,   187,   188,    24,    -1,    26,   192,    28,
    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    19,    -1,    47,    48,
    49,    24,    -1,    26,    -1,    28,    29,    30,    31,    32,
    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    71,    19,    47,    48,    49,    -1,    24,    -1,
    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,    -1,
    -1,    -1,    -1,    -1,    19,    -1,    -1,    -1,    71,    24,
    -1,    47,    48,    49,    29,    30,    31,    32,    33,    34,
    -1,    24,    25,    -1,    -1,   114,    29,    30,    31,    32,
    33,    34,    47,    48,    49,    71,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    47,    48,    49,    -1,    -1,    -1,
    -1,   114,    19,    -1,    -1,    -1,    71,    24,    -1,    -1,
    -1,    -1,    29,    30,    31,    32,    33,    34,    71,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   114,    -1,
    47,    48,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   185,   186,   187,   114,
   189,   190,   191,    -1,    71,    -1,    -1,    -1,    -1,    -1,
    -1,   114,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   185,   186,   187,    -1,   189,   190,   191,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    24,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    34,   114,    -1,   185,
   186,   187,    -1,   189,    -1,    -1,    44,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   185,   186,   187,    -1,   189,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   185,   186,   187,    -1,   189,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,   186,
   187,    -1,   189,   111,   112,   113,    -1,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,    -1,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
   158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
   168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
   178,    -1,    -1,    -1,    -1,    -1,    -1,   185,   186,   187,
   188,    -1,   190,   191,   192,    24,    -1,    -1,    27,    -1,
    29,    30,    31,    32,    33,    34,    24,    25,    -1,    -1,
    -1,    29,    30,    31,    32,    33,    34,    -1,    47,    48,
    49,    -1,    -1,    -1,    -1,    -1,    -1,    24,    25,    47,
    48,    49,    29,    30,    31,    32,    33,    34,    -1,    24,
    -1,    -1,    71,    -1,    29,    30,    31,    32,    33,    34,
    47,    48,    49,    71,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    47,    48,    49,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    71,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    24,    -1,   114,    71,    -1,    29,    30,
    31,    32,    33,    34,    -1,    24,   114,    -1,    -1,    -1,
    29,    30,    31,    32,    33,    34,    47,    48,    49,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    24,   114,    47,    48,
    49,    29,    30,    31,    32,    33,    34,    24,    -1,   114,
    71,    -1,    29,    30,    31,    32,    33,    34,    -1,    47,
    48,    49,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    47,    48,    49,    -1,    -1,    -1,   185,   186,   187,    -1,
   189,    -1,    -1,    71,    -1,    -1,    -1,   185,   186,   187,
    -1,   189,    -1,   114,    71,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   114,    -1,    -1,   185,   186,
   187,    -1,   189,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   185,   186,   187,    -1,   189,    -1,   114,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   114,    -1,    -1,
    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   185,   186,   187,    -1,   189,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   185,   186,   187,    -1,
   189,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,   186,   187,
    -1,   189,    -1,    -1,    -1,    -1,    -1,    -1,   185,   186,
   187,    -1,   189,   111,   112,   113,    -1,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,    -1,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
   158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
   168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
   178,    44,    -1,    46,    -1,    -1,    -1,    -1,    -1,   187,
   188,    -1,    -1,    -1,   192,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    68,    69,    70,    -1,    72,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,
   113,    -1,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,    -1,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
   163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
   173,   174,   175,   176,   177,   178,    44,    -1,    46,    -1,
    -1,    -1,    -1,    -1,   187,   188,    -1,    -1,    -1,   192,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    72,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   111,   112,   113,    -1,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,    -1,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
   158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
   168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
   178,    44,    -1,    -1,    -1,    -1,    -1,   185,   186,   187,
   188,    -1,    -1,    -1,   192,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    68,    69,    70,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,
   113,    -1,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,    -1,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
   163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
   173,   174,   175,   176,   177,   178,    44,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   187,   188,    -1,    -1,    -1,   192,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    92,    93,    94,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   111,   112,   113,    -1,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,    -1,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
   158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
   168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
   178,    44,    -1,    46,    -1,    -1,    -1,    -1,    -1,   187,
   188,    -1,    -1,    -1,   192,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,
   113,    -1,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,    -1,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
   163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
   173,   174,   175,   176,   177,   178,    44,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   187,   188,    -1,    -1,    -1,   192,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   111,   112,   113,    -1,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,    -1,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
   158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
   168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
   178,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   187,
   188,    -1,    -1,    -1,   192
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */

/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif



/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 3:
{ context_checkGlobalScope (); ;
    break;}
case 4:
{ context_checkGlobalScope (); ;
    break;}
case 5:
{ uentry_clearDecl (); ;
    break;}
case 6:
{ uentry_clearDecl (); ;
    break;}
case 7:
{ uentry_clearDecl (); ;
    break;}
case 8:
{ uentry_clearDecl (); ;
    break;}
case 9:
{ uentry_clearDecl (); ;
    break;}
case 10:
{ uentry_checkDecl (); exprNode_free (yyvsp[0].expr); ;
    break;}
case 11:
{ uentry_clearDecl (); /* evans 2002-02-08: okay to have a null statement */ ;
    break;}
case 12:
{ uentry_clearDecl (); ;
    break;}
case 13:
{ checkConstant (yyvsp[-6].qtyp, yyvsp[-4].ntyp); ;
    break;}
case 14:
{ checkValueConstant (yyvsp[-9].qtyp, yyvsp[-7].ntyp, yyvsp[-3].expr) ; ;
    break;}
case 15:
{ context_enterFunctionHeader (); ;
    break;}
case 16:
{ 
     declareStaticFunction (yyvsp[-2].ntyp); context_quietExitFunction (); 
     context_exitFunctionHeader (); 
   ;
    break;}
case 17:
{ 
     qtype qint = qtype_create (ctype_int);
     yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, qint);
     qtype_free (qint);
   ;
    break;}
case 18:
{ yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, yyvsp[-2].qtyp); ;
    break;}
case 20:
{ yyval.ntyp = yyvsp[0].ntyp; qtype_adjustPointers (yyvsp[-1].count, idDecl_getTyp (yyval.ntyp)); ;
    break;}
case 21:
{ yyval.ntyp = idDecl_create (yyvsp[0].cname, qtype_unknown ()); ;
    break;}
case 22:
{ yyval.ntyp = idDecl_expectFunction (yyvsp[-2].ntyp); ;
    break;}
case 23:
{ yyval.ntyp = idDecl_replaceCtype (yyvsp[-2].ntyp, ctype_makeInnerArray (idDecl_getCtype (yyvsp[-2].ntyp))); ;
    break;}
case 24:
{
     exprNode_findValue (yyvsp[-2].expr);
     idDecl_notExpectingFunction (yyvsp[-5].ntyp);

     if (exprNode_hasValue (yyvsp[-2].expr)) 
       {
	 yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ctype_makeInnerFixedArray (idDecl_getCtype (yyvsp[-5].ntyp), 
								  exprNode_getLongValue (yyvsp[-2].expr)));
       } 
     else
       {
	 yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ctype_makeInnerArray (idDecl_getCtype (yyvsp[-5].ntyp))); 
       }
   ;
    break;}
case 25:
{ setCurrentParams (uentryList_missingParams); ;
    break;}
case 26:
{ /* need to support globals and modifies here! */
     ctype ct = ctype_makeFunction (idDecl_getCtype (yyvsp[-5].ntyp), 
				    uentryList_makeMissingParams ());
     
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ct);
     idDecl_addClauses (yyval.ntyp, yyvsp[0].funcclauselist);
     context_popLoc ();
     /*drl 7/25/01 added*/
     setImplictfcnConstraints();
   ;
    break;}
case 27:
{ setCurrentParams (yyvsp[-1].entrylist); ;
    break;}
case 28:
{ setImplictfcnConstraints ();
     clearCurrentParams ();
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-6].ntyp, ctype_makeFunction (idDecl_getCtype (yyvsp[-6].ntyp), yyvsp[-3].entrylist));
     idDecl_addClauses (yyval.ntyp, yyvsp[0].funcclauselist);
     context_popLoc (); 
   ;
    break;}
case 29:
{ yyval.ntyp = idDecl_create (yyvsp[0].cname, qtype_unknown ()); ;
    break;}
case 30:
{ yyval.ntyp = idDecl_expectFunction (yyvsp[-2].ntyp); ;
    break;}
case 31:
{ yyval.ntyp = idDecl_replaceCtype (yyvsp[-2].ntyp, ctype_makeInnerArray (idDecl_getCtype (yyvsp[-2].ntyp))); ;
    break;}
case 32:
{ 
     int value;

     if (exprNode_hasValue (yyvsp[-2].expr) 
	 && multiVal_isInt (exprNode_getValue (yyvsp[-2].expr)))
       {
	 value = (int) multiVal_forceInt (exprNode_getValue (yyvsp[-2].expr));
       }
     else
       {
	 value = 0;
       }

     yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ctype_makeInnerFixedArray (idDecl_getCtype (yyvsp[-5].ntyp), value));
   ;
    break;}
case 33:
{ setCurrentParams (uentryList_missingParams); ;
    break;}
case 34:
{
     ctype ct = ctype_makeFunction (idDecl_getCtype (yyvsp[-5].ntyp), 
				    uentryList_makeMissingParams ());
     
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ct);
     idDecl_addClauses (yyval.ntyp, yyvsp[0].funcclauselist);
     context_popLoc (); 
   ;
    break;}
case 35:
{ setCurrentParams (yyvsp[-1].entrylist); ;
    break;}
case 36:
{ 
     clearCurrentParams ();
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-6].ntyp, ctype_makeFunction (idDecl_getCtype (yyvsp[-6].ntyp), yyvsp[-3].entrylist));
     idDecl_addClauses (yyval.ntyp, yyvsp[0].funcclauselist);
     context_popLoc (); 
   ;
    break;}
case 37:
{ setCurrentParams (yyvsp[-1].entrylist); ;
    break;}
case 38:
{ clearCurrentParams (); ;
    break;}
case 39:
{ declareCIter (yyvsp[-8].cname, yyvsp[-6].entrylist); ;
    break;}
case 40:
{ exprNode_checkMacroBody (yyvsp[-1].expr); ;
    break;}
case 41:
{ exprNode_checkIterBody (yyvsp[-1].expr); ;
    break;}
case 42:
{ exprNode_checkIterEnd (yyvsp[-1].expr); ;
    break;}
case 43:
{ exprChecks_checkEmptyMacroBody (); ;
    break;}
case 44:
{ clabstract_declareFunction (yyvsp[0].ntyp); ;
    break;}
case 45:
{ yyval.msconstraint = metaStateConstraint_create (yyvsp[-2].msspec, yyvsp[0].msexpr); ;
    break;}
case 46:
{ cscanner_expectingMetaStateName (); ;
    break;}
case 47:
{ cscanner_clearExpectingMetaStateName ();
      yyval.msspec = metaStateSpecifier_create (yyvsp[-3].sr, yyvsp[0].msinfo); ;
    break;}
case 48:
{ cscanner_expectingMetaStateName (); ;
    break;}
case 49:
{ cscanner_clearExpectingMetaStateName ();
      yyval.msspec = metaStateSpecifier_createElipsis (yyvsp[0].msinfo); ;
    break;}
case 50:
{ yyval.msexpr = metaStateExpression_create (yyvsp[0].msspec); ;
    break;}
case 51:
{ yyval.msexpr = metaStateExpression_createMerge (yyvsp[-2].msspec, yyvsp[0].msexpr); ;
    break;}
case 55:
{ yyval.conL = constraintList_add (yyvsp[0].conL, yyvsp[-2].con); ;
    break;}
case 56:
{ yyval.conL = constraintList_single (yyvsp[0].con); ;
    break;}
case 57:
{
 yyval.con = makeConstraintParse3 (yyvsp[-2].conE, yyvsp[-1].tok, yyvsp[0].conE);
 DPRINTF(("Done BufConstraint1\n")); ;
    break;}
case 64:
{yyval.conE = constraintExpr_parseMakeUnaryOp (yyvsp[-3].tok, yyvsp[-1].conE);  DPRINTF( ("Got BufConstraintExpr UNary Op ") ); ;
    break;}
case 65:
{
   DPRINTF( ("Got BufConstraintExpr BINary Op ") );
   yyval.conE = constraintExpr_parseMakeBinaryOp (yyvsp[-3].conE, yyvsp[-2].tok, yyvsp[-1].conE); ;
    break;}
case 66:
{ yyval.conE =  constraintExpr_makeTermsRef (yyvsp[0].sr);;
    break;}
case 67:
{ yyval.conE = constraintExpr_makeIntLiteral (exprNode_getLongValue (yyvsp[0].expr)); ;
    break;}
case 68:
{ /*@-onlytrans@*/ yyval.sr = checkbufferConstraintClausesId (yyvsp[0].entry); /*@=onlytrans@*/ /*@i523@*/ ;
    break;}
case 69:
{ yyval.sr = fixStateClausesId (yyvsp[0].cname); ;
    break;}
case 70:
{ yyval.sr = sRef_makeAnyArrayFetch (yyvsp[-2].sr); ;
    break;}
case 71:
{
    /*
    char *t; int c; 
    t =  cstring_toCharsSafe (exprNode_unparse($3)); 
    c = atoi( t );
    */
    yyval.sr = sRef_makeArrayFetchKnown (yyvsp[-3].sr, exprNode_getLongValue (yyvsp[-1].expr));
  ;
    break;}
case 72:
{ yyval.sr = sRef_constructPointer (yyvsp[0].sr); ;
    break;}
case 73:
{ yyval.sr = yyvsp[-1].sr; ;
    break;}
case 74:
{ cstring_markOwned (yyvsp[0].cname); yyval.sr = sRef_buildField (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 75:
{ cstring_markOwned (yyvsp[0].cname); yyval.sr = sRef_makeArrow (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 79:
{ yyval.funcclauselist = functionClauseList_new (); ;
    break;}
case 80:
{ yyval.funcclauselist = functionClauseList_prepend (yyvsp[0].funcclauselist, yyvsp[-1].funcclause); ;
    break;}
case 81:
{ yyval.funcclauselist = functionClauseList_new (); ;
    break;}
case 82:
{ yyval.funcclauselist = functionClauseList_prepend (yyvsp[0].funcclauselist, yyvsp[-1].funcclause); ;
    break;}
case 83:
{ yyval.funcclause = functionClause_createGlobals (yyvsp[0].globsclause); ;
    break;}
case 84:
{ yyval.funcclause = functionClause_createModifies (yyvsp[0].modsclause); ;
    break;}
case 85:
{ yyval.funcclause = functionClause_createModifies (yyvsp[0].modsclause); ;
    break;}
case 86:
{ yyval.funcclause = functionClause_createState (yyvsp[0].stateclause); ;
    break;}
case 87:
{ yyval.funcclause = yyvsp[0].funcclause; ;
    break;}
case 88:
{ yyval.funcclause = functionClause_createWarn (yyvsp[0].warnclause); ;
    break;}
case 89:
{ yyval.funcclause = functionClause_createGlobals (yyvsp[0].globsclause); ;
    break;}
case 90:
{ yyval.funcclause = functionClause_createModifies (yyvsp[0].modsclause); ;
    break;}
case 91:
{ yyval.funcclause = functionClause_createModifies (yyvsp[0].modsclause); ;
    break;}
case 92:
{ yyval.funcclause = functionClause_createState (yyvsp[0].stateclause); ;
    break;}
case 93:
{ yyval.funcclause = yyvsp[0].funcclause; ;
    break;}
case 94:
{ yyval.funcclause = functionClause_createWarn (yyvsp[0].warnclause); ;
    break;}
case 95:
{ yyval.globsclause = yyvsp[-1].globsclause; ;
    break;}
case 96:
{ setProcessingGlobalsList (); ;
    break;}
case 97:
{ 
     unsetProcessingGlobals (); 
     yyval.globsclause = globalsClause_create (yyvsp[-3].tok, yyvsp[-1].globset); 
   ;
    break;}
case 98:
{ yyval.modsclause = modifiesClause_createNoMods (yyvsp[0].tok); ;
    break;}
case 99:
{ yyval.modsclause = yyvsp[-1].modsclause; ;
    break;}
case 100:
{
     context_setProtectVars (); enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;
    break;}
case 101:
{ 
     exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
     yyval.modsclause = modifiesClause_create (yyvsp[-2].tok, yyvsp[0].srset);
   ;
    break;}
case 102:
{ yyval.flagspec = flagSpec_createPlain (yyvsp[0].cname); ;
    break;}
case 103:
{ yyval.flagspec = flagSpec_createOr (yyvsp[-2].cname, yyvsp[0].flagspec); ;
    break;}
case 106:
{ yyval.warnclause = warnClause_undefined; ;
    break;}
case 107:
{ yyval.warnclause = yyvsp[-1].warnclause; ;
    break;}
case 108:
{      
     llassert (exprNode_knownStringValue (yyvsp[0].expr));
     yyval.warnclause = warnClause_create (yyvsp[-2].tok, yyvsp[-1].flagspec, cstring_copy (multiVal_forceString (exprNode_getValue (yyvsp[0].expr)))); 
     exprNode_free (yyvsp[0].expr);
   ;
    break;}
case 109:
{ yyval.warnclause = warnClause_create (yyvsp[-1].tok, yyvsp[0].flagspec, cstring_undefined); ;
    break;}
case 110:
{ yyval.globset = globSet_single (yyvsp[0].sr); ;
    break;}
case 111:
{ yyval.globset = globSet_insert (yyvsp[-2].globset, yyvsp[0].sr); ;
    break;}
case 112:
{ yyval.sr = clabstract_createGlobal (yyvsp[0].sr, yyvsp[-1].tquallist); ;
    break;}
case 113:
{ yyval.tquallist = qualList_undefined; ;
    break;}
case 114:
{ yyval.tquallist = qualList_add (yyvsp[0].tquallist, yyvsp[-1].typequal); ;
    break;}
case 115:
{ yyval.sr = uentry_getSref (yyvsp[0].entry); ;
    break;}
case 116:
{ yyval.sr = clabstract_unrecognizedGlobal (yyvsp[0].cname); ;
    break;}
case 117:
{ yyval.sr = clabstract_checkGlobal (yyvsp[0].expr); ;
    break;}
case 118:
{ yyval.typequal = qual_createUndef (); ;
    break;}
case 119:
{ yyval.typequal = qual_createKilled (); ;
    break;}
case 120:
{ yyval.typequal = qual_createOut (); ;
    break;}
case 121:
{ yyval.typequal = qual_createIn (); ;
    break;}
case 122:
{ yyval.typequal = qual_createPartial (); ;
    break;}
case 130:
{ 
     /**!!! deal with fred; fred (int); declarations! **/
     qtype qint = qtype_create (ctype_int); 
     yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, qint);
     qtype_free (qint);
   ;
    break;}
case 131:
{ yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, yyvsp[-2].qtyp); ;
    break;}
case 132:
{ checkDoneParams (); context_enterInnerContext (); ;
    break;}
case 133:
{  
     exprNode_checkFunctionBody (yyvsp[0].expr); yyval.expr = yyvsp[0].expr; 
     context_exitInner (yyvsp[0].expr); 
   ;
    break;}
case 134:
{ context_enterOldStyleScope (); ;
    break;}
case 135:
{ oldStyleDoneParams (); context_enterInnerContext (); ;
    break;}
case 136:
{
     exprNode_checkFunctionBody (yyvsp[0].expr); 
     yyval.expr = yyvsp[0].expr; /* oldstyle */ 
     context_exitInner (yyvsp[0].expr);
   ;
    break;}
case 137:
{ 
     context_setFunctionDefined (exprNode_loc (yyvsp[0].expr)); 
     exprNode_checkFunction (context_getHeader (),  yyvsp[0].expr); 
     /* DRL 8 8 2000 */
     
     context_exitFunction ();
   ;
    break;}
case 138:
{ yyval.srset = yyvsp[-1].srset; ;
    break;}
case 139:
{ yyval.srset = sRefSet_new (); ;
    break;}
case 140:
{ yyval.sr = uentry_getSref (yyvsp[0].entry); checkModifiesId (yyvsp[0].entry); ;
    break;}
case 141:
{ yyval.sr = fixModifiesId (yyvsp[0].cname); ;
    break;}
case 142:
{ yyval.sr = modListArrayFetch (yyvsp[-2].sr, sRef_undefined); ;
    break;}
case 143:
{ yyval.sr = modListArrayFetch (yyvsp[-3].sr, yyvsp[-1].sr); ;
    break;}
case 144:
{ yyval.sr = modListPointer (yyvsp[0].sr); ;
    break;}
case 145:
{ yyval.sr = yyvsp[-1].sr; ;
    break;}
case 146:
{ yyval.sr = modListFieldAccess (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 147:
{ yyval.sr = modListArrowAccess (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 148:
{ yyval.sr = yyvsp[0].sr; ;
    break;}
case 149:
{ yyval.sr = sRef_makeUnknown (); /* sRef_makeConstant ($1); ? */ ;
    break;}
case 150:
{ yyval.srset = sRefSet_single (yyvsp[0].sr); ;
    break;}
case 151:
{ yyval.srset = sRefSet_insert (yyvsp[-2].srset, yyvsp[0].sr); ;
    break;}
case 152:
{ yyval.sr = checkStateClausesId (yyvsp[0].entry); ;
    break;}
case 153:
{ yyval.sr = fixStateClausesId (yyvsp[0].cname); ;
    break;}
case 154:
{ yyval.sr = sRef_makeAnyArrayFetch (yyvsp[-2].sr); ;
    break;}
case 155:
{ yyval.sr = sRef_makeAnyArrayFetch (yyvsp[-3].sr); ;
    break;}
case 156:
{ yyval.sr = sRef_constructPointer (yyvsp[0].sr); ;
    break;}
case 157:
{ yyval.sr = yyvsp[-1].sr; ;
    break;}
case 158:
{ cstring_markOwned (yyvsp[0].cname);
					    yyval.sr = sRef_buildField (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 159:
{ cstring_markOwned (yyvsp[0].cname);
                                            yyval.sr = sRef_makeArrow (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 160:
{ yyval.srset = sRefSet_undefined ;
    break;}
case 162:
{ if (sRef_isValid (yyvsp[0].sr)) { yyval.srset = sRefSet_single (yyvsp[0].sr); } 
      else { yyval.srset = sRefSet_undefined; } 
    ;
    break;}
case 163:
{ if (sRef_isValid (yyvsp[0].sr))
	{
	  yyval.srset = sRefSet_insert (yyvsp[-2].srset, yyvsp[0].sr); 
	}
      else
	{
	  yyval.srset = yyvsp[-2].srset;
	}
    ;
    break;}
case 164:
{ yyval.expr = exprNode_fromIdentifier (yyvsp[0].entry); ;
    break;}
case 165:
{ yyval.expr = exprNode_fromUIO (yyvsp[0].cname); ;
    break;}
case 167:
{ yyval.expr = exprNode_addParens (yyvsp[-2].tok, yyvsp[-1].expr); ;
    break;}
case 168:
{ yyval.expr = exprNode_fromIdentifier (coerceId (yyvsp[0].cname)); ;
    break;}
case 169:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 170:
{ exprChecks_inCompoundStatementExpression (); ;
    break;}
case 171:
{ exprChecks_leaveCompoundStatementExpression (); yyval.expr = exprNode_compoundStatementExpression (yyvsp[-3].tok, yyvsp[-1].expr); ;
    break;}
case 173:
{ yyval.expr = exprNode_arrayFetch (yyvsp[-3].expr, yyvsp[-1].expr); ;
    break;}
case 174:
{ yyval.expr = exprNode_functionCall (yyvsp[-2].expr, exprNodeList_new ()); ;
    break;}
case 175:
{ yyval.expr = exprNode_functionCall (yyvsp[-3].expr, yyvsp[-1].exprlist); ;
    break;}
case 176:
{ yyval.expr = exprNode_vaArg (yyvsp[-5].tok, yyvsp[-3].expr, yyvsp[-1].qtyp); ;
    break;}
case 177:
{ yyval.expr = exprNode_fieldAccess (yyvsp[-4].expr, yyvsp[-2].tok, yyvsp[-1].cname); ;
    break;}
case 178:
{ yyval.expr = exprNode_arrowAccess (yyvsp[-4].expr, yyvsp[-2].tok, yyvsp[-1].cname); ;
    break;}
case 179:
{ yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 180:
{ yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 181:
{ /* added for C99 */ yyval.expr = exprNode_undefined; /*@i87 no checking */ ;
    break;}
case 182:
{ yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 183:
{ yyval.exprlist = exprNodeList_push (yyvsp[-2].exprlist, yyvsp[0].expr); ;
    break;}
case 185:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 186:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 187:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 188:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 189:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 190:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 191:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 192:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 193:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 194:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 195:
{ yyval.cstringlist = cstringList_add (yyvsp[-2].cstringlist, yyvsp[0].cname); ;
    break;}
case 196:
{ yyval.cstringlist = yyvsp[-3].cstringlist; ;
    break;}
case 197:
{ yyval.cstringlist = cstringList_single (yyvsp[0].cname); ;
    break;}
case 198:
{ yyval.expr = exprNode_offsetof (yyvsp[-5].qtyp, yyvsp[-2].cstringlist); ;
    break;}
case 199:
{ context_setProtectVars (); ;
    break;}
case 200:
{ context_sizeofReleaseVars (); yyval.expr = yyvsp[0].expr; ;
    break;}
case 201:
{ yyval.expr = exprNode_sizeofType (yyvsp[-1].qtyp); ;
    break;}
case 202:
{ yyval.expr = exprNode_sizeofExpr (yyvsp[0].expr); ;
    break;}
case 203:
{ yyval.expr = exprNode_alignofType (yyvsp[-1].qtyp); ;
    break;}
case 204:
{ yyval.expr = exprNode_alignofExpr (yyvsp[0].expr); ;
    break;}
case 206:
{ yyval.expr = exprNode_cast (yyvsp[-3].tok, yyvsp[0].expr, yyvsp[-2].qtyp); ;
    break;}
case 208:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 209:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 210:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 212:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 213:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 215:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 216:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 218:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 219:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 220:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 221:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 223:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 224:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 226:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 228:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 230:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 232:
{ exprNode_produceGuards (yyvsp[-1].expr); 
     context_enterAndClause (yyvsp[-1].expr); 
   ;
    break;}
case 233:
{ 
     yyval.expr = exprNode_op (yyvsp[-3].expr, yyvsp[0].expr, yyvsp[-2].tok); 
     context_exitAndClause (yyval.expr, yyvsp[0].expr);
   ;
    break;}
case 235:
{ 
     exprNode_produceGuards (yyvsp[-1].expr);
     context_enterOrClause (yyvsp[-1].expr); 
   ;
    break;}
case 236:
{ 
     yyval.expr = exprNode_op (yyvsp[-3].expr, yyvsp[0].expr, yyvsp[-2].tok); 
     context_exitOrClause (yyval.expr, yyvsp[0].expr);
   ;
    break;}
case 238:
{ exprNode_produceGuards (yyvsp[-1].expr); context_enterTrueClause (yyvsp[-1].expr); ;
    break;}
case 239:
{ context_enterFalseClause (yyvsp[-4].expr); ;
    break;}
case 240:
{ yyval.expr = exprNode_cond (yyvsp[-6].expr, yyvsp[-3].expr, yyvsp[0].expr); context_exitClause (yyvsp[-6].expr, yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 242:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 243:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 244:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 245:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 246:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 247:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 248:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 249:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 250:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 251:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 252:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 254:
{ yyval.expr = exprNode_comma (yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 255:
{ yyval.expr = exprNode_undefined; ;
    break;}
case 258:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 259:
{ doVaDcl (); yyval.expr = exprNode_makeError (); ;
    break;}
case 260:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 261:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 262:
{
     setProcessingVars (yyvsp[-3].qtyp); 
     processNamedDecl (yyvsp[-1].ntyp); 
   ;
    break;}
case 263:
{ 
     unsetProcessingVars (); 
     yyval.expr = exprNode_makeEmptyInitialization (yyvsp[-6].ntyp); 
     DPRINTF (("Empty initialization: %s", exprNode_unparse (yyval.expr)));
   ;
    break;}
case 264:
{ setProcessingVars (yyvsp[-4].qtyp); processNamedDecl (yyvsp[-2].ntyp); ;
    break;}
case 265:
{ yyval.expr = exprNode_concat (yyvsp[-2].expr, exprNode_makeInitialization (yyvsp[-8].ntyp, yyvsp[-3].expr)); 
     unsetProcessingVars ();
   ;
    break;}
case 266:
{ 
     processNamedDecl (yyvsp[-1].ntyp); 
     yyval.expr = exprNode_makeEmptyInitialization (yyvsp[-1].ntyp);
   ;
    break;}
case 267:
{ processNamedDecl (yyvsp[-2].ntyp); ;
    break;}
case 268:
{ yyval.expr = exprNode_makeInitialization (yyvsp[-5].ntyp, yyvsp[0].expr); ;
    break;}
case 269:
{ setProcessingTypedef (yyvsp[0].qtyp); ;
    break;}
case 270:
{ clabstract_declareType (yyvsp[-3].exprlist, yyvsp[-1].warnclause); ;
    break;}
case 271:
{ /* in the ANSI grammar, semantics unclear */ ;
    break;}
case 272:
{ /* in the ANSI grammar, semantics unclear */ ;
    break;}
case 273:
{ g_expectingTypeName = TRUE; ;
    break;}
case 274:
{ g_expectingTypeName = TRUE; context_pushLoc (); ;
    break;}
case 275:
{ yyval.exprlist = yyvsp[-1].exprlist; ;
    break;}
case 276:
{ yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 277:
{ yyval.exprlist = exprNodeList_push (yyvsp[-3].exprlist, yyvsp[0].expr); ;
    break;}
case 278:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 279:
{ yyval.expr = exprNode_concat (yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 281:
{ yyval.expr = exprNode_makeInitBlock (yyvsp[-2].tok, yyvsp[-1].exprlist); ;
    break;}
case 282:
{ yyval.expr = exprNode_makeInitBlock (yyvsp[-3].tok, yyvsp[-2].exprlist); ;
    break;}
case 283:
{ yyval.expr = exprNode_undefined; ;
    break;}
case 284:
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 285:
{ yyval.expr = exprNode_undefined; 
                                     /* gcc extension, obsolete since 2.5 */ ;
    break;}
case 286:
{ yyval.expr = exprNode_undefined; ;
    break;}
case 287:
{ yyval.expr = exprNode_undefined; ;
    break;}
case 288:
{ yyval.expr = exprNode_undefined; ;
    break;}
case 289:
{ yyval.expr = exprNode_undefined; ;
    break;}
case 290:
{ yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 291:
{ yyval.exprlist = exprNodeList_push (yyvsp[-2].exprlist, yyvsp[0].expr); ;
    break;}
case 292:
{ setStorageClass (SCEXTERN); yyval.typequal = qual_createExtern (); ;
    break;}
case 293:
{ yyval.typequal = qual_createInline (); ;
    break;}
case 294:
{ setStorageClass (SCSTATIC); yyval.typequal = qual_createStatic (); ;
    break;}
case 295:
{ yyval.typequal = qual_createAuto (); ;
    break;}
case 296:
{ yyval.typequal = qual_createRegister (); ;
    break;}
case 297:
{ yyval.stateclause = yyvsp[-1].stateclause; ;
    break;}
case 298:
{
     context_setProtectVars (); 
     enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;
    break;}
case 299:
{ 
     exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
     yyval.stateclause = stateClause_createPlain (yyvsp[-5].tok, yyvsp[-2].srset);
   ;
    break;}
case 300:
{ yyval.funcclause = yyvsp[-1].funcclause; ;
    break;}
case 301:
{ yyval.tok = yyvsp[-1].tok; context_enterFunctionHeader (); ;
    break;}
case 302:
{
     context_exitFunctionHeader ();
     context_setProtectVars (); 
     enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;
    break;}
case 303:
{ 
     exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
     yyval.funcclause = functionClause_createState (stateClause_create (yyvsp[-5].tok, yyvsp[-4].typequal, yyvsp[-2].srset));
   ;
    break;}
case 304:
{
     context_setProtectVars (); 
     enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;
    break;}
case 305:
{
     context_exitFunctionHeader ();
     exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
     DPRINTF (("done optGlobBufConstraintsAux\n"));

     if (lltok_isEnsures (yyvsp[-4].tok)) 
       {
	 yyval.funcclause = functionClause_createEnsures (yyvsp[-2].fcnconstraint);
       }
     else if (lltok_isRequires (yyvsp[-4].tok))
       {
	 yyval.funcclause = functionClause_createRequires (yyvsp[-2].fcnconstraint);
       }
     else
       {
	 BADBRANCH;
       }

     DPRINTF (("FunctionclauseS: %s", functionClause_unparse (yyval.funcclause)));
   ;
    break;}
case 306:
{ yyval.fcnconstraint = functionConstraint_createBufferConstraint (yyvsp[0].conL); ;
    break;}
case 307:
{ yyval.fcnconstraint = functionConstraint_createMetaStateConstraint (yyvsp[0].msconstraint); DPRINTF (("Made constraint: %s", functionConstraint_unparse (yyval.fcnconstraint))); ;
    break;}
case 308:
{ yyval.typequal = qual_createExits (); ;
    break;}
case 309:
{ yyval.typequal = qual_createMayExit (); ;
    break;}
case 310:
{ yyval.typequal = qual_createTrueExit (); ;
    break;}
case 311:
{ yyval.typequal = qual_createFalseExit (); ;
    break;}
case 312:
{ yyval.typequal = qual_createNeverExit (); ;
    break;}
case 313:
{ yyval.typequal = qual_createChecked (); ;
    break;}
case 314:
{ yyval.typequal = qual_createCheckMod (); ;
    break;}
case 315:
{ yyval.typequal = qual_createUnchecked (); ;
    break;}
case 316:
{ yyval.typequal = qual_createCheckedStrict (); ;
    break;}
case 317:
{ yyval.typequal = qual_createOwned (); ;
    break;}
case 318:
{ yyval.typequal = qual_createDependent (); ;
    break;}
case 319:
{ yyval.typequal = qual_createYield (); ;
    break;}
case 320:
{ yyval.typequal = qual_createTemp (); ;
    break;}
case 321:
{ yyval.typequal = qual_createOnly (); ;
    break;}
case 322:
{ yyval.typequal = qual_createKeep (); ;
    break;}
case 323:
{ yyval.typequal = qual_createKept (); ;
    break;}
case 324:
{ yyval.typequal = qual_createShared (); ;
    break;}
case 325:
{ yyval.typequal = qual_createUnique (); ;
    break;}
case 326:
{ yyval.typequal = qual_createNull (); ;
    break;}
case 327:
{ yyval.typequal = qual_createIsNull (); ;
    break;}
case 328:
{ yyval.typequal = qual_createRelNull (); ;
    break;}
case 329:
{ yyval.typequal = qual_createNotNull (); ;
    break;}
case 330:
{ yyval.typequal = qual_createExposed (); ;
    break;}
case 331:
{ yyval.typequal = qual_createObserver (); ;
    break;}
case 332:
{ yyval.typequal = qual_createNullTerminated (); ;
    break;}
case 333:
{ yyval.typequal = qual_createMetaState (yyvsp[0].annotation); ;
    break;}
case 334:
{ yyval.typequal = qual_createReturned (); ;
    break;}
case 335:
{ yyval.typequal = qual_createSef (); ;
    break;}
case 336:
{ yyval.typequal = qual_createUnused (); ;
    break;}
case 337:
{ yyval.typequal = qual_createExternal (); ;
    break;}
case 338:
{ yyval.typequal = qual_createTrueNull (); ;
    break;}
case 339:
{ yyval.typequal = qual_createFalseNull (); ;
    break;}
case 340:
{ yyval.typequal = qual_createAbstract (); ;
    break;}
case 341:
{ yyval.typequal = qual_createConcrete (); ;
    break;}
case 342:
{ yyval.typequal = qual_createMutable (); ;
    break;}
case 343:
{ yyval.typequal = qual_createImmutable (); ;
    break;}
case 344:
{ yyval.typequal = qual_createRefCounted (); ;
    break;}
case 345:
{ yyval.typequal = qual_createRefs (); ;
    break;}
case 346:
{ yyval.typequal = qual_createKillRef (); ;
    break;}
case 347:
{ yyval.typequal = qual_createRelDef (); ;
    break;}
case 348:
{ yyval.typequal = qual_createNewRef (); ;
    break;}
case 349:
{ yyval.typequal = qual_createTempRef (); ;
    break;}
case 350:
{ yyval.typequal = qual_createShort (); ;
    break;}
case 351:
{ yyval.typequal = qual_createLong (); ;
    break;}
case 352:
{ yyval.typequal = qual_createSigned (); ;
    break;}
case 353:
{ yyval.typequal = qual_createUnsigned (); ;
    break;}
case 354:
{ yyval.typequal = qual_createOut (); ;
    break;}
case 355:
{ yyval.typequal = qual_createIn (); ;
    break;}
case 356:
{ yyval.typequal = qual_createPartial (); ;
    break;}
case 357:
{ yyval.typequal = qual_createSpecial (); ;
    break;}
case 358:
{ yyval.typequal = qual_createConst (); ;
    break;}
case 359:
{ yyval.typequal = qual_createVolatile (); ;
    break;}
case 360:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 361:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 362:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 363:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 364:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 365:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 366:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 367:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 368:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 375:
{ yyval.ctyp = ctype_makeAnytype (); ;
    break;}
case 376:
{ yyval.ctyp = ctype_anyintegral; ;
    break;}
case 377:
{ yyval.ctyp = ctype_unsignedintegral; ;
    break;}
case 378:
{ yyval.ctyp = ctype_signedintegral; ;
    break;}
case 382:
{ yyval.ctyp = ctype_fromQual (yyvsp[-1].typequal); ;
    break;}
case 383:
{ yyval.qtyp = qtype_resolve (yyvsp[-1].qtyp); ;
    break;}
case 384:
{ yyval.qtyp = yyvsp[0].qtyp; ;
    break;}
case 385:
{ yyval.qtyp = qtype_mergeAlt (yyvsp[-3].qtyp, yyvsp[-1].qtyp); ;
    break;}
case 387:
{ yyval.qtyp = qtype_mergeAlt (yyvsp[-2].qtyp, yyvsp[0].qtyp); ;
    break;}
case 388:
{ yyval.qtyp = qtype_addQual (yyvsp[0].qtyp, yyvsp[-1].typequal); ;
    break;}
case 389:
{ yyval.qtyp = qtype_addQual (yyvsp[0].qtyp, yyvsp[-1].typequal); ;
    break;}
case 390:
{ yyval.qtyp = qtype_combine (yyvsp[0].qtyp, yyvsp[-1].ctyp); ;
    break;}
case 391:
{ yyval.qtyp = qtype_unknown (); ;
    break;}
case 392:
{ yyval.qtyp = yyvsp[0].qtyp; ;
    break;}
case 393:
{ yyval.conL = constraintList_undefined; ;
    break;}
case 394:
{ sRef_setGlobalScopeSafe (); ;
    break;}
case 395:
{ sRef_clearGlobalScopeSafe (); ;
    break;}
case 396:
{ ctype ct; ct = declareStruct (yyvsp[-9].cname, yyvsp[-4].flist); /* setGlobalStructInfo(ct, $12);*/ yyval.ctyp = ct; ;
    break;}
case 397:
{ sRef_setGlobalScopeSafe (); ;
    break;}
case 398:
{ sRef_clearGlobalScopeSafe (); ;
    break;}
case 399:
{ yyval.ctyp = declareUnion (yyvsp[-8].cname, yyvsp[-3].flist); ;
    break;}
case 400:
{ yyval.ctyp = declareStruct (yyvsp[-3].cname, uentryList_new ()); ;
    break;}
case 401:
{ yyval.ctyp = declareUnion (yyvsp[-3].cname, uentryList_new ()); ;
    break;}
case 402:
{ sRef_setGlobalScopeSafe (); ;
    break;}
case 403:
{ sRef_clearGlobalScopeSafe (); ;
    break;}
case 404:
{ yyval.ctyp = declareUnnamedStruct (yyvsp[-3].flist); ;
    break;}
case 405:
{ sRef_setGlobalScopeSafe (); ;
    break;}
case 406:
{ sRef_clearGlobalScopeSafe (); ;
    break;}
case 407:
{ yyval.ctyp = declareUnnamedUnion (yyvsp[-3].flist); ;
    break;}
case 408:
{ yyval.ctyp = ctype_createUnnamedStruct (uentryList_new ()); ;
    break;}
case 409:
{ yyval.ctyp = ctype_createUnnamedUnion (uentryList_new ()); ;
    break;}
case 410:
{ yyval.ctyp = handleStruct (yyvsp[-1].cname); ;
    break;}
case 411:
{ yyval.ctyp = handleUnion (yyvsp[-1].cname); ;
    break;}
case 412:
{ g_expectingTypeName = FALSE; ;
    break;}
case 414:
{ yyval.flist = uentryList_undefined; /* bogus! */ ;
    break;}
case 415:
{ yyval.flist = uentryList_mergeFields (yyvsp[-1].flist, yyvsp[0].flist); ;
    break;}
case 416:
{ yyval.flist = fixUentryList (yyvsp[-2].ntyplist, yyvsp[-4].qtyp); ;
    break;}
case 417:
{ yyval.flist = fixUnnamedDecl (yyvsp[-2].qtyp); ;
    break;}
case 418:
{ yyval.ntyplist = idDeclList_singleton (yyvsp[-1].ntyp); ;
    break;}
case 419:
{ yyval.ntyplist = idDeclList_add (yyvsp[-3].ntyplist, yyvsp[-1].ntyp); ;
    break;}
case 420:
{ yyval.ntyp = yyvsp[0].ntyp; ;
    break;}
case 421:
{ yyval.ntyp = idDecl_undefined; ;
    break;}
case 422:
{ yyval.ntyp = yyvsp[-3].ntyp; ;
    break;}
case 423:
{ yyval.ctyp = declareUnnamedEnum (yyvsp[-2].enumnamelist); ;
    break;}
case 424:
{ context_pushLoc (); ;
    break;}
case 425:
{ context_popLoc (); yyval.ctyp = declareEnum (yyvsp[-5].cname, yyvsp[-2].enumnamelist); ;
    break;}
case 426:
{ yyval.ctyp = handleEnum (yyvsp[-1].cname); ;
    break;}
case 427:
{ yyval.enumnamelist = enumNameList_single (yyvsp[0].cname); ;
    break;}
case 428:
{ yyval.enumnamelist = enumNameList_push (yyvsp[-2].enumnamelist, yyvsp[0].cname); ;
    break;}
case 430:
{ uentry ue = uentry_makeEnumConstant (yyvsp[0].cname, ctype_unknown);
     usymtab_supGlobalEntry (ue);
     yyval.cname = yyvsp[0].cname;
   ;
    break;}
case 431:
{ uentry ue = uentry_makeEnumInitializedConstant (yyvsp[-3].cname, ctype_unknown, yyvsp[0].expr);
     usymtab_supGlobalEntry (ue);
     yyval.cname = yyvsp[-3].cname; 
   ;
    break;}
case 433:
{ yyval.ntyp = idDecl_create (cstring_undefined, qtype_create (yyvsp[0].ctyp)); ;
    break;}
case 434:
{ 
     qtype qt = qtype_unknown ();

     qtype_adjustPointers (yyvsp[-1].count, qt);
     yyval.ntyp = idDecl_create (cstring_copy (LastIdentifier ()), qt);
   ;
    break;}
case 435:
{ yyval.ntyp = yyvsp[0].ntyp; qtype_adjustPointers (yyvsp[-1].count, idDecl_getTyp (yyval.ntyp)); ;
    break;}
case 437:
{ yyval.ntyp = yyvsp[0].ntyp; qtype_adjustPointers (yyvsp[-1].count, idDecl_getTyp (yyval.ntyp)); ;
    break;}
case 438:
{ yyval.entrylist = handleParamTypeList (yyvsp[0].entrylist); ;
    break;}
case 439:
{ yyval.entrylist = handleParamIdList (yyvsp[0].entrylist); ;
    break;}
case 440:
{ /* ignored for now */; ;
    break;}
case 441:
{ ; ;
    break;}
case 442:
{ ; ;
    break;}
case 443:
{ ; ;
    break;}
case 444:
{ yyval.count = 1; ;
    break;}
case 445:
{ yyval.count = 1; ;
    break;}
case 446:
{ yyval.count = 1 + yyvsp[0].count; ;
    break;}
case 447:
{ yyval.count = 1 + yyvsp[0].count; ;
    break;}
case 449:
{ yyval.entrylist = uentryList_add (yyvsp[-2].entrylist, uentry_makeElipsisMarker ()); ;
    break;}
case 450:
{ yyval.entrylist = uentryList_single (uentry_makeVariableLoc (yyvsp[0].cname, ctype_int)); ;
    break;}
case 451:
{ yyval.entrylist = uentryList_add (yyvsp[-2].entrylist, uentry_makeVariableLoc (yyvsp[0].cname, ctype_int)); ;
    break;}
case 452:
{ yyval.entrylist = uentryList_single (uentry_makeElipsisMarker ()); ;
    break;}
case 454:
{ yyval.entrylist = uentryList_add (yyvsp[-2].entrylist, uentry_makeElipsisMarker ()); ;
    break;}
case 455:
{ storeLoc (); ;
    break;}
case 456:
{ yyval.entrylist = uentryList_single (yyvsp[0].oentry); ;
    break;}
case 457:
{ storeLoc (); ;
    break;}
case 458:
{ yyval.entrylist = uentryList_add (yyvsp[-3].entrylist, yyvsp[0].oentry); ;
    break;}
case 459:
{ 
     if (isFlipOldStyle ()) 
       { 
	 llparseerror (cstring_makeLiteral ("Inconsistent function parameter syntax (mixing old and new style declaration)")); 
       }
     else 
       { 
	 setNewStyle (); 
       }
     yyval.oentry = makeCurrentParam (idDecl_fixParamBase (yyvsp[-1].ntyp, yyvsp[-2].qtyp)); 
   ;
    break;}
case 460:
{ 
     idDecl tparam = idDecl_create (yyvsp[0].cname, qtype_unknown ());

     if (isNewStyle ()) 
       {
	 llparseerror (message ("Inconsistent function parameter syntax: %q",
				idDecl_unparse (tparam))); 
       }

     setFlipOldStyle ();
     yyval.oentry = makeCurrentParam (tparam);
     idDecl_free (tparam);
   ;
    break;}
case 462:
{ yyval.qtyp = qtype_newBase (yyvsp[-1].qtyp, yyvsp[0].ctyp); ;
    break;}
case 463:
{ yyval.ctyp = ctype_adjustPointers (yyvsp[0].count, ctype_unknown); ;
    break;}
case 465:
{ yyval.ctyp = ctype_adjustPointers (yyvsp[-1].count, yyvsp[0].ctyp); ;
    break;}
case 466:
{ yyval.ctyp = ctype_unknown; ;
    break;}
case 468:
{ yyval.ctyp = ctype_expectFunction (yyvsp[-1].ctyp); ;
    break;}
case 469:
{ yyval.ctyp = ctype_makeArray (ctype_unknown); ;
    break;}
case 470:
{ yyval.ctyp = ctype_makeFixedArray (ctype_unknown, exprNode_getLongValue (yyvsp[-1].expr)); ;
    break;}
case 471:
{ yyval.ctyp = ctype_makeInnerArray (yyvsp[-2].ctyp); ;
    break;}
case 472:
{ yyval.ctyp = ctype_makeInnerFixedArray (yyvsp[-3].ctyp, exprNode_getLongValue (yyvsp[-1].expr)); ;
    break;}
case 473:
{ yyval.ctyp = ctype_makeFunction (ctype_unknown, uentryList_makeMissingParams ()); ;
    break;}
case 474:
{ yyval.ctyp = ctype_makeParamsFunction (ctype_unknown, yyvsp[-1].entrylist); ;
    break;}
case 475:
{ yyval.ctyp = ctype_makeFunction (yyvsp[-3].ctyp, uentryList_makeMissingParams ()); ;
    break;}
case 476:
{ yyval.ctyp = ctype_makeParamsFunction (yyvsp[-4].ctyp, yyvsp[-1].entrylist); ;
    break;}
case 486:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 489:
{ yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 490:
{ yyval.expr = exprNode_while (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 491:
{ yyval.expr = exprNode_doWhile (yyvsp[-5].expr, yyvsp[-2].expr); ;
    break;}
case 492:
{ yyval.expr = exprNode_doWhile (yyvsp[-4].expr, yyvsp[-1].expr); ;
    break;}
case 493:
{ yyval.expr = exprNode_for (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 494:
{ context_setProtectVars (); ;
    break;}
case 495:
{ context_sizeofReleaseVars (); ;
    break;}
case 496:
{ yyval.expr = exprNode_forPred (yyvsp[-7].expr, yyvsp[-5].expr, yyvsp[-2].expr); 
     context_enterForClause (yyvsp[-5].expr); ;
    break;}
case 497:
{ setProcessingIterVars (yyvsp[-2].entry); ;
    break;}
case 498:
{ yyval.expr = exprNode_iterStart (yyvsp[-5].entry, yyvsp[-1].exprlist); ;
    break;}
case 499:
{ yyval.expr = exprNode_createId (yyvsp[0].entry); ;
    break;}
case 503:
{ yyval.expr = yyvsp[-1].expr; DPRINTF (("def stmt: %s", exprNode_unparse (yyval.expr))); ;
    break;}
case 511:
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 512:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 513:
{ exprNode_checkIfPred (yyvsp[0].expr); ;
    break;}
case 514:
{ /* don't: context_exitTrueClause ($1, $2); */
     yyval.expr = exprNode_if (yyvsp[-2].expr, yyvsp[0].expr); 
   ;
    break;}
case 515:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 516:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 527:
{ yyval.expr = exprNode_addParens (yyvsp[-2].tok, yyvsp[-1].expr); ;
    break;}
case 529:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 530:
{ yyval.expr = exprNode_labelMarker (yyvsp[-1].cname); ;
    break;}
case 531:
{ yyval.expr = exprNode_notReached (yyvsp[0].expr); ;
    break;}
case 532:
{ ; ;
    break;}
case 533:
{ ; ;
    break;}
case 534:
{ context_enterCaseClause (yyvsp[0].expr); ;
    break;}
case 535:
{ yyval.expr = exprNode_caseMarker (yyvsp[-2].expr, FALSE); ;
    break;}
case 536:
{ context_enterCaseClause (yyvsp[0].expr); ;
    break;}
case 537:
{ yyval.expr = exprNode_caseMarker (yyvsp[-2].expr, TRUE); ;
    break;}
case 538:
{ context_enterCaseClause (exprNode_undefined); ;
    break;}
case 539:
{ yyval.expr = exprNode_defaultMarker (yyvsp[-2].tok, FALSE); ;
    break;}
case 540:
{ context_enterCaseClause (exprNode_undefined); ;
    break;}
case 541:
{ yyval.expr = exprNode_defaultMarker (yyvsp[-2].tok, TRUE); ;
    break;}
case 542:
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 543:
{ yyval.expr = yyvsp[0].expr; context_exitInner (yyvsp[0].expr); ;
    break;}
case 544:
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 545:
{ context_enterInnerContext (); ;
    break;}
case 546:
{ context_exitInnerPlain (); ;
    break;}
case 547:
{ context_enterStructInnerContext (); ;
    break;}
case 548:
{ context_exitStructInnerContext (); ;
    break;}
case 549:
{ context_exitInnerSafe (); ;
    break;}
case 550:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 551:
{ yyval.expr = exprNode_notReached (exprNode_createTok (yyvsp[0].tok)); ;
    break;}
case 552:
{ yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 553:
{ yyval.expr = exprNode_notReached (exprNode_updateLocation (yyvsp[-2].expr, lltok_getLoc (yyvsp[0].tok))); ;
    break;}
case 554:
{ yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 555:
{ yyval.expr = exprNode_notReached (exprNode_updateLocation (yyvsp[-2].expr, lltok_getLoc (yyvsp[0].tok))); ;
    break;}
case 556:
{ yyval.expr = exprNode_updateLocation (exprNode_concat (yyvsp[-2].expr, yyvsp[-1].expr), lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 557:
{ yyval.expr = exprNode_notReached (exprNode_updateLocation (exprNode_concat (yyvsp[-3].expr, yyvsp[-2].expr), 
							lltok_getLoc (yyvsp[-1].tok))); 
   ;
    break;}
case 558:
{ yyval.expr = exprNode_makeBlock (yyvsp[0].expr); ;
    break;}
case 559:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 560:
{ yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 561:
{ yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 562:
{ yyval.expr = exprNode_updateLocation (exprNode_concat (yyvsp[-2].expr, yyvsp[-1].expr), lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 564:
{ yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 565:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 566:
{ yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 567:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 568:
{ yyval.expr = exprNode_concat (yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 569:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 570:
{ yyval.expr = yyvsp[-2].expr; ;
    break;}
case 571:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 572:
{ yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 573:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 574:
{ yyval.expr = exprNode_statement (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 575:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 576:
{ yyval.expr = exprNode_statement (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 577:
{ yyval.expr = exprNode_checkExpr (yyvsp[0].expr); ;
    break;}
case 578:
{ 
     exprNode_produceGuards (yyvsp[-1].expr); context_enterTrueClause (yyvsp[-1].expr); 
     exprNode_checkIfPred (yyvsp[-1].expr);
     yyval.expr = yyvsp[-1].expr;
   ;
    break;}
case 579:
{ 
     context_exitTrueClause (yyvsp[-1].expr, yyvsp[0].expr);
     yyval.expr = exprNode_if (yyvsp[-1].expr, yyvsp[0].expr); 
   ;
    break;}
case 580:
{ context_enterFalseClause (yyvsp[-2].expr); ;
    break;}
case 581:
{
     context_exitClause (yyvsp[-4].expr, yyvsp[-3].expr, yyvsp[0].expr);
     yyval.expr = exprNode_ifelse (yyvsp[-4].expr, yyvsp[-3].expr, yyvsp[0].expr); 
   ;
    break;}
case 582:
{ context_enterSwitch (yyvsp[0].expr); ;
    break;}
case 583:
{ yyval.expr = exprNode_switch (yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 584:
{ yyval.expr = exprNode_whilePred (yyvsp[-1].expr); context_enterWhileClause (yyvsp[-1].expr); ;
    break;}
case 585:
{ yyval.expr = exprNode_whilePred(yyvsp[-1].expr); ;
    break;}
case 586:
{ context_enterIterClause (); ;
    break;}
case 587:
{ setProcessingIterVars (yyvsp[-3].entry); ;
    break;}
case 588:
{ 
     yyval.expr = exprNode_iter (yyvsp[-9].entry, yyvsp[-4].exprlist, yyvsp[-2].expr, yyvsp[-1].entry); 

   ;
    break;}
case 589:
{ yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 590:
{ nextIterParam (); ;
    break;}
case 591:
{ yyval.exprlist = exprNodeList_push (yyvsp[-3].exprlist, yyvsp[0].expr); ;
    break;}
case 592:
{ yyval.expr = exprNode_iterExpr (yyvsp[0].expr); ;
    break;}
case 593:
{ yyval.expr = exprNode_iterId (yyvsp[0].entry); ;
    break;}
case 594:
{ uentry ue = coerceIterId (yyvsp[0].cname);

		      if (uentry_isValid (ue)) 
			{
			  yyval.expr = exprNode_iterId (ue);
			}
		      else
			{
			  yyval.expr = exprNode_iterNewId (cstring_copy (LastIdentifier ()));
			}
		    ;
    break;}
case 595:
{ yyval.expr = exprNode_iterNewId (yyvsp[0].cname); ;
    break;}
case 597:
{ yyval.expr = exprNode_combineLiterals (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 599:
{ yyval.expr = exprNode_addParens (yyvsp[-2].tok, yyvsp[-1].expr); ;
    break;}
case 601:
{ yyval.expr = exprNode_arrayFetch (yyvsp[-3].expr, yyvsp[-1].expr); ;
    break;}
case 602:
{ yyval.expr = exprNode_functionCall (yyvsp[-2].expr, exprNodeList_new ()); ;
    break;}
case 603:
{ yyval.expr = exprNode_functionCall (yyvsp[-3].expr, yyvsp[-1].exprlist); ;
    break;}
case 604:
{ yyval.expr = exprNode_vaArg (yyvsp[-5].tok, yyvsp[-3].expr, yyvsp[-1].qtyp); ;
    break;}
case 605:
{ yyval.expr = exprNode_fieldAccess (yyvsp[-4].expr, yyvsp[-2].tok, yyvsp[-1].cname); ;
    break;}
case 606:
{ yyval.expr = exprNode_arrowAccess (yyvsp[-4].expr, yyvsp[-2].tok, yyvsp[-1].cname); ;
    break;}
case 607:
{ yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 608:
{ yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 610:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 611:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 612:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 613:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 614:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 615:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 616:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 617:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 618:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 620:
{ yyval.expr = exprNode_cast (yyvsp[-3].tok, yyvsp[0].expr, yyvsp[-2].qtyp); ;
    break;}
case 622:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 623:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 624:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 626:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 627:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 629:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 630:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 632:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 633:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 634:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 635:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 637:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 638:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 640:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 642:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 644:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 646:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 648:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 650:
{ context_enterTrueClause (yyvsp[-1].expr); ;
    break;}
case 651:
{ context_enterFalseClause (yyvsp[-4].expr); ;
    break;}
case 652:
{ yyval.expr = exprNode_cond (yyvsp[-6].expr, yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 654:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 655:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 656:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 657:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 658:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 659:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 660:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 661:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 662:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 663:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 664:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 665:
{ yyval.entry = yyvsp[0].entry; ;
    break;}
case 666:
{ yyval.entry = uentry_undefined; ;
    break;}
case 667:
{ context_enterDoWhileClause (); yyval.tok = yyvsp[0].tok; ;
    break;}
case 668:
{ yyval.expr = exprNode_while (yyvsp[-1].expr, yyvsp[0].expr); context_exitWhileClause (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 669:
{ yyval.expr = exprNode_statement (exprNode_doWhile (yyvsp[-5].expr, yyvsp[-2].expr), yyvsp[0].tok); ;
    break;}
case 670:
{ yyval.expr = exprNode_for (yyvsp[-1].expr, yyvsp[0].expr); context_exitForClause (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 671:
{ yyval.expr = exprNode_while (yyvsp[-1].expr, yyvsp[0].expr); context_exitWhileClause (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 672:
{ yyval.expr = exprNode_statement (exprNode_doWhile (yyvsp[-5].expr, yyvsp[-2].expr), yyvsp[0].tok); ;
    break;}
case 673:
{ yyval.expr = exprNode_doWhile (yyvsp[-4].expr, yyvsp[-1].expr); ;
    break;}
case 674:
{ yyval.expr = exprNode_for (yyvsp[-1].expr, yyvsp[0].expr); context_exitForClause (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 675:
{ yyval.expr = exprNode_goto (yyvsp[-1].cname); ;
    break;}
case 676:
{ yyval.expr = exprNode_continue (yyvsp[-1].tok, BADTOK); ;
    break;}
case 677:
{ yyval.expr = exprNode_continue (yyvsp[-2].tok, QINNERCONTINUE); ;
    break;}
case 678:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, BADTOK); ;
    break;}
case 679:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, QSWITCHBREAK); ;
    break;}
case 680:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, QLOOPBREAK); ;
    break;}
case 681:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, QINNERBREAK); ;
    break;}
case 682:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, QSAFEBREAK); ;
    break;}
case 683:
{ yyval.expr = exprNode_nullReturn (yyvsp[-1].tok); ;
    break;}
case 684:
{ yyval.expr = exprNode_return (yyvsp[-1].expr); ;
    break;}
case 686:
{ ; ;
    break;}
case 688:
{ ; ;
    break;}
case 691:
{ yyval.cname = uentry_getName (yyvsp[0].entry); ;
    break;}
case 692:
{ yyval.cname = uentry_getName (yyvsp[0].entry); ;
    break;}
case 693:
{ yyval.cname = uentry_getName (yyvsp[0].entry); ;
    break;}
case 694:
{ yyval.cname = yyvsp[0].cname; ;
    break;}
case 696:
{ yyval.ctyp = ctype_unknown; ;
    break;}
case 697:
{ yyval.ctyp = exprNode_getType (yyvsp[-1].expr); exprNode_free (yyvsp[-1].expr); ;
    break;}
case 698:
{ yyval.ctyp = qtype_getType (yyvsp[-1].qtyp); ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */


  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}


/*@-redecl@*/ /*@-namechecks@*/
extern char *yytext;
/*@=redecl@*/ /*@=namechecks@*/

# include "bison.reset"

void yyerror (/*@unused@*/ char *s) 
{
  static bool givehint = FALSE;

  if (context_inIterDef ())
    {
      llerror (FLG_SYNTAX, message ("Iter syntax not parseable: %s", 
				    context_inFunctionName ()));
    }
  else if (context_inIterEnd ())
    {
      llerror (FLG_SYNTAX, message ("Iter finalizer syntax not parseable: %s", 
				    context_inFunctionName ()));
    }
  else if (context_inMacro ())
    {
      llerror (FLG_SYNTAX, message ("Macro syntax not parseable: %s", 
				    context_inFunctionName ()));
      
      if (context_inUnknownMacro ())
	{
	  if (!givehint)
	    {
	      llhint (cstring_makeLiteral 
		     ("Precede macro definition with /*@notfunction@*/ "
		      "to suppress checking and force expansion"));
	      givehint = TRUE;
	    }
	}

      swallowMacro ();
      context_exitAllClausesQuiet ();
    }
  else
    {
      llparseerror (cstring_undefined);
    }
}












/*
** Resets all flags in bison.head
*/


/*@=allmacros@*/
/*@=boolint@*/
/*@=charint@*/
/*@=macroparams@*/
/*@=macroundef@*/
/*@=unreachable@*/
/*@=macrospec@*/
/*@=varuse@*/
/*@=ignorequals@*/
/*@=macrostmt@*/
/*@=noeffect@*/
/*@=shadow@*/
/*@=exitarg@*/
/*@=macroredef@*/
/*@=uniondef@*/
/*@=compdef@*/
/*@=matchfields@*/
/*@=exportlocal@*/
/*@=evalorderuncon@*/
/*@=exportheader@*/
/*@=typeuse@*/
/*@=redecl@*/
/*@=redef@*/
/*@=noparams@*/
/*@=ansireserved@*/
/*@=fielduse@*/
/*@=ifblock@*/
/*@=elseifcomplete@*/
/*@=whileblock@*/
/*@=forblock@*/
/*@=branchstate@*/
/*@=readonlytrans@*/
/*@=namechecks@*/
/*@=usedef@*/
/*@=systemunrecog@*/
/*@=dependenttrans@*/
/*@=unqualifiedtrans@*/
/*@=declundef@*/


/*drl added 11/27/2001*/
/*@=bounds@*/
