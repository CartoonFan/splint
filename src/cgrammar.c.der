/*
** Inserted at beginning of c files generated by bison
** REMEMBER:  Change bison.reset too.
*/

/*@-allmacros@*/
/*@+boolint@*/
/*@+charint@*/
/*@-macroparams@*/
/*@-macroundef@*/
/*@-unreachable@*/
/*@-macrospec@*/
/*@-varuse@*/
/*@+ignorequals@*/
/*@-macrostmt@*/
/*@-noeffect@*/
/*@-shadow@*/
/*@-exitarg@*/
/*@-macroredef@*/
/*@-uniondef@*/
/*@-compdef@*/
/*@-matchfields@*/
/*@-exportlocal@*/
/*@-evalorderuncon@*/
/*@-exportheader@*/
/*@-typeuse@*/
/*@-redecl@*/
/*@-redef@*/
/*@-noparams@*/
/*@-ansireserved@*/
/*@-fielduse@*/
/*@-ifblock@*/
/*@-elseifcomplete@*/
/*@-whileblock@*/
/*@-forblock@*/
/*@-branchstate@*/
/*@-readonlytrans@*/
/*@-namechecks@*/
/*@-usedef@*/
/*@-systemunrecog@*/
/*@-dependenttrans@*/
/*@-unqualifiedtrans@*/
/*@-nullassign@*/
/*@-nullpass@*/
/*@-nullptrarith*/
/*@-usereleased@*/
/*@-declundef@*/

/*drl added 11/27/2001*/
/*@-bounds@*/
/* < end of bison.head > */


/*  A Bison parser, made from cgrammar.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	BADTOK	257
#define	SKIPTOK	258
#define	CTOK_ELIPSIS	259
#define	CASE	260
#define	DEFAULT	261
#define	CIF	262
#define	CELSE	263
#define	SWITCH	264
#define	WHILE	265
#define	DO	266
#define	CFOR	267
#define	GOTO	268
#define	CONTINUE	269
#define	BREAK	270
#define	RETURN	271
#define	TSEMI	272
#define	TLBRACE	273
#define	TRBRACE	274
#define	TCOMMA	275
#define	TCOLON	276
#define	TASSIGN	277
#define	TLPAREN	278
#define	TRPAREN	279
#define	TLSQBR	280
#define	TRSQBR	281
#define	TDOT	282
#define	TAMPERSAND	283
#define	TEXCL	284
#define	TTILDE	285
#define	TMINUS	286
#define	TPLUS	287
#define	TMULT	288
#define	TDIV	289
#define	TPERCENT	290
#define	TLT	291
#define	TGT	292
#define	TCIRC	293
#define	TBAR	294
#define	TQUEST	295
#define	CSIZEOF	296
#define	CALIGNOF	297
#define	ARROW_OP	298
#define	CTYPEDEF	299
#define	COFFSETOF	300
#define	INC_OP	301
#define	DEC_OP	302
#define	LEFT_OP	303
#define	RIGHT_OP	304
#define	LE_OP	305
#define	GE_OP	306
#define	EQ_OP	307
#define	NE_OP	308
#define	AND_OP	309
#define	OR_OP	310
#define	MUL_ASSIGN	311
#define	DIV_ASSIGN	312
#define	MOD_ASSIGN	313
#define	ADD_ASSIGN	314
#define	SUB_ASSIGN	315
#define	LEFT_ASSIGN	316
#define	RIGHT_ASSIGN	317
#define	AND_ASSIGN	318
#define	XOR_ASSIGN	319
#define	OR_ASSIGN	320
#define	CSTRUCT	321
#define	CUNION	322
#define	CENUM	323
#define	VA_ARG	324
#define	VA_DCL	325
#define	QWARN	326
#define	QGLOBALS	327
#define	QMODIFIES	328
#define	QNOMODS	329
#define	QCONSTANT	330
#define	QFUNCTION	331
#define	QITER	332
#define	QDEFINES	333
#define	QUSES	334
#define	QALLOCATES	335
#define	QSETS	336
#define	QRELEASES	337
#define	QPRECLAUSE	338
#define	QPOSTCLAUSE	339
#define	QINVARIANT	340
#define	QALT	341
#define	QUNDEF	342
#define	QKILLED	343
#define	QENDMACRO	344
#define	LLMACRO	345
#define	LLMACROITER	346
#define	LLMACROEND	347
#define	TENDMACRO	348
#define	QSWITCHBREAK	349
#define	QLOOPBREAK	350
#define	QINNERBREAK	351
#define	QSAFEBREAK	352
#define	QINNERCONTINUE	353
#define	QFALLTHROUGH	354
#define	QLINTNOTREACHED	355
#define	QLINTFALLTHROUGH	356
#define	QLINTFALLTHRU	357
#define	QARGSUSED	358
#define	QPRINTFLIKE	359
#define	QLINTPRINTFLIKE	360
#define	QSCANFLIKE	361
#define	QMESSAGELIKE	362
#define	QNOTREACHED	363
#define	QCONST	364
#define	QVOLATILE	365
#define	QINLINE	366
#define	QEXTENSION	367
#define	QEXTERN	368
#define	QSTATIC	369
#define	QAUTO	370
#define	QREGISTER	371
#define	QOUT	372
#define	QIN	373
#define	QYIELD	374
#define	QONLY	375
#define	QTEMP	376
#define	QSHARED	377
#define	QREF	378
#define	QUNIQUE	379
#define	QCHECKED	380
#define	QUNCHECKED	381
#define	QCHECKEDSTRICT	382
#define	QCHECKMOD	383
#define	QKEEP	384
#define	QKEPT	385
#define	QPARTIAL	386
#define	QSPECIAL	387
#define	QOWNED	388
#define	QDEPENDENT	389
#define	QRETURNED	390
#define	QEXPOSED	391
#define	QNULL	392
#define	QOBSERVER	393
#define	QISNULL	394
#define	QEXITS	395
#define	QMAYEXIT	396
#define	QNEVEREXIT	397
#define	QTRUEEXIT	398
#define	QFALSEEXIT	399
#define	QLONG	400
#define	QSIGNED	401
#define	QUNSIGNED	402
#define	QSHORT	403
#define	QUNUSED	404
#define	QSEF	405
#define	QNOTNULL	406
#define	QRELNULL	407
#define	QABSTRACT	408
#define	QCONCRETE	409
#define	QMUTABLE	410
#define	QIMMUTABLE	411
#define	QTRUENULL	412
#define	QFALSENULL	413
#define	QEXTERNAL	414
#define	QREFCOUNTED	415
#define	QREFS	416
#define	QNEWREF	417
#define	QTEMPREF	418
#define	QKILLREF	419
#define	QRELDEF	420
#define	CGCHAR	421
#define	CBOOL	422
#define	CINT	423
#define	CGFLOAT	424
#define	CDOUBLE	425
#define	CVOID	426
#define	QANYTYPE	427
#define	QINTEGRALTYPE	428
#define	QUNSIGNEDINTEGRALTYPE	429
#define	QSIGNEDINTEGRALTYPE	430
#define	QNULLTERMINATED	431
#define	QSETBUFFERSIZE	432
#define	QSETSTRINGLENGTH	433
#define	QMAXSET	434
#define	QMAXREAD	435
#define	QTESTINRANGE	436
#define	TCAND	437
#define	IDENTIFIER	438
#define	NEW_IDENTIFIER	439
#define	TYPE_NAME_OR_ID	440
#define	CANNOTATION	441
#define	CCONSTANT	442
#define	ITER_NAME	443
#define	ITER_ENDNAME	444
#define	TYPE_NAME	445
#define	METASTATE_NAME	446


/*
**
** cgrammar.y
**
** Yacc/Bison grammar for extended ANSI C used by Splint.
**
** original grammar by Nate Osgood ---
**    hacrat@catfish.lcs.mit.edu Mon Jun 14 13:06:32 1993
**
** changes for Splint --- handle typedef names correctly
** fix struct/union parsing bug (empty struct is accepted)
** add productions to handle macros --- require
** error correction --- main source of conflicts in grammar.
** need to process initializations sequentially, L->R
**
** production names are cryptic, so more productions fit on one line
**
** conflicts:  87 shift/reduce, 18 reduce/reduce
** most of these are due to handling macros
** a few are due to handling type expressions
*/

/*@=allmacros@*/

extern int yylex ();
extern void swallowMacro (void);
extern void yyerror (char *);

# include "splintMacros.nf"
# include "basic.h"
# include "cscanner.h"
# include "cgrammar.h"
# include "exprChecks.h"

/*@-allmacros@*/
/*@-matchfields@*/

# define SHOWCSYM FALSE

/*
** This is necessary, or else when the bison-generated code #include's malloc.h,
** there will be a parse error.
**
** Unfortunately, it means the error checking on malloc, etc. is lost for allocations
** in bison-generated files under Win32.
*/

# ifdef WIN32
# undef malloc
# undef calloc
# undef realloc
# endif


typedef union
{
  lltok tok;
  int count;
  qual typequal;
  qualList tquallist;
  ctype ctyp;
  /*@dependent@*/ sRef sr;
  /*@only@*/ sRef osr;

  /*@only@*/ functionClauseList funcclauselist;
  /*@only@*/ functionClause funcclause;  
  /*@only@*/ flagSpec flagspec;
  /*@only@*/ globalsClause globsclause;
  /*@only@*/ modifiesClause modsclause;
  /*@only@*/ warnClause warnclause;
  /*@only@*/ stateClause stateclause;

  /*@only@*/ functionConstraint fcnconstraint; 

  /*@only@*/ metaStateConstraint msconstraint;
  /*@only@*/ metaStateSpecifier msspec;
  /*@only@*/ metaStateExpression msexpr;
  /*@observer@*/ metaStateInfo msinfo;

  /*@only@*/ sRefList srlist;
  /*@only@*/ globSet globset;
  /*@only@*/ qtype qtyp;
  /*@only@*/ cstring cname;
  /*@observer@*/ annotationInfo annotation;
  /*@only@*/ idDecl ntyp;
  /*@only@*/ idDeclList ntyplist;
  /*@only@*/ uentryList flist;
  /*@owned@*/ uentryList entrylist;
  /*@observer@*/ /*@dependent@*/ uentry entry;
  /*@only@*/ uentry oentry;
  /*@only@*/ exprNode expr;
  /*@only@*/ enumNameList enumnamelist;
  /*@only@*/ exprNodeList exprlist;
  /*@only@*/ sRefSet srset; 
  /*@only@*/ cstringList cstringlist;

  /*drl
    added 1/19/2001
  */
  constraint con;
  constraintList conL;
  constraintExpr conE;
  /* drl */  
} YYSTYPE;
#ifndef YYDEBUG
#define YYDEBUG 1
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1196
#define	YYFLAG		-32768
#define	YYNTBASE	193

#define YYTRANSLATE(x) ((unsigned)(x) <= 446 ? yytranslate[x] : 451)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
   177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
   187,   188,   189,   190,   191,   192
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     1,     3,     5,     8,    11,    13,    15,    17,    19,
    21,    23,    32,    44,    45,    51,    53,    57,    59,    62,
    64,    71,    75,    82,    83,    90,    91,    99,   101,   108,
   112,   119,   120,   127,   128,   136,   137,   138,   149,   153,
   157,   161,   164,   166,   170,   171,   176,   177,   182,   184,
   188,   190,   192,   194,   198,   200,   204,   206,   208,   210,
   212,   214,   216,   221,   227,   229,   231,   233,   235,   239,
   244,   247,   251,   255,   259,   261,   263,   265,   266,   269,
   270,   273,   275,   277,   279,   281,   283,   285,   287,   289,
   291,   293,   295,   297,   300,   301,   306,   308,   311,   312,
   316,   318,   322,   324,   326,   327,   330,   334,   337,   339,
   343,   346,   347,   350,   352,   354,   356,   358,   360,   362,
   364,   366,   368,   370,   372,   374,   376,   378,   380,   382,
   386,   387,   391,   392,   393,   398,   401,   404,   406,   408,
   410,   414,   419,   422,   426,   430,   434,   436,   438,   440,
   444,   446,   448,   452,   457,   460,   464,   468,   472,   473,
   475,   477,   481,   483,   485,   487,   491,   493,   495,   497,
   502,   506,   511,   518,   524,   530,   533,   536,   538,   542,
   544,   547,   550,   553,   556,   559,   562,   565,   568,   570,
   572,   576,   578,   588,   589,   593,   598,   601,   606,   609,
   611,   616,   618,   622,   626,   630,   632,   636,   640,   642,
   646,   650,   652,   656,   660,   664,   668,   670,   674,   678,
   680,   684,   686,   690,   692,   696,   698,   699,   704,   706,
   707,   712,   714,   715,   716,   724,   726,   730,   734,   738,
   742,   746,   750,   754,   758,   762,   766,   770,   772,   776,
   777,   779,   781,   783,   785,   787,   791,   792,   802,   803,
   815,   818,   819,   826,   827,   836,   841,   846,   847,   848,
   851,   853,   858,   859,   864,   866,   870,   875,   877,   881,
   883,   885,   887,   889,   891,   894,   897,   898,   905,   908,
   911,   912,   919,   920,   926,   928,   930,   932,   934,   936,
   938,   940,   942,   944,   946,   948,   950,   952,   954,   956,
   958,   960,   962,   964,   966,   968,   970,   972,   974,   976,
   978,   980,   982,   984,   986,   988,   990,   992,   994,   996,
   998,  1000,  1002,  1004,  1006,  1008,  1010,  1012,  1014,  1016,
  1018,  1020,  1022,  1024,  1026,  1028,  1030,  1033,  1036,  1039,
  1042,  1045,  1048,  1051,  1054,  1057,  1060,  1063,  1066,  1069,
  1072,  1075,  1078,  1081,  1084,  1087,  1090,  1093,  1096,  1099,
  1102,  1105,  1109,  1111,  1116,  1118,  1122,  1125,  1128,  1131,
  1132,  1134,  1135,  1136,  1137,  1150,  1151,  1152,  1164,  1171,
  1178,  1179,  1180,  1191,  1192,  1193,  1204,  1210,  1216,  1221,
  1226,  1227,  1229,  1231,  1234,  1240,  1244,  1247,  1252,  1254,
  1258,  1263,  1270,  1271,  1280,  1285,  1287,  1291,  1294,  1296,
  1301,  1303,  1305,  1308,  1311,  1313,  1316,  1318,  1321,  1323,
  1325,  1327,  1330,  1332,  1335,  1338,  1342,  1344,  1348,  1350,
  1354,  1356,  1358,  1362,  1363,  1366,  1367,  1372,  1377,  1379,
  1381,  1384,  1386,  1388,  1391,  1392,  1394,  1400,  1403,  1407,
  1411,  1416,  1420,  1425,  1430,  1436,  1438,  1440,  1442,  1444,
  1446,  1448,  1450,  1452,  1454,  1456,  1458,  1460,  1463,  1466,
  1474,  1481,  1484,  1485,  1486,  1497,  1498,  1505,  1507,  1509,
  1511,  1513,  1516,  1518,  1520,  1522,  1524,  1526,  1528,  1530,
  1534,  1536,  1537,  1541,  1544,  1547,  1549,  1551,  1553,  1555,
  1557,  1559,  1561,  1563,  1565,  1567,  1571,  1573,  1575,  1578,
  1581,  1582,  1585,  1586,  1591,  1592,  1599,  1600,  1604,  1605,
  1611,  1615,  1618,  1622,  1623,  1624,  1625,  1626,  1627,  1629,
  1632,  1635,  1639,  1642,  1646,  1650,  1655,  1658,  1661,  1665,
  1669,  1674,  1676,  1679,  1681,  1684,  1686,  1689,  1691,  1694,
  1696,  1699,  1701,  1706,  1709,  1710,  1716,  1717,  1724,  1729,
  1734,  1735,  1736,  1747,  1749,  1750,  1755,  1757,  1759,  1761,
  1763,  1765,  1768,  1770,  1774,  1776,  1781,  1785,  1790,  1797,
  1803,  1809,  1812,  1815,  1817,  1820,  1823,  1826,  1829,  1832,
  1835,  1838,  1841,  1843,  1845,  1850,  1852,  1856,  1860,  1864,
  1866,  1870,  1874,  1876,  1880,  1884,  1886,  1890,  1894,  1898,
  1902,  1904,  1908,  1912,  1914,  1918,  1920,  1924,  1926,  1930,
  1932,  1936,  1938,  1942,  1944,  1945,  1946,  1954,  1956,  1960,
  1964,  1968,  1972,  1976,  1980,  1984,  1988,  1992,  1996,  2000,
  2002,  2003,  2005,  2008,  2016,  2019,  2022,  2030,  2037,  2040,
  2044,  2047,  2051,  2054,  2058,  2062,  2066,  2070,  2073,  2077,
  2078,  2080,  2082,  2084,  2086,  2088,  2090,  2092,  2094
};

static const short yyrhs[] = {    -1,
   194,     0,   195,     0,   194,   195,     0,   256,   447,     0,
   196,     0,   197,     0,   207,     0,   210,     0,   293,     0,
     1,     0,    76,   331,   345,   355,   345,   447,   301,    90,
     0,    76,   331,   345,   355,   345,    23,   301,   306,   305,
   447,    90,     0,     0,    77,   198,   199,   447,    90,     0,
   200,     0,   331,   345,   200,     0,   204,     0,   359,   204,
     0,   449,     0,   301,    24,   345,   355,   301,    25,     0,
   201,    26,    27,     0,   201,    26,   301,   292,    27,   345,
     0,     0,   201,   302,    24,    25,   202,   228,     0,     0,
   201,   302,    24,   356,    25,   203,   228,     0,   449,     0,
   301,    24,   345,   200,   301,    25,     0,   204,    26,    27,
     0,   204,    26,   301,   292,    27,   345,     0,     0,   204,
   302,    24,    25,   205,   229,     0,     0,   204,   302,    24,
   356,    25,   206,   229,     0,     0,     0,    78,   449,    24,
   356,    25,   208,   229,   209,   447,    90,     0,    91,   386,
    94,     0,    92,   372,    94,     0,    93,   373,    94,     0,
    91,    94,     0,   251,     0,   213,    23,   216,     0,     0,
   225,   214,    22,   217,     0,     0,     5,   215,    22,   217,
     0,   213,     0,   213,    40,   216,     0,   192,     0,   183,
     0,    55,     0,   220,   218,   219,     0,   220,     0,   223,
   222,   223,     0,   180,     0,   181,     0,    52,     0,    51,
     0,    53,     0,   224,     0,   226,    24,   223,    25,     0,
    24,   223,   227,   223,    25,     0,   225,     0,   188,     0,
   448,     0,   185,     0,   225,    26,    27,     0,   225,    26,
   188,    27,     0,    34,   225,     0,    24,   225,    25,     0,
   225,    28,   449,     0,   225,    44,   449,     0,   221,     0,
    33,     0,    32,     0,     0,   230,   228,     0,     0,   231,
   229,     0,   232,     0,   236,     0,   235,     0,   309,     0,
   312,     0,   242,     0,   233,     0,   237,     0,   235,     0,
   310,     0,   314,     0,   243,     0,   233,    90,     0,     0,
    73,   234,   244,   447,     0,    75,     0,   237,    90,     0,
     0,    74,   238,   257,     0,   240,     0,   240,    40,   239,
     0,   185,     0,   242,     0,     0,   243,    90,     0,    72,
   239,   423,     0,    72,   239,     0,   245,     0,   244,    21,
   245,     0,   246,   247,     0,     0,   248,   246,     0,   448,
     0,   185,     0,   293,     0,    88,     0,    89,     0,   118,
     0,   119,     0,   132,     0,    79,     0,    80,     0,    81,
     0,    82,     0,    83,     0,    84,     0,    85,     0,   355,
     0,   331,   345,   355,     0,     0,    19,   253,   403,     0,
     0,     0,   254,   407,   255,   396,     0,   211,   252,     0,
   260,   447,     0,   447,     0,   448,     0,   185,     0,   258,
    26,    27,     0,   258,    26,   259,    27,     0,    34,   258,
     0,    24,   258,    25,     0,   258,    28,   449,     0,   258,
    44,   449,     0,   258,     0,   423,     0,   258,     0,   260,
    21,   258,     0,   448,     0,   185,     0,   261,    26,    27,
     0,   261,    26,   259,    27,     0,    34,   261,     0,    24,
   261,    25,     0,   261,    28,   449,     0,   261,    44,   449,
     0,     0,   263,     0,   261,     0,   263,    21,   261,     0,
   448,     0,   185,     0,   423,     0,    24,   290,    25,     0,
   186,     0,   113,     0,   264,     0,   265,    26,   290,    27,
     0,   265,    24,    25,     0,   265,    24,   266,    25,     0,
    70,    24,   289,    21,   367,    25,     0,   265,   345,    28,
   449,   301,     0,   265,   345,    44,   449,   301,     0,   265,
    47,     0,   265,    48,     0,   289,     0,   266,    21,   289,
     0,   265,     0,    47,   267,     0,    48,   267,     0,    29,
   273,     0,    34,   273,     0,    33,   273,     0,    32,   273,
     0,    31,   273,     0,    30,   273,     0,   270,     0,   269,
     0,   268,    28,   449,     0,   449,     0,    46,   301,    24,
   367,   345,    21,   268,    25,   301,     0,     0,   301,   271,
   272,     0,    42,    24,   367,    25,     0,    42,   267,     0,
    43,    24,   367,    25,     0,    43,   267,     0,   267,     0,
    24,   367,    25,   273,     0,   273,     0,   274,    34,   273,
     0,   274,    35,   273,     0,   274,    36,   273,     0,   274,
     0,   275,    33,   274,     0,   275,    32,   274,     0,   275,
     0,   276,    49,   275,     0,   276,    50,   275,     0,   276,
     0,   277,    37,   276,     0,   277,    38,   276,     0,   277,
    51,   276,     0,   277,    52,   276,     0,   277,     0,   278,
    53,   277,     0,   278,    54,   277,     0,   278,     0,   279,
    29,   278,     0,   279,     0,   280,    39,   279,     0,   280,
     0,   281,    40,   280,     0,   281,     0,     0,   282,    55,
   283,   281,     0,   282,     0,     0,   284,    56,   285,   282,
     0,   284,     0,     0,     0,   284,    41,   287,   290,    22,
   288,   286,     0,   286,     0,   267,    23,   289,     0,   267,
    57,   289,     0,   267,    58,   289,     0,   267,    59,   289,
     0,   267,    60,   289,     0,   267,    61,   289,     0,   267,
    62,   289,     0,   267,    63,   289,     0,   267,    64,   289,
     0,   267,    65,   289,     0,   267,    66,   289,     0,   289,
     0,   290,    21,   289,     0,     0,   290,     0,   286,     0,
   294,     0,    71,     0,   299,     0,   331,   301,    18,     0,
     0,   331,   345,   355,   345,   295,   301,   305,    18,   301,
     0,     0,   331,   345,   355,   345,    23,   296,   301,   306,
   305,    18,   301,     0,   355,   345,     0,     0,   355,   345,
    23,   298,   301,   306,     0,     0,    45,   331,   300,   345,
   303,   301,   241,    18,     0,    45,   331,   301,    18,     0,
    45,   303,   301,    18,     0,     0,     0,   304,   301,     0,
   297,     0,   303,    21,   345,   297,     0,     0,   305,    21,
   345,   297,     0,   289,     0,    19,   307,    20,     0,    19,
   307,    21,    20,     0,   306,     0,   307,    21,   306,     0,
   114,     0,   112,     0,   115,     0,   116,     0,   117,     0,
   177,   301,     0,   310,    90,     0,     0,   249,   345,   311,
   263,   447,   301,     0,   314,    90,     0,   250,   345,     0,
     0,   313,   320,   315,   262,   447,   301,     0,     0,   313,
   316,   317,   447,   301,     0,   219,     0,   212,     0,   141,
     0,   142,     0,   144,     0,   145,     0,   143,     0,   126,
     0,   129,     0,   127,     0,   128,     0,   134,     0,   135,
     0,   120,     0,   122,     0,   121,     0,   130,     0,   131,
     0,   123,     0,   125,     0,   138,     0,   140,     0,   153,
     0,   152,     0,   137,     0,   139,     0,   177,     0,   187,
     0,   136,     0,   151,     0,   150,     0,   160,     0,   158,
     0,   159,     0,   154,     0,   155,     0,   156,     0,   157,
     0,   161,     0,   162,     0,   165,     0,   166,     0,   163,
     0,   164,     0,   149,     0,   146,     0,   147,     0,   148,
     0,   118,     0,   119,     0,   132,     0,   133,     0,   110,
   301,     0,   111,   301,     0,   327,   301,     0,   320,   301,
     0,   318,   301,     0,   321,   301,     0,   319,   301,     0,
   323,   301,     0,   322,   301,     0,   324,   301,     0,   325,
   301,     0,   167,   345,     0,   169,   345,     0,   168,   345,
     0,   170,   345,     0,   171,   345,     0,   172,   345,     0,
   173,   345,     0,   174,   345,     0,   175,   345,     0,   176,
   345,     0,   450,   345,     0,   336,   345,     0,   350,   345,
     0,   326,   345,     0,   301,   331,   301,     0,   333,     0,
   333,    87,   332,    90,     0,   367,     0,   367,    21,   332,
     0,   308,   334,     0,   328,   334,     0,   329,   334,     0,
     0,   331,     0,     0,     0,     0,   345,    67,   449,   301,
    19,   337,   400,   346,   401,   338,    20,   335,     0,     0,
     0,   345,    68,   449,   301,    19,   339,   400,   346,   401,
   340,    20,     0,   345,    67,   449,   301,    19,    20,     0,
   345,    68,   449,   301,    19,    20,     0,     0,     0,   345,
    67,   301,    19,   341,   400,   346,   401,   342,    20,     0,
     0,     0,   345,    68,   301,    19,   343,   400,   346,   401,
   344,    20,     0,   345,    67,   301,    19,    20,     0,   345,
    68,   301,    19,    20,     0,   345,    67,   449,   345,     0,
   345,    68,   449,   345,     0,     0,   347,     0,   210,     0,
   346,   347,     0,   331,   345,   348,   301,    18,     0,   331,
   301,    18,     0,   349,   345,     0,   348,    21,   349,   345,
     0,   355,     0,    22,   301,   292,     0,   355,    22,   301,
   292,     0,   345,    69,    19,   352,    20,   301,     0,     0,
   345,    69,   449,    19,   351,   352,    20,   301,     0,   345,
    69,   449,   301,     0,   353,     0,   352,    21,   353,     0,
   352,    21,     0,   449,     0,   449,    23,   301,   292,     0,
   201,     0,   369,     0,   359,   191,     0,   359,   354,     0,
   201,     0,   359,   201,     0,   362,     0,   345,   360,     0,
   110,     0,   111,     0,   357,     0,   358,   357,     0,    34,
     0,    34,   358,     0,    34,   359,     0,    34,   358,   359,
     0,   361,     0,   361,    21,     5,     0,   449,     0,   361,
    21,   449,     0,     5,     0,   363,     0,   363,    21,     5,
     0,     0,   364,   366,     0,     0,   363,    21,   365,   366,
     0,   301,   331,   354,   301,     0,   449,     0,   330,     0,
   330,   368,     0,   359,     0,   370,     0,   359,   370,     0,
     0,   370,     0,   301,    24,   345,   368,    25,     0,    26,
    27,     0,    26,   292,    27,     0,   370,    26,    27,     0,
   370,    26,   292,    27,     0,   301,    24,    25,     0,   301,
    24,   362,    25,     0,   370,   301,    24,    25,     0,   370,
   301,    24,   362,    25,     0,   388,     0,   390,     0,   393,
     0,   396,     0,   409,     0,   412,     0,   444,     0,   417,
     0,   446,     0,   374,     0,   372,     0,   381,     0,   374,
   381,     0,   416,   374,     0,   443,   387,    11,    24,   290,
    25,    18,     0,   443,   387,    11,    24,   290,    25,     0,
   376,   381,     0,     0,     0,    13,    24,   291,    18,   291,
    18,   377,   291,   378,    25,     0,     0,   189,   398,    24,
   380,   420,    25,     0,   190,     0,   388,     0,   390,     0,
   393,     0,   384,   407,     0,   384,     0,   385,     0,   409,
     0,   382,     0,   375,     0,   379,     0,   446,     0,    24,
   381,    25,     0,     1,     0,     0,   411,   383,   381,     0,
   398,    19,     0,   402,    20,     0,   387,     0,   406,     0,
   388,     0,   390,     0,   393,     0,   397,     0,   410,     0,
   412,     0,   417,     0,   445,     0,    24,   387,    25,     0,
   446,     0,     1,     0,   449,    22,     0,   109,   371,     0,
     0,   100,   389,     0,     0,     6,   292,   391,    22,     0,
     0,   100,   389,     6,   292,   392,    22,     0,     0,     7,
   394,    22,     0,     0,   100,   389,     7,   395,    22,     0,
    24,   396,    25,     0,   398,   404,     0,   398,   405,   399,
     0,     0,     0,     0,     0,     0,    20,     0,   109,    20,
     0,   408,    20,     0,   408,   109,    20,     0,   407,    20,
     0,   407,   109,    20,     0,   407,   408,    20,     0,   407,
   408,   109,    20,     0,    19,   403,     0,    19,    20,     0,
    19,   406,    20,     0,    19,   407,    20,     0,    19,   407,
   408,    20,     0,   387,     0,   406,   387,     0,   293,     0,
   407,   293,     0,   371,     0,   408,   371,     0,    18,     0,
   290,    18,     0,    18,     0,   290,    18,     0,   290,     0,
     8,    24,   290,    25,     0,   411,   371,     0,     0,   411,
   371,     9,   413,   371,     0,     0,    10,    24,   290,   414,
    25,   371,     0,    11,    24,   290,    25,     0,    11,    24,
   290,    25,     0,     0,     0,   189,   418,   398,    24,   419,
   420,    25,   396,   442,   399,     0,   422,     0,     0,   420,
   421,    21,   422,     0,   441,     0,   448,     0,   186,     0,
   185,     0,   188,     0,   423,   188,     0,   423,     0,    24,
   290,    25,     0,   424,     0,   265,    26,   290,    27,     0,
   265,    24,    25,     0,   265,    24,   266,    25,     0,    70,
    24,   289,    21,   367,    25,     0,   265,   345,    28,   449,
   301,     0,   265,   345,    44,   449,   301,     0,   265,    47,
     0,   265,    48,     0,   425,     0,    47,   267,     0,    48,
   267,     0,    29,   273,     0,    34,   273,     0,    33,   273,
     0,    32,   273,     0,    31,   273,     0,    30,   273,     0,
   270,     0,   426,     0,    24,   367,    25,   273,     0,   427,
     0,   274,    34,   273,     0,   274,    35,   273,     0,   274,
    36,   273,     0,   428,     0,   275,    33,   274,     0,   275,
    32,   274,     0,   429,     0,   276,    49,   275,     0,   276,
    50,   275,     0,   430,     0,   277,    37,   276,     0,   277,
    38,   276,     0,   277,    51,   276,     0,   277,    52,   276,
     0,   431,     0,   278,    53,   277,     0,   278,    54,   277,
     0,   432,     0,   279,    29,   278,     0,   433,     0,   280,
    39,   279,     0,   434,     0,   281,    40,   280,     0,   435,
     0,   282,    55,   281,     0,   436,     0,   284,    56,   282,
     0,   437,     0,     0,     0,   284,    41,   439,   290,    22,
   440,   286,     0,   438,     0,   267,    23,   289,     0,   267,
    57,   289,     0,   267,    58,   289,     0,   267,    59,   289,
     0,   267,    60,   289,     0,   267,    61,   289,     0,   267,
    62,   289,     0,   267,    63,   289,     0,   267,    64,   289,
     0,   267,    65,   289,     0,   267,    66,   289,     0,   190,
     0,     0,    12,     0,   415,   371,     0,   443,   371,    11,
    24,   290,    25,    18,     0,   376,   371,     0,   415,   387,
     0,   443,   387,    11,    24,   290,    25,    18,     0,   443,
   387,    11,    24,   290,    25,     0,   376,   387,     0,    14,
   449,    18,     0,    15,    18,     0,    99,    15,    18,     0,
    16,    18,     0,    95,    16,    18,     0,    96,    16,    18,
     0,    97,    16,    18,     0,    98,    16,    18,     0,    17,
    18,     0,    17,   290,    18,     0,     0,    18,     0,   184,
     0,   185,     0,   189,     0,   190,     0,   448,     0,   186,
     0,   191,     0,   186,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   325,   326,   329,   330,   333,   334,   335,   336,   337,   338,
   339,   342,   344,   348,   348,   355,   361,   365,   366,   370,
   371,   373,   375,   387,   390,   400,   403,   411,   412,   414,
   416,   432,   435,   443,   446,   454,   456,   456,   460,   461,
   462,   463,   466,   469,   473,   473,   476,   476,   481,   482,
   485,   490,   491,   494,   495,   498,   503,   504,   507,   508,
   509,   512,   513,   514,   519,   520,   523,   525,   527,   529,
   538,   540,   542,   544,   560,   564,   565,   572,   573,   581,
   583,   587,   588,   589,   590,   591,   592,   595,   596,   597,
   598,   599,   600,   603,   606,   607,   614,   617,   620,   626,
   634,   636,   640,   643,   644,   647,   650,   656,   660,   661,
   664,   667,   668,   671,   672,   673,   676,   677,   678,   679,
   680,   683,   684,   685,   686,   687,   690,   691,   694,   700,
   704,   706,   710,   711,   713,   720,   730,   731,   734,   735,
   736,   737,   738,   739,   740,   741,   745,   746,   750,   751,
   754,   756,   758,   759,   760,   761,   762,   764,   768,   769,
   772,   776,   788,   789,   790,   791,   792,   793,   796,   797,
   798,   799,   800,   801,   802,   803,   804,   807,   808,   811,
   812,   813,   814,   815,   816,   817,   818,   819,   820,   821,
   824,   825,   828,   832,   833,   836,   837,   838,   839,   842,
   843,   847,   848,   849,   850,   853,   854,   855,   858,   859,
   860,   863,   864,   865,   866,   867,   870,   871,   872,   875,
   876,   879,   880,   884,   885,   888,   889,   894,   900,   901,
   907,   913,   914,   914,   916,   919,   920,   921,   922,   923,
   924,   925,   926,   927,   928,   929,   930,   933,   934,   937,
   938,   941,   946,   947,   948,   951,   965,   970,   976,   978,
   984,   989,   989,   993,   994,   996,   997,  1000,  1003,  1006,
  1009,  1010,  1013,  1014,  1017,  1018,  1019,  1023,  1025,  1034,
  1035,  1036,  1037,  1038,  1040,  1044,  1047,  1053,  1062,  1065,
  1068,  1075,  1082,  1088,  1113,  1114,  1117,  1118,  1119,  1120,
  1121,  1124,  1125,  1126,  1127,  1130,  1131,  1132,  1133,  1134,
  1135,  1136,  1137,  1138,  1139,  1140,  1141,  1142,  1143,  1144,
  1145,  1146,  1150,  1151,  1154,  1155,  1158,  1159,  1162,  1163,
  1164,  1165,  1168,  1169,  1170,  1171,  1172,  1173,  1176,  1177,
  1178,  1179,  1182,  1183,  1184,  1185,  1188,  1189,  1190,  1191,
  1192,  1193,  1194,  1195,  1196,  1197,  1198,  1205,  1206,  1207,
  1208,  1209,  1210,  1211,  1212,  1213,  1214,  1215,  1216,  1217,
  1218,  1221,  1225,  1226,  1230,  1231,  1235,  1236,  1237,  1240,
  1241,  1245,  1252,  1254,  1256,  1257,  1259,  1261,  1262,  1264,
  1266,  1268,  1270,  1271,  1272,  1275,  1276,  1278,  1280,  1281,
  1284,  1287,  1288,  1289,  1292,  1294,  1298,  1300,  1304,  1305,
  1306,  1310,  1312,  1312,  1314,  1317,  1319,  1321,  1324,  1329,
  1336,  1337,  1338,  1345,  1349,  1350,  1354,  1355,  1358,  1359,
  1362,  1363,  1366,  1367,  1368,  1369,  1372,  1373,  1376,  1377,
  1380,  1381,  1382,  1385,  1385,  1386,  1387,  1390,  1402,  1418,
  1419,  1422,  1423,  1424,  1427,  1428,  1431,  1433,  1434,  1436,
  1437,  1439,  1441,  1443,  1445,  1451,  1452,  1453,  1454,  1455,
  1456,  1457,  1458,  1459,  1463,  1466,  1469,  1470,  1474,  1476,
  1478,  1480,  1484,  1485,  1487,  1491,  1493,  1495,  1498,  1499,
  1500,  1501,  1502,  1503,  1504,  1505,  1506,  1507,  1508,  1509,
  1510,  1513,  1514,  1519,  1522,  1525,  1526,  1529,  1530,  1531,
  1532,  1533,  1534,  1535,  1536,  1537,  1538,  1539,  1542,  1543,
  1550,  1551,  1557,  1558,  1559,  1560,  1563,  1564,  1565,  1566,
  1569,  1570,  1574,  1577,  1580,  1583,  1586,  1589,  1592,  1593,
  1594,  1595,  1597,  1598,  1600,  1602,  1608,  1612,  1614,  1616,
  1618,  1622,  1623,  1626,  1627,  1630,  1631,  1634,  1635,  1638,
  1639,  1640,  1643,  1656,  1661,  1662,  1666,  1667,  1670,  1675,
  1678,  1679,  1680,  1688,  1689,  1689,  1693,  1694,  1695,  1706,
  1713,  1714,  1717,  1718,  1721,  1722,  1723,  1724,  1725,  1727,
  1728,  1729,  1730,  1733,  1734,  1735,  1736,  1737,  1738,  1739,
  1740,  1741,  1742,  1745,  1746,  1749,  1750,  1751,  1752,  1755,
  1756,  1757,  1760,  1761,  1762,  1765,  1766,  1767,  1768,  1769,
  1772,  1773,  1774,  1777,  1778,  1781,  1782,  1786,  1787,  1790,
  1791,  1794,  1795,  1798,  1799,  1800,  1801,  1804,  1805,  1806,
  1807,  1808,  1809,  1810,  1811,  1812,  1813,  1814,  1815,  1818,
  1819,  1822,  1825,  1827,  1829,  1833,  1834,  1836,  1838,  1841,
  1842,  1843,  1845,  1846,  1847,  1848,  1849,  1850,  1851,  1854,
  1855,  1858,  1861,  1862,  1863,  1864,  1865,  1868,  1869
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","BADTOK",
"SKIPTOK","CTOK_ELIPSIS","CASE","DEFAULT","CIF","CELSE","SWITCH","WHILE","DO",
"CFOR","GOTO","CONTINUE","BREAK","RETURN","TSEMI","TLBRACE","TRBRACE","TCOMMA",
"TCOLON","TASSIGN","TLPAREN","TRPAREN","TLSQBR","TRSQBR","TDOT","TAMPERSAND",
"TEXCL","TTILDE","TMINUS","TPLUS","TMULT","TDIV","TPERCENT","TLT","TGT","TCIRC",
"TBAR","TQUEST","CSIZEOF","CALIGNOF","ARROW_OP","CTYPEDEF","COFFSETOF","INC_OP",
"DEC_OP","LEFT_OP","RIGHT_OP","LE_OP","GE_OP","EQ_OP","NE_OP","AND_OP","OR_OP",
"MUL_ASSIGN","DIV_ASSIGN","MOD_ASSIGN","ADD_ASSIGN","SUB_ASSIGN","LEFT_ASSIGN",
"RIGHT_ASSIGN","AND_ASSIGN","XOR_ASSIGN","OR_ASSIGN","CSTRUCT","CUNION","CENUM",
"VA_ARG","VA_DCL","QWARN","QGLOBALS","QMODIFIES","QNOMODS","QCONSTANT","QFUNCTION",
"QITER","QDEFINES","QUSES","QALLOCATES","QSETS","QRELEASES","QPRECLAUSE","QPOSTCLAUSE",
"QINVARIANT","QALT","QUNDEF","QKILLED","QENDMACRO","LLMACRO","LLMACROITER","LLMACROEND",
"TENDMACRO","QSWITCHBREAK","QLOOPBREAK","QINNERBREAK","QSAFEBREAK","QINNERCONTINUE",
"QFALLTHROUGH","QLINTNOTREACHED","QLINTFALLTHROUGH","QLINTFALLTHRU","QARGSUSED",
"QPRINTFLIKE","QLINTPRINTFLIKE","QSCANFLIKE","QMESSAGELIKE","QNOTREACHED","QCONST",
"QVOLATILE","QINLINE","QEXTENSION","QEXTERN","QSTATIC","QAUTO","QREGISTER","QOUT",
"QIN","QYIELD","QONLY","QTEMP","QSHARED","QREF","QUNIQUE","QCHECKED","QUNCHECKED",
"QCHECKEDSTRICT","QCHECKMOD","QKEEP","QKEPT","QPARTIAL","QSPECIAL","QOWNED",
"QDEPENDENT","QRETURNED","QEXPOSED","QNULL","QOBSERVER","QISNULL","QEXITS","QMAYEXIT",
"QNEVEREXIT","QTRUEEXIT","QFALSEEXIT","QLONG","QSIGNED","QUNSIGNED","QSHORT",
"QUNUSED","QSEF","QNOTNULL","QRELNULL","QABSTRACT","QCONCRETE","QMUTABLE","QIMMUTABLE",
"QTRUENULL","QFALSENULL","QEXTERNAL","QREFCOUNTED","QREFS","QNEWREF","QTEMPREF",
"QKILLREF","QRELDEF","CGCHAR","CBOOL","CINT","CGFLOAT","CDOUBLE","CVOID","QANYTYPE",
"QINTEGRALTYPE","QUNSIGNEDINTEGRALTYPE","QSIGNEDINTEGRALTYPE","QNULLTERMINATED",
"QSETBUFFERSIZE","QSETSTRINGLENGTH","QMAXSET","QMAXREAD","QTESTINRANGE","TCAND",
"IDENTIFIER","NEW_IDENTIFIER","TYPE_NAME_OR_ID","CANNOTATION","CCONSTANT","ITER_NAME",
"ITER_ENDNAME","TYPE_NAME","METASTATE_NAME","file","externalDefs","externalDef",
"constantDecl","fcnDecl","@1","plainFcn","plainNamedDecl","namedDeclBase","@2",
"@3","plainNamedDeclBase","@4","@5","iterDecl","@6","@7","macroDef","fcnDefHdr",
"metaStateConstraint","metaStateSpecifier","@8","@9","metaStateExpression","metaStateName",
"constraintSeperator","BufConstraintList","BufConstraint","bufferModifier","relationalOp",
"BufConstraintExpr","BufConstraintTerm","BufConstraintSrefExpr","BufUnaryOp",
"BufBinaryOp","functionClauses","functionClausesPlain","functionClause","functionClausePlain",
"globalsClause","globalsClausePlain","@10","nomodsClause","modifiesClause","modifiesClausePlain",
"@11","flagSpec","flagId","optWarnClause","warnClause","warnClausePlain","globIdList",
"globIdListExpr","optGlobQuals","globId","globQual","stateTag","conditionTag",
"fcnDefHdrAux","fcnBody","@12","@13","@14","fcnDef","locModifies","modListExpr",
"mExpr","modList","specClauseListExpr","optSpecClauseList","specClauseList",
"primaryExpr","postfixExpr","argumentExprList","unaryExpr","fieldDesignator",
"offsetofExpr","sizeofExpr","@15","sizeofExprAux","castExpr","timesExpr","plusExpr",
"shiftExpr","relationalExpr","equalityExpr","bitandExpr","xorExpr","bitorExpr",
"andExpr","@16","orExpr","@17","conditionalExpr","@18","@19","assignExpr","expr",
"optExpr","constantExpr","initializer","instanceDecl","@20","@21","namedInitializer",
"@22","typeDecl","@23","IsType","PushType","namedInitializerList","namedInitializerListAux",
"optDeclarators","init","initList","storageSpecifier","stateClause","stateClausePlain",
"@24","conditionClause","startConditionClause","conditionClausePlain","@25",
"@26","functionConstraint","exitsQualifier","checkQualifier","stateQualifier",
"paramQualifier","visibilityQualifier","returnQualifier","typedefQualifier",
"refcountQualifier","typeModifier","definedQualifier","typeQualifier","typeSpecifier",
"completeType","completeTypeSpecifier","altType","completeTypeSpecifierAux",
"optCompleteType","optStructInvariant","suSpc","@27","@28","@29","@30","@31",
"@32","@33","@34","NotType","structDeclList","structDecl","structNamedDeclList",
"structNamedDecl","enumSpc","@35","enumeratorList","enumerator","optNamedDecl",
"namedDecl","genericParamList","innerMods","innerModsList","pointers","paramIdList",
"idList","paramTypeList","paramList","@36","@37","paramDecl","typeExpression",
"abstractDecl","optAbstractDeclBase","abstractDeclBase","stmt","iterBody","endBody",
"iterDefStmtList","iterDefIterationStmt","forPred","@38","@39","partialIterStmt",
"@40","iterDefStmt","iterSelectionStmt","@41","openScope","closeScope","macroBody",
"stmtErr","labeledStmt","optExtraFallThroughs","caseStmt","@42","@43","defaultStmt",
"@44","@45","compoundStmt","compoundStmtErr","CreateInnerScope","DeleteInnerScope",
"CreateStructInnerScope","DeleteStructInnerScope","DeleteInnerScopeSafe","compoundStmtRest",
"compoundStmtAux","compoundStmtAuxErr","stmtListErr","initializerList","stmtList",
"expressionStmt","expressionStmtErr","ifPred","selectionStmt","@46","@47","whilePred",
"iterWhilePred","iterStmt","@48","@49","iterArgList","@50","iterArgExpr","cconstantExpr",
"primaryIterExpr","postfixIterExpr","unaryIterExpr","castIterExpr","timesIterExpr",
"plusIterExpr","shiftIterExpr","relationalIterExpr","equalityIterExpr","bitandIterExpr",
"xorIterExpr","bitorIterExpr","andIterExpr","orIterExpr","conditionalIterExpr",
"@51","@52","assignIterExpr","endIter","doHeader","iterationStmt","iterationStmtErr",
"jumpStmt","optSemi","id","newId","typeName", NULL
};
#endif

static const short yyr1[] = {     0,
   193,   193,   194,   194,   195,   195,   195,   195,   195,   195,
   195,   196,   196,   198,   197,   199,   199,   200,   200,   201,
   201,   201,   201,   202,   201,   203,   201,   204,   204,   204,
   204,   205,   204,   206,   204,   208,   209,   207,   210,   210,
   210,   210,   211,   212,   214,   213,   215,   213,   216,   216,
   217,   218,   218,   219,   219,   220,   221,   221,   222,   222,
   222,   223,   223,   223,   224,   224,   225,   225,   225,   225,
   225,   225,   225,   225,   226,   227,   227,   228,   228,   229,
   229,   230,   230,   230,   230,   230,   230,   231,   231,   231,
   231,   231,   231,   232,   234,   233,   235,   236,   238,   237,
   239,   239,   240,   241,   241,   242,   243,   243,   244,   244,
   245,   246,   246,   247,   247,   247,   248,   248,   248,   248,
   248,   249,   249,   249,   249,   249,   250,   250,   251,   251,
   253,   252,   254,   255,   252,   256,   257,   257,   258,   258,
   258,   258,   258,   258,   258,   258,   259,   259,   260,   260,
   261,   261,   261,   261,   261,   261,   261,   261,   262,   262,
   263,   263,   264,   264,   264,   264,   264,   264,   265,   265,
   265,   265,   265,   265,   265,   265,   265,   266,   266,   267,
   267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
   268,   268,   269,   271,   270,   272,   272,   272,   272,   273,
   273,   274,   274,   274,   274,   275,   275,   275,   276,   276,
   276,   277,   277,   277,   277,   277,   278,   278,   278,   279,
   279,   280,   280,   281,   281,   282,   283,   282,   284,   285,
   284,   286,   287,   288,   286,   289,   289,   289,   289,   289,
   289,   289,   289,   289,   289,   289,   289,   290,   290,   291,
   291,   292,   293,   293,   293,   294,   295,   294,   296,   294,
   297,   298,   297,   300,   299,   299,   299,   301,   302,   303,
   304,   304,   305,   305,   306,   306,   306,   307,   307,   308,
   308,   308,   308,   308,    -1,   309,   311,   310,   312,   313,
   315,   314,   316,   314,   317,   317,   318,   318,   318,   318,
   318,   319,   319,   319,   319,   320,   320,   320,   320,   320,
   320,   320,   320,   320,   320,   320,   320,   320,   320,   320,
   320,   320,   321,   321,   322,   322,   323,   323,   324,   324,
   324,   324,   325,   325,   325,   325,   325,   325,   326,   326,
   326,   326,   327,   327,   327,   327,   328,   328,   328,   328,
   328,   328,   328,   328,   328,   328,   328,   329,   329,   329,
   329,   329,   329,   329,   329,   329,   329,   329,   329,   329,
   329,   330,   331,   331,   332,   332,   333,   333,   333,   334,
   334,   335,   337,   338,   336,   339,   340,   336,   336,   336,
   341,   342,   336,   343,   344,   336,   336,   336,   336,   336,
   345,   346,   346,   346,   347,   347,   348,   348,   349,   349,
   349,   350,   351,   350,   350,   352,   352,   352,   353,   353,
   354,   354,   354,   354,   355,   355,   356,   356,   357,   357,
   358,   358,   359,   359,   359,   359,   360,   360,   361,   361,
   362,   362,   362,   364,   363,   365,   363,   366,   366,   367,
   367,   368,   368,   368,   369,   369,   370,   370,   370,   370,
   370,   370,   370,   370,   370,   371,   371,   371,   371,   371,
   371,   371,   371,   371,   372,   373,   374,   374,   375,   375,
   375,   375,   377,   378,   376,   380,   379,   379,   381,   381,
   381,   381,   381,   381,   381,   381,   381,   381,   381,   381,
   381,   383,   382,   384,   385,   386,   386,   387,   387,   387,
   387,   387,   387,   387,   387,   387,   387,   387,   388,   388,
   389,   389,   391,   390,   392,   390,   394,   393,   395,   393,
   396,   396,   397,   398,   399,   400,   401,   402,   403,   403,
   403,   403,   403,   403,   403,   403,   404,   405,   405,   405,
   405,   406,   406,   407,   407,   408,   408,   409,   409,   410,
   410,   410,   411,   412,   413,   412,   414,   412,   415,   416,
   418,   419,   417,   420,   421,   420,   422,   422,   422,   422,
   423,   423,   424,   424,   425,   425,   425,   425,   425,   425,
   425,   425,   425,   426,   426,   426,   426,   426,   426,   426,
   426,   426,   426,   427,   427,   428,   428,   428,   428,   429,
   429,   429,   430,   430,   430,   431,   431,   431,   431,   431,
   432,   432,   432,   433,   433,   434,   434,   435,   435,   436,
   436,   437,   437,   438,   439,   440,   438,   441,   441,   441,
   441,   441,   441,   441,   441,   441,   441,   441,   441,   442,
   442,   443,   444,   444,   444,   445,   445,   445,   445,   446,
   446,   446,   446,   446,   446,   446,   446,   446,   446,   447,
   447,   448,   449,   449,   449,   449,   449,   450,   450
};

static const short yyr2[] = {     0,
     0,     1,     1,     2,     2,     1,     1,     1,     1,     1,
     1,     8,    11,     0,     5,     1,     3,     1,     2,     1,
     6,     3,     6,     0,     6,     0,     7,     1,     6,     3,
     6,     0,     6,     0,     7,     0,     0,    10,     3,     3,
     3,     2,     1,     3,     0,     4,     0,     4,     1,     3,
     1,     1,     1,     3,     1,     3,     1,     1,     1,     1,
     1,     1,     4,     5,     1,     1,     1,     1,     3,     4,
     2,     3,     3,     3,     1,     1,     1,     0,     2,     0,
     2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     2,     0,     4,     1,     2,     0,     3,
     1,     3,     1,     1,     0,     2,     3,     2,     1,     3,
     2,     0,     2,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
     0,     3,     0,     0,     4,     2,     2,     1,     1,     1,
     3,     4,     2,     3,     3,     3,     1,     1,     1,     3,
     1,     1,     3,     4,     2,     3,     3,     3,     0,     1,
     1,     3,     1,     1,     1,     3,     1,     1,     1,     4,
     3,     4,     6,     5,     5,     2,     2,     1,     3,     1,
     2,     2,     2,     2,     2,     2,     2,     2,     1,     1,
     3,     1,     9,     0,     3,     4,     2,     4,     2,     1,
     4,     1,     3,     3,     3,     1,     3,     3,     1,     3,
     3,     1,     3,     3,     3,     3,     1,     3,     3,     1,
     3,     1,     3,     1,     3,     1,     0,     4,     1,     0,
     4,     1,     0,     0,     7,     1,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     1,     3,     0,
     1,     1,     1,     1,     1,     3,     0,     9,     0,    11,
     2,     0,     6,     0,     8,     4,     4,     0,     0,     2,
     1,     4,     0,     4,     1,     3,     4,     1,     3,     1,
     1,     1,     1,     1,     2,     2,     0,     6,     2,     2,
     0,     6,     0,     5,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     3,     1,     4,     1,     3,     2,     2,     2,     0,
     1,     0,     0,     0,    12,     0,     0,    11,     6,     6,
     0,     0,    10,     0,     0,    10,     5,     5,     4,     4,
     0,     1,     1,     2,     5,     3,     2,     4,     1,     3,
     4,     6,     0,     8,     4,     1,     3,     2,     1,     4,
     1,     1,     2,     2,     1,     2,     1,     2,     1,     1,
     1,     2,     1,     2,     2,     3,     1,     3,     1,     3,
     1,     1,     3,     0,     2,     0,     4,     4,     1,     1,
     2,     1,     1,     2,     0,     1,     5,     2,     3,     3,
     4,     3,     4,     4,     5,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     2,     2,     7,
     6,     2,     0,     0,    10,     0,     6,     1,     1,     1,
     1,     2,     1,     1,     1,     1,     1,     1,     1,     3,
     1,     0,     3,     2,     2,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     3,     1,     1,     2,     2,
     0,     2,     0,     4,     0,     6,     0,     3,     0,     5,
     3,     2,     3,     0,     0,     0,     0,     0,     1,     2,
     2,     3,     2,     3,     3,     4,     2,     2,     3,     3,
     4,     1,     2,     1,     2,     1,     2,     1,     2,     1,
     2,     1,     4,     2,     0,     5,     0,     6,     4,     4,
     0,     0,    10,     1,     0,     4,     1,     1,     1,     1,
     1,     2,     1,     3,     1,     4,     3,     4,     6,     5,
     5,     2,     2,     1,     2,     2,     2,     2,     2,     2,
     2,     2,     1,     1,     4,     1,     3,     3,     3,     1,
     3,     3,     1,     3,     3,     1,     3,     3,     3,     3,
     1,     3,     3,     1,     3,     1,     3,     1,     3,     1,
     3,     1,     3,     1,     0,     0,     7,     1,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     1,
     0,     1,     2,     7,     2,     2,     7,     6,     2,     3,
     2,     3,     2,     3,     3,     3,     3,     2,     3,     0,
     1,     1,     1,     1,     1,     1,     1,     1,     1
};

static const short yydefact[] = {     0,
    11,   433,   401,   254,   401,    14,     0,     0,     0,     0,
   268,   268,   281,   280,   282,   283,   284,   343,   344,   308,
   310,   309,   313,   314,   302,   304,   305,   303,   311,   312,
   345,   346,   306,   307,   323,   319,   315,   320,   316,   297,
   298,   301,   299,   300,   340,   341,   342,   339,   325,   324,
   318,   317,   329,   330,   331,   332,   327,   328,   326,   333,
   334,   337,   338,   335,   336,   401,   401,   401,   401,   401,
   401,   401,   401,   401,   401,   321,   672,   673,   677,   322,
   674,   675,   678,     0,     3,     6,     7,   425,     8,     9,
   133,    43,   670,    10,   253,   255,     0,   380,   268,   268,
   268,   268,   268,   268,   268,   268,   401,   268,   380,   380,
   401,   373,   401,     0,   401,   129,   268,   676,    20,   401,
   429,   430,   431,   434,   435,   271,   268,   268,   264,   401,
   679,   401,   401,   677,     0,   518,   268,   527,     0,     0,
     0,   652,     0,     0,     0,     0,   268,   560,     0,   268,
   268,   268,   268,   268,   268,   268,   268,   268,     0,    42,
     0,     0,     0,     0,     0,   521,   268,   168,   164,   167,
   581,   571,   169,   180,   200,   190,   189,   202,   206,   209,
   212,   217,   220,   222,   224,   226,   229,   232,   236,   248,
   562,   194,     0,     0,   552,   508,   509,   510,   511,     0,
     0,   512,   268,   513,     0,   514,   165,     0,   515,   517,
   163,     0,   501,     0,   558,     0,   534,   488,     0,     0,
     0,   497,     0,   498,   477,   496,   493,   494,   489,   490,
   491,     0,     0,   495,   502,     0,     0,   499,   476,     0,
   347,   348,   358,   360,   359,   361,   362,   363,   364,   365,
   366,   367,     4,   268,     0,   131,   136,   401,   671,     5,
   401,   381,   377,   351,   353,   350,   352,   355,   354,   356,
   357,   371,   349,   378,   379,     0,   268,   268,   369,   268,
   268,     0,   370,   426,   368,   432,   436,   401,     0,   270,
   401,     0,   261,   268,   670,    16,    18,     0,   401,   268,
    28,   444,   268,   164,   167,   200,   252,   523,   163,     0,
   268,   268,   268,   268,     0,   661,   663,   668,     0,     0,
   401,   450,     0,     0,   183,   188,   187,   186,   185,   184,
     0,   268,   181,   182,   268,     0,     0,     0,     0,     0,
   521,     0,   268,   520,   268,   466,   467,   468,   469,     0,
   470,   471,   268,   473,   268,   472,   474,   534,   268,   268,
   176,   177,     0,   268,   268,   268,   268,   268,   268,   268,
   268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
   268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
   227,   233,   230,   561,   268,     0,   659,    39,     0,   535,
   553,   564,   656,   582,     0,   519,   268,     0,     0,     0,
   559,    40,   478,   482,   554,   401,   492,   504,   505,     0,
     0,     0,    41,    22,   268,   444,   401,   401,   268,   256,
   130,   401,     0,   375,     0,   401,     0,   401,     0,   268,
   268,   267,   268,   266,   262,   401,     0,   268,     0,   401,
   268,    19,   441,     0,     0,   427,   442,   268,     0,     0,
   528,     0,   567,     0,   251,     0,   660,   669,   166,   268,
   268,     0,   452,   451,   453,   268,   516,   268,     0,   664,
   665,   666,   667,   662,   522,   268,   529,     0,   655,   401,
   532,   653,     0,     0,   171,     0,   178,     0,     0,     0,
   237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
   247,   203,   204,   205,   208,   207,   210,   211,   213,   214,
   215,   216,   218,   219,   221,   223,   225,   268,   268,   268,
   249,   268,   268,   195,   548,   167,   552,     0,   401,   533,
   565,     0,     0,   500,   486,   268,   555,   503,     0,     0,
    24,     0,   539,   268,   556,   132,   401,   268,   534,   268,
   257,   374,   268,   391,     0,   399,   394,     0,   400,     0,
   416,   419,   413,   415,   272,   268,   268,   670,    15,    30,
   268,   444,   268,    17,   428,   437,   439,    36,   446,   401,
   445,   449,   524,   563,     0,   569,   268,   372,   458,     0,
   444,   454,   268,     0,   201,   401,   268,   525,     0,   531,
   547,     0,   572,   268,   172,   170,   268,   268,   228,     0,
   231,   268,   197,   268,   199,   549,   550,   268,   268,   268,
   570,   268,   401,   268,   401,    78,    26,   540,   543,   268,
   268,   541,   268,   557,   534,   135,     0,   259,   268,   376,
   397,   536,   383,   398,   536,   386,   268,   418,   268,     0,
   105,   268,   268,   268,     0,    32,     0,   268,     0,    80,
   443,   268,   455,   268,     0,   459,   462,   268,     0,   460,
     0,   444,     0,     0,     0,   530,   268,   268,   179,   174,
   175,   234,     0,     0,   551,   566,     0,   268,   268,   268,
   268,   268,   268,   268,   268,   268,     0,   164,   167,   180,
   200,   189,   206,   209,   212,   217,   220,   222,   224,   226,
   229,     0,   575,   574,   165,   585,   594,   604,   606,   610,
   613,   616,   621,   624,   626,   628,   630,   632,   634,   638,
   577,   163,     0,    23,     0,    95,    99,    97,   122,   123,
   124,   125,   126,   127,   128,    25,    78,    82,     0,    84,
    83,     0,    87,     0,   401,   401,    85,     0,    86,   293,
     0,    78,   544,   545,   268,   542,    21,   268,   273,   401,
   389,   536,   401,   390,   536,   412,   417,   268,     0,     0,
   104,   268,   275,   263,   268,     0,   401,    80,    34,     0,
   438,   440,    37,    80,    88,    90,    89,    93,    91,    92,
   447,   421,     0,   268,   455,   422,   456,   568,   483,     0,
   463,   461,   464,     0,     0,   173,   526,     0,   575,   268,
   196,   198,   658,     0,     0,   183,   188,   187,   186,   185,
   184,   181,   182,   268,   268,   268,   176,   177,     0,   268,
   268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
   268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
   268,   268,   268,   268,   268,   268,   227,   635,   230,   487,
     0,   481,   103,   108,   101,   112,   670,    79,    94,    98,
   106,   287,   290,   286,     0,   291,   289,    27,   546,   268,
     0,   403,   401,   401,   402,   401,   401,   401,   420,   268,
   265,   278,     0,   273,    12,    31,    33,    80,    29,   670,
    81,   444,   448,   423,   424,   268,   457,   465,     0,   192,
     0,   534,   235,   657,   166,   268,     0,   171,     0,     0,
     0,     0,   639,   640,   641,   642,   643,   644,   645,   646,
   647,   648,   649,   203,   204,   205,   208,   207,   210,   211,
   213,   214,   215,   216,   218,   219,   221,   223,   225,   631,
   268,   633,   268,   480,   107,     0,   117,   118,   119,   120,
   121,   670,   109,   401,   112,     0,     0,   140,   100,   149,
   670,   138,   139,     0,    47,     0,     0,    57,    58,    68,
    66,   296,     0,   295,    55,    75,     0,    62,    65,     0,
   670,    67,   159,   273,   268,   401,     0,   268,   404,   392,
   401,   395,   401,   414,   276,   268,   670,    35,     0,   268,
   484,   268,     0,   654,   651,   201,   268,   172,   170,   268,
   268,     0,   576,   102,   112,    96,   115,   111,   116,   114,
   113,     0,   143,     0,     0,     0,     0,   137,     0,     0,
   152,   161,   670,   151,     0,     0,    65,     0,    71,     0,
    53,    52,     0,    60,    59,    61,     0,     0,     0,     0,
     0,     0,   268,   670,   160,     0,   258,   268,   406,   268,
   268,   401,   409,     0,   384,     0,   387,   277,   279,     0,
    38,   268,     0,   193,   191,   650,   535,     0,   174,   175,
   636,   110,   144,   141,   147,     0,   148,   145,   146,   150,
     0,   155,     0,     0,     0,     0,   268,     0,    77,    76,
     0,    72,     0,    49,    44,    45,    54,    65,    56,    69,
     0,    73,    74,     0,     0,   294,   268,   268,   274,   268,
   268,     0,   407,   268,   393,     0,   396,     0,    13,   485,
   573,   173,   268,   142,   156,   153,     0,   157,   158,   162,
   288,    51,    48,     0,     0,    70,    46,    63,   292,   260,
   410,   401,   405,   268,   382,   388,   637,   154,    64,    50,
   408,   411,   385,     0,     0,     0
};

static const short yydefgoto[] = {  1194,
    84,    85,    86,    87,   133,   295,   296,    88,   636,   772,
   297,   798,   918,    89,   670,   920,   902,    91,  1002,  1134,
  1081,  1065,  1135,  1173,  1073,  1004,  1005,  1006,  1077,  1007,
  1008,  1138,  1010,  1131,   756,   803,   757,   804,   758,   805,
   886,   806,   761,   807,   887,   884,   885,   790,   763,   764,
   982,   983,   984,  1048,   985,   765,   766,    92,   257,   427,
   258,   559,    93,   989,  1115,  1116,   991,  1062,  1084,  1063,
   173,   174,   496,   175,   929,   176,   177,   396,   534,   178,
   179,   180,   181,   182,   183,   184,   185,   186,   187,   528,
   188,   530,   189,   529,   830,   190,   219,   466,   308,   415,
    95,   649,   778,   126,   577,    96,   291,   192,   255,   127,
   128,   901,   794,   913,    98,   767,   809,   994,   769,   770,
   810,  1013,   895,  1011,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   322,   416,   433,   112,
   263,  1193,   113,   782,  1156,   785,  1158,   652,  1094,   655,
  1096,   114,   904,   905,  1091,  1092,   115,   660,   570,   571,
   814,   130,   455,   123,   124,   117,   585,   586,   456,   457,
   458,   672,   591,   323,   820,   816,   475,   344,   220,   240,
   221,   222,   345,   926,  1103,   224,   632,   225,   226,   420,
   227,   228,   194,   401,   346,   342,   347,   460,   685,   348,
   310,   609,   349,   199,   350,   540,   780,  1020,   233,   556,
   491,   400,   201,   557,   558,   351,   202,   203,   352,   629,
   595,   353,   236,   354,   358,   688,   723,   881,   724,   207,
   726,   727,   728,   729,   730,   731,   732,   733,   734,   735,
   736,   737,   738,   739,   740,   971,  1163,   741,  1107,   355,
   356,   209,   357,   260,   309,   212,   120
};

static const short yypact[] = {  2060,
-32768,    48,  5211,-32768,  6258,-32768,   337,  3056,  3442,  3442,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   297,-32768,
-32768,-32768,-32768,  2252,-32768,-32768,-32768,   408,-32768,-32768,
    46,-32768,    78,-32768,-32768,-32768,    83,  6093,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  6093,  6093,
   186,   154,-32768,   588,-32768,-32768,   337,-32768,-32768,-32768,
-32768,-32768,-32768,    48,-32768,-32768,   267,-32768,   186,-32768,
-32768,-32768,  5211,-32768,   273,-32768,  1635,-32768,   290,   314,
   363,-32768,   372,   337,   397,   478,  1549,-32768,  2630,  1635,
  1635,  1635,  1635,  1635,  1635,-32768,  5427,  5427,   482,-32768,
   488,   512,   517,   532,   545,   481,  4741,-32768,   570,   586,
-32768,   591,-32768,   716,  1169,-32768,-32768,-32768,   864,   483,
   595,   542,   693,   573,   597,   599,   608,    59,-32768,-32768,
   121,-32768,  3591,   577,   604,-32768,-32768,-32768,-32768,   649,
  3205,-32768,  4741,-32768,  3591,-32768,   505,  3591,-32768,-32768,
   679,   690,-32768,   698,-32768,  2821,   591,   692,   161,   643,
  3249,-32768,  3442,-32768,-32768,-32768,  5716,-32768,-32768,-32768,
-32768,   735,   739,-32768,-32768,  3442,  3591,-32768,-32768,   678,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   747,   755,-32768,-32768,  5982,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   801,   761,-32768,-32768,   337,
   337,    29,-32768,   408,-32768,-32768,-32768,-32768,   804,-32768,
-32768,   813,   783,   761,    78,-32768,   450,   810,-32768,   337,
-32768,   143,  1635,-32768,-32768,-32768,-32768,-32768,-32768,   817,
  1635,  1635,  1635,  1582,   833,-32768,-32768,-32768,   302,   669,
  5583,   426,   829,   837,-32768,-32768,-32768,-32768,-32768,-32768,
   851,  1635,-32768,-32768,  1635,   874,   891,   893,   919,   931,
   481,   778,  1903,-32768,  4741,-32768,-32768,-32768,-32768,   903,
-32768,-32768,  4741,-32768,  4741,-32768,-32768,-32768,  3547,  1635,
-32768,-32768,    85,  1635,  1635,  1635,  1635,  1635,  1635,  1635,
  1635,  1635,  1635,  1635,  1635,  1635,  1635,  1635,  1635,  1635,
  1635,  1635,  1635,  1635,  1635,  1635,  1635,  1635,  1635,  1635,
-32768,-32768,-32768,-32768,  1635,   842,-32768,-32768,  2439,-32768,
-32768,   949,-32768,-32768,   964,-32768,  1635,   688,   981,   965,
-32768,-32768,-32768,-32768,-32768,   186,  5716,-32768,-32768,  3442,
  3012,   998,-32768,-32768,  1635,   294,  3695,  4823,   761,-32768,
   321,  6258,   922,   993,  1008,  1010,  1016,  1010,   337,  1028,
   761,-32768,   761,-32768,-32768,-32768,   958,  1023,  1027,-32768,
   761,   450,-32768,   337,  1036,-32768,  1031,   337,   204,  1042,
-32768,   236,  1032,   281,  1032,  1047,-32768,-32768,-32768,-32768,
  5222,  1043,   768,-32768,   820,  1635,-32768,-32768,  1045,-32768,
-32768,-32768,-32768,-32768,-32768,  1635,-32768,  1044,-32768,  3695,
-32768,-32768,  1060,  1048,-32768,   316,-32768,    98,   337,   337,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   864,   864,   483,   483,   595,   595,
   595,   595,   542,   542,   693,   573,   597,  1635,  1635,  1635,
-32768,  5447,  5472,-32768,-32768,  5057,-32768,  3398,  3881,-32768,
-32768,  1050,   333,-32768,-32768,   761,-32768,-32768,  1051,  1049,
-32768,  1053,-32768,  4253,-32768,-32768,  4067,  4297,  1057,-32768,
  1062,-32768,-32768,  1063,  1067,-32768,  1069,  1068,-32768,   962,
-32768,  1070,-32768,-32768,-32768,   267,-32768,   188,-32768,-32768,
  1635,   366,   761,-32768,-32768,  1071,-32768,-32768,  1085,  6258,
-32768,-32768,-32768,-32768,  1066,-32768,  1582,-32768,-32768,  1073,
   127,   820,  5385,  1074,-32768,-32768,-32768,-32768,  1072,-32768,
-32768,  1077,-32768,  1635,-32768,-32768,-32768,-32768,   599,   979,
   608,  1635,-32768,  1635,-32768,-32768,-32768,  4401,  4741,  1635,
-32768,  5504,-32768,  1635,-32768,  1677,-32768,-32768,-32768,  4445,
  4549,-32768,  4593,-32768,  1057,-32768,  1078,-32768,-32768,-32768,
-32768,-32768,  1075,-32768,-32768,  1084,-32768,   337,-32768,   337,
  1025,  1960,-32768,-32768,  1079,-32768,  1080,-32768,   280,  1677,
-32768,   337,   592,  4741,  1093,-32768,-32768,   249,  1087,-32768,
  1083,    89,  1095,  1088,  1096,-32768,  1635,  5504,-32768,-32768,
-32768,-32768,  1089,  1094,-32768,-32768,   355,  1635,  1635,  1635,
  1635,  1635,  1635,  1635,  5427,  5427,  1103,   412,   436,   742,
  1405,   442,   900,   971,   961,   627,   972,  1091,  1090,  1098,
  1081,    87,  1105,-32768,    32,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   452,   580,-32768,   932,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  1677,-32768,  1054,-32768,
-32768,  1058,-32768,  1065,-32768,-32768,-32768,  1086,-32768,  1116,
  1097,  1677,-32768,-32768,  4697,-32768,-32768,-32768,-32768,  6180,
-32768,-32768,  6180,-32768,-32768,-32768,-32768,  1635,  1003,  1114,
-32768,  1960,-32768,-32768,  1960,  1104,-32768,  1677,-32768,  1108,
-32768,-32768,-32768,  1677,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   408,  1110,-32768,   717,-32768,   820,-32768,-32768,  1118,
-32768,-32768,-32768,  1128,   337,-32768,-32768,   617,  1131,  1635,
-32768,-32768,  1123,   702,  1145,   711,   732,   746,   748,   788,
   799,   808,   815,  1635,  5396,  1635,   828,   852,   112,  1635,
  1635,  1635,  1635,  1635,  1635,  1635,  1635,  1635,  1635,  1635,
  1635,  1635,  1635,  1635,  1635,  1635,  1635,  1635,  1635,  1635,
  1635,  1635,  1635,  1635,  1635,  1635,  1635,-32768,  1635,-32768,
  1150,  1160,-32768,   991,  1142,   317,    84,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,    54,-32768,-32768,-32768,-32768,  1960,
   368,-32768,   186,  4901,-32768,  6180,  4901,  6180,-32768,-32768,
-32768,-32768,  1017,-32768,-32768,-32768,-32768,  1677,-32768,    78,
-32768,   378,-32768,-32768,-32768,  5416,-32768,-32768,   382,-32768,
  1163,  1057,-32768,-32768,   855,  1635,  1162,   861,   872,   139,
   337,   337,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   889,   943,   944,   683,   927,   376,   836,
   367,   464,   524,   574,   610,   645,   144,   352,    62,   599,
  1635,   608,  5504,-32768,   505,   932,-32768,-32768,-32768,-32768,
-32768,   470,-32768,  5849,   317,    86,    86,-32768,-32768,   110,
   480,-32768,-32768,   107,-32768,   657,   123,-32768,-32768,-32768,
-32768,-32768,  1161,-32768,    17,-32768,   904,-32768,   556,  1164,
    78,-32768,   107,-32768,-32768,-32768,  1167,   425,-32768,-32768,
  4901,-32768,  4901,-32768,-32768,  1835,   554,-32768,  1106,   754,
-32768,-32768,   337,-32768,   996,   945,-32768,   946,   953,-32768,
-32768,  1018,-32768,-32768,   317,-32768,-32768,-32768,-32768,-32768,
-32768,   515,   110,   728,   337,   337,    86,-32768,   107,   107,
-32768,   147,   601,-32768,  1171,  1011,   786,   123,   396,    75,
-32768,-32768,   657,-32768,-32768,-32768,   657,     4,   337,   337,
  1173,   657,-32768,    78,  1168,   609,-32768,   761,-32768,-32768,
  1177,-32768,  1178,  1181,-32768,  1182,-32768,-32768,-32768,  1119,
-32768,   544,  1179,-32768,-32768,-32768,-32768,  1183,   960,   967,
-32768,-32768,-32768,-32768,   110,  1184,   505,-32768,-32768,   110,
   846,   147,   832,   337,   337,   107,-32768,  1014,-32768,-32768,
   657,-32768,   786,  1170,-32768,   396,-32768,   396,-32768,-32768,
  1186,-32768,-32768,  1014,  1189,-32768,-32768,-32768,-32768,  1635,
   425,  1197,-32768,-32768,-32768,  1196,-32768,  1198,-32768,-32768,
-32768,   970,  1635,-32768,-32768,-32768,  1192,-32768,-32768,   147,
-32768,-32768,-32768,  1195,    75,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  1635,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  1223,  1225,-32768
};

static const short yypgoto[] = {-32768,
-32768,  1156,-32768,-32768,-32768,-32768,  -388,  -112,-32768,-32768,
   942,-32768,-32768,-32768,-32768,-32768,    71,-32768,-32768,   348,
-32768,-32768,    69,   105,-32768,   179,-32768,-32768,-32768,  -687,
-32768,  -825,-32768,-32768,  -627,  -709,-32768,-32768,-32768,  -550,
-32768,  -524,-32768,  -499,-32768,   282,-32768,-32768,   596,  -602,
-32768,   215,   276,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  -806,   140,-32768,  -956,-32768,   251,
-32768,  -612,   420,  1174,-32768,-32768,  -611,-32768,-32768,  -113,
  -353,  -348,  -339,  -336,  -377,  -367,  -366,  -498,  -511,-32768,
  -609,-32768,  -135,-32768,-32768,   559,  1141,  -561,  -419,    14,
-32768,-32768,-32768,  -429,-32768,-32768,-32768,   699,  -222,   824,
-32768,  -850,  -737,-32768,-32768,-32768,  -447,-32768,-32768,-32768,
  -442,-32768,-32768,-32768,-32768,-32768,   500,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,    13,   708,-32768,
   936,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  1092,  -656,  -479,-32768,   122,-32768,-32768,   612,   616,
   462,     1,  -333,  1154,-32768,     2,-32768,-32768,  -566,-32768,
-32768,-32768,   607,  -250,   959,-32768,  -456,   331,  1270,-32768,
  1055,-32768,   484,-32768,-32768,-32768,-32768,  -167,-32768,-32768,
-32768,-32768,-32768,    19,   642,   948,  1099,-32768,-32768,  1289,
-32768,-32768,  -328,-32768,   177,   176,  -481,  -845,-32768,   794,
-32768,-32768,   886,  -153,  -433,    51,-32768,    82,    39,-32768,
-32768,   218,-32768,   659,-32768,-32768,   598,-32768,   322,  -598,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1417,
-32768,-32768,  1703,  -266,     0,    66,-32768
};


#define	YYLAST		6449


static const short yytable[] = {   118,
   116,   307,   118,   125,   284,   550,   118,   211,   211,   211,
   525,   575,   111,    94,   488,   129,   602,   132,   621,   710,
   712,   526,   722,   527,   515,   516,   195,   434,   447,   619,
  1140,   517,   518,   725,   679,   675,   325,   326,   327,   328,
   329,   330,   519,   520,   521,   522,   204,   439,   409,   523,
   524,   600,  -583,   413,   912,   414,  -583,   914,   995,   234,
   234,  1022,   584,  1027,   256,   119,   608,   808,   119,  1009,
    90,  1071,   135,   417,   449,   710,   712,   996,   722,   995,
   990,     2,  -629,   118,   116,   759,  -629,   997,   917,   725,
   235,   235,   552,   453,   921,   259,   111,    94,  1068,   392,
   389,   259,  1121,  1122,   428,   628,   261,   986,   997,   986,
   262,   760,   499,   823,   393,   824,   118,   987,   395,   987,
   721,   262,   262,   641,   616,   287,   907,   878,   500,   888,
  1059,   453,   118,   720,   300,  1054,   762,  1055,   394,   941,
  1060,   395,   879,   118,   898,   299,  1068,   453,   211,   119,
  -401,   677,  -401,  1056,    90,   942,   997,   121,   122,   395,
  -401,   665,  1014,  1086,  -625,  1039,   211,   324,  -625,  1170,
  1067,  1069,  1123,   783,  1124,  1095,   721,  1097,   411,  1052,
  1053,   395,   119,   681,   200,   232,   232,   204,   768,   720,
  1125,  1141,   211,   771,   668,   808,   386,   387,   301,  1072,
   211,   808,   211,  -268,   211,   259,   759,   211,  1028,   315,
   663,   397,    77,    78,   134,   211,   817,    81,    82,   404,
   211,   759,   211,   403,   395,   205,   405,   606,   469,   449,
   646,   204,   760,   998,   999,   211,   211,    77,  1000,   204,
   278,  1001,  1133,   204,  1136,   539,   204,   760,   667,  1021,
  1120,  1023,   548,   413,   717,   422,   395,   762,    77,  1000,
   594,   512,   513,   514,   718,   719,   234,    77,   988,    77,
   988,   234,   762,   234,   471,   204,   118,   431,   713,   118,
   118,   118,     2,   714,   801,   975,   234,   288,  1099,   307,
    77,  1061,   715,   118,   446,   716,   302,   235,   453,   118,
   906,   395,   235,   908,   235,   596,    77,  1000,  1066,   768,
   717,   664,   434,   311,   771,   808,   488,   235,   551,   468,
   718,   719,   395,   473,   768,   200,  -401,  -401,  -401,   771,
  -679,  -401,  -401,   470,   713,   307,   614,   312,  -401,   714,
   615,  -401,   119,  -401,   211,   436,   438,   440,   715,  1136,
   307,   716,   211,   395,   211,   679,   684,   631,   817,   119,
   710,   712,   605,   722,  1031,   301,   205,   972,   909,   200,
   453,   693,  -627,   694,   725,   395,  -627,   200,   970,   833,
   388,   200,   453,  -679,   200,  1015,   313,  -617,  1016,  1139,
   666,  -617,   232,   410,  1145,   314,  -614,   232,   211,   232,
  -614,  -401,   677,  -401,   977,   978,  1032,   378,   379,  1033,
   205,  -401,   232,   200,   316,   380,   381,   537,   205,   211,
   211,  1078,   205,  1079,  1019,   205,   211,  1019,   118,   560,
   547,  -269,  -580,   254,   979,   980,  -580,   204,   118,  1080,
   118,   547,   118,  1174,   470,   307,  1090,   835,   981,  -268,
   118,   471,   300,   118,   205,  1117,  -579,   118,     2,     2,
  -579,   721,  -603,    77,    78,   134,  -603,   307,    81,    82,
   234,   234,  -578,  -269,   720,   448,  -578,  -401,  -401,  -401,
  -679,  -679,  -401,  -401,  -618,  -679,  -679,   259,  -618,   211,
  1045,   193,   223,   223,   119,   317,   967,   259,   118,   118,
  1057,   235,   235,   336,   572,   335,   119,   968,   119,   969,
   957,   958,   380,   381,   378,   379,   301,   959,   960,   587,
    77,    78,   134,   592,  1117,    81,    82,   337,   961,   962,
   963,   964,   338,   402,   494,   965,   966,   211,   211,  1113,
  1054,  1019,  1055,  1019,  -619,   118,   633,   339,  -619,  -401,
  -401,  -401,   547,   211,  -401,  -401,   211,   211,  1056,   340,
   812,  -401,  -401,  -401,   617,   618,  -401,  -401,  -452,   471,
   547,   259,   380,   381,  1016,   200,   204,   -45,   382,   383,
   341,  1078,   118,  1079,   300,   836,   837,   838,   839,   840,
   841,  -673,   384,   385,  -620,   717,   232,   232,  -620,  1080,
   395,   388,   673,  1035,   882,   718,   719,  -677,    77,    78,
   134,   119,  -674,    81,    82,  -268,   205,   471,   259,   713,
   992,  1126,   380,   381,   714,     2,  1148,   211,   211,  1016,
  -622,   742,   193,   715,  -622,   389,   716,   395,   390,   211,
   211,   931,   211,   380,   381,   602,   382,   383,   301,   196,
   229,   229,   307,  1029,   280,   281,   282,   118,  1149,   118,
   384,   385,   391,   868,   869,  -623,   206,   399,   118,  -623,
   398,   118,   118,   211,   815,   489,   193,   870,   871,   473,
   996,   382,   383,   492,   193,   493,   394,   742,   193,   395,
   997,   193,   404,   469,   933,   384,   385,  -506,    97,   223,
  -676,    97,   812,  -612,   223,   411,   223,  -612,   395,   241,
   242,   406,   469,  -675,   200,  1046,   375,   376,   377,   223,
   193,   407,   395,   572,  1058,   572,   935,    77,    78,   134,
  1181,  -597,    81,    82,   802,  -597,   412,   592,   119,   359,
  -268,   360,   471,  -401,  1083,   386,   387,   954,   955,   956,
     2,   986,  -602,   418,  1114,   205,  -602,   555,   419,  -401,
  1100,   987,   361,   362,  1192,   845,  -601,   846,  -600,  -401,
  -601,   423,  -600,   424,   211,    77,    78,   134,   426,   471,
    81,    82,    97,   486,   487,  -401,  1108,     2,   847,   848,
   196,  -268,   903,   471,     2,   903,  1127,   264,   265,   266,
   267,   268,   269,   270,   271,   445,   273,   206,  -599,   276,
  1132,  1078,  -599,  1079,   118,    97,   815,  1147,   430,  -598,
   555,   442,  1036,  -598,   118,   289,   290,   292,  -595,  1080,
   444,   298,  -595,   450,   196,  -596,   998,   999,   461,  -596,
    77,  1000,   196,  -268,  1001,   603,   196,   321,  -592,   196,
   467,   206,  -592,   476,   331,   986,  -615,   229,  1166,   206,
  -615,   477,   229,   206,   229,   987,   206,   378,   379,   555,
  1165,  1123,  -593,  1124,   478,  -584,  -593,   229,   196,  -584,
   119,  -587,   193,   532,   533,  -587,   993,   555,   644,  1125,
   930,   480,   614,   479,  1012,   206,  1038,   375,   376,   377,
    77,    78,   134,   223,   223,    81,    82,   924,   481,  -607,
   482,    77,   988,  -607,   321,   171,   903,   497,   903,   903,
   903,   490,   501,   502,   503,   504,   505,   506,   507,   508,
   509,   510,   511,   861,   862,   863,   483,    77,    78,   134,
   118,   118,    81,    82,    77,    78,   134,  -611,   484,    81,
    82,  -611,   425,   531,  1074,  1075,  1076,   541,   644,   696,
   375,   376,   377,  -608,  -609,  -605,  -588,  -608,  -609,  -605,
  -588,   644,   742,  -586,   542,    97,   432,  -586,   435,   437,
  -590,   657,   658,  1050,  -590,   993,   993,  -591,   545,   284,
  -589,  -591,    97,  1064,  -589,  1012,  1012,  1049,   298,   395,
   692,   321,   864,   865,   818,   544,  1040,  1041,   549,   866,
   867,   562,  1064,   563,   307,    77,   988,   118,  1093,   171,
   472,   193,   910,   658,   872,   873,   564,  1187,  -268,   118,
   560,  1102,   118,   903,   567,   903,  1025,  1026,   395,  1111,
   196,   321,  1129,  1130,   274,   275,   573,   579,   307,   580,
   582,   589,   395,   993,   118,   118,   993,   206,  1064,  1064,
   588,   229,   229,   593,   597,   607,   601,  1012,   610,  1012,
   612,   613,  1012,   630,   634,   635,  1012,   637,   118,   118,
   645,  1012,   651,   119,   648,   653,   656,   118,   654,   671,
   674,   669,   659,   686,   781,   119,   745,   682,  1105,   676,
   687,   118,   777,   784,   799,   797,   197,   230,   230,   822,
   819,   821,   826,   831,   276,   825,   883,   827,   832,   874,
  1118,  1119,   993,   118,   118,  1064,   844,    97,   875,   880,
  1012,   911,   919,   922,   565,   877,   568,   876,   574,    97,
   934,    97,   927,   889,  1142,  1143,   581,   890,   191,   298,
   118,  1093,   928,   119,   891,   932,   590,   243,   244,   245,
   246,   247,   248,   249,   250,   251,   252,   119,   598,   936,
   973,   472,   689,   604,  1012,   894,   432,   974,   171,   196,
  1034,   976,  1037,  1070,  1089,  1106,   897,  1082,  1126,  1168,
  1169,   364,  1128,   915,  1144,  1101,   206,  1151,   272,  1154,
  1155,  1157,   277,  1160,   279,  1172,   283,  1162,  1159,  1175,
  1164,   285,  1176,  1178,  1183,  1185,   119,  1186,  1188,  1189,
   793,   293,  1195,   294,  1196,   365,   366,   367,   368,   369,
   370,   371,   372,   373,   374,    20,    21,    22,    23,   253,
    24,   452,  1003,  1190,    97,    29,    30,   197,  1177,    33,
    34,  1137,    36,    37,    38,    39,   791,  1044,   647,  1112,
  1051,   432,  1167,  1085,   939,   363,   576,    51,    52,   896,
   650,   789,  1182,   787,   661,   662,   925,   286,   811,   239,
   474,   298,  1161,   611,   538,   829,     0,   319,   485,   320,
   421,   197,    76,     0,  1043,     0,   198,   231,   231,   197,
   604,     0,    80,   197,     0,   432,   197,     0,     0,     0,
   306,     0,     0,     0,   230,   690,   691,     0,     0,   230,
   321,   230,   321,   306,   306,   306,   306,   306,   306,     0,
   333,   334,     0,   191,   230,   197,     0,     0,     0,     0,
     0,   191,     0,     0,     0,   191,     0,   779,   191,     0,
   793,     0,   429,   793,     0,   786,   408,   788,     0,     0,
     0,   795,   796,     0,     0,     0,   800,     0,     0,     0,
   590,   813,     0,     0,     0,     0,   472,   191,     0,   441,
     0,     0,   443,     0,     0,     0,     0,     0,     0,     0,
   451,     0,     0,   454,     0,     0,   321,     0,     0,     0,
     0,     0,   937,   497,     0,     0,     0,     0,   943,   944,
   945,   946,   947,   948,   949,   950,   951,   952,   953,     0,
     0,     0,     0,     0,   208,   237,   237,   850,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   198,     0,     0,
     0,     0,     0,   459,     0,     0,     0,     0,     0,     0,
     0,   462,   463,   464,   465,     0,     0,     0,   793,     0,
     0,   851,   852,   853,   854,   855,   856,   857,   858,   859,
   860,     0,   459,     0,     0,     0,   900,     0,     0,     0,
     0,   198,     0,   459,     0,     0,     0,     0,     0,   198,
     0,     0,     0,   198,     0,     0,   198,   197,     0,     0,
   498,     0,     0,     0,   231,     0,     0,   546,     0,   231,
     0,   231,   923,   813,     0,   604,     0,   454,   230,   230,
     0,     0,   561,     0,   231,   198,     0,   566,     0,   569,
     0,     0,     0,     0,     0,     0,     0,   578,     0,   191,
     0,   583,     0,     0,     0,     0,     0,   543,   306,   306,
   306,   306,   306,   306,   306,   306,   306,   306,   306,   306,
   306,   306,   306,   306,     0,   208,   318,     0,     0,     0,
     0,     0,   303,     0,     0,     0,     0,   150,   151,   152,
   153,   154,   155,     0,   793,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   156,   157,   158,     0,   306,  -250,
     0,  1017,     0,     0,     0,   303,     0,     0,  1024,   208,
   150,   151,   152,   153,   154,   155,     0,   208,   159,     0,
     0,   208,     0,     0,   208,     0,     0,   156,   157,   158,
     0,     0,   237,     0,     0,     0,   197,   237,     0,   237,
     0,     0,     0,     0,   306,     0,     0,     0,     0,   306,
     0,   159,   237,   208,     0,     0,     0,     0,   303,   306,
     0,   168,     0,   150,   151,   152,   153,   154,   155,   620,
     0,     0,     0,   454,     0,     0,     0,     0,   191,     0,
   156,   157,   158,     0,     0,     0,     0,   198,     0,     0,
     0,     0,   678,     0,   168,     0,     0,   683,     0,     0,
     0,   306,     0,   306,   159,   623,   625,     0,   231,   231,
   210,   238,   238,  1087,     0,     0,    97,     0,     0,     0,
     0,     0,     0,     0,   561,     0,   744,     0,   813,     0,
  1104,     0,    77,   304,   305,   432,   171,   465,  1109,  1110,
     0,     0,     0,     0,     0,     0,     0,   168,   745,   746,
   747,   748,     0,     0,   306,   749,   750,   751,   752,   753,
   754,   755,   459,     0,   459,    77,   304,   305,     0,   171,
   697,     0,     0,     0,   743,     0,   306,     0,     0,     0,
     0,  1146,     0,     0,     0,     0,    97,     0,  1150,  1152,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   813,   849,     0,     0,     0,   711,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   208,     0,     0,    77,   304,
   305,     0,   171,     0,     0,  1171,   198,   828,     0,     0,
     0,     0,     0,     0,     0,     0,   237,   237,   834,     0,
     0,     0,     0,     0,     0,  1179,  1180,     0,     0,    97,
     0,   210,  1184,   792,  1098,     0,   892,   893,   303,     0,
     0,   711,     0,   150,   151,   152,   153,   154,   155,     0,
     0,     0,   306,   306,   306,   306,   306,   306,   842,   843,
   156,   157,   158,     0,     0,     0,     0,     0,   916,     0,
     0,     0,     0,     0,     0,   210,     0,     0,     0,     0,
     0,     0,     0,   210,   159,     0,     0,   210,     0,     0,
   210,     0,     0,     0,     0,     0,     0,     0,   238,     0,
     0,  -534,     0,   238,     0,   238,   343,     0,     0,     0,
     0,   150,   151,   152,   153,   154,   155,     0,   238,   210,
     0,     0,     0,     0,     0,     0,     0,   168,   156,   157,
   158,     0,     0,     0,   208,     0,     0,     0,     0,     0,
     0,   306,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   159,     0,     0,     0,     0,     0,   792,     0,
     0,     0,     0,   303,     0,     0,   940,     0,   150,   151,
   152,   153,   154,   155,  1018,     0,     0,     0,     0,     0,
     0,     0,     0,   306,     0,   156,   157,   158,     0,     0,
     0,     0,     0,  1030,     0,   168,     0,     0,    77,   304,
   305,     0,   171,     0,     0,     0,     0,     0,     0,   159,
     0,     0,     0,     0,   306,   306,   306,   306,   306,   306,
   306,   306,   306,   306,   306,   306,   306,   306,   306,   306,
   306,     0,   306,     0,     0,     0,     0,     0,     0,    -1,
     1,     0,     0,     0,     0,     0,   465,     0,     0,     0,
     0,     0,   168,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,  -268,     0,     0,    77,   304,   305,     0,
   171,     0,     0,     2,     0,     0,     0,     0,     0,     0,
     0,   210,     0,     0,     3,     0,     0,  1088,     0,   306,
     0,  1042,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   238,   238,     0,     0,  -401,  -401,  -401,     0,
     4,     0,     0,     0,     0,     5,     6,     7,     0,     0,
     0,     0,     0,    77,   304,   305,   711,   171,     0,     0,
     8,     9,    10,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    11,
    12,    13,     0,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,  1153,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
    70,    71,    72,    73,    74,    75,    76,     0,     0,     0,
   210,     0,     0,    77,    78,    79,    80,     0,    81,    82,
    83,    -2,     1,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,  1191,     0,  -268,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     2,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     3,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,  -401,  -401,
  -401,     0,     4,   306,     0,     0,     0,     5,     6,     7,
     0,     0,     0,     0,     0,     0,   306,     0,     0,     0,
     0,     0,     8,     9,    10,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   306,     0,     0,
     0,    11,    12,    13,     0,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,     0,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,     0,
     0,     0,     0,     0,     0,    77,    78,    79,    80,   136,
    81,    82,    83,     0,   137,   138,   139,     0,   140,   141,
   142,   143,   144,   145,   146,   147,   148,  -534,   535,     0,
     0,     0,   149,     0,     0,     0,     0,   150,   151,   152,
   153,   154,   155,     0,     0,     0,     0,     0,     0,     0,
  -268,  -268,     0,     3,   156,   157,   158,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,  -401,  -401,  -401,   159,     4,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   161,   162,   163,   164,   165,   166,     0,
     0,     0,     0,     0,     0,     0,     0,   167,    11,    12,
    13,   168,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,     0,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
    51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
    61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
    71,    72,    73,    74,    75,    76,     0,     0,     0,     0,
     0,     0,    77,   169,   536,    80,   171,   172,    82,    83,
   136,     0,     0,     0,     0,   137,   138,   139,     0,   140,
   141,   142,   143,   144,   145,   146,   147,   148,  -534,     0,
     0,     0,     0,   149,     0,     0,     0,     0,   150,   151,
   152,   153,   154,   155,     0,     0,     0,     0,     0,     0,
     0,  -268,  -268,     0,     0,   156,   157,   158,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,  -268,  -268,  -268,   159,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   161,   162,   163,   164,   165,   166,
     0,     0,     0,     0,     0,     0,     0,     0,   167,  -268,
  -268,  -268,   168,  -268,  -268,  -268,  -268,  -268,  -268,  -268,
  -268,  -268,  -268,     0,  -268,  -268,  -268,  -268,  -268,  -268,
  -268,  -268,  -268,  -268,  -268,  -268,  -268,  -268,  -268,  -268,
  -268,  -268,  -268,  -268,  -268,  -268,  -268,  -268,  -268,  -268,
  -268,  -268,  -268,  -268,  -268,  -268,  -268,  -268,  -268,  -268,
  -268,  -268,  -268,  -268,  -268,  -268,  -268,  -268,  -268,  -268,
  -268,  -268,  -268,  -268,  -268,  -268,  -268,     0,     0,     0,
     0,     0,     0,    77,   169,   170,  -268,   171,   172,    82,
  -268,   213,     0,     0,     0,     0,   137,   138,   139,     0,
     0,   214,   142,   143,   144,   145,   146,   147,   215,  -534,
  -538,     0,     0,     0,   216,     0,     0,     0,     0,   150,
   151,   152,   153,   154,   155,     0,     0,     0,     0,     0,
     0,     0,  -268,  -268,     0,     0,   156,   157,   158,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,  -268,  -268,  -268,
   159,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   161,   162,   163,   164,   165,
   166,     0,     0,     0,     0,     0,     0,     0,     0,   167,
  -268,  -268,  -268,   168,  -268,  -268,  -268,  -268,  -268,  -268,
  -268,  -268,  -268,  -268,     0,  -268,  -268,  -268,  -268,  -268,
  -268,  -268,  -268,  -268,  -268,  -268,  -268,  -268,  -268,  -268,
  -268,  -268,  -268,  -268,  -268,  -268,  -268,  -268,  -268,  -268,
  -268,  -268,  -268,  -268,  -268,  -268,  -268,  -268,  -268,  -268,
  -268,  -268,  -268,  -268,  -268,  -268,  -268,  -268,  -268,  -268,
  -268,  -268,  -268,  -268,  -268,  -268,  -268,  -268,     0,     0,
     0,     0,     0,     0,    77,   169,   170,  -268,   171,   217,
   218,  -268,   213,     0,     0,     0,     0,   137,   138,   139,
     0,     0,   214,   142,   143,   144,   145,   146,   147,   215,
  -479,  -479,     0,     0,     0,   216,  -479,     0,     0,     0,
   150,   151,   152,   153,   154,   155,     0,     0,     0,     0,
     0,     0,     0,  -268,  -268,     0,   136,   156,   157,   158,
     0,   137,   138,   139,     0,   140,   141,   142,   143,   144,
   145,   146,   147,   148,  -534,     0,     0,     0,     0,   149,
     0,   159,     0,     0,   150,   151,   152,   153,   154,   155,
     0,     0,     0,     0,     0,     0,     0,  -268,  -268,     0,
     0,   156,   157,   158,     0,  -479,   161,   162,   163,   164,
   165,   166,     0,     0,     0,     0,     0,     0,     0,     0,
   167,     0,     0,     0,   168,   159,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   160,
   161,   162,   163,   164,   165,   166,     0,     0,     0,     0,
     0,     0,     0,     0,   167,     0,     0,     0,   168,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    77,   169,   170,     0,   171,
   217,   218,     0,     0,     0,   136,     0,     0,     0,     0,
   137,   138,   139,     0,   140,   141,   142,   143,   144,   145,
   146,   147,   148,  -534,     0,     0,     0,     0,   149,     0,
     0,     0,     0,   150,   151,   152,   153,   154,   155,    77,
   169,   170,     0,   171,   172,    82,  -268,  -268,     0,   213,
   156,   157,   158,     0,   137,   138,   139,     0,     0,   214,
   142,   143,   144,   145,   146,   147,   215,  -534,  -538,     0,
     0,     0,   216,     0,   159,     0,     0,   150,   151,   152,
   153,   154,   155,     0,     0,     0,     0,     0,     0,     0,
  -268,  -268,     0,     0,   156,   157,   158,     0,  -507,   161,
   162,   163,   164,   165,   166,     0,     0,     0,     0,     0,
     0,     0,     0,   167,     0,     0,     0,   168,   159,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,  -475,   161,   162,   163,   164,   165,   166,     0,
     0,     0,     0,     0,     0,     0,     0,   167,     0,     0,
     0,   168,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    77,   169,
   170,     0,   171,   172,    82,     0,     0,     0,   136,     0,
     0,     0,     0,   137,   138,   139,     0,   140,   141,   142,
   143,   144,   145,   146,   147,   148,  -534,   626,     0,     0,
     0,   149,     0,     0,     0,     0,   150,   151,   152,   153,
   154,   155,    77,   169,   170,     0,   171,   217,   218,  -268,
  -268,     0,   213,   156,   157,   158,     0,   137,   138,   139,
     0,     0,   214,   142,   143,   144,   145,   146,   147,   215,
  -534,  -538,     0,     0,     0,   216,     0,   159,     0,     0,
   150,   151,   152,   153,   154,   155,     0,     0,     0,     0,
     0,     0,     0,  -268,  -268,     0,     0,   156,   157,   158,
     0,     0,   161,   162,   163,   164,   165,   166,     0,     0,
     0,     0,     0,     0,     0,     0,   167,     0,     0,     0,
   168,   159,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   161,   162,   163,   164,
   165,   166,     0,     0,     0,     0,     0,     0,     0,     0,
   167,     0,     0,     0,   168,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   303,   495,     0,     0,     0,   150,   151,   152,   153,   154,
   155,    77,   169,   170,     0,   171,   172,    82,     0,     0,
     0,   136,   156,   157,   158,     0,   137,   138,   139,     0,
   140,   141,   142,   143,   144,   145,   146,   147,   148,  -534,
     0,     0,     0,     0,   149,     0,   159,     0,     0,   150,
   151,   152,   153,   154,   155,    77,   169,   170,     0,   171,
   217,   218,  -268,  -268,     0,     0,   156,   157,   158,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   168,
   159,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   161,   162,   163,   164,   165,
   166,     0,     0,     0,     0,     0,     0,     0,     0,   167,
   137,   138,   139,   168,   140,   141,   142,   143,   144,   145,
   146,   147,   215,  -534,   553,     0,     0,     0,   343,     0,
     0,     0,     0,   150,   151,   152,   153,   154,   155,     0,
    77,   304,   305,     0,   171,     0,  -268,  -268,     0,     3,
   156,   157,   158,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   159,     4,     0,     0,     0,     0,
     0,     0,     0,     0,    77,   169,   170,     0,   171,   172,
    82,     0,     0,     0,     0,     0,     0,     0,     0,   161,
   162,   163,   164,   165,   166,     0,     0,     0,     0,     0,
     0,     0,     0,   554,    11,    12,    13,   168,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,     0,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
    65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
    75,    76,     0,     0,     0,     0,     0,     0,    77,   169,
   536,    80,   171,   172,    82,    83,   137,   138,   139,     0,
   140,   141,   142,   143,   144,   145,   146,   147,   215,  -534,
   627,     0,     0,     0,   343,     0,     0,     0,     0,   150,
   151,   152,   153,   154,   155,     0,     0,     0,     0,     0,
     0,     0,  -268,  -268,     0,     3,   156,   157,   158,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   159,     4,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   161,   162,   163,   164,   165,
   166,     0,     0,     0,     0,     0,     0,     0,     0,   167,
    11,    12,    13,   168,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,     0,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    73,    74,    75,    76,     0,     0,
     0,     0,     0,     0,    77,   169,   536,    80,   171,   172,
    82,    83,   137,   138,   139,     0,   140,   141,   142,   143,
   144,   145,   146,   147,   215,  -534,   639,     0,     0,     0,
   343,     0,     0,     0,     0,   150,   151,   152,   153,   154,
   155,     0,     0,     0,     0,     0,     0,     0,  -268,  -268,
     0,     3,   156,   157,   158,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   159,     4,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   161,   162,   163,   164,   165,   166,     0,     0,     0,
     0,     0,     0,     0,     0,   640,    11,    12,    13,   168,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
     0,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
    73,    74,    75,    76,     0,     0,     0,     0,     0,     0,
    77,   169,   536,    80,   171,   172,    82,    83,   137,   138,
   139,     0,   140,   141,   142,   143,   144,   145,   146,   147,
   215,  -534,   638,     0,     0,     0,   343,     0,     0,     0,
     0,   150,   151,   152,   153,   154,   155,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   156,   157,
   158,     0,   137,   138,   139,     0,   140,   141,   142,   143,
   144,   145,   146,   147,   215,  -534,   642,     0,     0,     0,
   343,     0,   159,     0,     0,   150,   151,   152,   153,   154,
   155,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   156,   157,   158,     0,     0,   161,   162,   163,
   164,   165,   166,     0,     0,     0,     0,     0,     0,     0,
     0,   167,     0,     0,     0,   168,   159,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   161,   162,   163,   164,   165,   166,     0,     0,     0,
     0,     0,     0,     0,     0,   643,   137,   138,   139,   168,
   140,   141,   142,   143,   144,   145,   146,   147,   215,  -534,
   695,     0,     0,     0,   343,     0,     0,     0,     0,   150,
   151,   152,   153,   154,   155,     0,    77,   169,   170,     0,
   171,   172,    82,     0,     0,     0,   156,   157,   158,     0,
   137,   138,   139,     0,   140,   141,   142,   143,   144,   145,
   146,   147,   215,  -534,   773,     0,     0,     0,   343,     0,
   159,     0,     0,   150,   151,   152,   153,   154,   155,     0,
    77,   169,   170,     0,   171,   172,    82,     0,     0,     0,
   156,   157,   158,     0,     0,   161,   162,   163,   164,   165,
   166,     0,     0,     0,     0,     0,     0,     0,     0,   167,
     0,     0,     0,   168,   159,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   161,
   162,   163,   164,   165,   166,     0,     0,     0,     0,     0,
     0,     0,     0,   167,   137,   138,   139,   168,   140,   141,
   142,   143,   144,   145,   146,   147,   215,  -534,   774,     0,
     0,     0,   343,     0,     0,     0,     0,   150,   151,   152,
   153,   154,   155,     0,    77,   169,   170,     0,   171,   172,
    82,     0,     0,     0,   156,   157,   158,     0,   137,   138,
   139,     0,   140,   141,   142,   143,   144,   145,   146,   147,
   215,  -534,   776,     0,     0,     0,   343,     0,   159,     0,
     0,   150,   151,   152,   153,   154,   155,     0,    77,   169,
   170,     0,   171,   172,    82,     0,     0,     0,   156,   157,
   158,     0,     0,   161,   162,   163,   164,   165,   166,     0,
     0,     0,     0,     0,     0,     0,     0,   775,     0,     0,
     0,   168,   159,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   161,   162,   163,
   164,   165,   166,     0,     0,     0,     0,     0,     0,     0,
     0,   167,   137,   138,   139,   168,   140,   141,   142,   143,
   144,   145,   146,   147,   215,  -534,   899,     0,     0,     0,
   343,     0,     0,     0,     0,   150,   151,   152,   153,   154,
   155,     0,    77,   169,   170,     0,   171,   172,    82,     0,
     0,     0,   156,   157,   158,     0,   137,   138,   139,     0,
   140,   141,   142,   143,   144,   145,   146,   147,   215,  -534,
     0,     0,     0,     0,   343,     0,   159,     0,     0,   150,
   151,   152,   153,   154,   155,     0,    77,   169,   170,     0,
   171,   172,    82,     0,     0,     0,   156,   157,   158,     0,
     0,   161,   162,   163,   164,   165,   166,     0,     0,     0,
     0,     0,     0,     0,     0,   167,     0,     0,     0,   168,
   159,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   161,   162,   163,   164,   165,
   166,  -134,     0,     0,     0,     0,  -134,     0,     0,   167,
     0,     0,     0,   168,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     3,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    77,   169,   170,     0,   171,   172,    82,     0,     0,     0,
     0,     0,     0,     4,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
  -537,     0,     0,     0,    77,   169,   170,     0,   171,   172,
    82,     0,    11,    12,    13,     0,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,     0,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
     0,     0,     0,     0,     0,     0,     0,     0,   131,    80,
    11,    12,    13,    83,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,     0,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    73,    74,    75,    76,  -677,     0,
     0,     0,     0,     0,     0,     0,   131,    80,     0,     0,
     0,    83,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,  -679,  -679,  -679,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,  -679,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,  -679,  -679,  -679,     0,
  -679,  -679,  -679,  -679,  -679,  -679,  -679,  -679,  -679,  -679,
     0,  -679,  -679,  -679,  -679,  -679,  -679,  -679,  -679,  -679,
  -679,  -679,  -679,  -679,  -679,  -679,  -679,  -679,  -679,  -679,
  -679,  -679,  -679,  -679,  -679,  -679,  -679,  -679,  -679,  -679,
  -679,  -679,  -679,  -679,  -679,  -679,  -679,  -679,  -679,  -679,
  -679,  -679,  -679,  -679,  -679,  -679,  -679,  -679,  -679,  -679,
  -679,  -679,  -679,  -679,  -268,     0,     0,     0,     0,     0,
     0,     0,     0,  -679,     2,   303,     0,  -679,   599,     0,
   150,   151,   152,   153,   154,   155,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   156,   157,   158,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   159,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    11,    12,    13,     0,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,   168,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    73,    74,    75,    76,     0,     0,
     0,     0,     0,     0,    77,    78,    79,    80,     0,    81,
    82,    83,     0,     0,     0,    77,   304,   305,   303,   171,
     0,   680,     0,   150,   151,   152,   153,   154,   155,   303,
   938,     0,     0,     0,   150,   151,   152,   153,   154,   155,
   156,   157,   158,     0,     0,     0,     0,     0,     0,   303,
  -250,   156,   157,   158,   150,   151,   152,   153,   154,   155,
   332,     0,     0,     0,   159,   150,   151,   152,   153,   154,
   155,   156,   157,   158,     0,   159,     0,     0,     0,     0,
   622,     0,   156,   157,   158,   150,   151,   152,   153,   154,
   155,     0,     0,     0,     0,   159,     0,     0,     0,     0,
     0,     0,   156,   157,   158,   624,   159,   168,     0,     0,
   150,   151,   152,   153,   154,   155,     0,     0,   168,     0,
     0,     0,     0,     0,     0,     0,   159,   156,   157,   158,
     0,     0,     0,     0,     0,     0,     0,   698,   168,     0,
     0,     0,   699,   700,   701,   702,   703,   704,     0,   168,
     0,   159,     0,     0,     0,     0,     0,     0,     0,   156,
   705,   706,     0,     0,     0,     0,     0,     0,     0,   168,
     0,     0,     0,     0,     0,     0,     0,     0,    77,   304,
   305,     0,   171,   707,     0,     0,     0,     0,     0,    77,
   304,   305,     0,   171,   168,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    77,
   304,   305,     0,   171,     0,     0,     0,     0,     0,     0,
    77,   304,   305,     0,   171,     0,   168,     0,     0,     0,
     0,     0,     0,     0,  -194,  -194,     0,     0,     0,     0,
    77,   304,   305,     0,   171,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    77,   304,   305,     0,   171,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    77,   708,   709,
     0,   171,    11,    12,    13,     0,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,     0,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
     3,     0,     0,     0,     0,     0,     0,     0,   131,    80,
     0,     0,     0,    83,     0,     0,     0,     0,     0,     0,
     0,     0,  -401,  -401,  -401,     0,     4,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    11,    12,    13,     0,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,     0,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
    34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
    74,    75,    76,     3,     0,     0,     0,     0,     0,     0,
     0,   131,    80,     0,     0,     0,    83,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     4,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    11,    12,
    13,     0,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,     0,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
    51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
    61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
    71,    72,    73,    74,    75,    76,     3,     0,     0,     0,
     0,     0,    77,  1047,   131,    80,     0,     0,     0,    83,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     4,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    11,    12,    13,     0,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,     0,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,  -401,
  -401,  -401,     0,     0,     0,     0,     0,   131,    80,     0,
     0,     0,    83,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    11,    12,    13,     0,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,     0,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
     8,     9,    10,     0,     0,     0,     0,     0,   131,    80,
     0,     0,     0,    83,     0,     0,     0,     0,     0,    11,
    12,    13,     0,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,     0,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
    70,    71,    72,    73,    74,    75,    76,     0,     0,     0,
     0,     0,     0,     0,     0,   131,    80,    11,    12,    13,
    83,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,     0,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
    62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
    72,    73,    74,    75,    76,     0,     0,     0,     0,     0,
     0,     0,     0,   131,    80,     0,     0,     0,    83
};

static const short yycheck[] = {     0,
     0,   137,     3,     2,   117,   425,     7,     8,     9,    10,
   388,   441,     0,     0,   343,     3,   473,     5,   530,   632,
   632,   389,   632,   390,   378,   379,     8,   278,   295,   528,
    27,   380,   381,   632,   601,   597,   150,   151,   152,   153,
   154,   155,   382,   383,   384,   385,     8,    19,   216,   386,
   387,   471,    21,   221,   792,   223,    25,   795,     5,     9,
    10,   907,   451,   914,    19,     0,   486,   670,     3,   895,
     0,    55,     7,   227,   297,   688,   688,    24,   688,     5,
   887,    34,    21,    84,    84,   636,    25,    34,   798,   688,
     9,    10,   426,     5,   804,    18,    84,    84,    24,    41,
    39,    18,  1059,  1060,   258,   539,    24,    24,    34,    24,
    98,   636,    28,    25,    56,   682,   117,    34,    21,    34,
   632,   109,   110,   557,    27,   124,   783,    41,    44,   757,
    24,     5,   133,   632,   133,    26,   636,    28,    18,    28,
    34,    21,    56,   144,   772,   133,    24,     5,   149,    84,
    24,    25,    26,    44,    84,    44,    34,   110,   111,    21,
    34,   581,   900,  1014,    21,    27,   167,   149,    25,  1126,
   996,   997,    26,   655,    28,  1021,   688,  1023,    18,   986,
   987,    21,   117,   603,     8,     9,    10,   149,   636,   688,
    44,   188,   193,   636,   583,   798,    53,    54,   133,   183,
   201,   804,   203,    18,   205,    18,   757,   208,   918,   144,
    23,   193,   184,   185,   186,   216,   673,   189,   190,   188,
   221,   772,   223,   205,    21,     8,   208,   478,    25,   452,
   559,   193,   757,   180,   181,   236,   237,   184,   185,   201,
    87,   188,  1068,   205,  1070,   399,   208,   772,   582,   906,
  1057,   908,   420,   421,   632,   237,    21,   757,   184,   185,
    25,   375,   376,   377,   632,   632,   216,   184,   185,   184,
   185,   221,   772,   223,    26,   237,   277,   277,   632,   280,
   281,   282,    34,   632,     5,   884,   236,    21,  1026,   425,
   184,   185,   632,   294,   294,   632,    24,   216,     5,   300,
   782,    21,   221,   785,   223,    25,   184,   185,   996,   757,
   688,   578,   563,    24,   757,   918,   645,   236,    25,    18,
   688,   688,    21,   322,   772,   149,   184,   185,   186,   772,
    34,   189,   190,   321,   688,   471,    21,    24,    18,   688,
    25,    21,   277,    23,   345,   280,   281,   282,   688,  1175,
   486,   688,   353,    21,   355,   922,   607,    25,   815,   294,
   973,   973,   476,   973,   926,   300,   149,   879,   788,   193,
     5,   622,    21,   624,   973,    21,    25,   201,   877,    25,
    29,   205,     5,    87,   208,    18,    24,    21,    21,  1077,
    25,    25,   216,   217,  1082,    24,    21,   221,   399,   223,
    25,    24,    25,    26,    88,    89,    25,    32,    33,    28,
   193,    34,   236,   237,    18,    49,    50,   399,   201,   420,
   421,    26,   205,    28,   904,   208,   427,   907,   429,   429,
   417,    24,    21,    26,   118,   119,    25,   399,   439,    44,
   441,   428,   443,  1131,   432,   581,    22,   698,   132,    24,
   451,    26,   451,   454,   237,  1054,    21,   458,    34,    34,
    25,   973,    21,   184,   185,   186,    25,   603,   189,   190,
   420,   421,    21,    24,   973,    26,    25,   184,   185,   186,
   184,   185,   189,   190,    21,   189,   190,    18,    25,   490,
    21,     8,     9,    10,   429,    18,   874,    18,   499,   500,
    21,   420,   421,    16,   439,    24,   441,   875,   443,   876,
   864,   865,    49,    50,    32,    33,   451,   866,   867,   454,
   184,   185,   186,   458,  1123,   189,   190,    16,   868,   869,
   870,   871,    16,   203,   358,   872,   873,   538,   539,    25,
    26,  1021,    28,  1023,    21,   546,   546,    16,    25,   184,
   185,   186,   539,   554,   189,   190,   557,   558,    44,    15,
   673,   184,   185,   186,   499,   500,   189,   190,    25,    26,
   557,    18,    49,    50,    21,   399,   538,    22,    37,    38,
   100,    26,   583,    28,   583,   699,   700,   701,   702,   703,
   704,    22,    51,    52,    21,   973,   420,   421,    25,    44,
    21,    29,   590,   932,    25,   973,   973,    22,   184,   185,
   186,   546,    22,   189,   190,    24,   399,    26,    18,   973,
   887,    21,    49,    50,   973,    34,    18,   628,   629,    21,
    21,   632,   149,   973,    25,    39,   973,    21,    40,   640,
   641,    25,   643,    49,    50,  1102,    37,    38,   583,     8,
     9,    10,   788,   920,    67,    68,    69,   658,  1088,   660,
    51,    52,    55,    37,    38,    21,     8,    19,   669,    25,
    94,   672,   673,   674,   673,   345,   193,    51,    52,   678,
    24,    37,    38,   353,   201,   355,    18,   688,   205,    21,
    34,   208,   188,    25,   830,    51,    52,    94,     0,   216,
    22,     3,   815,    21,   221,    18,   223,    25,    21,    11,
    12,    22,    25,    22,   538,   982,    34,    35,    36,   236,
   237,    24,    21,   658,   991,   660,    25,   184,   185,   186,
  1150,    21,   189,   190,   669,    25,    94,   672,   673,    24,
    24,    26,    26,    28,  1011,    53,    54,   861,   862,   863,
    34,    24,    21,    19,    27,   538,    25,   427,    20,    44,
  1027,    34,    47,    48,  1184,    24,    21,    26,    21,    28,
    25,    94,    25,    27,   775,   184,   185,   186,    24,    26,
   189,   190,    84,     6,     7,    44,  1037,    34,    47,    48,
   149,    24,   780,    26,    34,   783,  1063,    99,   100,   101,
   102,   103,   104,   105,   106,    23,   108,   149,    21,   111,
    25,    26,    25,    28,   815,   117,   815,  1084,    18,    21,
   490,    18,   936,    25,   825,   127,   128,   129,    21,    44,
    18,   133,    25,    24,   193,    21,   180,   181,    22,    25,
   184,   185,   201,    24,   188,    26,   205,   149,    21,   208,
    18,   193,    25,    25,   156,    24,    21,   216,    27,   201,
    25,    25,   221,   205,   223,    34,   208,    32,    33,   539,
    25,    26,    21,    28,    24,    21,    25,   236,   237,    25,
   815,    21,   399,    42,    43,    25,   887,   557,   558,    44,
   825,    18,    21,   335,   895,   237,    25,    34,    35,    36,
   184,   185,   186,   420,   421,   189,   190,   191,    18,    21,
    18,   184,   185,    25,   216,   188,   904,   359,   906,   907,
   908,    19,   364,   365,   366,   367,   368,   369,   370,   371,
   372,   373,   374,    34,    35,    36,    18,   184,   185,   186,
   941,   942,   189,   190,   184,   185,   186,    21,    18,   189,
   190,    25,   254,   395,    51,    52,    53,     9,   628,   629,
    34,    35,    36,    21,    21,    21,    21,    25,    25,    25,
    25,   641,   973,    21,    11,   277,   278,    25,   280,   281,
    21,    20,    21,   984,    25,   986,   987,    21,    24,  1102,
    21,    25,   294,   994,    25,   996,   997,   984,   300,    21,
    22,   303,    32,    33,   674,    25,   941,   942,    11,    49,
    50,    90,  1013,    21,  1150,   184,   185,  1018,  1018,   188,
   322,   538,    20,    21,    53,    54,    19,  1163,    19,  1030,
  1030,  1030,  1033,  1021,    19,  1023,    20,    21,    21,    22,
   399,   343,    32,    33,   109,   110,    19,    90,  1184,    27,
    24,    21,    21,  1054,  1055,  1056,  1057,   399,  1059,  1060,
    25,   420,   421,    22,    18,    21,    24,  1068,    25,  1070,
    11,    24,  1073,    24,    24,    27,  1077,    25,  1079,  1080,
    24,  1082,    20,  1018,    23,    19,    19,  1088,    20,     5,
    25,    21,    23,    22,    20,  1030,    72,    24,  1033,    27,
    24,  1102,    25,    20,    25,    27,     8,     9,    10,    27,
    18,    25,    25,    25,   416,    21,   185,    22,    25,    29,
  1055,  1056,  1123,  1124,  1125,  1126,    24,   429,    39,    25,
  1131,    18,    25,    24,   436,    55,   438,    40,   440,   441,
    18,   443,    25,    90,  1079,  1080,   448,    90,     8,   451,
  1151,  1151,    25,  1088,    90,    25,   458,    66,    67,    68,
    69,    70,    71,    72,    73,    74,    75,  1102,   470,    25,
    21,   473,   614,   475,  1175,    90,   478,    18,   188,   538,
    18,    40,    21,    23,    18,   190,    90,    24,    21,  1124,
  1125,    23,    22,    90,    22,    90,   538,    21,   107,    22,
    20,    20,   111,    25,   113,   192,   115,    25,    90,    40,
    27,   120,    27,    25,    18,    20,  1151,    20,    27,    25,
   662,   130,     0,   132,     0,    57,    58,    59,    60,    61,
    62,    63,    64,    65,    66,   120,   121,   122,   123,    84,
   125,   300,   895,  1175,   546,   130,   131,   149,  1144,   134,
   135,  1073,   137,   138,   139,   140,   661,   976,   560,  1045,
   985,   563,  1123,  1013,   845,   174,   443,   152,   153,   770,
   563,   660,  1151,   658,   576,   577,   815,   124,   672,    10,
   322,   583,  1107,   490,   399,   688,    -1,   147,   341,   149,
   236,   193,   177,    -1,   973,    -1,     8,     9,    10,   201,
   602,    -1,   187,   205,    -1,   607,   208,    -1,    -1,    -1,
   137,    -1,    -1,    -1,   216,   617,   618,    -1,    -1,   221,
   622,   223,   624,   150,   151,   152,   153,   154,   155,    -1,
   157,   158,    -1,   193,   236,   237,    -1,    -1,    -1,    -1,
    -1,   201,    -1,    -1,    -1,   205,    -1,   649,   208,    -1,
   792,    -1,   261,   795,    -1,   657,   216,   659,    -1,    -1,
    -1,   663,   664,    -1,    -1,    -1,   668,    -1,    -1,    -1,
   672,   673,    -1,    -1,    -1,    -1,   678,   237,    -1,   288,
    -1,    -1,   291,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   299,    -1,    -1,   302,    -1,    -1,   698,    -1,    -1,    -1,
    -1,    -1,   844,   845,    -1,    -1,    -1,    -1,   850,   851,
   852,   853,   854,   855,   856,   857,   858,   859,   860,    -1,
    -1,    -1,    -1,    -1,     8,     9,    10,    23,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   149,    -1,    -1,
    -1,    -1,    -1,   303,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   311,   312,   313,   314,    -1,    -1,    -1,   900,    -1,
    -1,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    -1,   332,    -1,    -1,    -1,   778,    -1,    -1,    -1,
    -1,   193,    -1,   343,    -1,    -1,    -1,    -1,    -1,   201,
    -1,    -1,    -1,   205,    -1,    -1,   208,   399,    -1,    -1,
   360,    -1,    -1,    -1,   216,    -1,    -1,   416,    -1,   221,
    -1,   223,   814,   815,    -1,   817,    -1,   426,   420,   421,
    -1,    -1,   431,    -1,   236,   237,    -1,   436,    -1,   438,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   446,    -1,   399,
    -1,   450,    -1,    -1,    -1,    -1,    -1,   407,   375,   376,
   377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
   387,   388,   389,   390,    -1,   149,    18,    -1,    -1,    -1,
    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,
    32,    33,    34,    -1,  1026,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    46,    47,    48,    -1,   425,    18,
    -1,   903,    -1,    -1,    -1,    24,    -1,    -1,   910,   193,
    29,    30,    31,    32,    33,    34,    -1,   201,    70,    -1,
    -1,   205,    -1,    -1,   208,    -1,    -1,    46,    47,    48,
    -1,    -1,   216,    -1,    -1,    -1,   538,   221,    -1,   223,
    -1,    -1,    -1,    -1,   471,    -1,    -1,    -1,    -1,   476,
    -1,    70,   236,   237,    -1,    -1,    -1,    -1,    24,   486,
    -1,   113,    -1,    29,    30,    31,    32,    33,    34,   529,
    -1,    -1,    -1,   582,    -1,    -1,    -1,    -1,   538,    -1,
    46,    47,    48,    -1,    -1,    -1,    -1,   399,    -1,    -1,
    -1,    -1,   601,    -1,   113,    -1,    -1,   606,    -1,    -1,
    -1,   528,    -1,   530,    70,   532,   533,    -1,   420,   421,
     8,     9,    10,  1015,    -1,    -1,  1018,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   633,    -1,   635,    -1,  1030,    -1,
  1032,    -1,   184,   185,   186,  1037,   188,   597,  1040,  1041,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   113,    72,    73,
    74,    75,    -1,    -1,   581,    79,    80,    81,    82,    83,
    84,    85,   622,    -1,   624,   184,   185,   186,    -1,   188,
   630,    -1,    -1,    -1,   634,    -1,   603,    -1,    -1,    -1,
    -1,  1083,    -1,    -1,    -1,    -1,  1088,    -1,  1090,  1091,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
  1102,   710,    -1,    -1,    -1,   632,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   399,    -1,    -1,   184,   185,
   186,    -1,   188,    -1,    -1,  1127,   538,   687,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   420,   421,   698,    -1,
    -1,    -1,    -1,    -1,    -1,  1147,  1148,    -1,    -1,  1151,
    -1,   149,  1154,    19,    20,    -1,   765,   766,    24,    -1,
    -1,   688,    -1,    29,    30,    31,    32,    33,    34,    -1,
    -1,    -1,   699,   700,   701,   702,   703,   704,   705,   706,
    46,    47,    48,    -1,    -1,    -1,    -1,    -1,   797,    -1,
    -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   201,    70,    -1,    -1,   205,    -1,    -1,
   208,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   216,    -1,
    -1,    19,    -1,   221,    -1,   223,    24,    -1,    -1,    -1,
    -1,    29,    30,    31,    32,    33,    34,    -1,   236,   237,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   113,    46,    47,
    48,    -1,    -1,    -1,   538,    -1,    -1,    -1,    -1,    -1,
    -1,   788,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,    19,    -1,
    -1,    -1,    -1,    24,    -1,    -1,   846,    -1,    29,    30,
    31,    32,    33,    34,   903,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   830,    -1,    46,    47,    48,    -1,    -1,
    -1,    -1,    -1,   922,    -1,   113,    -1,    -1,   184,   185,
   186,    -1,   188,    -1,    -1,    -1,    -1,    -1,    -1,    70,
    -1,    -1,    -1,    -1,   861,   862,   863,   864,   865,   866,
   867,   868,   869,   870,   871,   872,   873,   874,   875,   876,
   877,    -1,   879,    -1,    -1,    -1,    -1,    -1,    -1,     0,
     1,    -1,    -1,    -1,    -1,    -1,   926,    -1,    -1,    -1,
    -1,    -1,   113,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    24,    -1,    -1,   184,   185,   186,    -1,
   188,    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   399,    -1,    -1,    45,    -1,    -1,  1016,    -1,   936,
    -1,   971,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   420,   421,    -1,    -1,    67,    68,    69,    -1,
    71,    -1,    -1,    -1,    -1,    76,    77,    78,    -1,    -1,
    -1,    -1,    -1,   184,   185,   186,   973,   188,    -1,    -1,
    91,    92,    93,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
   111,   112,    -1,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,  1092,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
   161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
   171,   172,   173,   174,   175,   176,   177,    -1,    -1,    -1,
   538,    -1,    -1,   184,   185,   186,   187,    -1,   189,   190,
   191,     0,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,  1182,    -1,    24,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    34,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    45,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,
    69,    -1,    71,  1150,    -1,    -1,    -1,    76,    77,    78,
    -1,    -1,    -1,    -1,    -1,    -1,  1163,    -1,    -1,    -1,
    -1,    -1,    91,    92,    93,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1184,    -1,    -1,
    -1,   110,   111,   112,    -1,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
   159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
   169,   170,   171,   172,   173,   174,   175,   176,   177,    -1,
    -1,    -1,    -1,    -1,    -1,   184,   185,   186,   187,     1,
   189,   190,   191,    -1,     6,     7,     8,    -1,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    -1,
    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,
    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    42,    43,    -1,    45,    46,    47,    48,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    70,    71,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    95,    96,    97,    98,    99,   100,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,    -1,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
   152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
   162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
   172,   173,   174,   175,   176,   177,    -1,    -1,    -1,    -1,
    -1,    -1,   184,   185,   186,   187,   188,   189,   190,   191,
     1,    -1,    -1,    -1,    -1,     6,     7,     8,    -1,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    -1,
    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,
    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    42,    43,    -1,    -1,    46,    47,    48,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    70,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    95,    96,    97,    98,    99,   100,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,    -1,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
   161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
   171,   172,   173,   174,   175,   176,   177,    -1,    -1,    -1,
    -1,    -1,    -1,   184,   185,   186,   187,   188,   189,   190,
   191,     1,    -1,    -1,    -1,    -1,     6,     7,     8,    -1,
    -1,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,
    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    42,    43,    -1,    -1,    46,    47,    48,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,
    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    95,    96,    97,    98,    99,
   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,    -1,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
   150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
   160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
   170,   171,   172,   173,   174,   175,   176,   177,    -1,    -1,
    -1,    -1,    -1,    -1,   184,   185,   186,   187,   188,   189,
   190,   191,     1,    -1,    -1,    -1,    -1,     6,     7,     8,
    -1,    -1,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    -1,    -1,    -1,    24,    25,    -1,    -1,    -1,
    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    42,    43,    -1,     1,    46,    47,    48,
    -1,     6,     7,     8,    -1,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    -1,    -1,    -1,    -1,    24,
    -1,    70,    -1,    -1,    29,    30,    31,    32,    33,    34,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,
    -1,    46,    47,    48,    -1,    94,    95,    96,    97,    98,
    99,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   109,    -1,    -1,    -1,   113,    70,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    94,
    95,    96,    97,    98,    99,   100,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   184,   185,   186,    -1,   188,
   189,   190,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,
     6,     7,     8,    -1,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    -1,    -1,    -1,    -1,    24,    -1,
    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,   184,
   185,   186,    -1,   188,   189,   190,    42,    43,    -1,     1,
    46,    47,    48,    -1,     6,     7,     8,    -1,    -1,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    -1,
    -1,    -1,    24,    -1,    70,    -1,    -1,    29,    30,    31,
    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    42,    43,    -1,    -1,    46,    47,    48,    -1,    94,    95,
    96,    97,    98,    99,   100,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,    70,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    94,    95,    96,    97,    98,    99,   100,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,    -1,    -1,
    -1,   113,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   184,   185,
   186,    -1,   188,   189,   190,    -1,    -1,    -1,     1,    -1,
    -1,    -1,    -1,     6,     7,     8,    -1,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    -1,    -1,
    -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,    32,
    33,    34,   184,   185,   186,    -1,   188,   189,   190,    42,
    43,    -1,     1,    46,    47,    48,    -1,     6,     7,     8,
    -1,    -1,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    -1,    -1,    -1,    24,    -1,    70,    -1,    -1,
    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    42,    43,    -1,    -1,    46,    47,    48,
    -1,    -1,    95,    96,    97,    98,    99,   100,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   109,    -1,    -1,    -1,
   113,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    95,    96,    97,    98,
    99,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   109,    -1,    -1,    -1,   113,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    24,    25,    -1,    -1,    -1,    29,    30,    31,    32,    33,
    34,   184,   185,   186,    -1,   188,   189,   190,    -1,    -1,
    -1,     1,    46,    47,    48,    -1,     6,     7,     8,    -1,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    -1,    -1,    -1,    -1,    24,    -1,    70,    -1,    -1,    29,
    30,    31,    32,    33,    34,   184,   185,   186,    -1,   188,
   189,   190,    42,    43,    -1,    -1,    46,    47,    48,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   113,
    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    95,    96,    97,    98,    99,
   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,
     6,     7,     8,   113,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    -1,    -1,    -1,    24,    -1,
    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,    -1,
   184,   185,   186,    -1,   188,    -1,    42,    43,    -1,    45,
    46,    47,    48,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    70,    71,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   184,   185,   186,    -1,   188,   189,
   190,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    95,
    96,    97,    98,    99,   100,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,    -1,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
   156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
   166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
   176,   177,    -1,    -1,    -1,    -1,    -1,    -1,   184,   185,
   186,   187,   188,   189,   190,   191,     6,     7,     8,    -1,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,
    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    42,    43,    -1,    45,    46,    47,    48,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    70,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    95,    96,    97,    98,    99,
   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,    -1,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
   150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
   160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
   170,   171,   172,   173,   174,   175,   176,   177,    -1,    -1,
    -1,    -1,    -1,    -1,   184,   185,   186,   187,   188,   189,
   190,   191,     6,     7,     8,    -1,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
    24,    -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,
    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,
    -1,    45,    46,    47,    48,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    95,    96,    97,    98,    99,   100,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
    -1,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
   154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
   164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
   174,   175,   176,   177,    -1,    -1,    -1,    -1,    -1,    -1,
   184,   185,   186,   187,   188,   189,   190,   191,     6,     7,
     8,    -1,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    -1,    -1,    -1,    24,    -1,    -1,    -1,
    -1,    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    47,
    48,    -1,     6,     7,     8,    -1,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
    24,    -1,    70,    -1,    -1,    29,    30,    31,    32,    33,
    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    46,    47,    48,    -1,    -1,    95,    96,    97,
    98,    99,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   109,    -1,    -1,    -1,   113,    70,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    95,    96,    97,    98,    99,   100,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   109,     6,     7,     8,   113,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,
    30,    31,    32,    33,    34,    -1,   184,   185,   186,    -1,
   188,   189,   190,    -1,    -1,    -1,    46,    47,    48,    -1,
     6,     7,     8,    -1,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    -1,    -1,    -1,    24,    -1,
    70,    -1,    -1,    29,    30,    31,    32,    33,    34,    -1,
   184,   185,   186,    -1,   188,   189,   190,    -1,    -1,    -1,
    46,    47,    48,    -1,    -1,    95,    96,    97,    98,    99,
   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,
    -1,    -1,    -1,   113,    70,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    95,
    96,    97,    98,    99,   100,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   109,     6,     7,     8,   113,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    -1,
    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,
    32,    33,    34,    -1,   184,   185,   186,    -1,   188,   189,
   190,    -1,    -1,    -1,    46,    47,    48,    -1,     6,     7,
     8,    -1,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    -1,    -1,    -1,    24,    -1,    70,    -1,
    -1,    29,    30,    31,    32,    33,    34,    -1,   184,   185,
   186,    -1,   188,   189,   190,    -1,    -1,    -1,    46,    47,
    48,    -1,    -1,    95,    96,    97,    98,    99,   100,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,    -1,    -1,
    -1,   113,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    95,    96,    97,
    98,    99,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   109,     6,     7,     8,   113,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
    24,    -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,
    34,    -1,   184,   185,   186,    -1,   188,   189,   190,    -1,
    -1,    -1,    46,    47,    48,    -1,     6,     7,     8,    -1,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    -1,    -1,    -1,    -1,    24,    -1,    70,    -1,    -1,    29,
    30,    31,    32,    33,    34,    -1,   184,   185,   186,    -1,
   188,   189,   190,    -1,    -1,    -1,    46,    47,    48,    -1,
    -1,    95,    96,    97,    98,    99,   100,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,
    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    95,    96,    97,    98,    99,
   100,    19,    -1,    -1,    -1,    -1,    24,    -1,    -1,   109,
    -1,    -1,    -1,   113,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   184,   185,   186,    -1,   188,   189,   190,    -1,    -1,    -1,
    -1,    -1,    -1,    71,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    20,    -1,    -1,    -1,   184,   185,   186,    -1,   188,   189,
   190,    -1,   110,   111,   112,    -1,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,    -1,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
   158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
   168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   186,   187,
   110,   111,   112,   191,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,    -1,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
   150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
   160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
   170,   171,   172,   173,   174,   175,   176,   177,    22,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   186,   187,    -1,    -1,
    -1,   191,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    67,    68,    69,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    87,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,    -1,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
    -1,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
   154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
   164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
   174,   175,   176,   177,    24,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   187,    34,    24,    -1,   191,    27,    -1,
    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    47,    48,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   110,   111,   112,    -1,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   113,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
   150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
   160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
   170,   171,   172,   173,   174,   175,   176,   177,    -1,    -1,
    -1,    -1,    -1,    -1,   184,   185,   186,   187,    -1,   189,
   190,   191,    -1,    -1,    -1,   184,   185,   186,    24,   188,
    -1,    27,    -1,    29,    30,    31,    32,    33,    34,    24,
    25,    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,
    46,    47,    48,    -1,    -1,    -1,    -1,    -1,    -1,    24,
    25,    46,    47,    48,    29,    30,    31,    32,    33,    34,
    24,    -1,    -1,    -1,    70,    29,    30,    31,    32,    33,
    34,    46,    47,    48,    -1,    70,    -1,    -1,    -1,    -1,
    24,    -1,    46,    47,    48,    29,    30,    31,    32,    33,
    34,    -1,    -1,    -1,    -1,    70,    -1,    -1,    -1,    -1,
    -1,    -1,    46,    47,    48,    24,    70,   113,    -1,    -1,
    29,    30,    31,    32,    33,    34,    -1,    -1,   113,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    70,    46,    47,    48,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    24,   113,    -1,
    -1,    -1,    29,    30,    31,    32,    33,    34,    -1,   113,
    -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,
    47,    48,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   113,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   184,   185,
   186,    -1,   188,    70,    -1,    -1,    -1,    -1,    -1,   184,
   185,   186,    -1,   188,   113,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   184,
   185,   186,    -1,   188,    -1,    -1,    -1,    -1,    -1,    -1,
   184,   185,   186,    -1,   188,    -1,   113,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    42,    43,    -1,    -1,    -1,    -1,
   184,   185,   186,    -1,   188,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   184,   185,   186,    -1,   188,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   184,   185,   186,
    -1,   188,   110,   111,   112,    -1,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,    -1,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
   158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
   168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   186,   187,
    -1,    -1,    -1,   191,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    67,    68,    69,    -1,    71,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   110,   111,   112,    -1,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,    -1,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
   155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
   165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
   175,   176,   177,    45,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   186,   187,    -1,    -1,    -1,   191,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
   112,    -1,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,    -1,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
   152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
   162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
   172,   173,   174,   175,   176,   177,    45,    -1,    -1,    -1,
    -1,    -1,   184,   185,   186,   187,    -1,    -1,    -1,   191,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   110,   111,   112,    -1,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
   159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
   169,   170,   171,   172,   173,   174,   175,   176,   177,    67,
    68,    69,    -1,    -1,    -1,    -1,    -1,   186,   187,    -1,
    -1,    -1,   191,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   110,   111,   112,    -1,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,    -1,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
   158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
   168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
    91,    92,    93,    -1,    -1,    -1,    -1,    -1,   186,   187,
    -1,    -1,    -1,   191,    -1,    -1,    -1,    -1,    -1,   110,
   111,   112,    -1,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,    -1,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
   161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
   171,   172,   173,   174,   175,   176,   177,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   186,   187,   110,   111,   112,
   191,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,    -1,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
   163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
   173,   174,   175,   176,   177,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   186,   187,    -1,    -1,    -1,   191
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */

/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif



/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 3:
{ context_checkGlobalScope (); ;
    break;}
case 4:
{ context_checkGlobalScope (); ;
    break;}
case 5:
{ uentry_clearDecl (); ;
    break;}
case 6:
{ uentry_clearDecl (); ;
    break;}
case 7:
{ uentry_clearDecl (); ;
    break;}
case 8:
{ uentry_clearDecl (); ;
    break;}
case 9:
{ uentry_clearDecl (); ;
    break;}
case 10:
{ uentry_checkDecl (); exprNode_free (yyvsp[0].expr); ;
    break;}
case 11:
{ uentry_clearDecl (); ;
    break;}
case 12:
{ checkConstant (yyvsp[-6].qtyp, yyvsp[-4].ntyp); ;
    break;}
case 13:
{ checkValueConstant (yyvsp[-9].qtyp, yyvsp[-7].ntyp, yyvsp[-3].expr) ; ;
    break;}
case 14:
{ context_enterFunctionHeader (); ;
    break;}
case 15:
{ 
     declareStaticFunction (yyvsp[-2].ntyp); context_quietExitFunction (); 
     context_exitFunctionHeader (); 
   ;
    break;}
case 16:
{ 
     qtype qint = qtype_create (ctype_int);
     yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, qint);
     qtype_free (qint);
   ;
    break;}
case 17:
{ yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, yyvsp[-2].qtyp); ;
    break;}
case 19:
{ yyval.ntyp = yyvsp[0].ntyp; qtype_adjustPointers (yyvsp[-1].count, idDecl_getTyp (yyval.ntyp)); ;
    break;}
case 20:
{ yyval.ntyp = idDecl_create (yyvsp[0].cname, qtype_unknown ()); ;
    break;}
case 21:
{ yyval.ntyp = idDecl_expectFunction (yyvsp[-2].ntyp); ;
    break;}
case 22:
{ yyval.ntyp = idDecl_replaceCtype (yyvsp[-2].ntyp, ctype_makeArray (idDecl_getCtype (yyvsp[-2].ntyp))); ;
    break;}
case 23:
{
     exprNode_findValue(yyvsp[-2].expr);
     if (exprNode_hasValue (yyvsp[-2].expr)) 
       {
	 yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ctype_makeFixedArray (idDecl_getCtype (yyvsp[-5].ntyp), exprNode_getLongValue (yyvsp[-2].expr)));
       } 
     else
       {
	 yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ctype_makeArray (idDecl_getCtype (yyvsp[-5].ntyp))); 
       }
   ;
    break;}
case 24:
{ setCurrentParams (uentryList_missingParams); ;
    break;}
case 25:
{ /* need to support globals and modifies here! */
     ctype ct = ctype_makeFunction (idDecl_getCtype (yyvsp[-5].ntyp), 
				    uentryList_makeMissingParams ());
     
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ct);
     idDecl_addClauses (yyval.ntyp, yyvsp[0].funcclauselist);
     context_popLoc ();
     /*drl 7/25/01 added*/
     setImplictfcnConstraints();
   ;
    break;}
case 26:
{ setCurrentParams (yyvsp[-1].entrylist); ;
    break;}
case 27:
{ setImplictfcnConstraints ();
     clearCurrentParams ();
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-6].ntyp, ctype_makeFunction (idDecl_getCtype (yyvsp[-6].ntyp), yyvsp[-3].entrylist));
     idDecl_addClauses (yyval.ntyp, yyvsp[0].funcclauselist);
     context_popLoc (); 
   ;
    break;}
case 28:
{ yyval.ntyp = idDecl_create (yyvsp[0].cname, qtype_unknown ()); ;
    break;}
case 29:
{ yyval.ntyp = idDecl_expectFunction (yyvsp[-2].ntyp); ;
    break;}
case 30:
{ yyval.ntyp = idDecl_replaceCtype (yyvsp[-2].ntyp, ctype_makeArray (idDecl_getCtype (yyvsp[-2].ntyp))); ;
    break;}
case 31:
{ 
     int value;

     if (exprNode_hasValue (yyvsp[-2].expr) 
	 && multiVal_isInt (exprNode_getValue (yyvsp[-2].expr)))
       {
	 value = (int) multiVal_forceInt (exprNode_getValue (yyvsp[-2].expr));
       }
     else
       {
	 value = 0;
       }

     yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ctype_makeFixedArray (idDecl_getCtype (yyvsp[-5].ntyp), value));
   ;
    break;}
case 32:
{ setCurrentParams (uentryList_missingParams); ;
    break;}
case 33:
{
     ctype ct = ctype_makeFunction (idDecl_getCtype (yyvsp[-5].ntyp), 
				    uentryList_makeMissingParams ());
     
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ct);
     idDecl_addClauses (yyval.ntyp, yyvsp[0].funcclauselist);
     context_popLoc (); 
   ;
    break;}
case 34:
{ setCurrentParams (yyvsp[-1].entrylist); ;
    break;}
case 35:
{ 
     clearCurrentParams ();
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-6].ntyp, ctype_makeFunction (idDecl_getCtype (yyvsp[-6].ntyp), yyvsp[-3].entrylist));
     idDecl_addClauses (yyval.ntyp, yyvsp[0].funcclauselist);
     context_popLoc (); 
   ;
    break;}
case 36:
{ setCurrentParams (yyvsp[-1].entrylist); ;
    break;}
case 37:
{ clearCurrentParams (); ;
    break;}
case 38:
{ declareCIter (yyvsp[-8].cname, yyvsp[-6].entrylist); ;
    break;}
case 39:
{ exprNode_checkMacroBody (yyvsp[-1].expr); ;
    break;}
case 40:
{ exprNode_checkIterBody (yyvsp[-1].expr); ;
    break;}
case 41:
{ exprNode_checkIterEnd (yyvsp[-1].expr); ;
    break;}
case 42:
{ exprChecks_checkEmptyMacroBody (); ;
    break;}
case 43:
{ clabstract_declareFunction (yyvsp[0].ntyp); ;
    break;}
case 44:
{ yyval.msconstraint = metaStateConstraint_create (yyvsp[-2].msspec, yyvsp[0].msexpr); ;
    break;}
case 45:
{ cscanner_expectingMetaStateName (); ;
    break;}
case 46:
{ cscanner_clearExpectingMetaStateName ();
      yyval.msspec = metaStateSpecifier_create (yyvsp[-3].sr, yyvsp[0].msinfo); ;
    break;}
case 47:
{ cscanner_expectingMetaStateName (); ;
    break;}
case 48:
{ cscanner_clearExpectingMetaStateName ();
      yyval.msspec = metaStateSpecifier_createElipsis (yyvsp[0].msinfo); ;
    break;}
case 49:
{ yyval.msexpr = metaStateExpression_create (yyvsp[0].msspec); ;
    break;}
case 50:
{ yyval.msexpr = metaStateExpression_createMerge (yyvsp[-2].msspec, yyvsp[0].msexpr); ;
    break;}
case 54:
{ yyval.conL = constraintList_add (yyvsp[0].conL, yyvsp[-2].con); ;
    break;}
case 55:
{ yyval.conL = constraintList_single (yyvsp[0].con); ;
    break;}
case 56:
{
 yyval.con = makeConstraintParse3 (yyvsp[-2].conE, yyvsp[-1].tok, yyvsp[0].conE);
 DPRINTF(("Done BufConstraint1\n")); ;
    break;}
case 63:
{yyval.conE = constraintExpr_parseMakeUnaryOp (yyvsp[-3].tok, yyvsp[-1].conE);  DPRINTF( ("Got BufConstraintExpr UNary Op ") ); ;
    break;}
case 64:
{
   DPRINTF( ("Got BufConstraintExpr BINary Op ") );
   yyval.conE = constraintExpr_parseMakeBinaryOp (yyvsp[-3].conE, yyvsp[-2].tok, yyvsp[-1].conE); ;
    break;}
case 65:
{ yyval.conE =  constraintExpr_makeTermsRef (yyvsp[0].sr);;
    break;}
case 66:
{ yyval.conE = constraintExpr_makeIntLiteral (exprNode_getLongValue (yyvsp[0].expr)); ;
    break;}
case 67:
{ /*@-onlytrans@*/ yyval.sr = checkbufferConstraintClausesId (yyvsp[0].entry); /*@=onlytrans@*/ /*@i523@*/ ;
    break;}
case 68:
{ yyval.sr = fixStateClausesId (yyvsp[0].cname); ;
    break;}
case 69:
{ yyval.sr = sRef_makeAnyArrayFetch (yyvsp[-2].sr); ;
    break;}
case 70:
{
    /*
    char *t; int c; 
    t =  cstring_toCharsSafe (exprNode_unparse($3)); 
    c = atoi( t );
    */
    yyval.sr = sRef_makeArrayFetchKnown (yyvsp[-3].sr, exprNode_getLongValue (yyvsp[-1].expr));
  ;
    break;}
case 71:
{ yyval.sr = sRef_constructPointer (yyvsp[0].sr); ;
    break;}
case 72:
{ yyval.sr = yyvsp[-1].sr; ;
    break;}
case 73:
{ cstring_markOwned (yyvsp[0].cname); yyval.sr = sRef_buildField (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 74:
{ cstring_markOwned (yyvsp[0].cname); yyval.sr = sRef_makeArrow (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 78:
{ yyval.funcclauselist = functionClauseList_new (); ;
    break;}
case 79:
{ yyval.funcclauselist = functionClauseList_prepend (yyvsp[0].funcclauselist, yyvsp[-1].funcclause); ;
    break;}
case 80:
{ yyval.funcclauselist = functionClauseList_new (); ;
    break;}
case 81:
{ yyval.funcclauselist = functionClauseList_prepend (yyvsp[0].funcclauselist, yyvsp[-1].funcclause); ;
    break;}
case 82:
{ yyval.funcclause = functionClause_createGlobals (yyvsp[0].globsclause); ;
    break;}
case 83:
{ yyval.funcclause = functionClause_createModifies (yyvsp[0].modsclause); ;
    break;}
case 84:
{ yyval.funcclause = functionClause_createModifies (yyvsp[0].modsclause); ;
    break;}
case 85:
{ yyval.funcclause = functionClause_createState (yyvsp[0].stateclause); ;
    break;}
case 86:
{ yyval.funcclause = yyvsp[0].funcclause; ;
    break;}
case 87:
{ yyval.funcclause = functionClause_createWarn (yyvsp[0].warnclause); ;
    break;}
case 88:
{ yyval.funcclause = functionClause_createGlobals (yyvsp[0].globsclause); ;
    break;}
case 89:
{ yyval.funcclause = functionClause_createModifies (yyvsp[0].modsclause); ;
    break;}
case 90:
{ yyval.funcclause = functionClause_createModifies (yyvsp[0].modsclause); ;
    break;}
case 91:
{ yyval.funcclause = functionClause_createState (yyvsp[0].stateclause); ;
    break;}
case 92:
{ yyval.funcclause = yyvsp[0].funcclause; ;
    break;}
case 93:
{ yyval.funcclause = functionClause_createWarn (yyvsp[0].warnclause); ;
    break;}
case 94:
{ yyval.globsclause = yyvsp[-1].globsclause; ;
    break;}
case 95:
{ setProcessingGlobalsList (); ;
    break;}
case 96:
{ 
     unsetProcessingGlobals (); 
     yyval.globsclause = globalsClause_create (yyvsp[-3].tok, yyvsp[-1].globset); 
   ;
    break;}
case 97:
{ yyval.modsclause = modifiesClause_createNoMods (yyvsp[0].tok); ;
    break;}
case 98:
{ yyval.modsclause = yyvsp[-1].modsclause; ;
    break;}
case 99:
{
     context_setProtectVars (); enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;
    break;}
case 100:
{ 
     exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
     yyval.modsclause = modifiesClause_create (yyvsp[-2].tok, yyvsp[0].srset);
   ;
    break;}
case 101:
{ yyval.flagspec = flagSpec_createPlain (yyvsp[0].cname); ;
    break;}
case 102:
{ yyval.flagspec = flagSpec_createOr (yyvsp[-2].cname, yyvsp[0].flagspec); ;
    break;}
case 105:
{ yyval.warnclause = warnClause_undefined; ;
    break;}
case 106:
{ yyval.warnclause = yyvsp[-1].warnclause; ;
    break;}
case 107:
{      
     llassert (exprNode_knownStringValue (yyvsp[0].expr));
     yyval.warnclause = warnClause_create (yyvsp[-2].tok, yyvsp[-1].flagspec, cstring_copy (multiVal_forceString (exprNode_getValue (yyvsp[0].expr)))); 
     exprNode_free (yyvsp[0].expr);
   ;
    break;}
case 108:
{ yyval.warnclause = warnClause_create (yyvsp[-1].tok, yyvsp[0].flagspec, cstring_undefined); ;
    break;}
case 109:
{ yyval.globset = globSet_single (yyvsp[0].sr); ;
    break;}
case 110:
{ yyval.globset = globSet_insert (yyvsp[-2].globset, yyvsp[0].sr); ;
    break;}
case 111:
{ yyval.sr = clabstract_createGlobal (yyvsp[0].sr, yyvsp[-1].tquallist); ;
    break;}
case 112:
{ yyval.tquallist = qualList_undefined; ;
    break;}
case 113:
{ yyval.tquallist = qualList_add (yyvsp[0].tquallist, yyvsp[-1].typequal); ;
    break;}
case 114:
{ yyval.sr = uentry_getSref (yyvsp[0].entry); ;
    break;}
case 115:
{ yyval.sr = clabstract_unrecognizedGlobal (yyvsp[0].cname); ;
    break;}
case 116:
{ yyval.sr = clabstract_checkGlobal (yyvsp[0].expr); ;
    break;}
case 117:
{ yyval.typequal = qual_createUndef (); ;
    break;}
case 118:
{ yyval.typequal = qual_createKilled (); ;
    break;}
case 119:
{ yyval.typequal = qual_createOut (); ;
    break;}
case 120:
{ yyval.typequal = qual_createIn (); ;
    break;}
case 121:
{ yyval.typequal = qual_createPartial (); ;
    break;}
case 129:
{ 
     qtype qint = qtype_create (ctype_int);
     yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, qint);
     qtype_free (qint);
   ;
    break;}
case 130:
{ yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, yyvsp[-2].qtyp); ;
    break;}
case 131:
{ checkDoneParams (); context_enterInnerContext (); ;
    break;}
case 132:
{  
     exprNode_checkFunctionBody (yyvsp[0].expr); yyval.expr = yyvsp[0].expr; 
     context_exitInner (yyvsp[0].expr); 
   ;
    break;}
case 133:
{ context_enterOldStyleScope (); ;
    break;}
case 134:
{ oldStyleDoneParams (); context_enterInnerContext (); ;
    break;}
case 135:
{
     exprNode_checkFunctionBody (yyvsp[0].expr); 
     yyval.expr = yyvsp[0].expr; /* oldstyle */ 
     context_exitInner (yyvsp[0].expr);
   ;
    break;}
case 136:
{ 
     context_setFunctionDefined (exprNode_loc (yyvsp[0].expr)); 
     exprNode_checkFunction (context_getHeader (),  yyvsp[0].expr); 
     /* DRL 8 8 2000 */
     
     context_exitFunction ();
   ;
    break;}
case 137:
{ yyval.srset = yyvsp[-1].srset; ;
    break;}
case 138:
{ yyval.srset = sRefSet_new (); ;
    break;}
case 139:
{ yyval.sr = uentry_getSref (yyvsp[0].entry); checkModifiesId (yyvsp[0].entry); ;
    break;}
case 140:
{ yyval.sr = fixModifiesId (yyvsp[0].cname); ;
    break;}
case 141:
{ yyval.sr = modListArrayFetch (yyvsp[-2].sr, sRef_undefined); ;
    break;}
case 142:
{ yyval.sr = modListArrayFetch (yyvsp[-3].sr, yyvsp[-1].sr); ;
    break;}
case 143:
{ yyval.sr = modListPointer (yyvsp[0].sr); ;
    break;}
case 144:
{ yyval.sr = yyvsp[-1].sr; ;
    break;}
case 145:
{ yyval.sr = modListFieldAccess (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 146:
{ yyval.sr = modListArrowAccess (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 147:
{ yyval.sr = yyvsp[0].sr; ;
    break;}
case 148:
{ yyval.sr = sRef_makeUnknown (); /* sRef_makeConstant ($1); ? */ ;
    break;}
case 149:
{ yyval.srset = sRefSet_single (yyvsp[0].sr); ;
    break;}
case 150:
{ yyval.srset = sRefSet_insert (yyvsp[-2].srset, yyvsp[0].sr); ;
    break;}
case 151:
{ yyval.sr = checkStateClausesId (yyvsp[0].entry); ;
    break;}
case 152:
{ yyval.sr = fixStateClausesId (yyvsp[0].cname); ;
    break;}
case 153:
{ yyval.sr = sRef_makeAnyArrayFetch (yyvsp[-2].sr); ;
    break;}
case 154:
{ yyval.sr = sRef_makeAnyArrayFetch (yyvsp[-3].sr); ;
    break;}
case 155:
{ yyval.sr = sRef_constructPointer (yyvsp[0].sr); ;
    break;}
case 156:
{ yyval.sr = yyvsp[-1].sr; ;
    break;}
case 157:
{ cstring_markOwned (yyvsp[0].cname);
					    yyval.sr = sRef_buildField (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 158:
{ cstring_markOwned (yyvsp[0].cname);
                                            yyval.sr = sRef_makeArrow (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 159:
{ yyval.srset = sRefSet_undefined ;
    break;}
case 161:
{ if (sRef_isValid (yyvsp[0].sr)) { yyval.srset = sRefSet_single (yyvsp[0].sr); } 
      else { yyval.srset = sRefSet_undefined; } 
    ;
    break;}
case 162:
{ if (sRef_isValid (yyvsp[0].sr))
	{
	  yyval.srset = sRefSet_insert (yyvsp[-2].srset, yyvsp[0].sr); 
	}
      else
	{
	  yyval.srset = yyvsp[-2].srset;
	}
    ;
    break;}
case 163:
{ yyval.expr = exprNode_fromIdentifier (yyvsp[0].entry); ;
    break;}
case 164:
{ yyval.expr = exprNode_fromUIO (yyvsp[0].cname); ;
    break;}
case 166:
{ yyval.expr = exprNode_addParens (yyvsp[-2].tok, yyvsp[-1].expr); ;
    break;}
case 167:
{ yyval.expr = exprNode_fromIdentifier (coerceId (yyvsp[0].cname)); ;
    break;}
case 168:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 170:
{ yyval.expr = exprNode_arrayFetch (yyvsp[-3].expr, yyvsp[-1].expr); ;
    break;}
case 171:
{ yyval.expr = exprNode_functionCall (yyvsp[-2].expr, exprNodeList_new ()); ;
    break;}
case 172:
{ yyval.expr = exprNode_functionCall (yyvsp[-3].expr, yyvsp[-1].exprlist); ;
    break;}
case 173:
{ yyval.expr = exprNode_vaArg (yyvsp[-5].tok, yyvsp[-3].expr, yyvsp[-1].qtyp); ;
    break;}
case 174:
{ yyval.expr = exprNode_fieldAccess (yyvsp[-4].expr, yyvsp[-2].tok, yyvsp[-1].cname); ;
    break;}
case 175:
{ yyval.expr = exprNode_arrowAccess (yyvsp[-4].expr, yyvsp[-2].tok, yyvsp[-1].cname); ;
    break;}
case 176:
{ yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 177:
{ yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 178:
{ yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 179:
{ yyval.exprlist = exprNodeList_push (yyvsp[-2].exprlist, yyvsp[0].expr); ;
    break;}
case 181:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 182:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 183:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 184:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 185:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 186:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 187:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 188:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 189:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 190:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 191:
{ yyval.cstringlist = cstringList_add (yyvsp[-2].cstringlist, yyvsp[0].cname); ;
    break;}
case 192:
{ yyval.cstringlist = cstringList_single (yyvsp[0].cname); ;
    break;}
case 193:
{ yyval.expr = exprNode_offsetof (yyvsp[-5].qtyp, yyvsp[-2].cstringlist); ;
    break;}
case 194:
{ context_setProtectVars (); ;
    break;}
case 195:
{ context_sizeofReleaseVars (); yyval.expr = yyvsp[0].expr; ;
    break;}
case 196:
{ yyval.expr = exprNode_sizeofType (yyvsp[-1].qtyp); ;
    break;}
case 197:
{ yyval.expr = exprNode_sizeofExpr (yyvsp[0].expr); ;
    break;}
case 198:
{ yyval.expr = exprNode_alignofType (yyvsp[-1].qtyp); ;
    break;}
case 199:
{ yyval.expr = exprNode_alignofExpr (yyvsp[0].expr); ;
    break;}
case 201:
{ yyval.expr = exprNode_cast (yyvsp[-3].tok, yyvsp[0].expr, yyvsp[-2].qtyp); ;
    break;}
case 203:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 204:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 205:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 207:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 208:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 210:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 211:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 213:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 214:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 215:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 216:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 218:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 219:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 221:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 223:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 225:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 227:
{ exprNode_produceGuards (yyvsp[-1].expr); 
     context_enterAndClause (yyvsp[-1].expr); 
   ;
    break;}
case 228:
{ 
     yyval.expr = exprNode_op (yyvsp[-3].expr, yyvsp[0].expr, yyvsp[-2].tok); 
     context_exitAndClause (yyval.expr, yyvsp[0].expr);
   ;
    break;}
case 230:
{ 
     exprNode_produceGuards (yyvsp[-1].expr);
     context_enterOrClause (yyvsp[-1].expr); 
   ;
    break;}
case 231:
{ 
     yyval.expr = exprNode_op (yyvsp[-3].expr, yyvsp[0].expr, yyvsp[-2].tok); 
     context_exitOrClause (yyval.expr, yyvsp[0].expr);
   ;
    break;}
case 233:
{ exprNode_produceGuards (yyvsp[-1].expr); context_enterTrueClause (yyvsp[-1].expr); ;
    break;}
case 234:
{ context_enterFalseClause (yyvsp[-4].expr); ;
    break;}
case 235:
{ yyval.expr = exprNode_cond (yyvsp[-6].expr, yyvsp[-3].expr, yyvsp[0].expr); context_exitClause (yyvsp[-6].expr, yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 237:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 238:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 239:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 240:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 241:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 242:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 243:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 244:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 245:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 246:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 247:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 249:
{ yyval.expr = exprNode_comma (yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 250:
{ yyval.expr = exprNode_undefined; ;
    break;}
case 253:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 254:
{ doVaDcl (); yyval.expr = exprNode_makeError (); ;
    break;}
case 255:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 256:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 257:
{
     setProcessingVars (yyvsp[-3].qtyp); 
     processNamedDecl (yyvsp[-1].ntyp); 
   ;
    break;}
case 258:
{ 
     unsetProcessingVars (); 
     yyval.expr = exprNode_makeEmptyInitialization (yyvsp[-6].ntyp); 
     DPRINTF (("Empty initialization: %s", exprNode_unparse (yyval.expr)));
   ;
    break;}
case 259:
{ setProcessingVars (yyvsp[-4].qtyp); processNamedDecl (yyvsp[-2].ntyp); ;
    break;}
case 260:
{ yyval.expr = exprNode_concat (yyvsp[-2].expr, exprNode_makeInitialization (yyvsp[-8].ntyp, yyvsp[-3].expr)); 
     unsetProcessingVars ();
   ;
    break;}
case 261:
{ 
     processNamedDecl (yyvsp[-1].ntyp); 
     yyval.expr = exprNode_makeEmptyInitialization (yyvsp[-1].ntyp);
   ;
    break;}
case 262:
{ processNamedDecl (yyvsp[-2].ntyp); ;
    break;}
case 263:
{ yyval.expr = exprNode_makeInitialization (yyvsp[-5].ntyp, yyvsp[0].expr); ;
    break;}
case 264:
{ setProcessingTypedef (yyvsp[0].qtyp); ;
    break;}
case 265:
{ clabstract_declareType (yyvsp[-3].exprlist, yyvsp[-1].warnclause); ;
    break;}
case 266:
{ /* in the ANSI grammar, semantics unclear */ ;
    break;}
case 267:
{ /* in the ANSI grammar, semantics unclear */ ;
    break;}
case 268:
{ g_expectingTypeName = TRUE; ;
    break;}
case 269:
{ g_expectingTypeName = TRUE; context_pushLoc (); ;
    break;}
case 270:
{ yyval.exprlist = yyvsp[-1].exprlist; ;
    break;}
case 271:
{ yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 272:
{ yyval.exprlist = exprNodeList_push (yyvsp[-3].exprlist, yyvsp[0].expr); ;
    break;}
case 273:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 274:
{ yyval.expr = exprNode_concat (yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 276:
{ yyval.expr = exprNode_makeInitBlock (yyvsp[-2].tok, yyvsp[-1].exprlist); ;
    break;}
case 277:
{ yyval.expr = exprNode_makeInitBlock (yyvsp[-3].tok, yyvsp[-2].exprlist); ;
    break;}
case 278:
{ yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 279:
{ yyval.exprlist = exprNodeList_push (yyvsp[-2].exprlist, yyvsp[0].expr); ;
    break;}
case 280:
{ setStorageClass (SCEXTERN); yyval.typequal = qual_createExtern (); ;
    break;}
case 281:
{ yyval.typequal = qual_createInline (); ;
    break;}
case 282:
{ setStorageClass (SCSTATIC); yyval.typequal = qual_createStatic (); ;
    break;}
case 283:
{ yyval.typequal = qual_createAuto (); ;
    break;}
case 284:
{ yyval.typequal = qual_createRegister (); ;
    break;}
case 285:
{ yyval.typequal = qual_createNullTerminated (); ;
    break;}
case 286:
{ yyval.stateclause = yyvsp[-1].stateclause; ;
    break;}
case 287:
{
     context_setProtectVars (); 
     enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;
    break;}
case 288:
{ 
     exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
     yyval.stateclause = stateClause_createPlain (yyvsp[-5].tok, yyvsp[-2].srset);
   ;
    break;}
case 289:
{ yyval.funcclause = yyvsp[-1].funcclause; ;
    break;}
case 290:
{ yyval.tok = yyvsp[-1].tok; context_enterFunctionHeader (); ;
    break;}
case 291:
{
     context_exitFunctionHeader ();
     context_setProtectVars (); 
     enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;
    break;}
case 292:
{ 
     exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
     yyval.funcclause = functionClause_createState (stateClause_create (yyvsp[-5].tok, yyvsp[-4].typequal, yyvsp[-2].srset));
   ;
    break;}
case 293:
{
     context_setProtectVars (); 
     enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;
    break;}
case 294:
{
     context_exitFunctionHeader ();
     exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
     DPRINTF (("done optGlobBufConstraintsAux\n"));

     if (lltok_isEnsures (yyvsp[-4].tok)) 
       {
	 yyval.funcclause = functionClause_createEnsures (yyvsp[-2].fcnconstraint);
       }
     else if (lltok_isRequires (yyvsp[-4].tok))
       {
	 yyval.funcclause = functionClause_createRequires (yyvsp[-2].fcnconstraint);
       }
     else
       {
	 BADBRANCH;
       }

     DPRINTF (("FunctionclauseS: %s", functionClause_unparse (yyval.funcclause)));
   ;
    break;}
case 295:
{ yyval.fcnconstraint = functionConstraint_createBufferConstraint (yyvsp[0].conL); ;
    break;}
case 296:
{ yyval.fcnconstraint = functionConstraint_createMetaStateConstraint (yyvsp[0].msconstraint); DPRINTF (("Made constraint: %s", functionConstraint_unparse (yyval.fcnconstraint))); ;
    break;}
case 297:
{ yyval.typequal = qual_createExits (); ;
    break;}
case 298:
{ yyval.typequal = qual_createMayExit (); ;
    break;}
case 299:
{ yyval.typequal = qual_createTrueExit (); ;
    break;}
case 300:
{ yyval.typequal = qual_createFalseExit (); ;
    break;}
case 301:
{ yyval.typequal = qual_createNeverExit (); ;
    break;}
case 302:
{ yyval.typequal = qual_createChecked (); ;
    break;}
case 303:
{ yyval.typequal = qual_createCheckMod (); ;
    break;}
case 304:
{ yyval.typequal = qual_createUnchecked (); ;
    break;}
case 305:
{ yyval.typequal = qual_createCheckedStrict (); ;
    break;}
case 306:
{ yyval.typequal = qual_createOwned (); ;
    break;}
case 307:
{ yyval.typequal = qual_createDependent (); ;
    break;}
case 308:
{ yyval.typequal = qual_createYield (); ;
    break;}
case 309:
{ yyval.typequal = qual_createTemp (); ;
    break;}
case 310:
{ yyval.typequal = qual_createOnly (); ;
    break;}
case 311:
{ yyval.typequal = qual_createKeep (); ;
    break;}
case 312:
{ yyval.typequal = qual_createKept (); ;
    break;}
case 313:
{ yyval.typequal = qual_createShared (); ;
    break;}
case 314:
{ yyval.typequal = qual_createUnique (); ;
    break;}
case 315:
{ yyval.typequal = qual_createNull (); ;
    break;}
case 316:
{ yyval.typequal = qual_createIsNull (); ;
    break;}
case 317:
{ yyval.typequal = qual_createRelNull (); ;
    break;}
case 318:
{ yyval.typequal = qual_createNotNull (); ;
    break;}
case 319:
{ yyval.typequal = qual_createExposed (); ;
    break;}
case 320:
{ yyval.typequal = qual_createObserver (); ;
    break;}
case 321:
{ yyval.typequal = qual_createNullTerminated (); ;
    break;}
case 322:
{ yyval.typequal = qual_createMetaState (yyvsp[0].annotation); ;
    break;}
case 323:
{ yyval.typequal = qual_createReturned (); ;
    break;}
case 324:
{ yyval.typequal = qual_createSef (); ;
    break;}
case 325:
{ yyval.typequal = qual_createUnused (); ;
    break;}
case 326:
{ yyval.typequal = qual_createExternal (); ;
    break;}
case 327:
{ yyval.typequal = qual_createTrueNull (); ;
    break;}
case 328:
{ yyval.typequal = qual_createFalseNull (); ;
    break;}
case 329:
{ yyval.typequal = qual_createAbstract (); ;
    break;}
case 330:
{ yyval.typequal = qual_createConcrete (); ;
    break;}
case 331:
{ yyval.typequal = qual_createMutable (); ;
    break;}
case 332:
{ yyval.typequal = qual_createImmutable (); ;
    break;}
case 333:
{ yyval.typequal = qual_createRefCounted (); ;
    break;}
case 334:
{ yyval.typequal = qual_createRefs (); ;
    break;}
case 335:
{ yyval.typequal = qual_createKillRef (); ;
    break;}
case 336:
{ yyval.typequal = qual_createRelDef (); ;
    break;}
case 337:
{ yyval.typequal = qual_createNewRef (); ;
    break;}
case 338:
{ yyval.typequal = qual_createTempRef (); ;
    break;}
case 339:
{ yyval.typequal = qual_createShort (); ;
    break;}
case 340:
{ yyval.typequal = qual_createLong (); ;
    break;}
case 341:
{ yyval.typequal = qual_createSigned (); ;
    break;}
case 342:
{ yyval.typequal = qual_createUnsigned (); ;
    break;}
case 343:
{ yyval.typequal = qual_createOut (); ;
    break;}
case 344:
{ yyval.typequal = qual_createIn (); ;
    break;}
case 345:
{ yyval.typequal = qual_createPartial (); ;
    break;}
case 346:
{ yyval.typequal = qual_createSpecial (); ;
    break;}
case 347:
{ yyval.typequal = qual_createConst (); ;
    break;}
case 348:
{ yyval.typequal = qual_createVolatile (); ;
    break;}
case 349:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 350:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 351:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 352:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 353:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 354:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 355:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 356:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 357:
{ yyval.typequal = yyvsp[-1].typequal; ;
    break;}
case 364:
{ yyval.ctyp = ctype_unknown; ;
    break;}
case 365:
{ yyval.ctyp = ctype_anyintegral; ;
    break;}
case 366:
{ yyval.ctyp = ctype_unsignedintegral; ;
    break;}
case 367:
{ yyval.ctyp = ctype_signedintegral; ;
    break;}
case 371:
{ yyval.ctyp = ctype_fromQual (yyvsp[-1].typequal); ;
    break;}
case 372:
{ yyval.qtyp = qtype_resolve (yyvsp[-1].qtyp); ;
    break;}
case 373:
{ yyval.qtyp = yyvsp[0].qtyp; ;
    break;}
case 374:
{ yyval.qtyp = qtype_mergeAlt (yyvsp[-3].qtyp, yyvsp[-1].qtyp); ;
    break;}
case 376:
{ yyval.qtyp = qtype_mergeAlt (yyvsp[-2].qtyp, yyvsp[0].qtyp); ;
    break;}
case 377:
{ yyval.qtyp = qtype_addQual (yyvsp[0].qtyp, yyvsp[-1].typequal); ;
    break;}
case 378:
{ yyval.qtyp = qtype_addQual (yyvsp[0].qtyp, yyvsp[-1].typequal); ;
    break;}
case 379:
{ yyval.qtyp = qtype_combine (yyvsp[0].qtyp, yyvsp[-1].ctyp); ;
    break;}
case 380:
{ yyval.qtyp = qtype_unknown (); ;
    break;}
case 381:
{ yyval.qtyp = yyvsp[0].qtyp; ;
    break;}
case 382:
{ yyval.conL = constraintList_undefined; ;
    break;}
case 383:
{ sRef_setGlobalScopeSafe (); ;
    break;}
case 384:
{ sRef_clearGlobalScopeSafe (); ;
    break;}
case 385:
{ {ctype ct; ct = declareStruct (yyvsp[-9].cname, yyvsp[-4].flist); /* setGlobalStructInfo(ct, $12);*/ yyval.ctyp = ct;} ;
    break;}
case 386:
{ sRef_setGlobalScopeSafe (); ;
    break;}
case 387:
{ sRef_clearGlobalScopeSafe (); ;
    break;}
case 388:
{ yyval.ctyp = declareUnion (yyvsp[-8].cname, yyvsp[-3].flist); ;
    break;}
case 389:
{ yyval.ctyp = declareStruct (yyvsp[-3].cname, uentryList_new ()); ;
    break;}
case 390:
{ yyval.ctyp = declareUnion (yyvsp[-3].cname, uentryList_new ()); ;
    break;}
case 391:
{ sRef_setGlobalScopeSafe (); ;
    break;}
case 392:
{ sRef_clearGlobalScopeSafe (); ;
    break;}
case 393:
{ yyval.ctyp = declareUnnamedStruct (yyvsp[-3].flist); ;
    break;}
case 394:
{ sRef_setGlobalScopeSafe (); ;
    break;}
case 395:
{ sRef_clearGlobalScopeSafe (); ;
    break;}
case 396:
{ yyval.ctyp = declareUnnamedUnion (yyvsp[-3].flist); ;
    break;}
case 397:
{ yyval.ctyp = ctype_createUnnamedStruct (uentryList_new ()); ;
    break;}
case 398:
{ yyval.ctyp = ctype_createUnnamedUnion (uentryList_new ()); ;
    break;}
case 399:
{ yyval.ctyp = handleStruct (yyvsp[-1].cname); ;
    break;}
case 400:
{ yyval.ctyp = handleUnion (yyvsp[-1].cname); ;
    break;}
case 401:
{ g_expectingTypeName = FALSE; ;
    break;}
case 403:
{ yyval.flist = uentryList_undefined; /* bogus! */ ;
    break;}
case 404:
{ yyval.flist = uentryList_mergeFields (yyvsp[-1].flist, yyvsp[0].flist); ;
    break;}
case 405:
{ yyval.flist = fixUentryList (yyvsp[-2].ntyplist, yyvsp[-4].qtyp); ;
    break;}
case 406:
{ yyval.flist = fixUnnamedDecl (yyvsp[-2].qtyp); ;
    break;}
case 407:
{ yyval.ntyplist = idDeclList_singleton (yyvsp[-1].ntyp); ;
    break;}
case 408:
{ yyval.ntyplist = idDeclList_add (yyvsp[-3].ntyplist, yyvsp[-1].ntyp); ;
    break;}
case 409:
{ yyval.ntyp = yyvsp[0].ntyp; ;
    break;}
case 410:
{ yyval.ntyp = idDecl_undefined; ;
    break;}
case 411:
{ yyval.ntyp = yyvsp[-3].ntyp; ;
    break;}
case 412:
{ yyval.ctyp = declareUnnamedEnum (yyvsp[-2].enumnamelist); ;
    break;}
case 413:
{ context_pushLoc (); ;
    break;}
case 414:
{ context_popLoc (); yyval.ctyp = declareEnum (yyvsp[-5].cname, yyvsp[-2].enumnamelist); ;
    break;}
case 415:
{ yyval.ctyp = handleEnum (yyvsp[-1].cname); ;
    break;}
case 416:
{ yyval.enumnamelist = enumNameList_single (yyvsp[0].cname); ;
    break;}
case 417:
{ yyval.enumnamelist = enumNameList_push (yyvsp[-2].enumnamelist, yyvsp[0].cname); ;
    break;}
case 419:
{ uentry ue = uentry_makeEnumConstant (yyvsp[0].cname, ctype_unknown);
     usymtab_supGlobalEntry (ue);
     yyval.cname = yyvsp[0].cname;
   ;
    break;}
case 420:
{ uentry ue = uentry_makeEnumInitializedConstant (yyvsp[-3].cname, ctype_unknown, yyvsp[0].expr);
     usymtab_supGlobalEntry (ue);
     yyval.cname = yyvsp[-3].cname; 
   ;
    break;}
case 422:
{ yyval.ntyp = idDecl_create (cstring_undefined, qtype_create (yyvsp[0].ctyp)); ;
    break;}
case 423:
{ 
     qtype qt = qtype_unknown ();

     qtype_adjustPointers (yyvsp[-1].count, qt);
     yyval.ntyp = idDecl_create (cstring_copy (LastIdentifier ()), qt);
   ;
    break;}
case 424:
{ yyval.ntyp = yyvsp[0].ntyp; qtype_adjustPointers (yyvsp[-1].count, idDecl_getTyp (yyval.ntyp)); ;
    break;}
case 426:
{ yyval.ntyp = yyvsp[0].ntyp; qtype_adjustPointers (yyvsp[-1].count, idDecl_getTyp (yyval.ntyp)); ;
    break;}
case 427:
{ yyval.entrylist = handleParamTypeList (yyvsp[0].entrylist); ;
    break;}
case 428:
{ yyval.entrylist = handleParamIdList (yyvsp[0].entrylist); ;
    break;}
case 429:
{ /* ignored for now */; ;
    break;}
case 430:
{ ; ;
    break;}
case 431:
{ ; ;
    break;}
case 432:
{ ; ;
    break;}
case 433:
{ yyval.count = 1; ;
    break;}
case 434:
{ yyval.count = 1; ;
    break;}
case 435:
{ yyval.count = 1 + yyvsp[0].count; ;
    break;}
case 436:
{ yyval.count = 1 + yyvsp[0].count; ;
    break;}
case 438:
{ yyval.entrylist = uentryList_add (yyvsp[-2].entrylist, uentry_makeElipsisMarker ()); ;
    break;}
case 439:
{ yyval.entrylist = uentryList_single (uentry_makeVariableLoc (yyvsp[0].cname, ctype_int)); ;
    break;}
case 440:
{ yyval.entrylist = uentryList_add (yyvsp[-2].entrylist, uentry_makeVariableLoc (yyvsp[0].cname, ctype_int)); ;
    break;}
case 441:
{ yyval.entrylist = uentryList_single (uentry_makeElipsisMarker ()); ;
    break;}
case 443:
{ yyval.entrylist = uentryList_add (yyvsp[-2].entrylist, uentry_makeElipsisMarker ()); ;
    break;}
case 444:
{ storeLoc (); ;
    break;}
case 445:
{ yyval.entrylist = uentryList_single (yyvsp[0].oentry); ;
    break;}
case 446:
{ storeLoc (); ;
    break;}
case 447:
{ yyval.entrylist = uentryList_add (yyvsp[-3].entrylist, yyvsp[0].oentry); ;
    break;}
case 448:
{ 
     if (isFlipOldStyle ()) 
       { 
	 llparseerror (cstring_makeLiteral ("Inconsistent function parameter syntax (mixing old and new style declaration)")); 
       }
     else 
       { 
	 setNewStyle (); 
       }
     yyval.oentry = makeCurrentParam (idDecl_fixParamBase (yyvsp[-1].ntyp, yyvsp[-2].qtyp)); 
   ;
    break;}
case 449:
{ 
     idDecl tparam = idDecl_create (yyvsp[0].cname, qtype_unknown ());

     if (isNewStyle ()) 
       {
	 llparseerror (message ("Inconsistent function parameter syntax: %q",
				idDecl_unparse (tparam))); 
       }

     setFlipOldStyle ();
     yyval.oentry = makeCurrentParam (tparam);
     idDecl_free (tparam);
   ;
    break;}
case 451:
{ yyval.qtyp = qtype_newBase (yyvsp[-1].qtyp, yyvsp[0].ctyp); ;
    break;}
case 452:
{ yyval.ctyp = ctype_adjustPointers (yyvsp[0].count, ctype_unknown); ;
    break;}
case 454:
{ yyval.ctyp = ctype_adjustPointers (yyvsp[-1].count, yyvsp[0].ctyp); ;
    break;}
case 455:
{ yyval.ctyp = ctype_unknown; ;
    break;}
case 457:
{ yyval.ctyp = ctype_expectFunction (yyvsp[-1].ctyp); ;
    break;}
case 458:
{ yyval.ctyp = ctype_makeArray (ctype_unknown); ;
    break;}
case 459:
{ yyval.ctyp = ctype_makeFixedArray (ctype_unknown, exprNode_getLongValue (yyvsp[-1].expr)); ;
    break;}
case 460:
{ yyval.ctyp = ctype_makeArray (yyvsp[-2].ctyp); ;
    break;}
case 461:
{ yyval.ctyp = ctype_makeFixedArray (yyvsp[-3].ctyp, exprNode_getLongValue (yyvsp[-1].expr)); ;
    break;}
case 462:
{ yyval.ctyp = ctype_makeFunction (ctype_unknown, uentryList_makeMissingParams ()); ;
    break;}
case 463:
{ yyval.ctyp = ctype_makeParamsFunction (ctype_unknown, yyvsp[-1].entrylist); ;
    break;}
case 464:
{ yyval.ctyp = ctype_makeFunction (yyvsp[-3].ctyp, uentryList_makeMissingParams ()); ;
    break;}
case 465:
{ yyval.ctyp = ctype_makeParamsFunction (yyvsp[-4].ctyp, yyvsp[-1].entrylist); ;
    break;}
case 475:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 478:
{ yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 479:
{ yyval.expr = exprNode_while (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 480:
{ yyval.expr = exprNode_doWhile (yyvsp[-5].expr, yyvsp[-2].expr); ;
    break;}
case 481:
{ yyval.expr = exprNode_doWhile (yyvsp[-4].expr, yyvsp[-1].expr); ;
    break;}
case 482:
{ yyval.expr = exprNode_for (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 483:
{ context_setProtectVars (); ;
    break;}
case 484:
{ context_sizeofReleaseVars (); ;
    break;}
case 485:
{ yyval.expr = exprNode_forPred (yyvsp[-7].expr, yyvsp[-5].expr, yyvsp[-2].expr); 
     context_enterForClause (yyvsp[-5].expr); ;
    break;}
case 486:
{ setProcessingIterVars (yyvsp[-2].entry); ;
    break;}
case 487:
{ yyval.expr = exprNode_iterStart (yyvsp[-5].entry, yyvsp[-1].exprlist); ;
    break;}
case 488:
{ yyval.expr = exprNode_createId (yyvsp[0].entry); ;
    break;}
case 492:
{ yyval.expr = yyvsp[-1].expr; DPRINTF (("def stmt: %s", exprNode_unparse (yyval.expr))); ;
    break;}
case 500:
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 501:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 502:
{ exprNode_checkIfPred (yyvsp[0].expr); ;
    break;}
case 503:
{ /* don't: context_exitTrueClause ($1, $2); */
     yyval.expr = exprNode_if (yyvsp[-2].expr, yyvsp[0].expr); 
   ;
    break;}
case 504:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 505:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 516:
{ yyval.expr = exprNode_addParens (yyvsp[-2].tok, yyvsp[-1].expr); ;
    break;}
case 518:
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 519:
{ yyval.expr = exprNode_labelMarker (yyvsp[-1].cname); ;
    break;}
case 520:
{ yyval.expr = exprNode_notReached (yyvsp[0].expr); ;
    break;}
case 521:
{ ; ;
    break;}
case 522:
{ ; ;
    break;}
case 523:
{ context_enterCaseClause (yyvsp[0].expr); ;
    break;}
case 524:
{ yyval.expr = exprNode_caseMarker (yyvsp[-2].expr, FALSE); ;
    break;}
case 525:
{ context_enterCaseClause (yyvsp[0].expr); ;
    break;}
case 526:
{ yyval.expr = exprNode_caseMarker (yyvsp[-2].expr, TRUE); ;
    break;}
case 527:
{ context_enterCaseClause (exprNode_undefined); ;
    break;}
case 528:
{ yyval.expr = exprNode_defaultMarker (yyvsp[-2].tok, FALSE); ;
    break;}
case 529:
{ context_enterCaseClause (exprNode_undefined); ;
    break;}
case 530:
{ yyval.expr = exprNode_defaultMarker (yyvsp[-2].tok, TRUE); ;
    break;}
case 531:
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 532:
{ yyval.expr = yyvsp[0].expr; context_exitInner (yyvsp[0].expr); ;
    break;}
case 533:
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 534:
{ context_enterInnerContext (); ;
    break;}
case 535:
{ context_exitInnerPlain (); ;
    break;}
case 536:
{ context_enterStructInnerContext (); ;
    break;}
case 537:
{ context_exitStructInnerContext (); ;
    break;}
case 538:
{ context_exitInnerSafe (); ;
    break;}
case 539:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 540:
{ yyval.expr = exprNode_notReached (exprNode_createTok (yyvsp[0].tok)); ;
    break;}
case 541:
{ yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 542:
{ yyval.expr = exprNode_notReached (exprNode_updateLocation (yyvsp[-2].expr, lltok_getLoc (yyvsp[0].tok))); ;
    break;}
case 543:
{ yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 544:
{ yyval.expr = exprNode_notReached (exprNode_updateLocation (yyvsp[-2].expr, lltok_getLoc (yyvsp[0].tok))); ;
    break;}
case 545:
{ yyval.expr = exprNode_updateLocation (exprNode_concat (yyvsp[-2].expr, yyvsp[-1].expr), lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 546:
{ yyval.expr = exprNode_notReached (exprNode_updateLocation (exprNode_concat (yyvsp[-3].expr, yyvsp[-2].expr), 
							lltok_getLoc (yyvsp[-1].tok))); 
   ;
    break;}
case 547:
{ yyval.expr = exprNode_makeBlock (yyvsp[0].expr); ;
    break;}
case 548:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 549:
{ yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 550:
{ yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 551:
{ yyval.expr = exprNode_updateLocation (exprNode_concat (yyvsp[-2].expr, yyvsp[-1].expr), lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 553:
{ yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 554:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 555:
{ yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 556:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 557:
{ yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 558:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 559:
{ yyval.expr = exprNode_statement (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 560:
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 561:
{ yyval.expr = exprNode_statement (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 562:
{ yyval.expr = exprNode_checkExpr (yyvsp[0].expr); ;
    break;}
case 563:
{ 
     exprNode_produceGuards (yyvsp[-1].expr); context_enterTrueClause (yyvsp[-1].expr); 
     exprNode_checkIfPred (yyvsp[-1].expr);
     yyval.expr = yyvsp[-1].expr;
   ;
    break;}
case 564:
{ 
     context_exitTrueClause (yyvsp[-1].expr, yyvsp[0].expr);
     yyval.expr = exprNode_if (yyvsp[-1].expr, yyvsp[0].expr); 
   ;
    break;}
case 565:
{ context_enterFalseClause (yyvsp[-2].expr); ;
    break;}
case 566:
{
     context_exitClause (yyvsp[-4].expr, yyvsp[-3].expr, yyvsp[0].expr);
     yyval.expr = exprNode_ifelse (yyvsp[-4].expr, yyvsp[-3].expr, yyvsp[0].expr); 
   ;
    break;}
case 567:
{ context_enterSwitch (yyvsp[0].expr); ;
    break;}
case 568:
{ yyval.expr = exprNode_switch (yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 569:
{ yyval.expr = exprNode_whilePred (yyvsp[-1].expr); context_enterWhileClause (yyvsp[-1].expr); ;
    break;}
case 570:
{ yyval.expr = exprNode_whilePred(yyvsp[-1].expr); ;
    break;}
case 571:
{ context_enterIterClause (); ;
    break;}
case 572:
{ setProcessingIterVars (yyvsp[-3].entry); ;
    break;}
case 573:
{ 
     yyval.expr = exprNode_iter (yyvsp[-9].entry, yyvsp[-4].exprlist, yyvsp[-2].expr, yyvsp[-1].entry); 

   ;
    break;}
case 574:
{ yyval.exprlist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 575:
{ nextIterParam (); ;
    break;}
case 576:
{ yyval.exprlist = exprNodeList_push (yyvsp[-3].exprlist, yyvsp[0].expr); ;
    break;}
case 577:
{ yyval.expr = exprNode_iterExpr (yyvsp[0].expr); ;
    break;}
case 578:
{ yyval.expr = exprNode_iterId (yyvsp[0].entry); ;
    break;}
case 579:
{ uentry ue = coerceIterId (yyvsp[0].cname);

		      if (uentry_isValid (ue)) 
			{
			  yyval.expr = exprNode_iterId (ue);
			}
		      else
			{
			  yyval.expr = exprNode_iterNewId (cstring_copy (LastIdentifier ()));
			}
		    ;
    break;}
case 580:
{ yyval.expr = exprNode_iterNewId (yyvsp[0].cname); ;
    break;}
case 582:
{ yyval.expr = exprNode_combineLiterals (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 584:
{ yyval.expr = exprNode_addParens (yyvsp[-2].tok, yyvsp[-1].expr); ;
    break;}
case 586:
{ yyval.expr = exprNode_arrayFetch (yyvsp[-3].expr, yyvsp[-1].expr); ;
    break;}
case 587:
{ yyval.expr = exprNode_functionCall (yyvsp[-2].expr, exprNodeList_new ()); ;
    break;}
case 588:
{ yyval.expr = exprNode_functionCall (yyvsp[-3].expr, yyvsp[-1].exprlist); ;
    break;}
case 589:
{ yyval.expr = exprNode_vaArg (yyvsp[-5].tok, yyvsp[-3].expr, yyvsp[-1].qtyp); ;
    break;}
case 590:
{ yyval.expr = exprNode_fieldAccess (yyvsp[-4].expr, yyvsp[-2].tok, yyvsp[-1].cname); ;
    break;}
case 591:
{ yyval.expr = exprNode_arrowAccess (yyvsp[-4].expr, yyvsp[-2].tok, yyvsp[-1].cname); ;
    break;}
case 592:
{ yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 593:
{ yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 595:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 596:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 597:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 598:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 599:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 600:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 601:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 602:
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 603:
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 605:
{ yyval.expr = exprNode_cast (yyvsp[-3].tok, yyvsp[0].expr, yyvsp[-2].qtyp); ;
    break;}
case 607:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 608:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 609:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 611:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 612:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 614:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 615:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 617:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 618:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 619:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 620:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 622:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 623:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 625:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 627:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 629:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 631:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 633:
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 635:
{ context_enterTrueClause (yyvsp[-1].expr); ;
    break;}
case 636:
{ context_enterFalseClause (yyvsp[-4].expr); ;
    break;}
case 637:
{ yyval.expr = exprNode_cond (yyvsp[-6].expr, yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 639:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 640:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 641:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 642:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 643:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 644:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 645:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 646:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 647:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 648:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 649:
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 650:
{ yyval.entry = yyvsp[0].entry; ;
    break;}
case 651:
{ yyval.entry = uentry_undefined; ;
    break;}
case 652:
{ context_enterDoWhileClause (); yyval.tok = yyvsp[0].tok; ;
    break;}
case 653:
{ yyval.expr = exprNode_while (yyvsp[-1].expr, yyvsp[0].expr); context_exitWhileClause (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 654:
{ yyval.expr = exprNode_statement (exprNode_doWhile (yyvsp[-5].expr, yyvsp[-2].expr), yyvsp[0].tok); ;
    break;}
case 655:
{ yyval.expr = exprNode_for (yyvsp[-1].expr, yyvsp[0].expr); context_exitForClause (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 656:
{ yyval.expr = exprNode_while (yyvsp[-1].expr, yyvsp[0].expr); context_exitWhileClause (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 657:
{ yyval.expr = exprNode_statement (exprNode_doWhile (yyvsp[-5].expr, yyvsp[-2].expr), yyvsp[0].tok); ;
    break;}
case 658:
{ yyval.expr = exprNode_doWhile (yyvsp[-4].expr, yyvsp[-1].expr); ;
    break;}
case 659:
{ yyval.expr = exprNode_for (yyvsp[-1].expr, yyvsp[0].expr); context_exitForClause (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 660:
{ yyval.expr = exprNode_goto (yyvsp[-1].cname); ;
    break;}
case 661:
{ yyval.expr = exprNode_continue (yyvsp[-1].tok, BADTOK); ;
    break;}
case 662:
{ yyval.expr = exprNode_continue (yyvsp[-2].tok, QINNERCONTINUE); ;
    break;}
case 663:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, BADTOK); ;
    break;}
case 664:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, QSWITCHBREAK); ;
    break;}
case 665:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, QLOOPBREAK); ;
    break;}
case 666:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, QINNERBREAK); ;
    break;}
case 667:
{ yyval.expr = exprNode_break (yyvsp[-1].tok, QSAFEBREAK); ;
    break;}
case 668:
{ yyval.expr = exprNode_nullReturn (yyvsp[-1].tok); ;
    break;}
case 669:
{ yyval.expr = exprNode_return (yyvsp[-1].expr); ;
    break;}
case 671:
{ ; ;
    break;}
case 674:
{ yyval.cname = uentry_getName (yyvsp[0].entry); ;
    break;}
case 675:
{ yyval.cname = uentry_getName (yyvsp[0].entry); ;
    break;}
case 676:
{ yyval.cname = uentry_getName (yyvsp[0].entry); ;
    break;}
case 677:
{ yyval.cname = yyvsp[0].cname; ;
    break;}
case 679:
{ yyval.ctyp = ctype_unknown; ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */


  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}


/*@-redecl@*/ /*@-namechecks@*/
extern char *yytext;
/*@=redecl@*/ /*@=namechecks@*/

# include "bison.reset"

void yyerror (/*@unused@*/ char *s) 
{
  static bool givehint = FALSE;

  if (context_inIterDef ())
    {
      llerror (FLG_SYNTAX, message ("Iter syntax not parseable: %s", 
				    context_inFunctionName ()));
    }
  else if (context_inIterEnd ())
    {
      llerror (FLG_SYNTAX, message ("Iter finalizer syntax not parseable: %s", 
				    context_inFunctionName ()));
    }
  else if (context_inMacro ())
    {
      llerror (FLG_SYNTAX, message ("Macro syntax not parseable: %s", 
				    context_inFunctionName ()));
      
      if (context_inUnknownMacro ())
	{
	  if (!givehint)
	    {
	      llhint (cstring_makeLiteral 
		     ("Precede macro definition with /*@notfunction@*/ "
		      "to suppress checking and force expansion"));
	      givehint = TRUE;
	    }
	}

      swallowMacro ();
      context_exitAllClausesQuiet ();
    }
  else
    {
      llparseerror (cstring_undefined);
    }
}












/*
** Resets all flags in bison.head
*/


/*@=allmacros@*/
/*@=boolint@*/
/*@=charint@*/
/*@=macroparams@*/
/*@=macroundef@*/
/*@=unreachable@*/
/*@=macrospec@*/
/*@=varuse@*/
/*@=ignorequals@*/
/*@=macrostmt@*/
/*@=noeffect@*/
/*@=shadow@*/
/*@=exitarg@*/
/*@=macroredef@*/
/*@=uniondef@*/
/*@=compdef@*/
/*@=matchfields@*/
/*@=exportlocal@*/
/*@=evalorderuncon@*/
/*@=exportheader@*/
/*@=typeuse@*/
/*@=redecl@*/
/*@=redef@*/
/*@=noparams@*/
/*@=ansireserved@*/
/*@=fielduse@*/
/*@=ifblock@*/
/*@=elseifcomplete@*/
/*@=whileblock@*/
/*@=forblock@*/
/*@=branchstate@*/
/*@=readonlytrans@*/
/*@=namechecks@*/
/*@=usedef@*/
/*@=systemunrecog@*/
/*@=dependenttrans@*/
/*@=unqualifiedtrans@*/
/*@=declundef@*/


/*drl added 11/27/2001*/
/*@=bounds@*/
